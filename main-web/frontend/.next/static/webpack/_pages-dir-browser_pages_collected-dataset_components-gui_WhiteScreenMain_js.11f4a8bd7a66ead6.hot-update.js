"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_pages-dir-browser_pages_collected-dataset_components-gui_WhiteScreenMain_js",{

/***/ "(pages-dir-browser)/./pages/collected-dataset/components-gui/WhiteScreenMain.js":
/*!*******************************************************************!*\
  !*** ./pages/collected-dataset/components-gui/WhiteScreenMain.js ***!
  \*******************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dynamic */ \"(pages-dir-browser)/./node_modules/next/dynamic.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_2__);\n// components-gui/WhiteScreenMain.js\n\nvar _s = $RefreshSig$();\n\n\n// Import the isomorphic layout effect or create it inline\nconst useIsomorphicLayoutEffect =  true ? (react__WEBPACK_IMPORTED_MODULE_1___default().useLayoutEffect) : 0;\n// Create a client-only version of the component\nconst WhiteScreenMain = (param)=>{\n    let { onStatusUpdate, triggerCameraAccess, onButtonClick, canvasRef = null, toggleTopBar } = param;\n    _s();\n    // Use provided canvasRef or create a new one\n    const internalCanvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const activeCanvasRef = canvasRef || internalCanvasRef;\n    // Current dot state\n    const [currentDot, setCurrentDot] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isCapturing, setIsCapturing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [countdownValue, setCountdownValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [remainingCaptures, setRemainingCaptures] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [processStatus, setProcessStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    // Track capture session\n    const [captureCounter, setCaptureCounter] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [captureFolder, setCaptureFolder] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    // Configuration state\n    const [randomTimes, setRandomTimes] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [delaySeconds, setDelaySeconds] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(3);\n    const [calibrationPoints, setCalibrationPoints] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentCalibrationIndex, setCurrentCalibrationIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Create a capture folder on first render\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            if (!captureFolder) {\n                const timestamp = new Date().toISOString().replace(/[:\\.]/g, '-');\n                setCaptureFolder(\"session_\".concat(timestamp));\n            }\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        captureFolder\n    ]);\n    // Set up canvas when component mounts\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            // Skip if this runs during SSR\n            if (false) {}\n            const canvas = activeCanvasRef.current;\n            if (!canvas) return;\n            // Function to update canvas dimensions\n            const updateDimensions = {\n                \"WhiteScreenMain.useEffect.updateDimensions\": ()=>{\n                    const parent = canvas.parentElement;\n                    if (!parent) return;\n                    // Get the parent container dimensions\n                    canvas.width = parent.clientWidth;\n                    canvas.height = parent.clientHeight;\n                    // Clear the canvas and set background\n                    const ctx = canvas.getContext('2d');\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(0, 0, canvas.width, canvas.height);\n                    // Redraw current dot if exists\n                    if (currentDot) {\n                        drawDot(currentDot.x, currentDot.y, 'red', 8);\n                    }\n                }\n            }[\"WhiteScreenMain.useEffect.updateDimensions\"];\n            // Initial sizing\n            updateDimensions();\n            // Listen for window resize\n            window.addEventListener('resize', updateDimensions);\n            // Clean up\n            return ({\n                \"WhiteScreenMain.useEffect\": ()=>{\n                    window.removeEventListener('resize', updateDimensions);\n                }\n            })[\"WhiteScreenMain.useEffect\"];\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        activeCanvasRef,\n        currentDot\n    ]);\n    // Generate a random position on the canvas\n    const getRandomPosition = ()=>{\n        const canvas = activeCanvasRef.current;\n        if (!canvas) return {\n            x: 0,\n            y: 0\n        };\n        const width = canvas.width;\n        const height = canvas.height;\n        // Ensure we're not too close to the edges\n        const padding = 20;\n        return {\n            x: Math.floor(Math.random() * (width - 2 * padding)) + padding,\n            y: Math.floor(Math.random() * (height - 2 * padding)) + padding\n        };\n    };\n    // Draw a dot on the canvas\n    const drawDot = function(x, y) {\n        let color = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'red', radius = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 8;\n        const canvas = activeCanvasRef.current;\n        if (!canvas) return;\n        const ctx = canvas.getContext('2d');\n        // Clear canvas\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        // Draw dot with glow effect\n        ctx.beginPath();\n        ctx.arc(x, y, radius, 0, Math.PI * 2);\n        ctx.fillStyle = color;\n        ctx.fill();\n        // Add glow effect\n        ctx.beginPath();\n        ctx.arc(x, y, radius + 3, 0, Math.PI * 2);\n        ctx.strokeStyle = 'rgba(255, 0, 0, 0.3)';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        // Store current dot position\n        setCurrentDot({\n            x,\n            y\n        });\n        return {\n            x,\n            y\n        };\n    };\n    // Clear the canvas\n    const clearCanvas = ()=>{\n        const canvas = activeCanvasRef.current;\n        if (!canvas) return;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        setCurrentDot(null);\n        setCountdownValue(null);\n        setProcessStatus('Canvas cleared');\n        // Clear the message after a delay\n        setTimeout(()=>{\n            setProcessStatus('');\n        }, 1500);\n    };\n    // Start countdown timer\n    // Update the startCountdown function in WhiteScreenMain.js\n    // Modified startCountdown function for WhiteScreenMain.js\n    // Replace this function in the WhiteScreenMain.js file\n    // Start countdown timer\n    const startCountdown = (count, onComplete)=>{\n        setCountdownValue(count);\n        setIsCapturing(true);\n        // Update status for parent component\n        if (onStatusUpdate) {\n            onStatusUpdate({\n                countdownValue: count,\n                processStatus: \"Countdown: \".concat(count),\n                isCapturing: true\n            });\n        }\n        const timer = setTimeout(()=>{\n            if (count > 1) {\n                startCountdown(count - 1, onComplete);\n            } else {\n                // Final countdown step\n                setCountdownValue(null);\n                // Update status for parent component\n                if (onStatusUpdate) {\n                    onStatusUpdate({\n                        countdownValue: null,\n                        processStatus: 'Capturing...',\n                        isCapturing: true\n                    });\n                }\n                // Execute completion callback after a brief delay\n                setTimeout(()=>{\n                    if (onComplete) onComplete();\n                }, 200);\n            }\n        }, 800);\n        return ()=>clearTimeout(timer);\n    };\n    // Save an image to the server\n    const saveImageToServer = async (imageData, filename, type)=>{\n        try {\n            const response = await fetch('/api/save-capture', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    imageData,\n                    filename,\n                    type,\n                    folder: captureFolder\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Server responded with \".concat(response.status));\n            }\n            const result = await response.json();\n            console.log(\"Saved \".concat(type, \" image:\"), result);\n            return result;\n        } catch (error) {\n            console.error(\"Error saving \".concat(type, \" image:\"), error);\n            throw error;\n        }\n    };\n    // Capture images function\n    const captureImage = async ()=>{\n        setIsCapturing(true);\n        try {\n            // Enable camera if function provided\n            if (triggerCameraAccess) {\n                triggerCameraAccess(true); // Force enable camera\n            }\n            // Wait briefly for camera to initialize\n            await new Promise((resolve)=>setTimeout(resolve, 500));\n            // Generate filenames with counter\n            const screenFilename = \"screen_\".concat(String(captureCounter).padStart(3, '0'), \".jpg\");\n            const webcamFilename = \"webcam_\".concat(String(captureCounter).padStart(3, '0'), \".jpg\");\n            // Capture screen image (canvas with dot)\n            const canvas = activeCanvasRef.current;\n            if (canvas) {\n                const screenImage = canvas.toDataURL('image/png');\n                await saveImageToServer(screenImage, screenFilename, 'screen');\n                console.log(\"Saved screen image: \".concat(screenFilename));\n            }\n            // Capture webcam image if available\n            if (window.videoElement) {\n                const tempCanvas = document.createElement('canvas');\n                const ctx = tempCanvas.getContext('2d');\n                tempCanvas.width = window.videoElement.videoWidth;\n                tempCanvas.height = window.videoElement.videoHeight;\n                ctx.drawImage(window.videoElement, 0, 0, tempCanvas.width, tempCanvas.height);\n                const webcamImage = tempCanvas.toDataURL('image/png');\n                await saveImageToServer(webcamImage, webcamFilename, 'webcam');\n                console.log(\"Saved webcam image: \".concat(webcamFilename));\n            }\n            // Increment the counter for next capture\n            setCaptureCounter((prev)=>prev + 1);\n            // Update status\n            setIsCapturing(false);\n            setProcessStatus(\"Captured coordinates: x=\".concat(currentDot === null || currentDot === void 0 ? void 0 : currentDot.x, \", y=\").concat(currentDot === null || currentDot === void 0 ? void 0 : currentDot.y));\n            // Update parent component\n            if (onStatusUpdate) {\n                onStatusUpdate(\"Images saved: \".concat(screenFilename, \" and \").concat(webcamFilename));\n            }\n            // Show TopBar again after capture\n            setTimeout(()=>{\n                if (typeof toggleTopBar === 'function') {\n                    toggleTopBar(true);\n                } else if ( true && window.toggleTopBar) {\n                    window.toggleTopBar(true);\n                }\n            }, 1500);\n        } catch (error) {\n            console.error('Error during capture:', error);\n            setIsCapturing(false);\n            setProcessStatus('Error capturing images: ' + error.message);\n        }\n        // Clear status after a delay\n        setTimeout(()=>{\n            setProcessStatus('');\n        }, 3000);\n    };\n    // Random Dot action\n    // Updated handleRandomDot function for WhiteScreenMain.js\n    const handleRandomDot = ()=>{\n        if (isCapturing) return;\n        console.log(\"Random Dot button clicked\"); // Debug logging\n        // Hide the TopBar before showing dot\n        if (typeof toggleTopBar === 'function') {\n            toggleTopBar(false);\n        } else if ( true && window.toggleTopBar) {\n            window.toggleTopBar(false);\n        }\n        setIsCapturing(true);\n        // Update status immediately to show we're doing something\n        const status = 'Generating random dot...';\n        setProcessStatus(status);\n        if (onStatusUpdate) {\n            onStatusUpdate({\n                processStatus: status,\n                isCapturing: true\n            });\n        }\n        // Ensure the canvas is ready before drawing\n        setTimeout(()=>{\n            // Force canvas to be visible and sized correctly\n            const canvas = activeCanvasRef.current;\n            if (canvas) {\n                // Make sure canvas dimensions are properly set\n                const parent = canvas.parentElement;\n                if (parent) {\n                    canvas.width = parent.clientWidth;\n                    canvas.height = parent.clientHeight;\n                }\n                // Clear any previous content\n                const ctx = canvas.getContext('2d');\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                ctx.fillStyle = 'white';\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n                // Generate random position and draw\n                const position = getRandomPosition();\n                console.log(\"Drawing dot at position:\", position); // Debug logging\n                // Draw the dot and store its position\n                drawDot(position.x, position.y, 'red', 8);\n                // Directly make the initial countdown visible by updating state\n                setCountdownValue(3);\n                // Use a small timeout to ensure the UI updates before starting the countdown\n                setTimeout(()=>{\n                    // Start countdown and capture\n                    startCountdown(3, captureImage);\n                }, 50);\n            } else {\n                console.error(\"Canvas reference is null - cannot draw dot\"); // Debug logging\n                setProcessStatus('Error: Canvas not available');\n                if (onStatusUpdate) {\n                    onStatusUpdate({\n                        processStatus: 'Error: Canvas not available',\n                        isCapturing: false\n                    });\n                }\n                setIsCapturing(false);\n            }\n        }, 200); // Give a bit more time for the canvas to be ready\n    };\n    // Multiple random dots sequence\n    const handleSetRandom = ()=>{\n        if (isCapturing) return;\n        // Parse input values (use defaults if invalid)\n        const times = parseInt(randomTimes) || 1;\n        const delay = parseInt(delaySeconds) || 3;\n        if (times <= 0 || delay <= 0) {\n            setProcessStatus('Please use positive values for times and delay');\n            return;\n        }\n        setIsCapturing(true);\n        setRemainingCaptures(times);\n        setProcessStatus(\"Starting \".concat(times, \" random captures...\"));\n        // Start sequence\n        scheduleRandomCaptures(times, times, delay);\n    };\n    // Schedule sequence of random captures\n    const scheduleRandomCaptures = (remaining, total, delay)=>{\n        if (remaining <= 0) {\n            setIsCapturing(false);\n            setRemainingCaptures(0);\n            setProcessStatus('Random capture sequence completed');\n            // Clear status after a delay\n            setTimeout(()=>{\n                setProcessStatus('');\n            }, 2000);\n            return;\n        }\n        setRemainingCaptures(remaining);\n        setProcessStatus(\"Capture \".concat(total - remaining + 1, \" of \").concat(total));\n        // Generate random position and draw\n        const position = getRandomPosition();\n        drawDot(position.x, position.y);\n        // Start countdown and capture\n        startCountdown(3, ()=>{\n            captureImage();\n            // Schedule next capture\n            setTimeout(()=>{\n                scheduleRandomCaptures(remaining - 1, total, delay);\n            }, delay * 1000);\n        });\n    };\n    // Generate calibration points\n    const generateCalibrationPoints = ()=>{\n        const canvas = activeCanvasRef.current;\n        if (!canvas) return [];\n        const width = canvas.width;\n        const height = canvas.height;\n        // Helper function for rounding\n        const conditionalRound = (dimension, percentage)=>{\n            return Math.round(dimension * percentage);\n        };\n        const firstFramePercentage = 0.12;\n        const secondFramePercentage = 0.26;\n        // Calculate points (outer and inner frame)\n        const xLeftFirst = conditionalRound(width, firstFramePercentage);\n        const xRightFirst = width - conditionalRound(width, firstFramePercentage);\n        const yTopFirst = conditionalRound(height, firstFramePercentage);\n        const yBottomFirst = height - conditionalRound(height, firstFramePercentage);\n        const xLeftSecond = conditionalRound(width, secondFramePercentage);\n        const xRightSecond = width - conditionalRound(width, secondFramePercentage);\n        const yTopSecond = conditionalRound(height, secondFramePercentage);\n        const yBottomSecond = height - conditionalRound(height, secondFramePercentage);\n        // Return array of points in sequence\n        return [\n            // First frame - outer points\n            {\n                x: xLeftFirst,\n                y: yTopFirst\n            },\n            {\n                x: Math.floor(width / 2),\n                y: yTopFirst\n            },\n            {\n                x: xRightFirst,\n                y: yTopFirst\n            },\n            {\n                x: xLeftFirst,\n                y: Math.floor(height / 2)\n            },\n            {\n                x: xRightFirst,\n                y: Math.floor(height / 2)\n            },\n            {\n                x: xLeftFirst,\n                y: yBottomFirst\n            },\n            {\n                x: Math.floor(width / 2),\n                y: yBottomFirst\n            },\n            {\n                x: xRightFirst,\n                y: yBottomFirst\n            },\n            // Second frame - inner points\n            {\n                x: xLeftSecond,\n                y: yTopSecond\n            },\n            {\n                x: Math.floor(width / 2),\n                y: yTopSecond\n            },\n            {\n                x: xRightSecond,\n                y: yTopSecond\n            },\n            {\n                x: xLeftSecond,\n                y: Math.floor(height / 2)\n            },\n            {\n                x: xRightSecond,\n                y: Math.floor(height / 2)\n            },\n            {\n                x: xLeftSecond,\n                y: yBottomSecond\n            },\n            {\n                x: Math.floor(width / 2),\n                y: yBottomSecond\n            },\n            {\n                x: xRightSecond,\n                y: yBottomSecond\n            }\n        ];\n    };\n    // Handle calibration sequence\n    const handleSetCalibrate = ()=>{\n        if (isCapturing) return;\n        // Generate calibration points\n        const points = generateCalibrationPoints();\n        if (points.length === 0) {\n            setProcessStatus('Failed to generate calibration points');\n            return;\n        }\n        setCalibrationPoints(points);\n        setCurrentCalibrationIndex(0);\n        setIsCapturing(true);\n        setRemainingCaptures(points.length);\n        setProcessStatus(\"Calibration 1/\".concat(points.length));\n        // Draw first point and start\n        const firstPoint = points[0];\n        drawDot(firstPoint.x, firstPoint.y);\n        // Start countdown for first point\n        startCountdown(3, ()=>{\n            captureImage();\n            setTimeout(()=>moveToNextCalibrationPoint(), 1000);\n        });\n    };\n    // Move to next calibration point\n    const moveToNextCalibrationPoint = ()=>{\n        const nextIndex = currentCalibrationIndex + 1;\n        // Check if we're done\n        if (nextIndex >= calibrationPoints.length) {\n            setIsCapturing(false);\n            setRemainingCaptures(0);\n            setProcessStatus('Calibration completed');\n            // Clear status after a delay\n            setTimeout(()=>{\n                setProcessStatus('');\n            }, 2000);\n            return;\n        }\n        // Update state and progress\n        setCurrentCalibrationIndex(nextIndex);\n        setRemainingCaptures(calibrationPoints.length - nextIndex);\n        setProcessStatus(\"Calibration \".concat(nextIndex + 1, \"/\").concat(calibrationPoints.length));\n        // Draw next point\n        const nextPoint = calibrationPoints[nextIndex];\n        drawDot(nextPoint.x, nextPoint.y);\n        // Start countdown for this point\n        startCountdown(3, ()=>{\n            captureImage();\n            setTimeout(()=>moveToNextCalibrationPoint(), 1000);\n        });\n    };\n    // Map button clicks to appropriate handlers\n    const handleScreenAction = (actionType)=>{\n        switch(actionType){\n            case 'randomDot':\n                handleRandomDot();\n                break;\n            case 'setRandom':\n                handleSetRandom();\n                break;\n            case 'calibrate':\n                handleSetCalibrate();\n                break;\n            case 'clearAll':\n                clearCanvas();\n                break;\n            default:\n                // Forward to parent if not handled here\n                if (onButtonClick) {\n                    onButtonClick(actionType);\n                }\n        }\n    };\n    // Pass actions up to parent component\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            // Skip during SSR\n            if (false) {}\n            if (onButtonClick) {\n                // Create action handlers\n                const actionHandlers = {\n                    randomDot: handleRandomDot,\n                    setRandom: handleSetRandom,\n                    calibrate: handleSetCalibrate,\n                    clearAll: clearCanvas\n                };\n                // Store in parent component context\n                onButtonClick('registerActions', actionHandlers);\n            }\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        onButtonClick\n    ]);\n    // Update parent with status changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            if (onStatusUpdate && processStatus) {\n                onStatusUpdate(processStatus);\n            }\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        processStatus,\n        onStatusUpdate\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"white-screen-container\",\n        style: {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            zIndex: 50 // Add a z-index to ensure it's above other elements\n        },\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"white-screen-canvas-container\",\n            style: {\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n                backgroundColor: 'white',\n                overflow: 'hidden',\n                border: '1px solid #eee',\n                zIndex: 51\n            },\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n                    ref: canvasRef ? canvasRef : internalCanvasRef,\n                    className: \"white-screen-canvas\",\n                    style: {\n                        width: '100%',\n                        height: '100%',\n                        display: 'block'\n                    }\n                }, void 0, false, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 612,\n                    columnNumber: 9\n                }, undefined),\n                countdownValue !== null && currentDot && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"dot-countdown\",\n                    style: {\n                        position: 'absolute',\n                        left: \"\".concat(currentDot.x - 15, \"px\"),\n                        top: \"\".concat(currentDot.y - 50, \"px\"),\n                        color: 'red',\n                        fontSize: '28px',\n                        fontWeight: 'bold',\n                        textShadow: '0 0 5px white, 0 0 10px white',\n                        zIndex: 999,\n                        textAlign: 'center',\n                        width: '40px',\n                        height: '40px',\n                        lineHeight: '40px',\n                        pointerEvents: 'none',\n                        userSelect: 'none',\n                        display: 'flex',\n                        justifyContent: 'center',\n                        alignItems: 'center'\n                    },\n                    children: countdownValue\n                }, void 0, false, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 624,\n                    columnNumber: 9\n                }, undefined),\n                (processStatus || remainingCaptures > 0) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"status-overlay\",\n                    style: {\n                        position: 'absolute',\n                        bottom: '10px',\n                        left: '10px',\n                        backgroundColor: 'rgba(255, 255, 255, 0.8)',\n                        padding: '5px 10px',\n                        borderRadius: '4px',\n                        fontSize: '14px',\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n                        zIndex: 53\n                    },\n                    children: [\n                        processStatus && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: processStatus\n                        }, void 0, false, {\n                            fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                            lineNumber: 666,\n                            columnNumber: 31\n                        }, undefined),\n                        remainingCaptures > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                color: '#f57c00'\n                            },\n                            children: [\n                                \"Remaining: \",\n                                remainingCaptures\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                            lineNumber: 668,\n                            columnNumber: 15\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 652,\n                    columnNumber: 11\n                }, undefined)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n            lineNumber: 597,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n        lineNumber: 588,\n        columnNumber: 5\n    }, undefined);\n};\n_s(WhiteScreenMain, \"rNnnX3zGVT9O6NoUyLkG+FFW5m4=\");\n_c = WhiteScreenMain;\n// Export a dynamic version with SSR disabled to avoid useLayoutEffect warnings\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_c2 = next_dynamic__WEBPACK_IMPORTED_MODULE_2___default()(_c1 = ()=>Promise.resolve(WhiteScreenMain), {\n    ssr: false\n}));\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"WhiteScreenMain\");\n$RefreshReg$(_c1, \"%default%$dynamic\");\n$RefreshReg$(_c2, \"%default%\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/collected-dataset/components-gui/WhiteScreenMain.js\n"));

/***/ })

});
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_pages-dir-browser_pages_collected-dataset_components-gui_WhiteScreenMain_js",{

/***/ "(pages-dir-browser)/./pages/collected-dataset/components-gui/WhiteScreenMain.js":
/*!*******************************************************************!*\
  !*** ./pages/collected-dataset/components-gui/WhiteScreenMain.js ***!
  \*******************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dynamic */ \"(pages-dir-browser)/./node_modules/next/dynamic.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_2__);\n// components-gui/WhiteScreenMain.js\n\nvar _s = $RefreshSig$();\n\n\n// Import the isomorphic layout effect or create it inline\nconst useIsomorphicLayoutEffect =  true ? (react__WEBPACK_IMPORTED_MODULE_1___default().useLayoutEffect) : 0;\n// Create a client-only version of the component\nconst WhiteScreenMain = (param)=>{\n    let { onStatusUpdate, triggerCameraAccess, onButtonClick, canvasRef = null, toggleTopBar } = param;\n    _s();\n    // Use provided canvasRef or create a new one\n    const internalCanvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const activeCanvasRef = canvasRef || internalCanvasRef;\n    // Current dot state\n    const [currentDot, setCurrentDot] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isCapturing, setIsCapturing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [countdownValue, setCountdownValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [remainingCaptures, setRemainingCaptures] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [processStatus, setProcessStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    // Track capture session\n    const [captureCounter, setCaptureCounter] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [captureFolder, setCaptureFolder] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    // Configuration state\n    const [randomTimes, setRandomTimes] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [delaySeconds, setDelaySeconds] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(3);\n    const [calibrationPoints, setCalibrationPoints] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentCalibrationIndex, setCurrentCalibrationIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Create a capture folder on first render\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            if (!captureFolder) {\n                const timestamp = new Date().toISOString().replace(/[:\\.]/g, '-');\n                setCaptureFolder(\"session_\".concat(timestamp));\n            }\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        captureFolder\n    ]);\n    // Set up canvas when component mounts\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            // Skip if this runs during SSR\n            if (false) {}\n            const canvas = activeCanvasRef.current;\n            if (!canvas) return;\n            // Function to update canvas dimensions\n            const updateDimensions = {\n                \"WhiteScreenMain.useEffect.updateDimensions\": ()=>{\n                    const parent = canvas.parentElement;\n                    if (!parent) return;\n                    // Get the parent container dimensions\n                    canvas.width = parent.clientWidth;\n                    canvas.height = parent.clientHeight;\n                    // Clear the canvas and set background\n                    const ctx = canvas.getContext('2d');\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(0, 0, canvas.width, canvas.height);\n                    // Redraw current dot if exists\n                    if (currentDot) {\n                        drawDot(currentDot.x, currentDot.y, 'red', 8);\n                    }\n                }\n            }[\"WhiteScreenMain.useEffect.updateDimensions\"];\n            // Initial sizing\n            updateDimensions();\n            // Listen for window resize\n            window.addEventListener('resize', updateDimensions);\n            // Clean up\n            return ({\n                \"WhiteScreenMain.useEffect\": ()=>{\n                    window.removeEventListener('resize', updateDimensions);\n                }\n            })[\"WhiteScreenMain.useEffect\"];\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        activeCanvasRef,\n        currentDot\n    ]);\n    // Generate a random position on the canvas\n    const getRandomPosition = ()=>{\n        const canvas = activeCanvasRef.current;\n        if (!canvas) return {\n            x: 0,\n            y: 0\n        };\n        const width = canvas.width;\n        const height = canvas.height;\n        // Ensure we're not too close to the edges\n        const padding = 20;\n        return {\n            x: Math.floor(Math.random() * (width - 2 * padding)) + padding,\n            y: Math.floor(Math.random() * (height - 2 * padding)) + padding\n        };\n    };\n    // Draw a dot on the canvas\n    const drawDot = function(x, y) {\n        let color = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'red', radius = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 8;\n        const canvas = activeCanvasRef.current;\n        if (!canvas) return;\n        const ctx = canvas.getContext('2d');\n        // Clear canvas\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        // Draw dot with glow effect\n        ctx.beginPath();\n        ctx.arc(x, y, radius, 0, Math.PI * 2);\n        ctx.fillStyle = color;\n        ctx.fill();\n        // Add glow effect\n        ctx.beginPath();\n        ctx.arc(x, y, radius + 3, 0, Math.PI * 2);\n        ctx.strokeStyle = 'rgba(255, 0, 0, 0.3)';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        // Store current dot position\n        setCurrentDot({\n            x,\n            y\n        });\n        return {\n            x,\n            y\n        };\n    };\n    // Clear the canvas\n    const clearCanvas = ()=>{\n        const canvas = activeCanvasRef.current;\n        if (!canvas) return;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        setCurrentDot(null);\n        setCountdownValue(null);\n        setProcessStatus('Canvas cleared');\n        // Clear the message after a delay\n        setTimeout(()=>{\n            setProcessStatus('');\n        }, 1500);\n    };\n    // Start countdown timer\n    // Update the startCountdown function in WhiteScreenMain.js\n    // Modified startCountdown function for WhiteScreenMain.js\n    // Replace this function in the WhiteScreenMain.js file\n    // Start countdown timer\n    const startCountdown = (count, onComplete)=>{\n        setCountdownValue(count);\n        const timer = setTimeout(()=>{\n            if (count > 1) {\n                startCountdown(count - 1, onComplete);\n            } else {\n                // Final countdown step - immediately hide countdown and execute callback\n                setCountdownValue(null);\n                // Execute completion callback without delay\n                if (onComplete) onComplete();\n            }\n        }, 800);\n        return ()=>clearTimeout(timer);\n    };\n    // In your WhiteScreenMain component's return statement, \n    // find and replace the countdown overlay with this:\n    {}\n    {\n        var _activeCanvasRef_current;\n        countdownValue && currentDot && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"dot-countdown\",\n            style: {\n                position: 'absolute',\n                left: \"\".concat(currentDot.x - 15, \"px\"),\n                // If dot is near the top of the screen (less than 20% from top), position below\n                top: currentDot.y < ((_activeCanvasRef_current = activeCanvasRef.current) === null || _activeCanvasRef_current === void 0 ? void 0 : _activeCanvasRef_current.height) * 0.2 ? \"\".concat(currentDot.y + 30, \"px\") : \"\".concat(currentDot.y - 40, \"px\"),\n                color: 'red',\n                fontSize: '28px',\n                fontWeight: 'bold',\n                textShadow: '0 0 5px white',\n                zIndex: 52\n            },\n            children: countdownValue\n        }, void 0, false, {\n            fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n            lineNumber: 183,\n            columnNumber: 5\n        }, undefined);\n    }\n    // Save an image to the server\n    const saveImageToServer = async (imageData, filename, type)=>{\n        try {\n            const response = await fetch('/api/save-capture', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    imageData,\n                    filename,\n                    type,\n                    folder: captureFolder\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Server responded with \".concat(response.status));\n            }\n            const result = await response.json();\n            console.log(\"Saved \".concat(type, \" image:\"), result);\n            return result;\n        } catch (error) {\n            console.error(\"Error saving \".concat(type, \" image:\"), error);\n            throw error;\n        }\n    };\n    // Capture images function\n    const captureImage = async ()=>{\n        setIsCapturing(true);\n        try {\n            // Enable camera if function provided\n            if (triggerCameraAccess) {\n                triggerCameraAccess(true); // Force enable camera\n            }\n            // Wait briefly for camera to initialize\n            await new Promise((resolve)=>setTimeout(resolve, 500));\n            // Generate filenames with counter\n            const screenFilename = \"screen_\".concat(String(captureCounter).padStart(3, '0'), \".jpg\");\n            const webcamFilename = \"webcam_\".concat(String(captureCounter).padStart(3, '0'), \".jpg\");\n            // Capture screen image (canvas with dot)\n            const canvas = activeCanvasRef.current;\n            if (canvas) {\n                const screenImage = canvas.toDataURL('image/png');\n                await saveImageToServer(screenImage, screenFilename, 'screen');\n                console.log(\"Saved screen image: \".concat(screenFilename));\n            }\n            // Capture webcam image if available\n            if (window.videoElement) {\n                const tempCanvas = document.createElement('canvas');\n                const ctx = tempCanvas.getContext('2d');\n                tempCanvas.width = window.videoElement.videoWidth;\n                tempCanvas.height = window.videoElement.videoHeight;\n                ctx.drawImage(window.videoElement, 0, 0, tempCanvas.width, tempCanvas.height);\n                const webcamImage = tempCanvas.toDataURL('image/png');\n                await saveImageToServer(webcamImage, webcamFilename, 'webcam');\n                console.log(\"Saved webcam image: \".concat(webcamFilename));\n            }\n            // Increment the counter for next capture\n            setCaptureCounter((prev)=>prev + 1);\n            // Update status\n            setIsCapturing(false);\n            setProcessStatus(\"Captured coordinates: x=\".concat(currentDot === null || currentDot === void 0 ? void 0 : currentDot.x, \", y=\").concat(currentDot === null || currentDot === void 0 ? void 0 : currentDot.y));\n            // Update parent component\n            if (onStatusUpdate) {\n                onStatusUpdate(\"Images saved: \".concat(screenFilename, \" and \").concat(webcamFilename));\n            }\n            // Show TopBar again after capture\n            setTimeout(()=>{\n                if (typeof toggleTopBar === 'function') {\n                    toggleTopBar(true);\n                } else if ( true && window.toggleTopBar) {\n                    window.toggleTopBar(true);\n                }\n            }, 1500);\n        } catch (error) {\n            console.error('Error during capture:', error);\n            setIsCapturing(false);\n            setProcessStatus('Error capturing images: ' + error.message);\n        }\n        // Clear status after a delay\n        setTimeout(()=>{\n            setProcessStatus('');\n        }, 3000);\n    };\n    // Random Dot action\n    // Updated handleRandomDot function for WhiteScreenMain.js\n    const handleRandomDot = ()=>{\n        if (isCapturing) return;\n        console.log(\"Random Dot button clicked\"); // Debug logging\n        // Hide the TopBar before showing dot\n        if (typeof toggleTopBar === 'function') {\n            toggleTopBar(false);\n        } else if ( true && window.toggleTopBar) {\n            window.toggleTopBar(false);\n        }\n        setIsCapturing(true);\n        // Update status immediately to show we're doing something\n        const status = 'Generating random dot...';\n        setProcessStatus(status);\n        if (onStatusUpdate) {\n            onStatusUpdate({\n                processStatus: status,\n                isCapturing: true\n            });\n        }\n        // Ensure the canvas is ready before drawing\n        setTimeout(()=>{\n            // Force canvas to be visible and sized correctly\n            const canvas = activeCanvasRef.current;\n            if (canvas) {\n                // Make sure canvas dimensions are properly set\n                const parent = canvas.parentElement;\n                if (parent) {\n                    canvas.width = parent.clientWidth;\n                    canvas.height = parent.clientHeight;\n                }\n                // Clear any previous content\n                const ctx = canvas.getContext('2d');\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                ctx.fillStyle = 'white';\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n                // Generate random position and draw\n                const position = getRandomPosition();\n                console.log(\"Drawing dot at position:\", position); // Debug logging\n                // Draw the dot and store its position\n                drawDot(position.x, position.y, 'red', 8);\n                // Directly make the initial countdown visible by updating state\n                setCountdownValue(3);\n                // Use a small timeout to ensure the UI updates before starting the countdown\n                setTimeout(()=>{\n                    // Start countdown and capture\n                    startCountdown(3, captureImage);\n                }, 50);\n            } else {\n                console.error(\"Canvas reference is null - cannot draw dot\"); // Debug logging\n                setProcessStatus('Error: Canvas not available');\n                if (onStatusUpdate) {\n                    onStatusUpdate({\n                        processStatus: 'Error: Canvas not available',\n                        isCapturing: false\n                    });\n                }\n                setIsCapturing(false);\n            }\n        }, 200); // Give a bit more time for the canvas to be ready\n    };\n    // Multiple random dots sequence\n    const handleSetRandom = ()=>{\n        if (isCapturing) return;\n        // Parse input values (use defaults if invalid)\n        const times = parseInt(randomTimes) || 1;\n        const delay = parseInt(delaySeconds) || 3;\n        if (times <= 0 || delay <= 0) {\n            setProcessStatus('Please use positive values for times and delay');\n            return;\n        }\n        setIsCapturing(true);\n        setRemainingCaptures(times);\n        setProcessStatus(\"Starting \".concat(times, \" random captures...\"));\n        // Start sequence\n        scheduleRandomCaptures(times, times, delay);\n    };\n    // Schedule sequence of random captures\n    const scheduleRandomCaptures = (remaining, total, delay)=>{\n        if (remaining <= 0) {\n            setIsCapturing(false);\n            setRemainingCaptures(0);\n            setProcessStatus('Random capture sequence completed');\n            // Clear status after a delay\n            setTimeout(()=>{\n                setProcessStatus('');\n            }, 2000);\n            return;\n        }\n        setRemainingCaptures(remaining);\n        setProcessStatus(\"Capture \".concat(total - remaining + 1, \" of \").concat(total));\n        // Generate random position and draw\n        const position = getRandomPosition();\n        drawDot(position.x, position.y);\n        // Start countdown and capture\n        startCountdown(3, ()=>{\n            captureImage();\n            // Schedule next capture\n            setTimeout(()=>{\n                scheduleRandomCaptures(remaining - 1, total, delay);\n            }, delay * 1000);\n        });\n    };\n    // Generate calibration points\n    const generateCalibrationPoints = ()=>{\n        const canvas = activeCanvasRef.current;\n        if (!canvas) return [];\n        const width = canvas.width;\n        const height = canvas.height;\n        // Helper function for rounding\n        const conditionalRound = (dimension, percentage)=>{\n            return Math.round(dimension * percentage);\n        };\n        const firstFramePercentage = 0.12;\n        const secondFramePercentage = 0.26;\n        // Calculate points (outer and inner frame)\n        const xLeftFirst = conditionalRound(width, firstFramePercentage);\n        const xRightFirst = width - conditionalRound(width, firstFramePercentage);\n        const yTopFirst = conditionalRound(height, firstFramePercentage);\n        const yBottomFirst = height - conditionalRound(height, firstFramePercentage);\n        const xLeftSecond = conditionalRound(width, secondFramePercentage);\n        const xRightSecond = width - conditionalRound(width, secondFramePercentage);\n        const yTopSecond = conditionalRound(height, secondFramePercentage);\n        const yBottomSecond = height - conditionalRound(height, secondFramePercentage);\n        // Return array of points in sequence\n        return [\n            // First frame - outer points\n            {\n                x: xLeftFirst,\n                y: yTopFirst\n            },\n            {\n                x: Math.floor(width / 2),\n                y: yTopFirst\n            },\n            {\n                x: xRightFirst,\n                y: yTopFirst\n            },\n            {\n                x: xLeftFirst,\n                y: Math.floor(height / 2)\n            },\n            {\n                x: xRightFirst,\n                y: Math.floor(height / 2)\n            },\n            {\n                x: xLeftFirst,\n                y: yBottomFirst\n            },\n            {\n                x: Math.floor(width / 2),\n                y: yBottomFirst\n            },\n            {\n                x: xRightFirst,\n                y: yBottomFirst\n            },\n            // Second frame - inner points\n            {\n                x: xLeftSecond,\n                y: yTopSecond\n            },\n            {\n                x: Math.floor(width / 2),\n                y: yTopSecond\n            },\n            {\n                x: xRightSecond,\n                y: yTopSecond\n            },\n            {\n                x: xLeftSecond,\n                y: Math.floor(height / 2)\n            },\n            {\n                x: xRightSecond,\n                y: Math.floor(height / 2)\n            },\n            {\n                x: xLeftSecond,\n                y: yBottomSecond\n            },\n            {\n                x: Math.floor(width / 2),\n                y: yBottomSecond\n            },\n            {\n                x: xRightSecond,\n                y: yBottomSecond\n            }\n        ];\n    };\n    // Handle calibration sequence\n    const handleSetCalibrate = ()=>{\n        if (isCapturing) return;\n        // Generate calibration points\n        const points = generateCalibrationPoints();\n        if (points.length === 0) {\n            setProcessStatus('Failed to generate calibration points');\n            return;\n        }\n        setCalibrationPoints(points);\n        setCurrentCalibrationIndex(0);\n        setIsCapturing(true);\n        setRemainingCaptures(points.length);\n        setProcessStatus(\"Calibration 1/\".concat(points.length));\n        // Draw first point and start\n        const firstPoint = points[0];\n        drawDot(firstPoint.x, firstPoint.y);\n        // Start countdown for first point\n        startCountdown(3, ()=>{\n            captureImage();\n            setTimeout(()=>moveToNextCalibrationPoint(), 1000);\n        });\n    };\n    // Move to next calibration point\n    const moveToNextCalibrationPoint = ()=>{\n        const nextIndex = currentCalibrationIndex + 1;\n        // Check if we're done\n        if (nextIndex >= calibrationPoints.length) {\n            setIsCapturing(false);\n            setRemainingCaptures(0);\n            setProcessStatus('Calibration completed');\n            // Clear status after a delay\n            setTimeout(()=>{\n                setProcessStatus('');\n            }, 2000);\n            return;\n        }\n        // Update state and progress\n        setCurrentCalibrationIndex(nextIndex);\n        setRemainingCaptures(calibrationPoints.length - nextIndex);\n        setProcessStatus(\"Calibration \".concat(nextIndex + 1, \"/\").concat(calibrationPoints.length));\n        // Draw next point\n        const nextPoint = calibrationPoints[nextIndex];\n        drawDot(nextPoint.x, nextPoint.y);\n        // Start countdown for this point\n        startCountdown(3, ()=>{\n            captureImage();\n            setTimeout(()=>moveToNextCalibrationPoint(), 1000);\n        });\n    };\n    // Map button clicks to appropriate handlers\n    const handleScreenAction = (actionType)=>{\n        switch(actionType){\n            case 'randomDot':\n                handleRandomDot();\n                break;\n            case 'setRandom':\n                handleSetRandom();\n                break;\n            case 'calibrate':\n                handleSetCalibrate();\n                break;\n            case 'clearAll':\n                clearCanvas();\n                break;\n            default:\n                // Forward to parent if not handled here\n                if (onButtonClick) {\n                    onButtonClick(actionType);\n                }\n        }\n    };\n    // Pass actions up to parent component\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            // Skip during SSR\n            if (false) {}\n            if (onButtonClick) {\n                // Create action handlers\n                const actionHandlers = {\n                    randomDot: handleRandomDot,\n                    setRandom: handleSetRandom,\n                    calibrate: handleSetCalibrate,\n                    clearAll: clearCanvas\n                };\n                // Store in parent component context\n                onButtonClick('registerActions', actionHandlers);\n            }\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        onButtonClick\n    ]);\n    // Update parent with status changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            if (onStatusUpdate && processStatus) {\n                onStatusUpdate(processStatus);\n            }\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        processStatus,\n        onStatusUpdate\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"white-screen-container\",\n        style: {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            zIndex: 50 // Add a z-index to ensure it's above other elements\n        },\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"white-screen-canvas-container\",\n            style: {\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n                backgroundColor: 'white',\n                overflow: 'hidden',\n                border: '1px solid #eee',\n                zIndex: 51\n            },\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n                    ref: canvasRef ? canvasRef : internalCanvasRef,\n                    className: \"white-screen-canvas\",\n                    style: {\n                        width: '100%',\n                        height: '100%',\n                        display: 'block'\n                    }\n                }, void 0, false, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 616,\n                    columnNumber: 9\n                }, undefined),\n                countdownValue && currentDot && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"dot-countdown\",\n                    style: {\n                        position: 'absolute',\n                        left: \"\".concat(currentDot.x - 15, \"px\"),\n                        top: \"\".concat(currentDot.y - 40, \"px\"),\n                        color: 'red',\n                        fontSize: '28px',\n                        fontWeight: 'bold',\n                        textShadow: '0 0 5px white',\n                        zIndex: 52\n                    },\n                    children: countdownValue\n                }, void 0, false, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 628,\n                    columnNumber: 11\n                }, undefined),\n                (processStatus || remainingCaptures > 0) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"status-overlay\",\n                    style: {\n                        position: 'absolute',\n                        bottom: '10px',\n                        left: '10px',\n                        backgroundColor: 'rgba(255, 255, 255, 0.8)',\n                        padding: '5px 10px',\n                        borderRadius: '4px',\n                        fontSize: '14px',\n                        boxShadow: '0 2px 4px rgba(0,0,0,0.1)',\n                        zIndex: 53\n                    },\n                    children: [\n                        processStatus && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: processStatus\n                        }, void 0, false, {\n                            fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                            lineNumber: 661,\n                            columnNumber: 31\n                        }, undefined),\n                        remainingCaptures > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                color: '#f57c00'\n                            },\n                            children: [\n                                \"Remaining: \",\n                                remainingCaptures\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                            lineNumber: 663,\n                            columnNumber: 15\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 647,\n                    columnNumber: 11\n                }, undefined)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n            lineNumber: 601,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n        lineNumber: 592,\n        columnNumber: 5\n    }, undefined);\n};\n_s(WhiteScreenMain, \"rNnnX3zGVT9O6NoUyLkG+FFW5m4=\");\n_c = WhiteScreenMain;\n// Export a dynamic version with SSR disabled to avoid useLayoutEffect warnings\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_c2 = next_dynamic__WEBPACK_IMPORTED_MODULE_2___default()(_c1 = ()=>Promise.resolve(WhiteScreenMain), {\n    ssr: false\n}));\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"WhiteScreenMain\");\n$RefreshReg$(_c1, \"%default%$dynamic\");\n$RefreshReg$(_c2, \"%default%\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3BhZ2VzL2NvbGxlY3RlZC1kYXRhc2V0L2NvbXBvbmVudHMtZ3VpL1doaXRlU2NyZWVuTWFpbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsb0NBQW9DOzs7QUFDdUI7QUFDeEI7QUFFbkMsMERBQTBEO0FBQzFELE1BQU1LLDRCQUE0QixLQUE2QixHQUMzREwsOERBQXFCLEdBQ3JCQSxDQUFlO0FBRW5CLGdEQUFnRDtBQUNoRCxNQUFNTyxrQkFBa0I7UUFBQyxFQUN2QkMsY0FBYyxFQUNkQyxtQkFBbUIsRUFDbkJDLGFBQWEsRUFDYkMsWUFBWSxJQUFJLEVBQ2hCQyxZQUFZLEVBQ2I7O0lBQ0MsNkNBQTZDO0lBQzdDLE1BQU1DLG9CQUFvQlYsNkNBQU1BLENBQUM7SUFDakMsTUFBTVcsa0JBQWtCSCxhQUFhRTtJQUVyQyxvQkFBb0I7SUFDcEIsTUFBTSxDQUFDRSxZQUFZQyxjQUFjLEdBQUdmLCtDQUFRQSxDQUFDO0lBQzdDLE1BQU0sQ0FBQ2dCLGFBQWFDLGVBQWUsR0FBR2pCLCtDQUFRQSxDQUFDO0lBQy9DLE1BQU0sQ0FBQ2tCLGdCQUFnQkMsa0JBQWtCLEdBQUduQiwrQ0FBUUEsQ0FBQztJQUNyRCxNQUFNLENBQUNvQixtQkFBbUJDLHFCQUFxQixHQUFHckIsK0NBQVFBLENBQUM7SUFDM0QsTUFBTSxDQUFDc0IsZUFBZUMsaUJBQWlCLEdBQUd2QiwrQ0FBUUEsQ0FBQztJQUVuRCx3QkFBd0I7SUFDeEIsTUFBTSxDQUFDd0IsZ0JBQWdCQyxrQkFBa0IsR0FBR3pCLCtDQUFRQSxDQUFDO0lBQ3JELE1BQU0sQ0FBQzBCLGVBQWVDLGlCQUFpQixHQUFHM0IsK0NBQVFBLENBQUM7SUFFbkQsc0JBQXNCO0lBQ3RCLE1BQU0sQ0FBQzRCLGFBQWFDLGVBQWUsR0FBRzdCLCtDQUFRQSxDQUFDO0lBQy9DLE1BQU0sQ0FBQzhCLGNBQWNDLGdCQUFnQixHQUFHL0IsK0NBQVFBLENBQUM7SUFDakQsTUFBTSxDQUFDZ0MsbUJB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QU07d0JBQ05rRixpQkFBaUI7d0JBQ2pCM0csU0FBUzt3QkFDVGlILGNBQWM7d0JBQ2R0RixVQUFVO3dCQUNWdUYsV0FBVzt3QkFDWHBGLFFBQVE7b0JBQ1Y7O3dCQUVDcEUsK0JBQWlCLDhEQUFDMkQ7c0NBQUszRDs7Ozs7O3dCQUN2QkYsb0JBQW9CLG1CQUNuQiw4REFBQzZEOzRCQUFJRSxPQUFPO2dDQUFFbkIsT0FBTzs0QkFBVTs7Z0NBQUc7Z0NBQ3BCNUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVE1QjtHQXJwQk1kO0tBQUFBO0FBdXBCTiwrRUFBK0U7QUFDL0UsaUVBQWUsTUFBQUgsbURBQU9BLE9BQUMsSUFBTTZHLFFBQVFDLE9BQU8sQ0FBQzNHLGtCQUFrQjtJQUFFeUssS0FBSztBQUFNLEVBQUUsRUFBQyIsInNvdXJjZXMiOlsiL1VzZXJzL3BvcmNocG9ydGFsMi9EZXNrdG9wL/CflKVldmVyeXRoaW5nL01haW5fV2ViX0V5ZVRyYWNraW5nL21haW4td2ViL2Zyb250ZW5kL3BhZ2VzL2NvbGxlY3RlZC1kYXRhc2V0L2NvbXBvbmVudHMtZ3VpL1doaXRlU2NyZWVuTWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjb21wb25lbnRzLWd1aS9XaGl0ZVNjcmVlbk1haW4uanNcbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZHluYW1pYyBmcm9tICduZXh0L2R5bmFtaWMnO1xuXG4vLyBJbXBvcnQgdGhlIGlzb21vcnBoaWMgbGF5b3V0IGVmZmVjdCBvciBjcmVhdGUgaXQgaW5saW5lXG5jb25zdCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgXG4gID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IFxuICA6IFJlYWN0LnVzZUVmZmVjdDtcblxuLy8gQ3JlYXRlIGEgY2xpZW50LW9ubHkgdmVyc2lvbiBvZiB0aGUgY29tcG9uZW50XG5jb25zdCBXaGl0ZVNjcmVlbk1haW4gPSAoeyBcbiAgb25TdGF0dXNVcGRhdGUsIFxuICB0cmlnZ2VyQ2FtZXJhQWNjZXNzLFxuICBvbkJ1dHRvbkNsaWNrLFxuICBjYW52YXNSZWYgPSBudWxsLFxuICB0b2dnbGVUb3BCYXJcbn0pID0+IHtcbiAgLy8gVXNlIHByb3ZpZGVkIGNhbnZhc1JlZiBvciBjcmVhdGUgYSBuZXcgb25lXG4gIGNvbnN0IGludGVybmFsQ2FudmFzUmVmID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBhY3RpdmVDYW52YXNSZWYgPSBjYW52YXNSZWYgfHwgaW50ZXJuYWxDYW52YXNSZWY7XG4gIFxuICAvLyBDdXJyZW50IGRvdCBzdGF0ZVxuICBjb25zdCBbY3VycmVudERvdCwgc2V0Q3VycmVudERvdF0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW2lzQ2FwdHVyaW5nLCBzZXRJc0NhcHR1cmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtjb3VudGRvd25WYWx1ZSwgc2V0Q291bnRkb3duVmFsdWVdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFtyZW1haW5pbmdDYXB0dXJlcywgc2V0UmVtYWluaW5nQ2FwdHVyZXNdID0gdXNlU3RhdGUoMCk7XG4gIGNvbnN0IFtwcm9jZXNzU3RhdHVzLCBzZXRQcm9jZXNzU3RhdHVzXSA9IHVzZVN0YXRlKCcnKTtcbiAgXG4gIC8vIFRyYWNrIGNhcHR1cmUgc2Vzc2lvblxuICBjb25zdCBbY2FwdHVyZUNvdW50ZXIsIHNldENhcHR1cmVDb3VudGVyXSA9IHVzZVN0YXRlKDEpO1xuICBjb25zdCBbY2FwdHVyZUZvbGRlciwgc2V0Q2FwdHVyZUZvbGRlcl0gPSB1c2VTdGF0ZSgnJyk7XG4gIFxuICAvLyBDb25maWd1cmF0aW9uIHN0YXRlXG4gIGNvbnN0IFtyYW5kb21UaW1lcywgc2V0UmFuZG9tVGltZXNdID0gdXNlU3RhdGUoMSk7XG4gIGNvbnN0IFtkZWxheVNlY29uZHMsIHNldERlbGF5U2Vjb25kc10gPSB1c2VTdGF0ZSgzKTtcbiAgY29uc3QgW2NhbGlicmF0aW9uUG9pbnRzLCBzZXRDYWxpYnJhdGlvblBvaW50c10gPSB1c2VTdGF0ZShbXSk7XG4gIGNvbnN0IFtjdXJyZW50Q2FsaWJyYXRpb25JbmRleCwgc2V0Q3VycmVudENhbGlicmF0aW9uSW5kZXhdID0gdXNlU3RhdGUoMCk7XG4gIFxuICAvLyBDcmVhdGUgYSBjYXB0dXJlIGZvbGRlciBvbiBmaXJzdCByZW5kZXJcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWNhcHR1cmVGb2xkZXIpIHtcbiAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9bOlxcLl0vZywgJy0nKTtcbiAgICAgIHNldENhcHR1cmVGb2xkZXIoYHNlc3Npb25fJHt0aW1lc3RhbXB9YCk7XG4gICAgfVxuICB9LCBbY2FwdHVyZUZvbGRlcl0pO1xuICBcbiAgLy8gU2V0IHVwIGNhbnZhcyB3aGVuIGNvbXBvbmVudCBtb3VudHNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBTa2lwIGlmIHRoaXMgcnVucyBkdXJpbmcgU1NSXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgXG4gICAgY29uc3QgY2FudmFzID0gYWN0aXZlQ2FudmFzUmVmLmN1cnJlbnQ7XG4gICAgaWYgKCFjYW52YXMpIHJldHVybjtcbiAgICBcbiAgICAvLyBGdW5jdGlvbiB0byB1cGRhdGUgY2FudmFzIGRpbWVuc2lvbnNcbiAgICBjb25zdCB1cGRhdGVEaW1lbnNpb25zID0gKCkgPT4ge1xuICAgICAgY29uc3QgcGFyZW50ID0gY2FudmFzLnBhcmVudEVsZW1lbnQ7XG4gICAgICBpZiAoIXBhcmVudCkgcmV0dXJuO1xuICAgICAgXG4gICAgICAvLyBHZXQgdGhlIHBhcmVudCBjb250YWluZXIgZGltZW5zaW9uc1xuICAgICAgY2FudmFzLndpZHRoID0gcGFyZW50LmNsaWVudFdpZHRoO1xuICAgICAgY2FudmFzLmhlaWdodCA9IHBhcmVudC5jbGllbnRIZWlnaHQ7XG4gICAgICBcbiAgICAgIC8vIENsZWFyIHRoZSBjYW52YXMgYW5kIHNldCBiYWNrZ3JvdW5kXG4gICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAnd2hpdGUnO1xuICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICBcbiAgICAgIC8vIFJlZHJhdyBjdXJyZW50IGRvdCBpZiBleGlzdHNcbiAgICAgIGlmIChjdXJyZW50RG90KSB7XG4gICAgICAgIGRyYXdEb3QoY3VycmVudERvdC54LCBjdXJyZW50RG90LnksICdyZWQnLCA4KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIC8vIEluaXRpYWwgc2l6aW5nXG4gICAgdXBkYXRlRGltZW5zaW9ucygpO1xuICAgIFxuICAgIC8vIExpc3RlbiBmb3Igd2luZG93IHJlc2l6ZVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB1cGRhdGVEaW1lbnNpb25zKTtcbiAgICBcbiAgICAvLyBDbGVhbiB1cFxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdXBkYXRlRGltZW5zaW9ucyk7XG4gICAgfTtcbiAgfSwgW2FjdGl2ZUNhbnZhc1JlZiwgY3VycmVudERvdF0pO1xuICBcbiAgLy8gR2VuZXJhdGUgYSByYW5kb20gcG9zaXRpb24gb24gdGhlIGNhbnZhc1xuICBjb25zdCBnZXRSYW5kb21Qb3NpdGlvbiA9ICgpID0+IHtcbiAgICBjb25zdCBjYW52YXMgPSBhY3RpdmVDYW52YXNSZWYuY3VycmVudDtcbiAgICBpZiAoIWNhbnZhcykgcmV0dXJuIHsgeDogMCwgeTogMCB9O1xuICAgIFxuICAgIGNvbnN0IHdpZHRoID0gY2FudmFzLndpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XG4gICAgXG4gICAgLy8gRW5zdXJlIHdlJ3JlIG5vdCB0b28gY2xvc2UgdG8gdGhlIGVkZ2VzXG4gICAgY29uc3QgcGFkZGluZyA9IDIwO1xuICAgIHJldHVybiB7XG4gICAgICB4OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAod2lkdGggLSAyICogcGFkZGluZykpICsgcGFkZGluZyxcbiAgICAgIHk6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChoZWlnaHQgLSAyICogcGFkZGluZykpICsgcGFkZGluZ1xuICAgIH07XG4gIH07XG4gIFxuICAvLyBEcmF3IGEgZG90IG9uIHRoZSBjYW52YXNcbiAgY29uc3QgZHJhd0RvdCA9ICh4LCB5LCBjb2xvciA9ICdyZWQnLCByYWRpdXMgPSA4KSA9PiB7XG4gICAgY29uc3QgY2FudmFzID0gYWN0aXZlQ2FudmFzUmVmLmN1cnJlbnQ7XG4gICAgaWYgKCFjYW52YXMpIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBcbiAgICAvLyBDbGVhciBjYW52YXNcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgXG4gICAgLy8gRHJhdyBkb3Qgd2l0aCBnbG93IGVmZmVjdFxuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguYXJjKHgsIHksIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICBjdHguZmlsbCgpO1xuICAgIFxuICAgIC8vIEFkZCBnbG93IGVmZmVjdFxuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguYXJjKHgsIHksIHJhZGl1cyArIDMsIDAsIE1hdGguUEkgKiAyKTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsIDAsIDAsIDAuMyknO1xuICAgIGN0eC5saW5lV2lkdGggPSAyO1xuICAgIGN0eC5zdHJva2UoKTtcbiAgICBcbiAgICAvLyBTdG9yZSBjdXJyZW50IGRvdCBwb3NpdGlvblxuICAgIHNldEN1cnJlbnREb3QoeyB4LCB5IH0pO1xuICAgIFxuICAgIHJldHVybiB7IHgsIHkgfTtcbiAgfTtcbiAgXG4gIC8vIENsZWFyIHRoZSBjYW52YXNcbiAgY29uc3QgY2xlYXJDYW52YXMgPSAoKSA9PiB7XG4gICAgY29uc3QgY2FudmFzID0gYWN0aXZlQ2FudmFzUmVmLmN1cnJlbnQ7XG4gICAgaWYgKCFjYW52YXMpIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgXG4gICAgc2V0Q3VycmVudERvdChudWxsKTtcbiAgICBzZXRDb3VudGRvd25WYWx1ZShudWxsKTtcbiAgICBzZXRQcm9jZXNzU3RhdHVzKCdDYW52YXMgY2xlYXJlZCcpO1xuICAgIFxuICAgIC8vIENsZWFyIHRoZSBtZXNzYWdlIGFmdGVyIGEgZGVsYXlcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHNldFByb2Nlc3NTdGF0dXMoJycpO1xuICAgIH0sIDE1MDApO1xuICB9O1xuICBcbiAgLy8gU3RhcnQgY291bnRkb3duIHRpbWVyXG4gIC8vIFVwZGF0ZSB0aGUgc3RhcnRDb3VudGRvd24gZnVuY3Rpb24gaW4gV2hpdGVTY3JlZW5NYWluLmpzXG4vLyBNb2RpZmllZCBzdGFydENvdW50ZG93biBmdW5jdGlvbiBmb3IgV2hpdGVTY3JlZW5NYWluLmpzXG4vLyBSZXBsYWNlIHRoaXMgZnVuY3Rpb24gaW4gdGhlIFdoaXRlU2NyZWVuTWFpbi5qcyBmaWxlXG5cbi8vIFN0YXJ0IGNvdW50ZG93biB0aW1lclxuICAgIGNvbnN0IHN0YXJ0Q291bnRkb3duID0gKGNvdW50LCBvbkNvbXBsZXRlKSA9PiB7XG4gICAgICAgIHNldENvdW50ZG93blZhbHVlKGNvdW50KTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmIChjb3VudCA+IDEpIHtcbiAgICAgICAgICAgIHN0YXJ0Q291bnRkb3duKGNvdW50IC0gMSwgb25Db21wbGV0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBGaW5hbCBjb3VudGRvd24gc3RlcCAtIGltbWVkaWF0ZWx5IGhpZGUgY291bnRkb3duIGFuZCBleGVjdXRlIGNhbGxiYWNrXG4gICAgICAgICAgICBzZXRDb3VudGRvd25WYWx1ZShudWxsKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRXhlY3V0ZSBjb21wbGV0aW9uIGNhbGxiYWNrIHdpdGhvdXQgZGVsYXlcbiAgICAgICAgICAgIGlmIChvbkNvbXBsZXRlKSBvbkNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgfSwgODAwKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIH07XG4gIFxuICAvLyBJbiB5b3VyIFdoaXRlU2NyZWVuTWFpbiBjb21wb25lbnQncyByZXR1cm4gc3RhdGVtZW50LCBcbiAgLy8gZmluZCBhbmQgcmVwbGFjZSB0aGUgY291bnRkb3duIG92ZXJsYXkgd2l0aCB0aGlzOlxuICBcbiAgey8qIE92ZXJsYXkgZm9yIGNvdW50ZG93biBuZWFyIGRvdCAqL31cbiAge2NvdW50ZG93blZhbHVlICYmIGN1cnJlbnREb3QgJiYgKFxuICAgIDxkaXYgXG4gICAgICBjbGFzc05hbWU9XCJkb3QtY291bnRkb3duXCJcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBsZWZ0OiBgJHtjdXJyZW50RG90LnggLSAxNX1weGAsXG4gICAgICAgIC8vIElmIGRvdCBpcyBuZWFyIHRoZSB0b3Agb2YgdGhlIHNjcmVlbiAobGVzcyB0aGFuIDIwJSBmcm9tIHRvcCksIHBvc2l0aW9uIGJlbG93XG4gICAgICAgIHRvcDogY3VycmVudERvdC55IDwgKGFjdGl2ZUNhbnZhc1JlZi5jdXJyZW50Py5oZWlnaHQgKiAwLjIpIFxuICAgICAgICAgID8gYCR7Y3VycmVudERvdC55ICsgMzB9cHhgIFxuICAgICAgICAgIDogYCR7Y3VycmVudERvdC55IC0gNDB9cHhgLFxuICAgICAgICBjb2xvcjogJ3JlZCcsXG4gICAgICAgIGZvbnRTaXplOiAnMjhweCcsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICAgICAgdGV4dFNoYWRvdzogJzAgMCA1cHggd2hpdGUnLFxuICAgICAgICB6SW5kZXg6IDUyXG4gICAgICB9fVxuICAgID5cbiAgICAgIHtjb3VudGRvd25WYWx1ZX1cbiAgICA8L2Rpdj5cbiAgKX1cbiAgXG4gIC8vIFNhdmUgYW4gaW1hZ2UgdG8gdGhlIHNlcnZlclxuICBjb25zdCBzYXZlSW1hZ2VUb1NlcnZlciA9IGFzeW5jIChpbWFnZURhdGEsIGZpbGVuYW1lLCB0eXBlKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvc2F2ZS1jYXB0dXJlJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIGltYWdlRGF0YSxcbiAgICAgICAgICBmaWxlbmFtZSxcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIGZvbGRlcjogY2FwdHVyZUZvbGRlclxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTZXJ2ZXIgcmVzcG9uZGVkIHdpdGggJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGNvbnNvbGUubG9nKGBTYXZlZCAke3R5cGV9IGltYWdlOmAsIHJlc3VsdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBzYXZpbmcgJHt0eXBlfSBpbWFnZTpgLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH07XG4gIFxuICAvLyBDYXB0dXJlIGltYWdlcyBmdW5jdGlvblxuICAgIGNvbnN0IGNhcHR1cmVJbWFnZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgc2V0SXNDYXB0dXJpbmcodHJ1ZSk7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAvLyBFbmFibGUgY2FtZXJhIGlmIGZ1bmN0aW9uIHByb3ZpZGVkXG4gICAgICAgIGlmICh0cmlnZ2VyQ2FtZXJhQWNjZXNzKSB7XG4gICAgICAgICAgICB0cmlnZ2VyQ2FtZXJhQWNjZXNzKHRydWUpOyAvLyBGb3JjZSBlbmFibGUgY2FtZXJhXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFdhaXQgYnJpZWZseSBmb3IgY2FtZXJhIHRvIGluaXRpYWxpemVcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDUwMCkpO1xuICAgICAgICBcbiAgICAgICAgLy8gR2VuZXJhdGUgZmlsZW5hbWVzIHdpdGggY291bnRlclxuICAgICAgICBjb25zdCBzY3JlZW5GaWxlbmFtZSA9IGBzY3JlZW5fJHtTdHJpbmcoY2FwdHVyZUNvdW50ZXIpLnBhZFN0YXJ0KDMsICcwJyl9LmpwZ2A7XG4gICAgICAgIGNvbnN0IHdlYmNhbUZpbGVuYW1lID0gYHdlYmNhbV8ke1N0cmluZyhjYXB0dXJlQ291bnRlcikucGFkU3RhcnQoMywgJzAnKX0uanBnYDtcbiAgICAgICAgXG4gICAgICAgIC8vIENhcHR1cmUgc2NyZWVuIGltYWdlIChjYW52YXMgd2l0aCBkb3QpXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGFjdGl2ZUNhbnZhc1JlZi5jdXJyZW50O1xuICAgICAgICBpZiAoY2FudmFzKSB7XG4gICAgICAgICAgICBjb25zdCBzY3JlZW5JbWFnZSA9IGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL3BuZycpO1xuICAgICAgICAgICAgYXdhaXQgc2F2ZUltYWdlVG9TZXJ2ZXIoc2NyZWVuSW1hZ2UsIHNjcmVlbkZpbGVuYW1lLCAnc2NyZWVuJyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgU2F2ZWQgc2NyZWVuIGltYWdlOiAke3NjcmVlbkZpbGVuYW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDYXB0dXJlIHdlYmNhbSBpbWFnZSBpZiBhdmFpbGFibGVcbiAgICAgICAgaWYgKHdpbmRvdy52aWRlb0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRlbXBDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIHRlbXBDYW52YXMud2lkdGggPSB3aW5kb3cudmlkZW9FbGVtZW50LnZpZGVvV2lkdGg7XG4gICAgICAgICAgICB0ZW1wQ2FudmFzLmhlaWdodCA9IHdpbmRvdy52aWRlb0VsZW1lbnQudmlkZW9IZWlnaHQ7XG4gICAgICAgICAgICBjdHguZHJhd0ltYWdlKHdpbmRvdy52aWRlb0VsZW1lbnQsIDAsIDAsIHRlbXBDYW52YXMud2lkdGgsIHRlbXBDYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgIGNvbnN0IHdlYmNhbUltYWdlID0gdGVtcENhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL3BuZycpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBhd2FpdCBzYXZlSW1hZ2VUb1NlcnZlcih3ZWJjYW1JbWFnZSwgd2ViY2FtRmlsZW5hbWUsICd3ZWJjYW0nKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBTYXZlZCB3ZWJjYW0gaW1hZ2U6ICR7d2ViY2FtRmlsZW5hbWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEluY3JlbWVudCB0aGUgY291bnRlciBmb3IgbmV4dCBjYXB0dXJlXG4gICAgICAgIHNldENhcHR1cmVDb3VudGVyKHByZXYgPT4gcHJldiArIDEpO1xuICAgICAgICBcbiAgICAgICAgLy8gVXBkYXRlIHN0YXR1c1xuICAgICAgICBzZXRJc0NhcHR1cmluZyhmYWxzZSk7XG4gICAgICAgIHNldFByb2Nlc3NTdGF0dXMoYENhcHR1cmVkIGNvb3JkaW5hdGVzOiB4PSR7Y3VycmVudERvdD8ueH0sIHk9JHtjdXJyZW50RG90Py55fWApO1xuICAgICAgICBcbiAgICAgICAgLy8gVXBkYXRlIHBhcmVudCBjb21wb25lbnRcbiAgICAgICAgaWYgKG9uU3RhdHVzVXBkYXRlKSB7XG4gICAgICAgICAgICBvblN0YXR1c1VwZGF0ZShgSW1hZ2VzIHNhdmVkOiAke3NjcmVlbkZpbGVuYW1lfSBhbmQgJHt3ZWJjYW1GaWxlbmFtZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gU2hvdyBUb3BCYXIgYWdhaW4gYWZ0ZXIgY2FwdHVyZVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG9nZ2xlVG9wQmFyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0b2dnbGVUb3BCYXIodHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy50b2dnbGVUb3BCYXIpIHtcbiAgICAgICAgICAgIHdpbmRvdy50b2dnbGVUb3BCYXIodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDE1MDApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkdXJpbmcgY2FwdHVyZTonLCBlcnJvcik7XG4gICAgICAgIHNldElzQ2FwdHVyaW5nKGZhbHNlKTtcbiAgICAgICAgc2V0UHJvY2Vzc1N0YXR1cygnRXJyb3IgY2FwdHVyaW5nIGltYWdlczogJyArIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDbGVhciBzdGF0dXMgYWZ0ZXIgYSBkZWxheVxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc2V0UHJvY2Vzc1N0YXR1cygnJyk7XG4gICAgICAgIH0sIDMwMDApO1xuICAgIH07XG4gIFxuICAvLyBSYW5kb20gRG90IGFjdGlvblxuLy8gVXBkYXRlZCBoYW5kbGVSYW5kb21Eb3QgZnVuY3Rpb24gZm9yIFdoaXRlU2NyZWVuTWFpbi5qc1xuY29uc3QgaGFuZGxlUmFuZG9tRG90ID0gKCkgPT4ge1xuICAgIGlmIChpc0NhcHR1cmluZykgcmV0dXJuO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKFwiUmFuZG9tIERvdCBidXR0b24gY2xpY2tlZFwiKTsgLy8gRGVidWcgbG9nZ2luZ1xuICAgIFxuICAgIC8vIEhpZGUgdGhlIFRvcEJhciBiZWZvcmUgc2hvd2luZyBkb3RcbiAgICBpZiAodHlwZW9mIHRvZ2dsZVRvcEJhciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdG9nZ2xlVG9wQmFyKGZhbHNlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy50b2dnbGVUb3BCYXIpIHtcbiAgICAgIHdpbmRvdy50b2dnbGVUb3BCYXIoZmFsc2UpO1xuICAgIH1cbiAgICBcbiAgICBzZXRJc0NhcHR1cmluZyh0cnVlKTtcbiAgICBcbiAgICAvLyBVcGRhdGUgc3RhdHVzIGltbWVkaWF0ZWx5IHRvIHNob3cgd2UncmUgZG9pbmcgc29tZXRoaW5nXG4gICAgY29uc3Qgc3RhdHVzID0gJ0dlbmVyYXRpbmcgcmFuZG9tIGRvdC4uLic7XG4gICAgc2V0UHJvY2Vzc1N0YXR1cyhzdGF0dXMpO1xuICAgIGlmIChvblN0YXR1c1VwZGF0ZSkge1xuICAgICAgb25TdGF0dXNVcGRhdGUoe1xuICAgICAgICBwcm9jZXNzU3RhdHVzOiBzdGF0dXMsXG4gICAgICAgIGlzQ2FwdHVyaW5nOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgLy8gRW5zdXJlIHRoZSBjYW52YXMgaXMgcmVhZHkgYmVmb3JlIGRyYXdpbmdcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vIEZvcmNlIGNhbnZhcyB0byBiZSB2aXNpYmxlIGFuZCBzaXplZCBjb3JyZWN0bHlcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGFjdGl2ZUNhbnZhc1JlZi5jdXJyZW50O1xuICAgICAgaWYgKGNhbnZhcykge1xuICAgICAgICAvLyBNYWtlIHN1cmUgY2FudmFzIGRpbWVuc2lvbnMgYXJlIHByb3Blcmx5IHNldFxuICAgICAgICBjb25zdCBwYXJlbnQgPSBjYW52YXMucGFyZW50RWxlbWVudDtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHBhcmVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gcGFyZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ2xlYXIgYW55IHByZXZpb3VzIGNvbnRlbnRcbiAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICBcbiAgICAgICAgLy8gR2VuZXJhdGUgcmFuZG9tIHBvc2l0aW9uIGFuZCBkcmF3XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmFuZG9tUG9zaXRpb24oKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJEcmF3aW5nIGRvdCBhdCBwb3NpdGlvbjpcIiwgcG9zaXRpb24pOyAvLyBEZWJ1ZyBsb2dnaW5nXG4gICAgICAgIFxuICAgICAgICAvLyBEcmF3IHRoZSBkb3QgYW5kIHN0b3JlIGl0cyBwb3NpdGlvblxuICAgICAgICBkcmF3RG90KHBvc2l0aW9uLngsIHBvc2l0aW9uLnksICdyZWQnLCA4KTtcbiAgICAgICAgXG4gICAgICAgIC8vIERpcmVjdGx5IG1ha2UgdGhlIGluaXRpYWwgY291bnRkb3duIHZpc2libGUgYnkgdXBkYXRpbmcgc3RhdGVcbiAgICAgICAgc2V0Q291bnRkb3duVmFsdWUoMyk7XG4gICAgICAgIFxuICAgICAgICAvLyBVc2UgYSBzbWFsbCB0aW1lb3V0IHRvIGVuc3VyZSB0aGUgVUkgdXBkYXRlcyBiZWZvcmUgc3RhcnRpbmcgdGhlIGNvdW50ZG93blxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAvLyBTdGFydCBjb3VudGRvd24gYW5kIGNhcHR1cmVcbiAgICAgICAgICBzdGFydENvdW50ZG93bigzLCBjYXB0dXJlSW1hZ2UpO1xuICAgICAgICB9LCA1MCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ2FudmFzIHJlZmVyZW5jZSBpcyBudWxsIC0gY2Fubm90IGRyYXcgZG90XCIpOyAvLyBEZWJ1ZyBsb2dnaW5nXG4gICAgICAgIHNldFByb2Nlc3NTdGF0dXMoJ0Vycm9yOiBDYW52YXMgbm90IGF2YWlsYWJsZScpO1xuICAgICAgICBpZiAob25TdGF0dXNVcGRhdGUpIHtcbiAgICAgICAgICBvblN0YXR1c1VwZGF0ZSh7XG4gICAgICAgICAgICBwcm9jZXNzU3RhdHVzOiAnRXJyb3I6IENhbnZhcyBub3QgYXZhaWxhYmxlJyxcbiAgICAgICAgICAgIGlzQ2FwdHVyaW5nOiBmYWxzZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHNldElzQ2FwdHVyaW5nKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9LCAyMDApOyAvLyBHaXZlIGEgYml0IG1vcmUgdGltZSBmb3IgdGhlIGNhbnZhcyB0byBiZSByZWFkeVxuICB9O1xuICBcbiAgLy8gTXVsdGlwbGUgcmFuZG9tIGRvdHMgc2VxdWVuY2VcbiAgY29uc3QgaGFuZGxlU2V0UmFuZG9tID0gKCkgPT4ge1xuICAgIGlmIChpc0NhcHR1cmluZykgcmV0dXJuO1xuICAgIFxuICAgIC8vIFBhcnNlIGlucHV0IHZhbHVlcyAodXNlIGRlZmF1bHRzIGlmIGludmFsaWQpXG4gICAgY29uc3QgdGltZXMgPSBwYXJzZUludChyYW5kb21UaW1lcykgfHwgMTtcbiAgICBjb25zdCBkZWxheSA9IHBhcnNlSW50KGRlbGF5U2Vjb25kcykgfHwgMztcbiAgICBcbiAgICBpZiAodGltZXMgPD0gMCB8fCBkZWxheSA8PSAwKSB7XG4gICAgICBzZXRQcm9jZXNzU3RhdHVzKCdQbGVhc2UgdXNlIHBvc2l0aXZlIHZhbHVlcyBmb3IgdGltZXMgYW5kIGRlbGF5Jyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIHNldElzQ2FwdHVyaW5nKHRydWUpO1xuICAgIHNldFJlbWFpbmluZ0NhcHR1cmVzKHRpbWVzKTtcbiAgICBzZXRQcm9jZXNzU3RhdHVzKGBTdGFydGluZyAke3RpbWVzfSByYW5kb20gY2FwdHVyZXMuLi5gKTtcbiAgICBcbiAgICAvLyBTdGFydCBzZXF1ZW5jZVxuICAgIHNjaGVkdWxlUmFuZG9tQ2FwdHVyZXModGltZXMsIHRpbWVzLCBkZWxheSk7XG4gIH07XG4gIFxuICAvLyBTY2hlZHVsZSBzZXF1ZW5jZSBvZiByYW5kb20gY2FwdHVyZXNcbiAgY29uc3Qgc2NoZWR1bGVSYW5kb21DYXB0dXJlcyA9IChyZW1haW5pbmcsIHRvdGFsLCBkZWxheSkgPT4ge1xuICAgIGlmIChyZW1haW5pbmcgPD0gMCkge1xuICAgICAgc2V0SXNDYXB0dXJpbmcoZmFsc2UpO1xuICAgICAgc2V0UmVtYWluaW5nQ2FwdHVyZXMoMCk7XG4gICAgICBzZXRQcm9jZXNzU3RhdHVzKCdSYW5kb20gY2FwdHVyZSBzZXF1ZW5jZSBjb21wbGV0ZWQnKTtcbiAgICAgIFxuICAgICAgLy8gQ2xlYXIgc3RhdHVzIGFmdGVyIGEgZGVsYXlcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzZXRQcm9jZXNzU3RhdHVzKCcnKTtcbiAgICAgIH0sIDIwMDApO1xuICAgICAgXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIHNldFJlbWFpbmluZ0NhcHR1cmVzKHJlbWFpbmluZyk7XG4gICAgc2V0UHJvY2Vzc1N0YXR1cyhgQ2FwdHVyZSAke3RvdGFsIC0gcmVtYWluaW5nICsgMX0gb2YgJHt0b3RhbH1gKTtcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSByYW5kb20gcG9zaXRpb24gYW5kIGRyYXdcbiAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJhbmRvbVBvc2l0aW9uKCk7XG4gICAgZHJhd0RvdChwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcbiAgICBcbiAgICAvLyBTdGFydCBjb3VudGRvd24gYW5kIGNhcHR1cmVcbiAgICBzdGFydENvdW50ZG93bigzLCAoKSA9PiB7XG4gICAgICBjYXB0dXJlSW1hZ2UoKTtcbiAgICAgIFxuICAgICAgLy8gU2NoZWR1bGUgbmV4dCBjYXB0dXJlXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc2NoZWR1bGVSYW5kb21DYXB0dXJlcyhyZW1haW5pbmcgLSAxLCB0b3RhbCwgZGVsYXkpO1xuICAgICAgfSwgZGVsYXkgKiAxMDAwKTtcbiAgICB9KTtcbiAgfTtcbiAgXG4gIC8vIEdlbmVyYXRlIGNhbGlicmF0aW9uIHBvaW50c1xuICBjb25zdCBnZW5lcmF0ZUNhbGlicmF0aW9uUG9pbnRzID0gKCkgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IGFjdGl2ZUNhbnZhc1JlZi5jdXJyZW50O1xuICAgIGlmICghY2FudmFzKSByZXR1cm4gW107XG4gICAgXG4gICAgY29uc3Qgd2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgY29uc3QgaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcbiAgICBcbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gZm9yIHJvdW5kaW5nXG4gICAgY29uc3QgY29uZGl0aW9uYWxSb3VuZCA9IChkaW1lbnNpb24sIHBlcmNlbnRhZ2UpID0+IHtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKGRpbWVuc2lvbiAqIHBlcmNlbnRhZ2UpO1xuICAgIH07XG4gICAgXG4gICAgY29uc3QgZmlyc3RGcmFtZVBlcmNlbnRhZ2UgPSAwLjEyO1xuICAgIGNvbnN0IHNlY29uZEZyYW1lUGVyY2VudGFnZSA9IDAuMjY7XG4gICAgXG4gICAgLy8gQ2FsY3VsYXRlIHBvaW50cyAob3V0ZXIgYW5kIGlubmVyIGZyYW1lKVxuICAgIGNvbnN0IHhMZWZ0Rmlyc3QgPSBjb25kaXRpb25hbFJvdW5kKHdpZHRoLCBmaXJzdEZyYW1lUGVyY2VudGFnZSk7XG4gICAgY29uc3QgeFJpZ2h0Rmlyc3QgPSB3aWR0aCAtIGNvbmRpdGlvbmFsUm91bmQod2lkdGgsIGZpcnN0RnJhbWVQZXJjZW50YWdlKTtcbiAgICBjb25zdCB5VG9wRmlyc3QgPSBjb25kaXRpb25hbFJvdW5kKGhlaWdodCwgZmlyc3RGcmFtZVBlcmNlbnRhZ2UpO1xuICAgIGNvbnN0IHlCb3R0b21GaXJzdCA9IGhlaWdodCAtIGNvbmRpdGlvbmFsUm91bmQoaGVpZ2h0LCBmaXJzdEZyYW1lUGVyY2VudGFnZSk7XG4gICAgXG4gICAgY29uc3QgeExlZnRTZWNvbmQgPSBjb25kaXRpb25hbFJvdW5kKHdpZHRoLCBzZWNvbmRGcmFtZVBlcmNlbnRhZ2UpO1xuICAgIGNvbnN0IHhSaWdodFNlY29uZCA9IHdpZHRoIC0gY29uZGl0aW9uYWxSb3VuZCh3aWR0aCwgc2Vjb25kRnJhbWVQZXJjZW50YWdlKTtcbiAgICBjb25zdCB5VG9wU2Vjb25kID0gY29uZGl0aW9uYWxSb3VuZChoZWlnaHQsIHNlY29uZEZyYW1lUGVyY2VudGFnZSk7XG4gICAgY29uc3QgeUJvdHRvbVNlY29uZCA9IGhlaWdodCAtIGNvbmRpdGlvbmFsUm91bmQoaGVpZ2h0LCBzZWNvbmRGcmFtZVBlcmNlbnRhZ2UpO1xuICAgIFxuICAgIC8vIFJldHVybiBhcnJheSBvZiBwb2ludHMgaW4gc2VxdWVuY2VcbiAgICByZXR1cm4gW1xuICAgICAgLy8gRmlyc3QgZnJhbWUgLSBvdXRlciBwb2ludHNcbiAgICAgIHsgeDogeExlZnRGaXJzdCwgeTogeVRvcEZpcnN0IH0sXG4gICAgICB7IHg6IE1hdGguZmxvb3Iod2lkdGggLyAyKSwgeTogeVRvcEZpcnN0IH0sXG4gICAgICB7IHg6IHhSaWdodEZpcnN0LCB5OiB5VG9wRmlyc3QgfSxcbiAgICAgIHsgeDogeExlZnRGaXJzdCwgeTogTWF0aC5mbG9vcihoZWlnaHQgLyAyKSB9LFxuICAgICAgeyB4OiB4UmlnaHRGaXJzdCwgeTogTWF0aC5mbG9vcihoZWlnaHQgLyAyKSB9LFxuICAgICAgeyB4OiB4TGVmdEZpcnN0LCB5OiB5Qm90dG9tRmlyc3QgfSxcbiAgICAgIHsgeDogTWF0aC5mbG9vcih3aWR0aCAvIDIpLCB5OiB5Qm90dG9tRmlyc3QgfSxcbiAgICAgIHsgeDogeFJpZ2h0Rmlyc3QsIHk6IHlCb3R0b21GaXJzdCB9LFxuICAgICAgXG4gICAgICAvLyBTZWNvbmQgZnJhbWUgLSBpbm5lciBwb2ludHNcbiAgICAgIHsgeDogeExlZnRTZWNvbmQsIHk6IHlUb3BTZWNvbmQgfSxcbiAgICAgIHsgeDogTWF0aC5mbG9vcih3aWR0aCAvIDIpLCB5OiB5VG9wU2Vjb25kIH0sXG4gICAgICB7IHg6IHhSaWdodFNlY29uZCwgeTogeVRvcFNlY29uZCB9LFxuICAgICAgeyB4OiB4TGVmdFNlY29uZCwgeTogTWF0aC5mbG9vcihoZWlnaHQgLyAyKSB9LFxuICAgICAgeyB4OiB4UmlnaHRTZWNvbmQsIHk6IE1hdGguZmxvb3IoaGVpZ2h0IC8gMikgfSxcbiAgICAgIHsgeDogeExlZnRTZWNvbmQsIHk6IHlCb3R0b21TZWNvbmQgfSxcbiAgICAgIHsgeDogTWF0aC5mbG9vcih3aWR0aCAvIDIpLCB5OiB5Qm90dG9tU2Vjb25kIH0sXG4gICAgICB7IHg6IHhSaWdodFNlY29uZCwgeTogeUJvdHRvbVNlY29uZCB9XG4gICAgXTtcbiAgfTtcbiAgXG4gIC8vIEhhbmRsZSBjYWxpYnJhdGlvbiBzZXF1ZW5jZVxuICBjb25zdCBoYW5kbGVTZXRDYWxpYnJhdGUgPSAoKSA9PiB7XG4gICAgaWYgKGlzQ2FwdHVyaW5nKSByZXR1cm47XG4gICAgXG4gICAgLy8gR2VuZXJhdGUgY2FsaWJyYXRpb24gcG9pbnRzXG4gICAgY29uc3QgcG9pbnRzID0gZ2VuZXJhdGVDYWxpYnJhdGlvblBvaW50cygpO1xuICAgIGlmIChwb2ludHMubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZXRQcm9jZXNzU3RhdHVzKCdGYWlsZWQgdG8gZ2VuZXJhdGUgY2FsaWJyYXRpb24gcG9pbnRzJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIHNldENhbGlicmF0aW9uUG9pbnRzKHBvaW50cyk7XG4gICAgc2V0Q3VycmVudENhbGlicmF0aW9uSW5kZXgoMCk7XG4gICAgc2V0SXNDYXB0dXJpbmcodHJ1ZSk7XG4gICAgc2V0UmVtYWluaW5nQ2FwdHVyZXMocG9pbnRzLmxlbmd0aCk7XG4gICAgc2V0UHJvY2Vzc1N0YXR1cyhgQ2FsaWJyYXRpb24gMS8ke3BvaW50cy5sZW5ndGh9YCk7XG4gICAgXG4gICAgLy8gRHJhdyBmaXJzdCBwb2ludCBhbmQgc3RhcnRcbiAgICBjb25zdCBmaXJzdFBvaW50ID0gcG9pbnRzWzBdO1xuICAgIGRyYXdEb3QoZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkpO1xuICAgIFxuICAgIC8vIFN0YXJ0IGNvdW50ZG93biBmb3IgZmlyc3QgcG9pbnRcbiAgICBzdGFydENvdW50ZG93bigzLCAoKSA9PiB7XG4gICAgICBjYXB0dXJlSW1hZ2UoKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gbW92ZVRvTmV4dENhbGlicmF0aW9uUG9pbnQoKSwgMTAwMCk7XG4gICAgfSk7XG4gIH07XG4gIFxuICAvLyBNb3ZlIHRvIG5leHQgY2FsaWJyYXRpb24gcG9pbnRcbiAgY29uc3QgbW92ZVRvTmV4dENhbGlicmF0aW9uUG9pbnQgPSAoKSA9PiB7XG4gICAgY29uc3QgbmV4dEluZGV4ID0gY3VycmVudENhbGlicmF0aW9uSW5kZXggKyAxO1xuICAgIFxuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGRvbmVcbiAgICBpZiAobmV4dEluZGV4ID49IGNhbGlicmF0aW9uUG9pbnRzLmxlbmd0aCkge1xuICAgICAgc2V0SXNDYXB0dXJpbmcoZmFsc2UpO1xuICAgICAgc2V0UmVtYWluaW5nQ2FwdHVyZXMoMCk7XG4gICAgICBzZXRQcm9jZXNzU3RhdHVzKCdDYWxpYnJhdGlvbiBjb21wbGV0ZWQnKTtcbiAgICAgIFxuICAgICAgLy8gQ2xlYXIgc3RhdHVzIGFmdGVyIGEgZGVsYXlcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzZXRQcm9jZXNzU3RhdHVzKCcnKTtcbiAgICAgIH0sIDIwMDApO1xuICAgICAgXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vIFVwZGF0ZSBzdGF0ZSBhbmQgcHJvZ3Jlc3NcbiAgICBzZXRDdXJyZW50Q2FsaWJyYXRpb25JbmRleChuZXh0SW5kZXgpO1xuICAgIHNldFJlbWFpbmluZ0NhcHR1cmVzKGNhbGlicmF0aW9uUG9pbnRzLmxlbmd0aCAtIG5leHRJbmRleCk7XG4gICAgc2V0UHJvY2Vzc1N0YXR1cyhgQ2FsaWJyYXRpb24gJHtuZXh0SW5kZXggKyAxfS8ke2NhbGlicmF0aW9uUG9pbnRzLmxlbmd0aH1gKTtcbiAgICBcbiAgICAvLyBEcmF3IG5leHQgcG9pbnRcbiAgICBjb25zdCBuZXh0UG9pbnQgPSBjYWxpYnJhdGlvblBvaW50c1tuZXh0SW5kZXhdO1xuICAgIGRyYXdEb3QobmV4dFBvaW50LngsIG5leHRQb2ludC55KTtcbiAgICBcbiAgICAvLyBTdGFydCBjb3VudGRvd24gZm9yIHRoaXMgcG9pbnRcbiAgICBzdGFydENvdW50ZG93bigzLCAoKSA9PiB7XG4gICAgICBjYXB0dXJlSW1hZ2UoKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gbW92ZVRvTmV4dENhbGlicmF0aW9uUG9pbnQoKSwgMTAwMCk7XG4gICAgfSk7XG4gIH07XG4gIFxuICAvLyBNYXAgYnV0dG9uIGNsaWNrcyB0byBhcHByb3ByaWF0ZSBoYW5kbGVyc1xuICBjb25zdCBoYW5kbGVTY3JlZW5BY3Rpb24gPSAoYWN0aW9uVHlwZSkgPT4ge1xuICAgIHN3aXRjaChhY3Rpb25UeXBlKSB7XG4gICAgICBjYXNlICdyYW5kb21Eb3QnOlxuICAgICAgICBoYW5kbGVSYW5kb21Eb3QoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzZXRSYW5kb20nOlxuICAgICAgICBoYW5kbGVTZXRSYW5kb20oKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdjYWxpYnJhdGUnOlxuICAgICAgICBoYW5kbGVTZXRDYWxpYnJhdGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdjbGVhckFsbCc6XG4gICAgICAgIGNsZWFyQ2FudmFzKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gRm9yd2FyZCB0byBwYXJlbnQgaWYgbm90IGhhbmRsZWQgaGVyZVxuICAgICAgICBpZiAob25CdXR0b25DbGljaykge1xuICAgICAgICAgIG9uQnV0dG9uQ2xpY2soYWN0aW9uVHlwZSk7XG4gICAgICAgIH1cbiAgICB9XG4gIH07XG4gIFxuICAvLyBQYXNzIGFjdGlvbnMgdXAgdG8gcGFyZW50IGNvbXBvbmVudFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFNraXAgZHVyaW5nIFNTUlxuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgIFxuICAgIGlmIChvbkJ1dHRvbkNsaWNrKSB7XG4gICAgICAvLyBDcmVhdGUgYWN0aW9uIGhhbmRsZXJzXG4gICAgICBjb25zdCBhY3Rpb25IYW5kbGVycyA9IHtcbiAgICAgICAgcmFuZG9tRG90OiBoYW5kbGVSYW5kb21Eb3QsXG4gICAgICAgIHNldFJhbmRvbTogaGFuZGxlU2V0UmFuZG9tLFxuICAgICAgICBjYWxpYnJhdGU6IGhhbmRsZVNldENhbGlicmF0ZSxcbiAgICAgICAgY2xlYXJBbGw6IGNsZWFyQ2FudmFzXG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBTdG9yZSBpbiBwYXJlbnQgY29tcG9uZW50IGNvbnRleHRcbiAgICAgIG9uQnV0dG9uQ2xpY2soJ3JlZ2lzdGVyQWN0aW9ucycsIGFjdGlvbkhhbmRsZXJzKTtcbiAgICB9XG4gIH0sIFtvbkJ1dHRvbkNsaWNrXSk7XG4gIFxuICAvLyBVcGRhdGUgcGFyZW50IHdpdGggc3RhdHVzIGNoYW5nZXNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAob25TdGF0dXNVcGRhdGUgJiYgcHJvY2Vzc1N0YXR1cykge1xuICAgICAgb25TdGF0dXNVcGRhdGUocHJvY2Vzc1N0YXR1cyk7XG4gICAgfVxuICB9LCBbcHJvY2Vzc1N0YXR1cywgb25TdGF0dXNVcGRhdGVdKTtcbiAgXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ3aGl0ZS1zY3JlZW4tY29udGFpbmVyXCIgc3R5bGU9e3sgXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB6SW5kZXg6IDUwIC8vIEFkZCBhIHotaW5kZXggdG8gZW5zdXJlIGl0J3MgYWJvdmUgb3RoZXIgZWxlbWVudHNcbiAgICB9fT5cbiAgICAgIHsvKiBXaGl0ZSBzY3JlZW4gY2FudmFzIC0gTWFrZSBpdCBjb3ZlciB0aGUgZW50aXJlIGNvbnRhaW5lciAqL31cbiAgICAgIDxkaXYgXG4gICAgICAgIGNsYXNzTmFtZT1cIndoaXRlLXNjcmVlbi1jYW52YXMtY29udGFpbmVyXCJcbiAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICNlZWUnLCAvLyBBZGQgYSBzdWJ0bGUgYm9yZGVyIHRvIHNlZSBpZiBpdCdzIHZpc2libGVcbiAgICAgICAgICB6SW5kZXg6IDUxXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIHsvKiBDYW52YXMgLSBBbHdheXMgcmVuZGVyIGl0ICovfVxuICAgICAgICA8Y2FudmFzXG4gICAgICAgICAgcmVmPXtjYW52YXNSZWYgPyBjYW52YXNSZWYgOiBpbnRlcm5hbENhbnZhc1JlZn1cbiAgICAgICAgICBjbGFzc05hbWU9XCJ3aGl0ZS1zY3JlZW4tY2FudmFzXCJcbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICAgIFxuICAgICAgICB7LyogT3ZlcmxheSBmb3IgY291bnRkb3duIG5lYXIgZG90ICovfVxuICAgICAgICB7Y291bnRkb3duVmFsdWUgJiYgY3VycmVudERvdCAmJiAoXG4gICAgICAgICAgPGRpdiBcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImRvdC1jb3VudGRvd25cIlxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgIGxlZnQ6IGAke2N1cnJlbnREb3QueCAtIDE1fXB4YCxcbiAgICAgICAgICAgICAgdG9wOiBgJHtjdXJyZW50RG90LnkgLSA0MH1weGAsXG4gICAgICAgICAgICAgIGNvbG9yOiAncmVkJyxcbiAgICAgICAgICAgICAgZm9udFNpemU6ICcyOHB4JyxcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICAgICAgICB0ZXh0U2hhZG93OiAnMCAwIDVweCB3aGl0ZScsXG4gICAgICAgICAgICAgIHpJbmRleDogNTJcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge2NvdW50ZG93blZhbHVlfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgICBcbiAgICAgICAgey8qIFN0YXR1cyBvdmVybGF5ICovfVxuICAgICAgICB7KHByb2Nlc3NTdGF0dXMgfHwgcmVtYWluaW5nQ2FwdHVyZXMgPiAwKSAmJiAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwic3RhdHVzLW92ZXJsYXlcIlxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgIGJvdHRvbTogJzEwcHgnLFxuICAgICAgICAgICAgICBsZWZ0OiAnMTBweCcsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC44KScsXG4gICAgICAgICAgICAgIHBhZGRpbmc6ICc1cHggMTBweCcsXG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4gICAgICAgICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgICAgICAgIGJveFNoYWRvdzogJzAgMnB4IDRweCByZ2JhKDAsMCwwLDAuMSknLFxuICAgICAgICAgICAgICB6SW5kZXg6IDUzXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtwcm9jZXNzU3RhdHVzICYmIDxkaXY+e3Byb2Nlc3NTdGF0dXN9PC9kaXY+fVxuICAgICAgICAgICAge3JlbWFpbmluZ0NhcHR1cmVzID4gMCAmJiAoXG4gICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgY29sb3I6ICcjZjU3YzAwJyB9fT5cbiAgICAgICAgICAgICAgICBSZW1haW5pbmc6IHtyZW1haW5pbmdDYXB0dXJlc31cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG4vLyBFeHBvcnQgYSBkeW5hbWljIHZlcnNpb24gd2l0aCBTU1IgZGlzYWJsZWQgdG8gYXZvaWQgdXNlTGF5b3V0RWZmZWN0IHdhcm5pbmdzXG5leHBvcnQgZGVmYXVsdCBkeW5hbWljKCgpID0+IFByb21pc2UucmVzb2x2ZShXaGl0ZVNjcmVlbk1haW4pLCB7IHNzcjogZmFsc2UgfSk7Il0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJkeW5hbWljIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsIldoaXRlU2NyZWVuTWFpbiIsIm9uU3RhdHVzVXBkYXRlIiwidHJpZ2dlckNhbWVyYUFjY2VzcyIsIm9uQnV0dG9uQ2xpY2siLCJjYW52YXNSZWYiLCJ0b2dnbGVUb3BCYXIiLCJpbnRlcm5hbENhbnZhc1JlZiIsImFjdGl2ZUNhbnZhc1JlZiIsImN1cnJlbnREb3QiLCJzZXRDdXJyZW50RG90IiwiaXNDYXB0dXJpbmciLCJzZXRJc0NhcHR1cmluZyIsImNvdW50ZG93blZhbHVlIiwic2V0Q291bnRkb3duVmFsdWUiLCJyZW1haW5pbmdDYXB0dXJlcyIsInNldFJlbWFpbmluZ0NhcHR1cmVzIiwicHJvY2Vzc1N0YXR1cyIsInNldFByb2Nlc3NTdGF0dXMiLCJjYXB0dXJlQ291bnRlciIsInNldENhcHR1cmVDb3VudGVyIiwiY2FwdHVyZUZvbGRlciIsInNldENhcHR1cmVGb2xkZXIiLCJyYW5kb21UaW1lcyIsInNldFJhbmRvbVRpbWVzIiwiZGVsYXlTZWNvbmRzIiwic2V0RGVsYXlTZWNvbmRzIiwiY2FsaWJyYXRpb25Qb2ludHMiLCJzZXRDYWxpYnJhdGlvblBvaW50cyIsImN1cnJlbnRDYWxpYnJhdGlvbkluZGV4Iiwic2V0Q3VycmVudENhbGlicmF0aW9uSW5kZXgiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJyZXBsYWNlIiwiY2FudmFzIiwiY3VycmVudCIsInVwZGF0ZURpbWVuc2lvbnMiLCJwYXJlbnQiLCJwYXJlbnRFbGVtZW50Iiwid2lkdGgiLCJjbGllbnRXaWR0aCIsImhlaWdodCIsImNsaWVudEhlaWdodCIsImN0eCIsImdldENvbnRleHQiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImRyYXdEb3QiLCJ4IiwieSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZ2V0UmFuZG9tUG9zaXRpb24iLCJwYWRkaW5nIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY29sb3IiLCJyYWRpdXMiLCJjbGVhclJlY3QiLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsImZpbGwiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsInN0cm9rZSIsImNsZWFyQ2FudmFzIiwic2V0VGltZW91dCIsInN0YXJ0Q291bnRkb3duIiwiY291bnQiLCJvbkNvbXBsZXRlIiwidGltZXIiLCJjbGVhclRpbWVvdXQiLCJkaXYiLCJjbGFzc05hbWUiLCJzdHlsZSIsInBvc2l0aW9uIiwibGVmdCIsInRvcCIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsInRleHRTaGFkb3ciLCJ6SW5kZXgiLCJzYXZlSW1hZ2VUb1NlcnZlciIsImltYWdlRGF0YSIsImZpbGVuYW1lIiwidHlwZSIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmb2xkZXIiLCJvayIsIkVycm9yIiwic3RhdHVzIiwicmVzdWx0IiwianNvbiIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImNhcHR1cmVJbWFnZSIsIlByb21pc2UiLCJyZXNvbHZlIiwic2NyZWVuRmlsZW5hbWUiLCJTdHJpbmciLCJwYWRTdGFydCIsIndlYmNhbUZpbGVuYW1lIiwic2NyZWVuSW1hZ2UiLCJ0b0RhdGFVUkwiLCJ2aWRlb0VsZW1lbnQiLCJ0ZW1wQ2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwidmlkZW9XaWR0aCIsInZpZGVvSGVpZ2h0IiwiZHJhd0ltYWdlIiwid2ViY2FtSW1hZ2UiLCJwcmV2IiwibWVzc2FnZSIsImhhbmRsZVJhbmRvbURvdCIsImhhbmRsZVNldFJhbmRvbSIsInRpbWVzIiwicGFyc2VJbnQiLCJkZWxheSIsInNjaGVkdWxlUmFuZG9tQ2FwdHVyZXMiLCJyZW1haW5pbmciLCJ0b3RhbCIsImdlbmVyYXRlQ2FsaWJyYXRpb25Qb2ludHMiLCJjb25kaXRpb25hbFJvdW5kIiwiZGltZW5zaW9uIiwicGVyY2VudGFnZSIsInJvdW5kIiwiZmlyc3RGcmFtZVBlcmNlbnRhZ2UiLCJzZWNvbmRGcmFtZVBlcmNlbnRhZ2UiLCJ4TGVmdEZpcnN0IiwieFJpZ2h0Rmlyc3QiLCJ5VG9wRmlyc3QiLCJ5Qm90dG9tRmlyc3QiLCJ4TGVmdFNlY29uZCIsInhSaWdodFNlY29uZCIsInlUb3BTZWNvbmQiLCJ5Qm90dG9tU2Vjb25kIiwiaGFuZGxlU2V0Q2FsaWJyYXRlIiwicG9pbnRzIiwibGVuZ3RoIiwiZmlyc3RQb2ludCIsIm1vdmVUb05leHRDYWxpYnJhdGlvblBvaW50IiwibmV4dEluZGV4IiwibmV4dFBvaW50IiwiaGFuZGxlU2NyZWVuQWN0aW9uIiwiYWN0aW9uVHlwZSIsImFjdGlvbkhhbmRsZXJzIiwicmFuZG9tRG90Iiwic2V0UmFuZG9tIiwiY2FsaWJyYXRlIiwiY2xlYXJBbGwiLCJiYWNrZ3JvdW5kQ29sb3IiLCJvdmVyZmxvdyIsImJvcmRlciIsInJlZiIsImRpc3BsYXkiLCJib3R0b20iLCJib3JkZXJSYWRpdXMiLCJib3hTaGFkb3ciLCJzc3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/collected-dataset/components-gui/WhiteScreenMain.js\n"));

/***/ })

});
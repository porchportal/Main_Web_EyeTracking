"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/process_set",{

/***/ "(pages-dir-browser)/./pages/process_set/processApi.js":
/*!*****************************************!*\
  !*** ./pages/process_set/processApi.js ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkBackendConnection: () => (/* binding */ checkBackendConnection),\n/* harmony export */   checkFilesCompleteness: () => (/* binding */ checkFilesCompleteness),\n/* harmony export */   checkProcessingStatus: () => (/* binding */ checkProcessingStatus),\n/* harmony export */   compareFileCounts: () => (/* binding */ compareFileCounts),\n/* harmony export */   getFilesList: () => (/* binding */ getFilesList),\n/* harmony export */   previewFile: () => (/* binding */ previewFile),\n/* harmony export */   processFiles: () => (/* binding */ processFiles)\n/* harmony export */ });\n// pages/process_set/processApi.js - API functions for process_set\n// Check if the backend is connected\nconst checkBackendConnection = async ()=>{\n    try {\n        const response = await fetch('/api/check-backend-connection');\n        const data = await response.json();\n        return {\n            success: true,\n            connected: data.connected\n        };\n    } catch (error) {\n        console.error('Error checking backend connection:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Get list of files from both capture and enhance folders\nconst getFilesList = async ()=>{\n    try {\n        // Make sure we're using the correct API endpoint\n        const response = await fetch('/api/file-api?operation=list');\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error getting files list:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Check file completeness (if webcam, screen, and parameter files exist for each set)\nconst checkFilesCompleteness = async ()=>{\n    try {\n        const response = await fetch('/api/file-api?operation=check-completeness');\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error checking files completeness:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Preview a specific file\nconst previewFile = async (filename)=>{\n    try {\n        const response = await fetch(\"/api/preview-api?filename=\".concat(encodeURIComponent(filename)));\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error previewing file:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Process files - trigger the processing\nconst processFiles = async (setNumbers)=>{\n    try {\n        const response = await fetch('/api/process-status-api', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                setNumbers\n            })\n        });\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error processing files:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Compare files between capture and enhance folders\nconst compareFileCounts = async ()=>{\n    try {\n        const response = await fetch('/api/file-api?operation=compare');\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error comparing file counts:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Check if processing is currently running\n// In processApi.js\nconst checkProcessingStatus = async ()=>{\n    try {\n        console.log('Requesting processing status...');\n        const response = await fetch('/api/process-status-api');\n        // Log the raw response\n        console.log('Status code:', response.status);\n        // Try to get the text first to see if it's valid JSON\n        const text = await response.text();\n        console.log('Raw response:', text);\n        // Now try to parse as JSON\n        let data;\n        try {\n            data = JSON.parse(text);\n            console.log('Parsed JSON data:', data);\n        } catch (parseError) {\n            console.error('JSON parse error:', parseError);\n            return {\n                success: false,\n                error: \"Failed to parse response as JSON: \".concat(parseError.message)\n            };\n        }\n        return data;\n    } catch (error) {\n        console.error('Error checking processing status:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/process_set/processApi.js\n"));

/***/ })

});
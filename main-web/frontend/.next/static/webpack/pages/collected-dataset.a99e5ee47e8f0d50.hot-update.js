"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/collected-dataset",{

/***/ "(pages-dir-browser)/./pages/collected-dataset/components-gui/Helper/savefile.js":
/*!*******************************************************************!*\
  !*** ./pages/collected-dataset/components-gui/Helper/savefile.js ***!
  \*******************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   captureImagesAtPoint: () => (/* binding */ captureImagesAtPoint),\n/* harmony export */   saveCSVToServer: () => (/* binding */ saveCSVToServer),\n/* harmony export */   saveImageToServer: () => (/* binding */ saveImageToServer)\n/* harmony export */ });\n// savefile.js\n// Centralized saving logic for screen, webcam, and parameter files\nconst saveImageToServer = async function(imageData, filename, type) {\n    let folder = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 'eye_tracking_captures';\n    try {\n        const response = await fetch('/api/save-capture', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                imageData,\n                filename,\n                type,\n                folder\n            })\n        });\n        const result = await response.json();\n        console.log(\"\".concat(type, \" save result:\"), result);\n        return result;\n    } catch (error) {\n        console.error(\"Error saving \".concat(type, \" image:\"), error);\n        return null;\n    }\n};\nconst saveCSVToServer = async function(csvData, filename) {\n    let folder = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'eye_tracking_captures';\n    try {\n        const csvBlob = new Blob([\n            csvData\n        ], {\n            type: 'text/csv'\n        });\n        const reader = new FileReader();\n        const csvDataUrl = await new Promise((resolve)=>{\n            reader.onloadend = ()=>resolve(reader.result);\n            reader.readAsDataURL(csvBlob);\n        });\n        const response = await fetch('/api/save-capture', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                imageData: csvDataUrl,\n                filename,\n                type: 'parameters',\n                folder\n            })\n        });\n        const result = await response.json();\n        console.log('CSV save result:', result);\n        return result;\n    } catch (error) {\n        console.error('Error saving CSV:', error);\n        return null;\n    }\n};\nconst captureImagesAtPoint = async (param)=>{\n    let { point, captureCount, canvasRef, setCaptureCount, showCapturePreview } = param;\n    try {\n        const counter = String(captureCount).padStart(3, '0');\n        const screenFilename = \"screen_\".concat(counter, \".jpg\");\n        const webcamFilename = \"webcam_\".concat(counter, \".jpg\");\n        const parameterFilename = \"parameter_\".concat(counter, \".csv\");\n        const folder = 'eye_tracking_captures';\n        const canvas = canvasRef.current;\n        let screenImage = null;\n        let webcamImage = null;\n        if (canvas) {\n            screenImage = canvas.toDataURL('image/png');\n            await saveImageToServer(screenImage, screenFilename, 'screen', folder);\n        }\n        const videoElement = window.videoElement || document.querySelector('video');\n        if (videoElement) {\n            const tempCanvas = document.createElement('canvas');\n            tempCanvas.width = videoElement.videoWidth || 640;\n            tempCanvas.height = videoElement.videoHeight || 480;\n            tempCanvas.getContext('2d').drawImage(videoElement, 0, 0);\n            webcamImage = tempCanvas.toDataURL('image/png');\n            await saveImageToServer(webcamImage, webcamFilename, 'webcam', folder);\n        } else {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({\n                    video: true\n                });\n                const tempVideo = document.createElement('video');\n                tempVideo.srcObject = stream;\n                tempVideo.muted = true;\n                tempVideo.playsInline = true;\n                document.body.appendChild(tempVideo);\n                await tempVideo.play();\n                await new Promise((res)=>setTimeout(res, 300));\n                const tempCanvas = document.createElement('canvas');\n                tempCanvas.width = tempVideo.videoWidth;\n                tempCanvas.height = tempVideo.videoHeight;\n                tempCanvas.getContext('2d').drawImage(tempVideo, 0, 0);\n                webcamImage = tempCanvas.toDataURL('image/png');\n                await saveImageToServer(webcamImage, webcamFilename, 'webcam', folder);\n                stream.getTracks().forEach((t)=>t.stop());\n                tempVideo.remove();\n            } catch (err) {\n                console.warn(\"Fallback webcam capture failed:\", err);\n            }\n        }\n        const csvData = [\n            \"name,value\",\n            \"dot_x,\".concat(point.x),\n            \"dot_y,\".concat(point.y),\n            \"canvas_width,\".concat((canvas === null || canvas === void 0 ? void 0 : canvas.width) || 0),\n            \"canvas_height,\".concat((canvas === null || canvas === void 0 ? void 0 : canvas.height) || 0),\n            \"window_width,\".concat(window.innerWidth),\n            \"window_height,\".concat(window.innerHeight),\n            // `calibration_point_label,${point.label || ''}`,\n            \"timestamp,\".concat(new Date().toISOString())\n        ].join('\\n');\n        await saveCSVToServer(csvData, parameterFilename, folder);\n        // Only increment the counter AFTER all files have been successfully saved\n        if (setCaptureCount) {\n            setCaptureCount((prev)=>prev + 1);\n        }\n        // Show the preview AFTER saving everything\n        if (showCapturePreview && typeof showCapturePreview === 'function') {\n            showCapturePreview(screenImage, webcamImage, point);\n        }\n        return {\n            screenImage: screenImage || (canvas === null || canvas === void 0 ? void 0 : canvas.toDataURL('image/png')),\n            webcamImage: webcamImage || null,\n            success: true,\n            point\n        };\n    } catch (err) {\n        console.error(\"captureImagesAtPoint failed:\", err);\n        return {\n            success: false,\n            error: err.message,\n            screenImage: null,\n            webcamImage: null\n        };\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/collected-dataset/components-gui/Helper/savefile.js\n"));

/***/ })

});
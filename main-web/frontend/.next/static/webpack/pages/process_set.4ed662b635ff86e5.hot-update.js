"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/process_set",{

/***/ "(pages-dir-browser)/./pages/process_set/index.js":
/*!************************************!*\
  !*** ./pages/process_set/index.js ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ProcessSet)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/head */ \"(pages-dir-browser)/./node_modules/next/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/router */ \"(pages-dir-browser)/./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../styles/ProcessSet.module.css */ \"(pages-dir-browser)/./styles/ProcessSet.module.css\");\n/* harmony import */ var _styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _NotificationMessage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./NotificationMessage */ \"(pages-dir-browser)/./pages/process_set/NotificationMessage.js\");\n/* harmony import */ var _processApi__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./processApi */ \"(pages-dir-browser)/./pages/process_set/processApi.js\");\n/* harmony import */ var _ProcessSetUI__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ProcessSetUI */ \"(pages-dir-browser)/./pages/process_set/ProcessSetUI.js\");\n// pages/process_set/index.js\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n// Import API functions\n\n// Import UI components\n\nfunction ProcessSet() {\n    _s();\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    const [isProcessReady, setIsProcessReady] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(false);\n    const [mounted, setMounted] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(false);\n    const [backendConnected, setBackendConnected] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(false);\n    const [files, setFiles] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)({\n        capture: [],\n        enhance: []\n    });\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(false);\n    const [notification, setNotification] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)({\n        show: false,\n        message: '',\n        type: ''\n    });\n    const [selectedFile, setSelectedFile] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null);\n    const [previewImageData, setPreviewImageData] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null);\n    const [isProcessing, setIsProcessing] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(false);\n    const [processingStatus, setProcessingStatus] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null);\n    const [progressData, setProgressData] = (0,react__WEBPACK_IMPORTED_MODULE_4__.useState)(null);\n    const [showNotification, NotificationComponent] = (0,_NotificationMessage__WEBPACK_IMPORTED_MODULE_5__.useNotification)();\n    // Initialize component on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)({\n        \"ProcessSet.useEffect\": ()=>{\n            setMounted(true);\n            initializeComponent();\n            // Set up interval to check processing status - reduced from 10s to 30s\n            const statusInterval = setInterval(checkProcessingNeeded, 30000);\n            // Clean up interval on unmount\n            return ({\n                \"ProcessSet.useEffect\": ()=>clearInterval(statusInterval)\n            })[\"ProcessSet.useEffect\"];\n        }\n    }[\"ProcessSet.useEffect\"], []);\n    // Initialize component by checking backend connection and files\n    const initializeComponent = async ()=>{\n        await checkConnection();\n        if (backendConnected) {\n            await handleCheckFiles();\n            await checkProcessingNeeded();\n        }\n    };\n    // Check backend connection\n    const checkConnection = async ()=>{\n        setLoading(true);\n        const result = await (0,_processApi__WEBPACK_IMPORTED_MODULE_6__.checkBackendConnection)();\n        if (result.success && result.connected) {\n            setBackendConnected(true);\n        } else {\n            showNotification('Cannot connect to backend server', 'error');\n            setBackendConnected(false);\n        }\n        setLoading(false);\n    };\n    // Check if processing is needed\n    const checkProcessingNeeded = async ()=>{\n        try {\n            // First check file completeness\n            const completenessResult = await (0,_processApi__WEBPACK_IMPORTED_MODULE_6__.checkFilesCompleteness)();\n            if (!completenessResult.success) {\n                showNotification('Error checking file completeness: ' + completenessResult.error, 'error');\n                return;\n            }\n            // Then check if processing is needed\n            const result = await (0,_processApi__WEBPACK_IMPORTED_MODULE_6__.checkFilesNeedProcessing)();\n            if (result.success) {\n                setIsProcessReady(result.needsProcessing);\n                setProcessingStatus({\n                    captureCount: result.captureCount,\n                    enhanceCount: result.enhanceCount\n                });\n            }\n        } catch (error) {\n            console.error('Error checking processing status:', error);\n            showNotification('Error checking processing status: ' + error.message, 'error');\n        }\n    };\n    // Handle check files button click\n    const handleCheckFiles = async ()=>{\n        if (!backendConnected) {\n            await checkConnection();\n            if (!backendConnected) return;\n        }\n        setLoading(true);\n        // Get files list\n        const filesResult = await (0,_processApi__WEBPACK_IMPORTED_MODULE_6__.getFilesList)();\n        if (filesResult.success) {\n            setFiles(filesResult.files);\n            // Check file completeness\n            const completenessResult = await (0,_processApi__WEBPACK_IMPORTED_MODULE_6__.checkFilesCompleteness)();\n            if (completenessResult.success) {\n                if (completenessResult.isComplete) {\n                    showNotification('All file sets are complete', 'success');\n                } else {\n                    showNotification(\"Warning: \".concat(completenessResult.missingFiles, \" files are missing from sets\"), 'info');\n                }\n            }\n            // Check if processing is needed\n            const processingResult = await (0,_processApi__WEBPACK_IMPORTED_MODULE_6__.checkFilesNeedProcessing)();\n            if (processingResult.success) {\n                // Update isProcessReady state based on needsProcessing\n                setIsProcessReady(processingResult.needsProcessing);\n                if (processingResult.needsProcessing) {\n                    showNotification(\"\".concat(processingResult.filesToProcess - 1, \" sets need processing\"), 'info');\n                } else {\n                    showNotification('All sets are processed', 'success');\n                }\n            }\n        } else {\n            showNotification('Error loading files: ' + (filesResult.error || 'Unknown error'), 'error');\n        }\n        setLoading(false);\n    };\n    // Handle file preview\n    const handleFileSelect = async (filename)=>{\n        // console.log('File selected:', filename);\n        setSelectedFile(filename);\n        setPreviewImageData(null);\n        const result = await (0,_processApi__WEBPACK_IMPORTED_MODULE_6__.previewFile)(filename);\n        // console.log('Preview API result:', result);\n        if (result.success) {\n            // console.log('Setting preview data:', { data: result.data, type: result.type });\n            setPreviewImageData({\n                data: result.data,\n                type: result.type\n            });\n        } else {\n            console.error('Preview API error:', result.error);\n            showNotification('Error loading preview: ' + (result.error || 'Unknown error'), 'error');\n        }\n    };\n    // Handle process files button click\n    const handleProcessFiles = async ()=>{\n        if (!isProcessReady) {\n            showNotification('No files need processing', 'info');\n            return;\n        }\n        if (isProcessing) {\n            showNotification('Processing is already in progress', 'info');\n            return;\n        }\n        setIsProcessing(true);\n        showNotification('Processing started...', 'info');\n        try {\n            // Get the last file number from enhance folder\n            const enhanceFiles = files.enhance || [];\n            const lastEnhanceNumber = enhanceFiles.length > 0 ? Math.max(...enhanceFiles.map((file)=>{\n                const match = file.filename.match(/_(\\d+)\\./);\n                return match ? parseInt(match[1]) : 0;\n            })) : 0;\n            // Get all capture files that need processing\n            const captureFiles = files.capture || [];\n            const filesToProcess = captureFiles.filter((file)=>{\n                const match = file.filename.match(/_(\\d+)\\./);\n                if (!match) return false;\n                const fileNumber = parseInt(match[1]);\n                return fileNumber > lastEnhanceNumber;\n            }).sort((a, b)=>{\n                const numA = parseInt(a.filename.match(/_(\\d+)\\./)[1]);\n                const numB = parseInt(b.filename.match(/_(\\d+)\\./)[1]);\n                return numA - numB;\n            });\n            if (filesToProcess.length === 0) {\n                showNotification('No files need processing', 'info');\n                setIsProcessing(false);\n                setProgressData(null);\n                return;\n            }\n            // Initialize progress data\n            setProgressData({\n                currentSet: 0,\n                totalSets: filesToProcess.length,\n                processedSets: [],\n                currentFile: '',\n                progress: 0,\n                status: 'processing',\n                message: 'Starting processing...'\n            });\n            // Get set numbers to process\n            const set_numbers = filesToProcess.map((file)=>{\n                const match = file.filename.match(/_(\\d+)\\./);\n                return match ? parseInt(match[1]) : 0;\n            }).filter((num)=>num > 0);\n            // Generate a unique user ID\n            const user_id = \"user_\".concat(Date.now());\n            try {\n                // Send processing request to backend\n                const response = await fetch('/api/queue-processing', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        user_id,\n                        set_numbers\n                    })\n                });\n                if (!response.ok) {\n                    throw new Error('Failed to start processing');\n                }\n                // Start reading the stream\n                const reader = response.body.getReader();\n                const decoder = new TextDecoder();\n                let buffer = '';\n                while(true){\n                    const { done, value } = await reader.read();\n                    if (done) break;\n                    buffer += decoder.decode(value, {\n                        stream: true\n                    });\n                    const lines = buffer.split('\\n');\n                    buffer = lines.pop() || ''; // Keep the last incomplete line in the buffer\n                    for (const line of lines){\n                        if (!line.trim()) continue;\n                        try {\n                            const data = JSON.parse(line);\n                            console.log('Received processing update:', data);\n                            // Update progress data with the backend-provided progress\n                            setProgressData((prev)=>{\n                                if (!prev) return prev;\n                                const newProcessedSets = [\n                                    ...prev.processedSets\n                                ];\n                                if (data.status === 'processing' && !newProcessedSets.includes(data.currentSet)) {\n                                    newProcessedSets.push(data.currentSet);\n                                }\n                                return {\n                                    ...prev,\n                                    currentSet: data.currentSet || prev.currentSet,\n                                    currentFile: data.currentFile || prev.currentFile,\n                                    processedSets: newProcessedSets,\n                                    progress: data.progress || Math.round(newProcessedSets.length / prev.totalSets * 100),\n                                    status: data.status || prev.status,\n                                    message: data.message || prev.message\n                                };\n                            });\n                            // Show notifications for important updates\n                            if (data.status === 'warning') {\n                                showNotification(data.message, 'warning');\n                            } else if (data.status === 'error') {\n                                showNotification(data.message, 'error');\n                                setIsProcessing(false);\n                                setProgressData(null);\n                            } else if (data.status === 'completed') {\n                                showNotification('Processing completed successfully', 'success');\n                                setIsProcessing(false);\n                                setProgressData(null);\n                                // Refresh the files list after completion\n                                await handleCheckFiles();\n                            }\n                        } catch (error) {\n                            console.error('Error parsing update:', error);\n                        }\n                    }\n                }\n            } catch (error) {\n                console.error('Error during processing:', error);\n                showNotification(error.message || 'Error during processing', 'error');\n                setIsProcessing(false);\n                setProgressData(null);\n            }\n        } catch (error) {\n            console.error('Error in processing loop:', error);\n            showNotification(\"Error: \".concat(error.message), 'error');\n            setIsProcessing(false);\n            setProgressData(null);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: (_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default().container),\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_head__WEBPACK_IMPORTED_MODULE_1___default()), {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"title\", {\n                        children: \"Process Image Folder | Eye Tracking App\"\n                    }, void 0, false, {\n                        fileName: \"/app/pages/process_set/index.js\",\n                        lineNumber: 330,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"meta\", {\n                        name: \"description\",\n                        content: \"Process image folder for eye tracking\"\n                    }, void 0, false, {\n                        fileName: \"/app/pages/process_set/index.js\",\n                        lineNumber: 331,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"link\", {\n                        rel: \"icon\",\n                        href: \"/favicon.ico\"\n                    }, void 0, false, {\n                        fileName: \"/app/pages/process_set/index.js\",\n                        lineNumber: 332,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/app/pages/process_set/index.js\",\n                lineNumber: 329,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n                className: (_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default().main),\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                        className: (_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default().title),\n                        children: \"Process Image Folder\"\n                    }, void 0, false, {\n                        fileName: \"/app/pages/process_set/index.js\",\n                        lineNumber: 336,\n                        columnNumber: 9\n                    }, this),\n                    NotificationComponent,\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: (_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default().statusDisplay),\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: (_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default().statusIndicator),\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        children: \"Backend Connection:\"\n                                    }, void 0, false, {\n                                        fileName: \"/app/pages/process_set/index.js\",\n                                        lineNumber: 344,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: backendConnected ? (_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default().statusConnected) : (_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default().statusDisconnected),\n                                        children: backendConnected ? 'Connected' : 'Disconnected'\n                                    }, void 0, false, {\n                                        fileName: \"/app/pages/process_set/index.js\",\n                                        lineNumber: 345,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/app/pages/process_set/index.js\",\n                                lineNumber: 343,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: (_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default().statusIndicator),\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        children: \"Processing Status:\"\n                                    }, void 0, false, {\n                                        fileName: \"/app/pages/process_set/index.js\",\n                                        lineNumber: 351,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                        className: isProcessReady ? (_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default().statusReady) : (_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default().statusNotReady),\n                                        children: isProcessReady ? 'Ready' : 'Not Ready'\n                                    }, void 0, false, {\n                                        fileName: \"/app/pages/process_set/index.js\",\n                                        lineNumber: 352,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/app/pages/process_set/index.js\",\n                                lineNumber: 350,\n                                columnNumber: 11\n                            }, this),\n                            isProcessing && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: (_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default().statusIndicator),\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: (_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default().processingIndicator),\n                                    children: \"Processing in progress...\"\n                                }, void 0, false, {\n                                    fileName: \"/app/pages/process_set/index.js\",\n                                    lineNumber: 359,\n                                    columnNumber: 15\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/app/pages/process_set/index.js\",\n                                lineNumber: 358,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/app/pages/process_set/index.js\",\n                        lineNumber: 342,\n                        columnNumber: 9\n                    }, this),\n                    isProcessing && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ProcessSetUI__WEBPACK_IMPORTED_MODULE_7__.ProcessingProgress, {\n                        isProcessing: isProcessing,\n                        progressData: progressData\n                    }, void 0, false, {\n                        fileName: \"/app/pages/process_set/index.js\",\n                        lineNumber: 368,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: (_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default().processingContainer),\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: (_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default().leftPanel),\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ProcessSetUI__WEBPACK_IMPORTED_MODULE_7__.FileList, {\n                                        files: files,\n                                        onFileSelect: handleFileSelect,\n                                        isLoading: loading\n                                    }, void 0, false, {\n                                        fileName: \"/app/pages/process_set/index.js\",\n                                        lineNumber: 376,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ProcessSetUI__WEBPACK_IMPORTED_MODULE_7__.ProcessSummary, {\n                                        files: files\n                                    }, void 0, false, {\n                                        fileName: \"/app/pages/process_set/index.js\",\n                                        lineNumber: 382,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/app/pages/process_set/index.js\",\n                                lineNumber: 375,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: (_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default().rightPanel),\n                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ProcessSetUI__WEBPACK_IMPORTED_MODULE_7__.FilePreviewPanel, {\n                                    selectedFile: selectedFile,\n                                    previewImage: previewImageData === null || previewImageData === void 0 ? void 0 : previewImageData.data,\n                                    previewType: previewImageData === null || previewImageData === void 0 ? void 0 : previewImageData.type\n                                }, void 0, false, {\n                                    fileName: \"/app/pages/process_set/index.js\",\n                                    lineNumber: 386,\n                                    columnNumber: 13\n                                }, this)\n                            }, void 0, false, {\n                                fileName: \"/app/pages/process_set/index.js\",\n                                lineNumber: 385,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/app/pages/process_set/index.js\",\n                        lineNumber: 374,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_ProcessSetUI__WEBPACK_IMPORTED_MODULE_7__.ActionButtons, {\n                        onCheckFiles: handleCheckFiles,\n                        onProcessFiles: handleProcessFiles,\n                        isProcessReady: isProcessReady,\n                        isProcessing: isProcessing\n                    }, void 0, false, {\n                        fileName: \"/app/pages/process_set/index.js\",\n                        lineNumber: 394,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: (_styles_ProcessSet_module_css__WEBPACK_IMPORTED_MODULE_3___default().backButton),\n                        onClick: ()=>router.push('/'),\n                        children: \"Back to Home\"\n                    }, void 0, false, {\n                        fileName: \"/app/pages/process_set/index.js\",\n                        lineNumber: 401,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/app/pages/process_set/index.js\",\n                lineNumber: 335,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/app/pages/process_set/index.js\",\n        lineNumber: 328,\n        columnNumber: 5\n    }, this);\n}\n_s(ProcessSet, \"Ce6H7XQPF2g9yVjIa/s3eb6FlbY=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter,\n        _NotificationMessage__WEBPACK_IMPORTED_MODULE_5__.useNotification\n    ];\n});\n_c = ProcessSet;\nvar _c;\n$RefreshReg$(_c, \"ProcessSet\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/process_set/index.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./pages/process_set/processApi.js":
/*!*****************************************!*\
  !*** ./pages/process_set/processApi.js ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkBackendConnection: () => (/* binding */ checkBackendConnection),\n/* harmony export */   checkFilesCompleteness: () => (/* binding */ checkFilesCompleteness),\n/* harmony export */   checkFilesNeedProcessing: () => (/* binding */ checkFilesNeedProcessing),\n/* harmony export */   checkProcessingStatus: () => (/* binding */ checkProcessingStatus),\n/* harmony export */   compareFileCounts: () => (/* binding */ compareFileCounts),\n/* harmony export */   \"default\": () => (/* binding */ ProcessApiPage),\n/* harmony export */   getFilesList: () => (/* binding */ getFilesList),\n/* harmony export */   previewFile: () => (/* binding */ previewFile),\n/* harmony export */   processFiles: () => (/* binding */ processFiles)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(pages-dir-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// pages/process_set/processApi.js - API functions for process_set with improved connection handling\n// Utility function for making API requests with retry and better error handling\nconst fetchWithRetry = async function(url) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, retries = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 2;\n    let lastError;\n    // Get API key from environment variable\n    const apiKey = \"A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV\" || 0;\n    // Get backend URL from environment variable\n    const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || '';\n    // Ensure URL is absolute\n    const absoluteUrl = url.startsWith('http') ? url : \"\".concat(backendUrl).concat(url);\n    for(let i = 0; i <= retries; i++){\n        try {\n            console.log(\"Fetching \".concat(absoluteUrl).concat(i > 0 ? \" (retry \".concat(i, \"/\").concat(retries, \")\") : ''));\n            const controller = new AbortController();\n            const timeout = setTimeout(()=>controller.abort(), 8000); // 8 second timeout\n            const response = await fetch(absoluteUrl, {\n                ...options,\n                signal: controller.signal,\n                headers: {\n                    ...options.headers,\n                    'Content-Type': 'application/json',\n                    'X-API-Key': apiKey\n                }\n            });\n            clearTimeout(timeout);\n            // Check for response errors\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"API error (\".concat(response.status, \"):\"), errorText);\n                // Special handling for 401 (Unauthorized)\n                if (response.status === 401) {\n                    throw new Error('Invalid API key. Please check your configuration.');\n                }\n                throw new Error(\"API returned \".concat(response.status, \": \").concat(errorText || response.statusText));\n            }\n            // Try to parse JSON response\n            try {\n                const data = await response.json();\n                return data;\n            } catch (parseError) {\n                console.error('JSON parse error:', parseError);\n                throw new Error(\"Failed to parse response: \".concat(parseError.message));\n            }\n        } catch (error) {\n            console.error(\"Fetch error (attempt \".concat(i + 1, \"/\").concat(retries + 1, \"):\"), error);\n            lastError = error;\n            // If this was an abort error (timeout), log it specifically\n            if (error.name === 'AbortError') {\n                console.error('Request timed out');\n            }\n            // If we have retries left, wait before trying again\n            if (i < retries) {\n                const delay = 1000 * Math.pow(2, i); // Exponential backoff: 1s, 2s, 4s, etc.\n                // console.log(`Waiting ${delay}ms before retry...`);\n                await new Promise((resolve)=>setTimeout(resolve, delay));\n            }\n        }\n    }\n    // If we got here, all retries failed\n    throw lastError;\n};\n// API configuration\nconst API_BASE_URL = \"http://backend:8000\" || 0;\nconst API_KEY = \"A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV\";\n// Check if the backend is connected\nconst checkBackendConnection = async ()=>{\n    try {\n        // console.log('Checking backend connection...');\n        const response = await fetchWithRetry('/api/check-backend-connection');\n        // console.log('Backend connection response:', response);\n        return {\n            success: true,\n            connected: response.connected || false,\n            status: response.status || 'unknown'\n        };\n    } catch (error) {\n        console.error('Backend connection check failed:', error);\n        return {\n            success: false,\n            connected: false,\n            error: error.message,\n            status: 'error'\n        };\n    }\n};\n// Get list of files from both capture and enhance folders\nconst getFilesList = async ()=>{\n    try {\n        const response = await fetchWithRetry('/api/for-process-folder/file-api?operation=list');\n        if (!response.success) {\n            throw new Error(response.message || 'Failed to get files list');\n        }\n        // Organize files into capture and enhance arrays\n        const organizedFiles = {\n            capture: [],\n            enhance: []\n        };\n        if (response.files && response.files.capture && response.files.enhance) {\n            organizedFiles.capture = response.files.capture.map((filename)=>({\n                    filename,\n                    path: \"/captures/eye_tracking_captures/\".concat(filename),\n                    file_type: filename.split('.').pop(),\n                    size: 0 // Size will be updated when file is accessed\n                }));\n            organizedFiles.enhance = response.files.enhance.map((filename)=>({\n                    filename,\n                    path: \"/captures/enhance/\".concat(filename),\n                    file_type: filename.split('.').pop(),\n                    size: 0 // Size will be updated when file is accessed\n                }));\n        }\n        return {\n            success: true,\n            files: organizedFiles,\n            message: response.message || 'Files retrieved successfully'\n        };\n    } catch (error) {\n        console.error('Error getting files list:', error);\n        return {\n            success: false,\n            error: error.message,\n            message: 'Failed to get files list',\n            files: {\n                capture: [],\n                enhance: []\n            }\n        };\n    }\n};\n// Check file completeness (if webcam, screen, and parameter files exist for each set)\nconst checkFilesCompleteness = async ()=>{\n    try {\n        const response = await fetch('/api/for-process-folder/file-api?operation=check-completeness');\n        const data = await response.json();\n        if (!data.success) {\n            throw new Error(data.error || 'Failed to check files');\n        }\n        return {\n            success: true,\n            isComplete: data.isComplete,\n            missingFiles: data.missingFiles,\n            totalFiles: data.totalSets,\n            incompleteSets: data.incompleteSets || []\n        };\n    } catch (error) {\n        console.error('Error checking files completeness:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Preview a specific file\nconst previewFile = async (filename)=>{\n    try {\n        // console.log('Fetching preview for file:', filename);\n        const response = await fetchWithRetry(\"/api/preview-api?filename=\".concat(encodeURIComponent(filename)));\n        // console.log('Raw preview response:', response);\n        // Check if response has the expected format\n        if (!response || typeof response !== 'object') {\n            throw new Error('Invalid response format from preview API');\n        }\n        if (!response.success) {\n            throw new Error(response.message || 'Failed to get preview');\n        }\n        return {\n            success: true,\n            data: response.data,\n            type: response.type,\n            message: response.message\n        };\n    } catch (error) {\n        console.error('Error previewing file:', error);\n        return {\n            success: false,\n            error: error.message,\n            message: 'Failed to get preview'\n        };\n    }\n};\n// Check if files need processing\nconst checkFilesNeedProcessing = async ()=>{\n    try {\n        const response = await fetchWithRetry('/api/file-api?operation=list');\n        if (!response.success) {\n            throw new Error(response.message || 'Failed to get files list');\n        }\n        // Get unique set numbers from each folder\n        const captureSets = new Set();\n        const enhanceSets = new Set();\n        if (response.files && Array.isArray(response.files)) {\n            response.files.forEach((file)=>{\n                const match = file.filename.match(/_(\\d+)\\./);\n                if (match) {\n                    const setNumber = parseInt(match[1]);\n                    if (file.path.includes('eye_tracking_captures')) {\n                        captureSets.add(setNumber);\n                    } else if (file.path.includes('enhance')) {\n                        enhanceSets.add(setNumber);\n                    }\n                }\n            });\n        }\n        const captureCount = captureSets.size;\n        const enhanceCount = enhanceSets.size;\n        const needsProcessing = captureCount > enhanceCount;\n        const filesToProcess = captureCount - enhanceCount;\n        return {\n            success: true,\n            needsProcessing,\n            captureCount,\n            enhanceCount,\n            filesToProcess\n        };\n    } catch (error) {\n        console.error('Error checking files:', error);\n        return {\n            success: false,\n            error: error.message,\n            needsProcessing: false,\n            captureCount: 0,\n            enhanceCount: 0,\n            filesToProcess: 0\n        };\n    }\n};\n// Process files\nconst processFiles = async (setNumbers)=>{\n    try {\n        // console.log('Starting processing for sets:', setNumbers);\n        const response = await fetchWithRetry('/api/process-images', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                set_numbers: setNumbers\n            })\n        });\n        if (!response.success) {\n            throw new Error(response.message || 'Failed to start processing');\n        }\n        return {\n            success: true,\n            message: response.message\n        };\n    } catch (error) {\n        console.error('Error processing files:', error);\n        return {\n            success: false,\n            error: error.message,\n            message: 'Failed to process files'\n        };\n    }\n};\n// Compare files between capture and enhance folders\nconst compareFileCounts = async ()=>{\n    try {\n        const response = await fetchWithRetry('/api/file-api?operation=compare');\n        if (!response.success) {\n            throw new Error(response.message || 'Failed to compare file counts');\n        }\n        return {\n            success: true,\n            captureCount: response.captureCount,\n            enhanceCount: response.enhanceCount,\n            needsProcessing: response.needsProcessing\n        };\n    } catch (error) {\n        console.error('Error comparing file counts:', error);\n        return {\n            success: false,\n            error: error.message,\n            captureCount: 0,\n            enhanceCount: 0,\n            needsProcessing: false\n        };\n    }\n};\n// Check if processing is currently running\nconst checkProcessingStatus = async ()=>{\n    try {\n        // console.log('Requesting processing status...');\n        const response = await fetchWithRetry('/api/process-status-api', {}, 1); // Only 1 retry for status checks\n        // If fetch succeeded but response is malformed, handle it gracefully\n        if (!response || typeof response !== 'object') {\n            console.error('Invalid response format:', response);\n            return {\n                success: false,\n                error: \"Invalid response format: \".concat(typeof response),\n                isProcessing: false\n            };\n        }\n        return response;\n    } catch (error) {\n        console.error('Error checking processing status:', error);\n        return {\n            success: false,\n            error: error.message,\n            isProcessing: false\n        };\n    }\n};\n// Add default export component\nfunction ProcessApiPage() {\n    return null; // This is a utility file, so we don't need to render anything\n}\n_c = ProcessApiPage;\nvar _c;\n$RefreshReg$(_c, \"ProcessApiPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/process_set/processApi.js\n"));

/***/ })

});
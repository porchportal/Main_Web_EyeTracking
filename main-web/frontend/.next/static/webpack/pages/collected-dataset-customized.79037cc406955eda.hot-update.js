"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/collected-dataset-customized",{

/***/ "(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/actionButton.js":
/*!***************************************************************************!*\
  !*** ./pages/collected-dataset-customized/components-gui/actionButton.js ***!
  \***************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionButton: () => (/* binding */ ActionButton),\n/* harmony export */   ActionButtonGroup: () => (/* binding */ ActionButtonGroup),\n/* harmony export */   \"default\": () => (/* binding */ ActionButtonPage)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dynamic */ \"(pages-dir-browser)/./node_modules/next/dynamic.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _components_collected_dataset_customized_Action_CalibratePoints__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../components/collected-dataset-customized/Action/CalibratePoints */ \"(pages-dir-browser)/./components/collected-dataset-customized/Action/CalibratePoints.js\");\n/* harmony import */ var _components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../components/collected-dataset-customized/Action/countSave */ \"(pages-dir-browser)/./components/collected-dataset-customized/Action/countSave.js\");\n/* harmony import */ var _components_collected_dataset_customized_Helper_savefile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../components/collected-dataset-customized/Helper/savefile */ \"(pages-dir-browser)/./components/collected-dataset-customized/Helper/savefile.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/router */ \"(pages-dir-browser)/./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _adminSettings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./adminSettings */ \"(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/adminSettings.js\");\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n// Add deep comparison utility\nconst isEqual = (obj1, obj2)=>{\n    if (obj1 === obj2) return true;\n    if (typeof obj1 !== 'object' || typeof obj2 !== 'object') return false;\n    if (obj1 === null || obj2 === null) return false;\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) return false;\n    return keys1.every((key)=>keys2.includes(key) && isEqual(obj1[key], obj2[key]));\n};\n// Create a basic ActionButton component with optimization\nconst ActionButton = (param)=>{\n    let { text, abbreviatedText, onClick, customClass = '', disabled = false, active = false } = param;\n    _s();\n    const [isAbbreviated, setIsAbbreviated] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const { settings } = (0,_adminSettings__WEBPACK_IMPORTED_MODULE_7__.useAdminSettings)();\n    const [currentUserId, setCurrentUserId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('default');\n    const [isCapturing, setIsCapturing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [captureCounter, setCaptureCounter] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [processStatus, setProcessStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    // Memoize button props to prevent unnecessary re-renders\n    const buttonProps = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"ActionButton.useMemo[buttonProps]\": ()=>({\n                className: \"action-button \".concat(customClass, \" \").concat(isAbbreviated ? 'abbreviated' : '', \" \").concat(active ? 'active' : ''),\n                onClick,\n                disabled,\n                title: text\n            })\n    }[\"ActionButton.useMemo[buttonProps]\"], [\n        customClass,\n        isAbbreviated,\n        active,\n        onClick,\n        disabled,\n        text\n    ]);\n    // Check window size and set abbreviated mode with debounce\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButton.useEffect\": ()=>{\n            if (false) {}\n            let timeoutId;\n            const handleResize = {\n                \"ActionButton.useEffect.handleResize\": ()=>{\n                    clearTimeout(timeoutId);\n                    timeoutId = setTimeout({\n                        \"ActionButton.useEffect.handleResize\": ()=>{\n                            const width = window.innerWidth;\n                            setIsAbbreviated(width < 768);\n                        }\n                    }[\"ActionButton.useEffect.handleResize\"], 100);\n                }\n            }[\"ActionButton.useEffect.handleResize\"];\n            window.addEventListener('resize', handleResize);\n            handleResize(); // Initial call\n            return ({\n                \"ActionButton.useEffect\": ()=>{\n                    window.removeEventListener('resize', handleResize);\n                    clearTimeout(timeoutId);\n                }\n            })[\"ActionButton.useEffect\"];\n        }\n    }[\"ActionButton.useEffect\"], []);\n    // Add effect to listen for user ID changes with optimization\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButton.useEffect\": ()=>{\n            const handleUserIdChange = {\n                \"ActionButton.useEffect.handleUserIdChange\": (event)=>{\n                    if (event.detail && event.detail.type === 'userIdChange') {\n                        const newUserId = event.detail.userId;\n                        if (newUserId !== currentUserId) {\n                            setCurrentUserId(newUserId);\n                        }\n                    }\n                }\n            }[\"ActionButton.useEffect.handleUserIdChange\"];\n            window.addEventListener('userIdChange', handleUserIdChange);\n            return ({\n                \"ActionButton.useEffect\": ()=>{\n                    window.removeEventListener('userIdChange', handleUserIdChange);\n                }\n            })[\"ActionButton.useEffect\"];\n        }\n    }[\"ActionButton.useEffect\"], [\n        currentUserId\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n        ...buttonProps,\n        children: [\n            isAbbreviated ? abbreviatedText : text,\n            processStatus && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"process-status\",\n                children: processStatus\n            }, void 0, false, {\n                fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                lineNumber: 91,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n        lineNumber: 88,\n        columnNumber: 5\n    }, undefined);\n};\n_s(ActionButton, \"Nkz1GO/Uf3mvhA1uh+EhQBsi9aE=\", false, function() {\n    return [\n        _adminSettings__WEBPACK_IMPORTED_MODULE_7__.useAdminSettings\n    ];\n});\n_c = ActionButton;\n// Create the ActionButtonGroup component with client-side only rendering and optimization\nconst ActionButtonGroupInner = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(_s1((param, ref)=>{\n    let { triggerCameraAccess, isCompactMode, onActionClick } = param;\n    _s1();\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_6__.useRouter)();\n    const { settings, updateSettings } = (0,_adminSettings__WEBPACK_IMPORTED_MODULE_7__.useAdminSettings)(ref);\n    // State for button actions\n    const [randomTimes, setRandomTimes] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [delaySeconds, setDelaySeconds] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(3);\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [processStatus, setProcessStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [countdownValue, setCountdownValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [currentDot, setCurrentDot] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [calibrationPoints, setCalibrationPoints] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [remainingCaptures, setRemainingCaptures] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [showCanvas, setShowCanvas] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    // Track the capture count\n    const [calibrationHandler, setCalibrationHandler] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [captureCount, setCaptureCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [isCapturing, setIsCapturing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Toggle states\n    const [showHeadPose, setShowHeadPose] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showBoundingBox, setShowBoundingBox] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showMask, setShowMask] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showParameters, setShowParameters] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isCameraActive, setIsCameraActive] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showPermissionPopup, setShowPermissionPopup] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [currentUserId, setCurrentUserId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('default');\n    // Add cache for settings\n    const settingsCache = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const lastSettingsUpdate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    // Optimize settings updates\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            if (settings && currentUserId && settings[currentUserId]) {\n                const userSettings = settings[currentUserId];\n                const cachedSettings = settingsCache.current.get(currentUserId);\n                if (!isEqual(cachedSettings, userSettings)) {\n                    setRandomTimes(Number(userSettings.times_set_random) || 1);\n                    setDelaySeconds(Number(userSettings.delay_set_random) || 3);\n                    settingsCache.current.set(currentUserId, userSettings);\n                    lastSettingsUpdate.current.set(currentUserId, Date.now());\n                }\n            }\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], [\n        settings,\n        currentUserId\n    ]);\n    // Listen for user ID changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            const handleUserIdChange = {\n                \"ActionButtonGroupInner.useEffect.handleUserIdChange\": (event)=>{\n                    if (event.detail && event.detail.type === 'userIdChange') {\n                        const newUserId = event.detail.userId;\n                        setCurrentUserId(newUserId);\n                        // Update settings for new user\n                        if (settings && settings[newUserId]) {\n                            const userSettings = settings[newUserId];\n                            setRandomTimes(Number(userSettings.times_set_random) || 1);\n                            setDelaySeconds(Number(userSettings.delay_set_random) || 3);\n                        }\n                    }\n                }\n            }[\"ActionButtonGroupInner.useEffect.handleUserIdChange\"];\n            window.addEventListener('userIdChange', handleUserIdChange);\n            return ({\n                \"ActionButtonGroupInner.useEffect\": ()=>{\n                    window.removeEventListener('userIdChange', handleUserIdChange);\n                }\n            })[\"ActionButtonGroupInner.useEffect\"];\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], [\n        settings\n    ]);\n    // Listen for settings updates\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            const handleSettingsUpdate = {\n                \"ActionButtonGroupInner.useEffect.handleSettingsUpdate\": (event)=>{\n                    if (event.detail && event.detail.type === 'captureSettings') {\n                        const { userId, times_set_random, delay_set_random } = event.detail;\n                        if (userId === currentUserId) {\n                            if (times_set_random !== undefined) {\n                                const newTimes = Number(times_set_random) || 1;\n                                setRandomTimes(newTimes);\n                            }\n                            if (delay_set_random !== undefined) {\n                                const newDelay = Number(delay_set_random) || 3;\n                                setDelaySeconds(newDelay);\n                            }\n                        }\n                    }\n                }\n            }[\"ActionButtonGroupInner.useEffect.handleSettingsUpdate\"];\n            window.addEventListener('captureSettingsUpdate', handleSettingsUpdate);\n            return ({\n                \"ActionButtonGroupInner.useEffect\": ()=>{\n                    window.removeEventListener('captureSettingsUpdate', handleSettingsUpdate);\n                }\n            })[\"ActionButtonGroupInner.useEffect\"];\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], [\n        currentUserId\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            // Make functions globally accessible as a fallback\n            if (true) {\n                window.actionButtonFunctions = {\n                    handleRandomDot,\n                    handleSetRandom,\n                    handleSetCalibrate,\n                    handleClearAll\n                };\n            // console.log('Action button functions exposed to window.actionButtonFunctions');\n            }\n            return ({\n                \"ActionButtonGroupInner.useEffect\": ()=>{\n                    if (true) {\n                        delete window.actionButtonFunctions;\n                    }\n                }\n            })[\"ActionButtonGroupInner.useEffect\"];\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            // Only initialize if canvas doesn't exist\n            if (!document.querySelector('#tracking-canvas')) {\n                const canvas = getMainCanvas();\n                console.log('Canvas initialized:', canvas ? 'success' : 'failed');\n            }\n            // Cleanup function\n            return ({\n                \"ActionButtonGroupInner.useEffect\": ()=>{\n                    // Don't remove canvas on cleanup to prevent recreation issues\n                    console.log('ActionButton cleanup - canvas preserved');\n                }\n            })[\"ActionButtonGroupInner.useEffect\"];\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            if (false) {}\n            // Function to get control values from TopBar\n            const updateControlValues = {\n                \"ActionButtonGroupInner.useEffect.updateControlValues\": ()=>{\n                    // Get the time input element\n                    const timeInput = document.querySelector('.control-input-field[data-control=\"time\"]');\n                    if (timeInput) {\n                        const timeValue = parseInt(timeInput.value, 10);\n                        if (!isNaN(timeValue) && timeValue > 0) {\n                            console.log('Updating randomTimes to:', timeValue);\n                            setRandomTimes(timeValue);\n                        }\n                    }\n                    // Get the delay input element\n                    const delayInput = document.querySelector('.control-input-field[data-control=\"delay\"]');\n                    if (delayInput) {\n                        const delayValue = parseInt(delayInput.value, 10);\n                        if (!isNaN(delayValue) && delayValue > 0) {\n                            console.log('Updating delaySeconds to:', delayValue);\n                            setDelaySeconds(delayValue);\n                        }\n                    }\n                }\n            }[\"ActionButtonGroupInner.useEffect.updateControlValues\"];\n            // Add event listeners to the control inputs\n            const timeInput = document.querySelector('.control-input-field[data-control=\"time\"]');\n            const delayInput = document.querySelector('.control-input-field[data-control=\"delay\"]');\n            if (timeInput) {\n                timeInput.addEventListener('change', updateControlValues);\n                timeInput.addEventListener('input', updateControlValues); // Also listen for input events\n            }\n            if (delayInput) {\n                delayInput.addEventListener('change', updateControlValues);\n                delayInput.addEventListener('input', updateControlValues); // Also listen for input events\n            }\n            // Initial update\n            updateControlValues();\n            // Cleanup event listeners\n            return ({\n                \"ActionButtonGroupInner.useEffect\": ()=>{\n                    if (timeInput) {\n                        timeInput.removeEventListener('change', updateControlValues);\n                        timeInput.removeEventListener('input', updateControlValues);\n                    }\n                    if (delayInput) {\n                        delayInput.removeEventListener('change', updateControlValues);\n                        delayInput.removeEventListener('input', updateControlValues);\n                    }\n                }\n            })[\"ActionButtonGroupInner.useEffect\"];\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], []);\n    // Initialize canvas on component mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            const initializeCanvas = {\n                \"ActionButtonGroupInner.useEffect.initializeCanvas\": ()=>{\n                    // Remove any existing canvas\n                    const existingCanvas = document.querySelector('.tracking-canvas');\n                    if (existingCanvas) {\n                        existingCanvas.remove();\n                    }\n                    // Create new canvas\n                    const canvas = document.createElement('canvas');\n                    canvas.className = 'tracking-canvas';\n                    canvas.id = 'tracking-canvas';\n                    canvas.style.cssText = \"\\n        position: fixed;\\n        top: 0;\\n        left: 0;\\n        width: 100vw;\\n        height: 100vh;\\n        opacity: 0;\\n        pointer-events: none;\\n        z-index: 5;\\n      \";\n                    // Set canvas dimensions\n                    canvas.width = window.innerWidth;\n                    canvas.height = window.innerHeight;\n                    // Add canvas to body\n                    document.body.appendChild(canvas);\n                    // Store reference\n                    canvasRef.current = canvas;\n                    if (true) {\n                        window.whiteScreenCanvas = canvas;\n                    }\n                    // Initialize with white background\n                    const ctx = canvas.getContext('2d');\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(0, 0, canvas.width, canvas.height);\n                    // Add resize handler\n                    const handleResize = {\n                        \"ActionButtonGroupInner.useEffect.initializeCanvas.handleResize\": ()=>{\n                            canvas.width = window.innerWidth;\n                            canvas.height = window.innerHeight;\n                            ctx.fillStyle = 'white';\n                            ctx.fillRect(0, 0, canvas.width, canvas.height);\n                        }\n                    }[\"ActionButtonGroupInner.useEffect.initializeCanvas.handleResize\"];\n                    window.addEventListener('resize', handleResize);\n                    return ({\n                        \"ActionButtonGroupInner.useEffect.initializeCanvas\": ()=>{\n                            window.removeEventListener('resize', handleResize);\n                            if (canvas.parentNode) {\n                                canvas.parentNode.removeChild(canvas);\n                            }\n                        }\n                    })[\"ActionButtonGroupInner.useEffect.initializeCanvas\"];\n                }\n            }[\"ActionButtonGroupInner.useEffect.initializeCanvas\"];\n            const cleanup = initializeCanvas();\n            return cleanup;\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], []);\n    // Helper function to get the main canvas - improved to be more reliable\n    const getMainCanvas = ()=>{\n        // First check if we have a valid canvas reference\n        if (canvasRef.current && document.contains(canvasRef.current)) {\n            return canvasRef.current;\n        }\n        // Try to find existing canvas in DOM\n        let existingCanvas = document.querySelector('#tracking-canvas');\n        if (existingCanvas && document.contains(existingCanvas)) {\n            canvasRef.current = existingCanvas;\n            window.whiteScreenCanvas = existingCanvas;\n            return existingCanvas;\n        }\n        // Create new canvas only if none exists\n        console.log('Creating new canvas...');\n        const canvas = document.createElement('canvas');\n        canvas.className = 'tracking-canvas';\n        canvas.id = 'tracking-canvas';\n        // Set initial dimensions and style\n        canvas.width = 800;\n        canvas.height = 400;\n        canvas.style.cssText = \"\\n      position: relative;\\n      width: 100%;\\n      height: 400px;\\n      background-color: white;\\n      border: 1px solid #ccc;\\n      display: block;\\n    \";\n        // Initialize with white background\n        const ctx = canvas.getContext('2d');\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        // Find container and append\n        const container = document.querySelector('.canvas-container') || document.querySelector('.main-content') || document.body;\n        container.appendChild(canvas);\n        // Store references\n        canvasRef.current = canvas;\n        window.whiteScreenCanvas = canvas;\n        return canvas;\n    };\n    const handlePermissionAccepted = ()=>{\n        setShowPermissionPopup(false);\n        if (triggerCameraAccess) {\n            triggerCameraAccess(true);\n        }\n    };\n    // Handler to cancel permission popup\n    const handlePermissionDenied = ()=>{\n        setShowPermissionPopup(false);\n    };\n    // Helper function to restore the canvas to its original parent and styling\n    const restoreCanvas = (canvas)=>{\n        if (!canvas || !canvas._originalState) return;\n        const original = canvas._originalState;\n        try {\n            // Restore to original parent\n            if (original.parent && document.contains(original.parent)) {\n                original.parent.appendChild(canvas);\n            } else {\n                // Fallback to a container if original parent is gone\n                const container = document.querySelector('.canvas-container') || document.querySelector('.main-content') || document.body;\n                container.appendChild(canvas);\n            }\n            // Restore styles\n            canvas.style.position = original.position || 'relative';\n            canvas.style.top = original.top || '';\n            canvas.style.left = original.left || '';\n            canvas.style.width = original.width || '100%';\n            canvas.style.height = original.height || '400px';\n            canvas.style.zIndex = original.zIndex || '';\n            canvas.style.backgroundColor = 'white';\n            // Restore dimensions\n            canvas.width = original.canvasWidth || 800;\n            canvas.height = original.canvasHeight || 400;\n            // Clear with white background\n            const ctx = canvas.getContext('2d');\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            // Clear the saved state\n            delete canvas._originalState;\n        } catch (error) {\n            console.error('Error restoring canvas:', error);\n            // Fallback: just clear the canvas\n            const ctx = canvas.getContext('2d');\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n    };\n    // Clear the canvas\n    const clearCanvas = ()=>{\n        const canvas = getMainCanvas();\n        if (!canvas) {\n            console.warn(\"No canvas found for clearing\");\n            return;\n        }\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        setCurrentDot(null);\n    };\n    // Add this function to actionButton.js\n    /**\n   * Consolidated function that handles the entire dot process: drawing, countdown, capture, and preview\n   * @param {Object} options - Configuration options\n   * @param {Object} options.position - {x, y} coordinates where to draw the dot\n   * @param {Function} options.onStatusUpdate - Callback for status updates\n   * @param {Function} options.toggleTopBar - Function to toggle top bar visibility\n   * @param {Function} options.triggerCameraAccess - Function to ensure camera is available\n   * @param {Function} options.setIsCapturing - Function to update capturing state\n   * @param {Number} options.captureCount - Current capture counter\n   * @param {Function} options.setCaptureCount - Function to update the capture counter\n   * @param {Boolean} options.useRandomPosition - Whether to generate a random position\n   * @returns {Promise<Object>} - Result object with capture data\n   */ const ensureCanvasExists = ()=>{\n        let canvas = document.querySelector('#tracking-canvas');\n        if (!canvas) {\n            // Create canvas\n            canvas = document.createElement('canvas');\n            // DON'T use className that might have fixed CSS\n            // canvas.className = 'tracking-canvas'; // ❌ This might apply fixed dimensions\n            canvas.id = 'tracking-canvas';\n            // Get EXACT window dimensions\n            const windowWidth = window.innerWidth;\n            const windowHeight = window.innerHeight;\n            // Set canvas internal dimensions\n            canvas.width = windowWidth;\n            canvas.height = windowHeight;\n            // Use ONLY inline styles to ensure no CSS class override\n            canvas.style.cssText = \"\\n        position: fixed !important;\\n        top: 0 !important;\\n        left: 0 !important;\\n        width: \".concat(windowWidth, \"px !important;\\n        height: \").concat(windowHeight, \"px !important;\\n        background-color: white !important;\\n        border: none !important;\\n        display: block !important;\\n        z-index: 99999 !important;\\n        opacity: 1 !important;\\n        pointer-events: auto !important;\\n        margin: 0 !important;\\n        padding: 0 !important;\\n        max-width: none !important;\\n        max-height: none !important;\\n        min-width: 0 !important;\\n        min-height: 0 !important;\\n      \");\n            // Initialize with white background\n            const ctx = canvas.getContext('2d');\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, windowWidth, windowHeight);\n            // Hide other UI elements\n            const elementsToHide = [\n                '.topbar',\n                '.canvas-container',\n                '.main-content',\n                '.metrics-panel',\n                'nav',\n                'header',\n                '.display-metrics'\n            ];\n            elementsToHide.forEach((selector)=>{\n                const elements = document.querySelectorAll(selector);\n                elements.forEach((el)=>{\n                    el.style.display = 'none';\n                    el.setAttribute('data-hidden-by-canvas', 'true');\n                });\n            });\n            // Append to body\n            document.body.appendChild(canvas);\n            window.whiteScreenCanvas = canvas;\n            // Resize handler that maintains exact dimensions\n            const handleResize = ()=>{\n                const newWidth = window.innerWidth;\n                const newHeight = window.innerHeight;\n                // Update both internal and CSS dimensions with !important\n                canvas.width = newWidth;\n                canvas.height = newHeight;\n                canvas.style.setProperty('width', \"\".concat(newWidth, \"px\"), 'important');\n                canvas.style.setProperty('height', \"\".concat(newHeight, \"px\"), 'important');\n                // Redraw white background\n                const ctx = canvas.getContext('2d');\n                ctx.fillStyle = 'white';\n                ctx.fillRect(0, 0, newWidth, newHeight);\n            };\n            window.addEventListener('resize', handleResize);\n            canvas._resizeHandler = handleResize;\n            console.log(\"Canvas created with EXACT window size: \".concat(windowWidth, \"x\").concat(windowHeight));\n        } else {\n            // If canvas already exists, force update its dimensions\n            const windowWidth = window.innerWidth;\n            const windowHeight = window.innerHeight;\n            // Override any existing CSS class with inline styles\n            canvas.style.cssText = \"\\n        position: fixed !important;\\n        top: 0 !important;\\n        left: 0 !important;\\n        width: \".concat(windowWidth, \"px !important;\\n        height: \").concat(windowHeight, \"px !important;\\n        background-color: white !important;\\n        border: none !important;\\n        display: block !important;\\n        z-index: 99999 !important;\\n        opacity: 1 !important;\\n        pointer-events: auto !important;\\n        margin: 0 !important;\\n        padding: 0 !important;\\n        max-width: none !important;\\n        max-height: none !important;\\n        min-width: 0 !important;\\n        min-height: 0 !important;\\n      \");\n            // Update internal dimensions\n            canvas.width = windowWidth;\n            canvas.height = windowHeight;\n            // Redraw white background\n            const ctx = canvas.getContext('2d');\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, windowWidth, windowHeight);\n            console.log(\"Canvas updated to EXACT window size: \".concat(windowWidth, \"x\").concat(windowHeight));\n        }\n        return canvas;\n    };\n    // Cleanup function to remove canvas and its properties\n    const cleanupCanvas = ()=>{\n        const canvas = document.querySelector('#tracking-canvas');\n        if (canvas) {\n            // Remove resize event listener if it exists\n            if (canvas._resizeHandler) {\n                window.removeEventListener('resize', canvas._resizeHandler);\n                delete canvas._resizeHandler;\n            }\n            // Remove canvas from DOM\n            if (canvas.parentNode) {\n                canvas.parentNode.removeChild(canvas);\n            }\n            // Clear global references\n            if (window.whiteScreenCanvas === canvas) {\n                delete window.whiteScreenCanvas;\n            }\n            console.log('Canvas cleaned up and removed');\n        }\n    };\n    // Modified canvas restore function for temporary operations\n    const restoreCanvasToContainer = (canvas)=>{\n        if (!canvas) return;\n        // Remove resize handler\n        if (canvas._resizeHandler) {\n            window.removeEventListener('resize', canvas._resizeHandler);\n            delete canvas._resizeHandler;\n        }\n        // Show all previously hidden UI elements\n        const hiddenElements = document.querySelectorAll('[data-hidden-by-canvas=\"true\"]');\n        hiddenElements.forEach((el)=>{\n            el.style.display = '';\n            el.removeAttribute('data-hidden-by-canvas');\n        });\n        // Find appropriate container\n        const container = document.querySelector('.canvas-container') || document.querySelector('.main-content') || document.body;\n        // Move canvas to container\n        container.appendChild(canvas);\n        // Reset to container-friendly dimensions\n        const containerWidth = container.clientWidth || 800;\n        const containerHeight = 400;\n        canvas.width = containerWidth;\n        canvas.height = containerHeight;\n        // Reset CSS for container mode\n        canvas.style.cssText = \"\\n      position: relative;\\n      width: 100%;\\n      height: 400px;\\n      background-color: white;\\n      border: 1px solid #ccc;\\n      display: block;\\n      z-index: auto;\\n      opacity: 1;\\n      pointer-events: auto;\\n    \";\n        // Clear and redraw white background\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        console.log(\"Canvas restored to container mode: \".concat(containerWidth, \"x\").concat(containerHeight));\n    };\n    // Modified handleDotProcess function with improved dot and countdown alignment\n    // Complete handleDotProcess function with proper canvas management\n    const handleDotProcess = async (options)=>{\n        const { position, onStatusUpdate, toggleTopBar, triggerCameraAccess, setIsCapturing, captureCount, setCaptureCount, useRandomPosition = false, postCountdownDelay = 500 } = options;\n        let canvas = null;\n        let keepDotVisibleInterval = null;\n        let countdownElement = null;\n        try {\n            // Hide the TopBar before showing the dot\n            if (typeof toggleTopBar === 'function') {\n                toggleTopBar(false);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(false);\n            }\n            // Set capturing state\n            setIsCapturing(true);\n            // Update status\n            onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                processStatus: useRandomPosition ? 'Generating random dot...' : 'Starting dot process...',\n                isCapturing: true\n            });\n            // Wait for UI updates to take effect\n            await new Promise((resolve)=>setTimeout(resolve, 200));\n            // Use ensureCanvasExists to get or create canvas\n            canvas = ensureCanvasExists();\n            if (!canvas) {\n                throw new Error(\"Failed to create or find canvas\");\n            }\n            // Canvas is already set to fullscreen by ensureCanvasExists\n            const canvasWidth = canvas.width;\n            const canvasHeight = canvas.height;\n            // Get context and clear canvas with white background\n            const ctx = canvas.getContext('2d');\n            ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n            // Get position for the dot - either use provided position or generate random one\n            const dotPosition = useRandomPosition ? (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.getRandomPosition)(canvas, 20) : position;\n            if (!dotPosition || typeof dotPosition.x !== 'number' || typeof dotPosition.y !== 'number') {\n                throw new Error(\"Invalid dot position\");\n            }\n            // Draw the dot\n            const dotRadius = 12;\n            (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n            // Create a redraw interval to ensure dot stays visible\n            keepDotVisibleInterval = setInterval(()=>{\n                (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n            }, 50); // More frequent updates for reliability\n            // Remove any existing countdown elements\n            const existingCountdowns = document.querySelectorAll('.dot-countdown, .calibrate-countdown');\n            existingCountdowns.forEach((el)=>{\n                if (el.parentNode) el.parentNode.removeChild(el);\n            });\n            // Create a countdown element directly on top of the dot\n            countdownElement = document.createElement('div');\n            countdownElement.className = 'dot-countdown';\n            countdownElement.style.cssText = \"\\n        position: fixed;\\n        left: \".concat(dotPosition.x, \"px;\\n        top: \").concat(dotPosition.y, \"px;\\n        transform: translate(-50%, -50%);\\n        color: red;\\n        font-size: 36px;\\n        font-weight: bold;\\n        text-shadow: 0 0 10px white, 0 0 20px white;\\n        z-index: 10000;\\n        background-color: rgba(255, 255, 255, 0.8);\\n        border: 2px solid red;\\n        border-radius: 50%;\\n        width: 50px;\\n        height: 50px;\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\n      \");\n            document.body.appendChild(countdownElement);\n            // Manual countdown\n            for(let count = 3; count > 0; count--){\n                countdownElement.textContent = count;\n                onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                    processStatus: \"Countdown: \".concat(count),\n                    countdownValue: count,\n                    isCapturing: true\n                });\n                // Redraw the dot for reliability\n                (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n                await new Promise((resolve)=>setTimeout(resolve, 800));\n                // Additional redraw during countdown to ensure visibility\n                (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n            }\n            // Show checkmark\n            countdownElement.textContent = \"✓\";\n            // Make sure dot is still visible\n            (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n            // Remove countdown element after delay\n            setTimeout(()=>{\n                if (countdownElement && countdownElement.parentNode) {\n                    countdownElement.parentNode.removeChild(countdownElement);\n                }\n            }, 300);\n            // Wait after countdown completes\n            await new Promise((resolve)=>setTimeout(resolve, postCountdownDelay));\n            // Ensure the dot is still visible\n            (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n            // Capture images at this point\n            const captureResult = await (0,_components_collected_dataset_customized_Helper_savefile__WEBPACK_IMPORTED_MODULE_5__.captureImagesAtPoint)({\n                point: dotPosition,\n                captureCount: captureCount,\n                canvasRef: {\n                    current: canvas\n                },\n                setCaptureCount: setCaptureCount,\n                showCapturePreview: _components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.showCapturePreview\n            });\n            // Update status\n            onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                processStatus: 'Capture completed',\n                isCapturing: false\n            });\n            return {\n                success: true,\n                position: dotPosition,\n                captureResult\n            };\n        } catch (error) {\n            console.error(\"Error in handleDotProcess:\", error);\n            onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                processStatus: \"Error: \".concat(error.message),\n                isCapturing: false\n            });\n            return {\n                success: false,\n                error: error.message\n            };\n        } finally{\n            // Clear redraw interval first\n            if (keepDotVisibleInterval) {\n                clearInterval(keepDotVisibleInterval);\n                keepDotVisibleInterval = null;\n            }\n            // Remove countdown element if it still exists\n            if (countdownElement && countdownElement.parentNode) {\n                countdownElement.parentNode.removeChild(countdownElement);\n            }\n            // Remove any remaining countdown elements\n            const remainingCountdowns = document.querySelectorAll('.dot-countdown, .calibrate-countdown');\n            remainingCountdowns.forEach((el)=>{\n                if (el.parentNode) el.parentNode.removeChild(el);\n            });\n            // Use restoreCanvasToContainer to properly restore canvas\n            if (canvas) {\n                restoreCanvasToContainer(canvas);\n            }\n            // Show TopBar again after a delay\n            setTimeout(()=>{\n                if (typeof toggleTopBar === 'function') {\n                    toggleTopBar(true);\n                } else if ( true && window.toggleTopBar) {\n                    window.toggleTopBar(true);\n                }\n            }, 1000);\n        }\n    };\n    const handleSetCalibrate = async ()=>{\n        if (isCapturing) return;\n        // Declare these variables OUTSIDE the try block\n        let canvas = null;\n        let originalCanvasParent = null;\n        let originalCanvasStyle = {};\n        let statusIndicator = null;\n        let currentRedrawInterval = null;\n        try {\n            canvas = ensureCanvasExists();\n            if (!canvas) {\n                console.error('Failed to create canvas for calibration');\n                return;\n            }\n            // Hide TopBar\n            if (typeof onActionClick === 'function') {\n                onActionClick('toggleTopBar', false);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(false);\n            }\n            setIsCapturing(true);\n            setShowCanvas(true);\n            setProcessStatus(\"Starting calibration sequence...\");\n            // Wait for UI updates to take effect\n            await new Promise((resolve)=>setTimeout(resolve, 300));\n            // Get canvas reference\n            canvas = getMainCanvas();\n            if (!canvas) {\n                setProcessStatus(\"Error: Canvas not found\");\n                setIsCapturing(false);\n                if (typeof onActionClick === 'function') {\n                    onActionClick('toggleTopBar', true);\n                }\n                return;\n            }\n            // Save original parent and style\n            originalCanvasParent = canvas.parentElement;\n            originalCanvasStyle = {\n                position: canvas.style.position,\n                top: canvas.style.top,\n                left: canvas.style.left,\n                width: canvas.style.width,\n                height: canvas.style.height,\n                zIndex: canvas.style.zIndex\n            };\n            // Move canvas to body for maximum reliability\n            document.body.appendChild(canvas);\n            // Make canvas fullscreen with fixed positioning\n            canvas.style.position = 'fixed';\n            canvas.style.top = '0';\n            canvas.style.left = '0';\n            canvas.style.width = '100vw';\n            canvas.style.height = '100vh';\n            canvas.style.zIndex = '10';\n            // Set dimensions to match window exactly\n            const canvasWidth = window.innerWidth;\n            const canvasHeight = window.innerHeight;\n            canvas.width = canvasWidth;\n            canvas.height = canvasHeight;\n            console.log(\"Canvas set to fullscreen: \".concat(canvasWidth, \"x\").concat(canvasHeight));\n            // Get context\n            const ctx = canvas.getContext('2d');\n            // Clear canvas with white background\n            ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n            // Generate calibration points based on the canvas size\n            const { generateCalibrationPoints } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../../components/collected-dataset-customized/Action/CalibratePoints */ \"(pages-dir-browser)/./components/collected-dataset-customized/Action/CalibratePoints.js\"));\n            const points = generateCalibrationPoints(canvasWidth, canvasHeight);\n            if (!points || points.length === 0) {\n                throw new Error(\"Failed to generate calibration points\");\n            }\n            // Create a status indicator\n            statusIndicator = document.createElement('div');\n            statusIndicator.className = 'calibrate-status-indicator';\n            statusIndicator.style.cssText = \"\\n        position: fixed;\\n        top: 20px;\\n        right: 20px;\\n        background-color: rgba(0, 102, 204, 0.9);\\n        color: white;\\n        font-size: 16px;\\n        font-weight: bold;\\n        padding: 10px 15px;\\n        border-radius: 8px;\\n        z-index: 10000;\\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\\n      \";\n            statusIndicator.textContent = 'Calibration: Initializing...';\n            document.body.appendChild(statusIndicator);\n            // Process each calibration point\n            let successCount = 0;\n            for(let i = 0; i < points.length; i++){\n                const point = points[i];\n                // Clear any existing redraw interval\n                if (currentRedrawInterval) {\n                    clearInterval(currentRedrawInterval);\n                    currentRedrawInterval = null;\n                }\n                // Update status displays\n                statusIndicator.textContent = \"Calibration: Point \".concat(i + 1, \"/\").concat(points.length);\n                setProcessStatus(\"Processing calibration point \".concat(i + 1, \"/\").concat(points.length));\n                // Reset canvas if dimensions changed\n                if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n                    console.warn(\"Canvas dimensions changed. Resetting to \".concat(canvasWidth, \"x\").concat(canvasHeight));\n                    canvas.width = canvasWidth;\n                    canvas.height = canvasHeight;\n                }\n                // Make sure canvas is still attached to body and in fullscreen mode\n                if (canvas.parentElement !== document.body) {\n                    document.body.appendChild(canvas);\n                    canvas.style.position = 'fixed';\n                    canvas.style.top = '0';\n                    canvas.style.left = '0';\n                    canvas.style.width = '100vw';\n                    canvas.style.height = '100vh';\n                    canvas.style.zIndex = '10';\n                }\n                // Clear canvas with white background\n                ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n                ctx.fillStyle = 'white';\n                ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n                // Draw the calibration point\n                const radius = 14; // Slightly larger for better visibility\n                (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, point.x, point.y, radius, false);\n                // Create redraw function for this point\n                const redrawCurrentDot = ()=>{\n                    // Verify canvas dimensions and parent\n                    if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n                        canvas.width = canvasWidth;\n                        canvas.height = canvasHeight;\n                        ctx.fillStyle = 'white';\n                        ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n                    }\n                    // Make sure canvas is still attached to body\n                    if (canvas.parentElement !== document.body) {\n                        document.body.appendChild(canvas);\n                    }\n                    // Redraw dot without clearing\n                    (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, point.x, point.y, radius, false);\n                };\n                // Start redraw interval - more frequent updates for reliable dot visibility\n                currentRedrawInterval = setInterval(redrawCurrentDot, 50);\n                // Remove any existing countdown elements\n                const existingCountdowns = document.querySelectorAll('.dot-countdown, .calibrate-countdown');\n                existingCountdowns.forEach((el)=>{\n                    if (el.parentNode) el.parentNode.removeChild(el);\n                });\n                // Create custom countdown element\n                const countdownElement = document.createElement('div');\n                countdownElement.className = 'dot-countdown'; // Consistent class name\n                countdownElement.style.cssText = \"\\n          position: fixed;\\n          left: \".concat(point.x, \"px;\\n          top: \").concat(point.y - 60, \"px;\\n          transform: translateX(-50%);\\n          color: red;\\n          font-size: 36px;\\n          font-weight: bold;\\n          text-shadow: 0 0 10px white, 0 0 20px white;\\n          z-index: 10000;\\n          background-color: rgba(255, 255, 255, 0.8);\\n          border: 2px solid red;\\n          border-radius: 50%;\\n          width: 50px;\\n          height: 50px;\\n          display: flex;\\n          justify-content: center;\\n          align-items: center;\\n          box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\n        \");\n                document.body.appendChild(countdownElement);\n                try {\n                    // Manual countdown\n                    for(let count = 3; count > 0; count--){\n                        countdownElement.textContent = count;\n                        setProcessStatus(\"Point \".concat(i + 1, \"/\").concat(points.length, \": Countdown \").concat(count));\n                        // Force redraw multiple times during countdown to ensure visibility\n                        redrawCurrentDot();\n                        await new Promise((resolve)=>setTimeout(resolve, 800));\n                        // Redraw again halfway through the wait to ensure dot stays visible\n                        redrawCurrentDot();\n                    }\n                    // Show checkmark\n                    countdownElement.textContent = \"✓\";\n                    redrawCurrentDot();\n                    // Remove countdown element after delay\n                    setTimeout(()=>{\n                        if (countdownElement.parentNode) {\n                            countdownElement.parentNode.removeChild(countdownElement);\n                        }\n                    }, 300);\n                    // Make sure dot is still visible\n                    redrawCurrentDot();\n                    // Capture images at this point\n                    console.log(\"Capturing calibration point \".concat(i + 1, \"/\").concat(points.length, \" at (\").concat(point.x, \", \").concat(point.y, \")\"));\n                    // Manual force redraw one more time just before capture\n                    (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, point.x, point.y, radius, false);\n                    const captureResult = await (0,_components_collected_dataset_customized_Helper_savefile__WEBPACK_IMPORTED_MODULE_5__.captureImagesAtPoint)({\n                        point: point,\n                        captureCount: captureCount,\n                        canvasRef: {\n                            current: canvas\n                        },\n                        setCaptureCount: setCaptureCount,\n                        showCapturePreview: _components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.showCapturePreview\n                    });\n                    if (captureResult && (captureResult.screenImage || captureResult.success)) {\n                        successCount++;\n                    }\n                    // Wait between points\n                    await new Promise((resolve)=>setTimeout(resolve, 1200));\n                } catch (error) {\n                    console.error(\"Error processing calibration point \".concat(i + 1, \":\"), error);\n                } finally{\n                    // Clean up countdown if it still exists\n                    if (countdownElement.parentNode) {\n                        countdownElement.parentNode.removeChild(countdownElement);\n                    }\n                    // Clear redraw interval\n                    if (currentRedrawInterval) {\n                        clearInterval(currentRedrawInterval);\n                        currentRedrawInterval = null;\n                    }\n                }\n            }\n            // Calibration complete\n            if (statusIndicator) {\n                statusIndicator.textContent = \"Calibration complete: \".concat(successCount, \"/\").concat(points.length, \" points\");\n            }\n            setProcessStatus(\"Calibration completed: \".concat(successCount, \"/\").concat(points.length, \" points captured\"));\n        } catch (error) {\n            console.error(\"Calibration error:\", error);\n            setProcessStatus(\"Calibration error: \".concat(error.message));\n            // Clean up redraw interval\n            if (currentRedrawInterval) {\n                clearInterval(currentRedrawInterval);\n            }\n        } finally{\n            // Remove status indicator if it exists\n            if (statusIndicator && statusIndicator.parentNode) {\n                setTimeout(()=>{\n                    statusIndicator.parentNode.removeChild(statusIndicator);\n                }, 3000);\n            }\n            setIsCapturing(false);\n            setTimeout(()=>{\n                cleanupCanvas();\n            }, 3000);\n            if (canvas) {\n                restoreCanvasToContainer(canvas);\n            }\n            // Show TopBar again\n            setTimeout(()=>{\n                if (typeof onActionClick === 'function') {\n                    onActionClick('toggleTopBar', true);\n                } else if ( true && window.toggleTopBar) {\n                    window.toggleTopBar(true);\n                }\n            }, 1000);\n        }\n    };\n    const handleSetRandom = async ()=>{\n        if (isCapturing) return;\n        try {\n            const canvas = ensureCanvasExists();\n            if (!canvas) {\n                console.error('Failed to create canvas for set random');\n                return;\n            }\n            // Always get the latest settings from context for the current user\n            const userSettings = settings && settings[currentUserId] ? settings[currentUserId] : {};\n            const times = Number(userSettings.times_set_random) || Number(randomTimes) || 1;\n            const delay = Number(userSettings.delay_set_random) || Number(delaySeconds) || 3;\n            // Log current settings before starting\n            console.log('Starting Set Random with settings:', {\n                randomTimes,\n                delaySeconds,\n                currentUserId,\n                settings,\n                userSettings,\n                times,\n                delay\n            });\n            // Hide TopBar\n            if (typeof onActionClick === 'function') {\n                onActionClick('toggleTopBar', false);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(false);\n            }\n            setIsCapturing(true);\n            setRemainingCaptures(times);\n            setProcessStatus(\"Starting \".concat(times, \" random captures with \").concat(delay, \"s delay...\"));\n            // Process all captures in sequence\n            let successCount = 0;\n            for(let currentIndex = 1; currentIndex <= times; currentIndex++){\n                // Update status for current capture\n                setProcessStatus(\"Capture \".concat(currentIndex, \" of \").concat(times));\n                setRemainingCaptures(times - currentIndex + 1);\n                console.log(\"Starting capture \".concat(currentIndex, \" of \").concat(times));\n                // Use handleDotProcess for each capture\n                const result = await handleDotProcess({\n                    useRandomPosition: true,\n                    onStatusUpdate: (status)=>{\n                        if (status.processStatus) {\n                            setProcessStatus(\"Capture \".concat(currentIndex, \"/\").concat(times, \": \").concat(status.processStatus));\n                        }\n                    },\n                    toggleTopBar: (show)=>{\n                        // Only show TopBar after the last capture\n                        if (show && currentIndex < times) {\n                            return; // Don't show yet for intermediate captures\n                        }\n                        if (typeof onActionClick === 'function') {\n                            onActionClick('toggleTopBar', show);\n                        } else if ( true && window.toggleTopBar) {\n                            window.toggleTopBar(show);\n                        }\n                    },\n                    triggerCameraAccess,\n                    setIsCapturing: (capturing)=>{\n                        // Only set capturing to false after all captures\n                        if (!capturing && currentIndex < times) {\n                            return; // Stay in capturing state between dots\n                        }\n                        setIsCapturing(capturing);\n                    },\n                    captureCount,\n                    setCaptureCount,\n                    postCountdownDelay: 800\n                });\n                if (result && result.success) {\n                    successCount++;\n                    console.log(\"Successfully completed capture \".concat(currentIndex));\n                } else {\n                    console.warn(\"Capture \".concat(currentIndex, \" may have failed:\"), result);\n                }\n                // Wait between captures - but only if there are more captures to go\n                if (currentIndex < times) {\n                    setProcessStatus(\"Waiting \".concat(delay, \"s before next capture...\"));\n                    console.log(\"Waiting \".concat(delay, \"s before next capture...\"));\n                    await new Promise((resolve)=>setTimeout(resolve, delay * 1000));\n                }\n            }\n            // Completion notification\n            setProcessStatus(\"Random capture sequence completed: \".concat(successCount, \"/\").concat(times, \" captures successful\"));\n            setRemainingCaptures(0);\n            console.log(\"Completed all captures: \".concat(successCount, \"/\").concat(times, \" successful\"));\n        } catch (error) {\n            console.error(\"Random sequence error:\", error);\n            setProcessStatus(\"Random sequence failed: \".concat(error.message));\n        } finally{\n            setIsCapturing(false);\n            setTimeout(()=>{\n                cleanupCanvas();\n            }, 3000);\n            const canvas = document.querySelector('#tracking-canvas');\n            if (canvas) {\n                restoreCanvasToContainer(canvas);\n            }\n            // Show TopBar again\n            setTimeout(()=>{\n                if (typeof onActionClick === 'function') {\n                    onActionClick('toggleTopBar', true);\n                } else if ( true && window.toggleTopBar) {\n                    window.toggleTopBar(true);\n                }\n            }, 1000);\n        }\n    };\n    const handleRandomDot = async ()=>{\n        if (isCapturing) return;\n        try {\n            const canvas = ensureCanvasExists();\n            if (!canvas) {\n                console.error('Failed to create canvas for random dot');\n                return;\n            }\n            // Use the consolidated function with random position\n            await handleDotProcess({\n                useRandomPosition: true,\n                onStatusUpdate: (status)=>{\n                    if (status.processStatus) setProcessStatus(status.processStatus);\n                    if (status.isCapturing !== undefined) setIsCapturing(status.isCapturing);\n                },\n                toggleTopBar: (show)=>{\n                    if (typeof onActionClick === 'function') {\n                        onActionClick('toggleTopBar', show);\n                    }\n                },\n                triggerCameraAccess,\n                setIsCapturing,\n                captureCount,\n                setCaptureCount: setCaptureCount,\n                postCountdownDelay: 1000\n            });\n        } catch (error) {\n            console.error('Random dot error:', error);\n        } finally{\n            // Clean up canvas after process completes\n            setTimeout(()=>{\n                cleanupCanvas();\n            }, 2000); // Wait 2 seconds before cleanup\n        }\n    };\n    const makeCanvasFullscreen = (canvas)=>{\n        if (!canvas) return null;\n        // Save original state if not already saved\n        if (!canvas._originalState) {\n            canvas._originalState = {\n                parent: canvas.parentElement,\n                position: canvas.style.position,\n                top: canvas.style.top,\n                left: canvas.style.left,\n                width: canvas.style.width,\n                height: canvas.style.height,\n                zIndex: canvas.style.zIndex,\n                canvasWidth: canvas.width,\n                canvasHeight: canvas.height\n            };\n        }\n        // Move to body and make fullscreen\n        document.body.appendChild(canvas);\n        canvas.style.position = 'fixed';\n        canvas.style.top = '0';\n        canvas.style.left = '0';\n        canvas.style.width = '100vw';\n        canvas.style.height = '100vh';\n        canvas.style.zIndex = '10';\n        canvas.style.backgroundColor = 'white';\n        // Set canvas dimensions to match window\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        // Clear with white background\n        const ctx = canvas.getContext('2d');\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        return canvas;\n    };\n    // Load calibration setup\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            if (false) {}\n            const setupCalibration = {\n                \"ActionButtonGroupInner.useEffect.setupCalibration\": async ()=>{\n                    try {\n                        const { default: CalibrateHandler } = await __webpack_require__.e(/*! import() */ \"_pages-dir-browser_components_collected-dataset-customized_Action_CalibrateHandler_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../../components/collected-dataset-customized/Action/CalibrateHandler */ \"(pages-dir-browser)/./components/collected-dataset-customized/Action/CalibrateHandler.js\"));\n                        const canvas = getMainCanvas();\n                        if (!canvas) {\n                            console.warn(\"Canvas not available during setupCalibration\");\n                            return;\n                        }\n                        if (canvas) {\n                            makeCanvasFullscreen(canvas);\n                        }\n                        // console.log('Canvas size:', canvas.width, canvas.height);\n                        const points = (0,_components_collected_dataset_customized_Action_CalibratePoints__WEBPACK_IMPORTED_MODULE_3__.generateCalibrationPoints)(canvas.width, canvas.height);\n                        // console.log('Generated calibration points:', points);\n                        setCalibrationPoints(points);\n                        const calibrateHandler = new CalibrateHandler({\n                            canvasRef: {\n                                current: canvas\n                            },\n                            calibrationPoints: points,\n                            toggleTopBar: {\n                                \"ActionButtonGroupInner.useEffect.setupCalibration\": (show)=>onActionClick === null || onActionClick === void 0 ? void 0 : onActionClick('toggleTopBar', show)\n                            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"],\n                            setOutputText: {\n                                \"ActionButtonGroupInner.useEffect.setupCalibration\": (status)=>{\n                                    setProcessStatus(status);\n                                }\n                            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"],\n                            captureCounter: captureCount,\n                            setCaptureCounter: {\n                                \"ActionButtonGroupInner.useEffect.setupCalibration\": (newCounter)=>{\n                                    if (typeof newCounter === 'function') {\n                                        setCaptureCount({\n                                            \"ActionButtonGroupInner.useEffect.setupCalibration\": (prev)=>newCounter(prev)\n                                        }[\"ActionButtonGroupInner.useEffect.setupCalibration\"]);\n                                    } else {\n                                        setCaptureCount(newCounter);\n                                    }\n                                }\n                            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"],\n                            captureFolder: 'eye_tracking_captures',\n                            onComplete: {\n                                \"ActionButtonGroupInner.useEffect.setupCalibration\": ()=>{\n                                    setIsCapturing(false);\n                                    setProcessStatus('Calibration completed');\n                                }\n                            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"]\n                        });\n                        setCalibrationHandler({\n                            handleAction: {\n                                \"ActionButtonGroupInner.useEffect.setupCalibration\": async ()=>{\n                                    setIsCapturing(true);\n                                    setProcessStatus('Starting calibration...');\n                                    await calibrateHandler.startCalibration();\n                                    setIsCapturing(false);\n                                }\n                            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"]\n                        });\n                        if (canvas) {\n                            restoreCanvasSize(canvas);\n                        }\n                    } catch (err) {\n                        console.error('Error initializing calibration:', err);\n                    }\n                }\n            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"];\n            setupCalibration();\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], [\n        captureCount,\n        onActionClick\n    ]);\n    // Clear All Button - Reset everything\n    const handleClearAll = ()=>{\n        // Clear canvas content\n        const canvas = document.querySelector('#tracking-canvas');\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            // Restore canvas to container mode\n            restoreCanvasToContainer(canvas);\n        }\n        // Reset states\n        setProcessStatus('');\n        setRemainingCaptures(0);\n        setIsCapturing(false);\n        setCountdownValue(null);\n        setShowCanvas(true);\n        setCurrentDot(null);\n    };\n    // Toggle Head Pose visualization\n    const handleToggleHeadPose = ()=>{\n        const newHeadPoseState = !showHeadPose;\n        setShowHeadPose(newHeadPoseState);\n        setProcessStatus(\"Head pose visualization \".concat(newHeadPoseState ? 'enabled' : 'disabled'));\n        // Call the parent handler to update processor options\n        if (onActionClick) {\n            onActionClick('headPose');\n        }\n        // Update videoProcessor options directly if available\n        if ( true && window.videoProcessor) {\n            window.videoProcessor.updateOptions({\n                showHeadPose: newHeadPoseState\n            });\n        // console.log(`Updated backend head pose: ${newHeadPoseState}`);\n        }\n    };\n    // Toggle Bounding Box visualization\n    const handleToggleBoundingBox = ()=>{\n        const newBoundingBoxState = !showBoundingBox;\n        setShowBoundingBox(newBoundingBoxState);\n        setProcessStatus(\"Bounding box \".concat(newBoundingBoxState ? 'shown' : 'hidden'));\n        // Call the parent handler to update processor options\n        if (onActionClick) {\n            onActionClick('boundingBox');\n        }\n        // Update videoProcessor options directly if available\n        if ( true && window.videoProcessor) {\n            window.videoProcessor.updateOptions({\n                showBoundingBox: newBoundingBoxState\n            });\n        // console.log(`Updated backend bounding box: ${newBoundingBoxState}`);\n        }\n    };\n    // Toggle Mask visualization\n    const handleToggleMask = ()=>{\n        const newMaskState = !showMask;\n        setShowMask(newMaskState);\n        setProcessStatus(\"Mask \".concat(newMaskState ? 'shown' : 'hidden'));\n        // Call the parent handler to update processor options\n        if (onActionClick) {\n            onActionClick('mask');\n        }\n        // Update videoProcessor options directly if available\n        if ( true && window.videoProcessor) {\n            window.videoProcessor.updateOptions({\n                showMask: newMaskState\n            });\n        // console.log(`Updated backend mask: ${newMaskState}`);\n        }\n    };\n    // Toggle Parameters display\n    const handleToggleParameters = ()=>{\n        const newParametersState = !showParameters;\n        setShowParameters(newParametersState);\n        setProcessStatus(\"Parameters \".concat(newParametersState ? 'shown' : 'hidden'));\n        // Call the parent handler to update processor options\n        if (onActionClick) {\n            onActionClick('parameters');\n        }\n        // Update videoProcessor options directly if available\n        if ( true && window.videoProcessor) {\n            window.videoProcessor.updateOptions({\n                showParameters: newParametersState\n            });\n        // console.log(`Updated backend parameters: ${newParametersState}`);\n        }\n    };\n    // Toggle camera preview\n    const handleToggleCamera = ()=>{\n        const newCameraState = !isCameraActive;\n        setIsCameraActive(newCameraState);\n        // Call the parent handler with 'preview' action\n        if (onActionClick) {\n            onActionClick('preview', newCameraState); // Pass the new state\n        } else {\n            // Fallback to direct trigger if no action handler\n            setShowPermissionPopup(true);\n        }\n        // If turning on camera, ensure we apply current visualization settings\n        if (newCameraState && \"object\" !== 'undefined' && window.videoProcessor) {\n            // Wait a short moment to ensure the video element is ready\n            setTimeout(()=>{\n                if (window.videoProcessor) {\n                    window.videoProcessor.updateOptions({\n                        showHeadPose,\n                        showBoundingBox,\n                        showMask,\n                        showParameters\n                    });\n                }\n            }, 100);\n        }\n    };\n    // Add back button handler\n    const handleGoBack = ()=>{\n        router.push('/');\n    };\n    // Mobile layout - 2x5 grid\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: [\n            isCompactMode ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"grid grid-cols-2 gap-2 mb-4\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {}, void 0, false, {\n                    fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                    lineNumber: 1620,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                lineNumber: 1619,\n                columnNumber: 9\n            }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"grid grid-cols-2 gap-2\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {}, void 0, false, {\n                    fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                    lineNumber: 1624,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                lineNumber: 1623,\n                columnNumber: 9\n            }, undefined),\n            showPermissionPopup && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"camera-permission-popup\",\n                style: {\n                    position: 'fixed',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%',\n                    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    zIndex: 15\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"camera-permission-dialog\",\n                    style: {\n                        width: '400px',\n                        backgroundColor: 'white',\n                        borderRadius: '8px',\n                        padding: '20px',\n                        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)'\n                    },\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                            className: \"camera-permission-title\",\n                            style: {\n                                margin: '0 0 15px',\n                                fontSize: '18px',\n                                fontWeight: 'bold'\n                            },\n                            children: \"Camera Access Required\"\n                        }, void 0, false, {\n                            fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                            lineNumber: 1655,\n                            columnNumber: 13\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            className: \"camera-permission-message\",\n                            style: {\n                                margin: '0 0 20px',\n                                fontSize: '14px',\n                                lineHeight: '1.4'\n                            },\n                            children: 'This application needs access to your camera to function properly. When prompted by your browser, please click \"Allow\" to grant camera access.'\n                        }, void 0, false, {\n                            fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                            lineNumber: 1665,\n                            columnNumber: 13\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"camera-permission-buttons\",\n                            style: {\n                                display: 'flex',\n                                justifyContent: 'flex-end',\n                                gap: '10px'\n                            },\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: handlePermissionDenied,\n                                    className: \"camera-btn\",\n                                    style: {\n                                        padding: '8px 16px',\n                                        backgroundColor: '#f0f0f0',\n                                        border: 'none',\n                                        borderRadius: '4px',\n                                        cursor: 'pointer'\n                                    },\n                                    children: \"Cancel\"\n                                }, void 0, false, {\n                                    fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                                    lineNumber: 1683,\n                                    columnNumber: 15\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: handlePermissionAccepted,\n                                    className: \"camera-btn\",\n                                    style: {\n                                        padding: '8px 16px',\n                                        backgroundColor: '#0066cc',\n                                        color: 'white',\n                                        border: 'none',\n                                        borderRadius: '4px',\n                                        cursor: 'pointer'\n                                    },\n                                    children: \"Continue\"\n                                }, void 0, false, {\n                                    fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                                    lineNumber: 1696,\n                                    columnNumber: 15\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                            lineNumber: 1675,\n                            columnNumber: 13\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                    lineNumber: 1645,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                lineNumber: 1630,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n        lineNumber: 1617,\n        columnNumber: 5\n    }, undefined);\n}, \"l311k0juR60uxpHVRV/MyFvStaI=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_6__.useRouter,\n        _adminSettings__WEBPACK_IMPORTED_MODULE_7__.useAdminSettings\n    ];\n}));\n_c1 = ActionButtonGroupInner;\nconst ActionButtonGroup = next_dynamic__WEBPACK_IMPORTED_MODULE_2___default()(_c2 = ()=>Promise.resolve(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, ref)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ActionButtonGroupInner, {\n            ...props,\n            ref: ref\n        }, void 0, false, {\n            fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n            lineNumber: 1718,\n            columnNumber: 30\n        }, undefined))), {\n    ssr: false\n});\n_c3 = ActionButtonGroup;\n// Create a client-only version of ActionButtonGroup\n// const ActionButtonGroup = dynamic(() => Promise.resolve(ActionButtonGroupInner), { ssr: false });\n// Add default export component\nfunction ActionButtonPage() {\n    return null; // This is a utility file, so we don't need to render anything\n}\n_c4 = ActionButtonPage;\n\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"ActionButton\");\n$RefreshReg$(_c1, \"ActionButtonGroupInner\");\n$RefreshReg$(_c2, \"ActionButtonGroup$dynamic\");\n$RefreshReg$(_c3, \"ActionButtonGroup\");\n$RefreshReg$(_c4, \"ActionButtonPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3BhZ2VzL2NvbGxlY3RlZC1kYXRhc2V0LWN1c3RvbWl6ZWQvY29tcG9uZW50cy1ndWkvYWN0aW9uQnV0dG9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXFHO0FBQ2xFO0FBQ2lGO0FBT3pDO0FBQzZCO0FBQ2hFO0FBQ1c7QUFFbkQsOEJBQThCO0FBQzlCLE1BQU1pQixVQUFVLENBQUNDLE1BQU1DO0lBQ3JCLElBQUlELFNBQVNDLE1BQU0sT0FBTztJQUMxQixJQUFJLE9BQU9ELFNBQVMsWUFBWSxPQUFPQyxTQUFTLFVBQVUsT0FBTztJQUNqRSxJQUFJRCxTQUFTLFFBQVFDLFNBQVMsTUFBTSxPQUFPO0lBRTNDLE1BQU1DLFFBQVFDLE9BQU9DLElBQUksQ0FBQ0o7SUFDMUIsTUFBTUssUUFBUUYsT0FBT0MsSUFBSSxDQUFDSDtJQUUxQixJQUFJQyxNQUFNSSxNQUFNLEtBQUtELE1BQU1DLE1BQU0sRUFBRSxPQUFPO0lBRTFDLE9BQU9KLE1BQU1LLEtBQUssQ0FBQ0MsQ0FBQUEsTUFDakJILE1BQU1JLFFBQVEsQ0FBQ0QsUUFBUVQsUUFBUUMsSUFBSSxDQUFDUSxJQUFJLEVBQUVQLElBQUksQ0FBQ08sSUFBSTtBQUV2RDtBQUVBLDBEQUEwRDtBQUMxRCxNQUFNRSxlQUFlO1FBQUMsRUFBRUMsSUFBSSxFQUFFQyxlQUFlLEVBQUVDLE9BQU8sRUFBRUMsY0FBYyxFQUFFLEVBQUVDLFdBQVcsS0FBSyxFQUFFQyxTQUFTLEtBQUssRUFBRTs7SUFDMUcsTUFBTSxDQUFDQyxlQUFlQyxpQkFBaUIsR0FBR25DLCtDQUFRQSxDQUFDO0lBQ25ELE1BQU0sRUFBRW9DLFFBQVEsRUFBRSxHQUFHckIsZ0VBQWdCQTtJQUNyQyxNQUFNLENBQUNzQixlQUFlQyxpQkFBaUIsR0FBR3RDLCtDQUFRQSxDQUFDO0lBQ25ELE1BQU0sQ0FBQ3VDLGFBQWFDLGVBQWUsR0FBR3hDLCtDQUFRQSxDQUFDO0lBQy9DLE1BQU0sQ0FB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RDtBQUNwRCxvR0FBb0c7QUFFcEcsK0JBQStCO0FBQ2hCLFNBQVNDO0lBQ3RCLE9BQU8sTUFBTSw4REFBOEQ7QUFDN0U7TUFGd0JBO0FBSW1CIiwic291cmNlcyI6WyIvYXBwL3BhZ2VzL2NvbGxlY3RlZC1kYXRhc2V0LWN1c3RvbWl6ZWQvY29tcG9uZW50cy1ndWkvYWN0aW9uQnV0dG9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYsIGZvcndhcmRSZWYsIHVzZUltcGVyYXRpdmVIYW5kbGUsIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZHluYW1pYyBmcm9tICduZXh0L2R5bmFtaWMnO1xuaW1wb3J0IHsgZ2VuZXJhdGVDYWxpYnJhdGlvblBvaW50cyB9IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvY29sbGVjdGVkLWRhdGFzZXQtY3VzdG9taXplZC9BY3Rpb24vQ2FsaWJyYXRlUG9pbnRzJztcbmltcG9ydCB7IFxuICBzaG93Q2FwdHVyZVByZXZpZXcsIFxuICBkcmF3UmVkRG90LCBcbiAgZ2V0UmFuZG9tUG9zaXRpb24sXG4gIGNyZWF0ZUNvdW50ZG93bkVsZW1lbnQsXG4gIHJ1bkNvdW50ZG93blxufSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL2NvbGxlY3RlZC1kYXRhc2V0LWN1c3RvbWl6ZWQvQWN0aW9uL2NvdW50U2F2ZSc7XG5pbXBvcnQgeyBjYXB0dXJlSW1hZ2VzQXRQb2ludCB9IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvY29sbGVjdGVkLWRhdGFzZXQtY3VzdG9taXplZC9IZWxwZXIvc2F2ZWZpbGUnO1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9yb3V0ZXInO1xuaW1wb3J0IHsgdXNlQWRtaW5TZXR0aW5ncyB9IGZyb20gJy4vYWRtaW5TZXR0aW5ncyc7XG5cbi8vIEFkZCBkZWVwIGNvbXBhcmlzb24gdXRpbGl0eVxuY29uc3QgaXNFcXVhbCA9IChvYmoxLCBvYmoyKSA9PiB7XG4gIGlmIChvYmoxID09PSBvYmoyKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKHR5cGVvZiBvYmoxICE9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqMiAhPT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcbiAgaWYgKG9iajEgPT09IG51bGwgfHwgb2JqMiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICBcbiAgY29uc3Qga2V5czEgPSBPYmplY3Qua2V5cyhvYmoxKTtcbiAgY29uc3Qga2V5czIgPSBPYmplY3Qua2V5cyhvYmoyKTtcbiAgXG4gIGlmIChrZXlzMS5sZW5ndGggIT09IGtleXMyLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICBcbiAgcmV0dXJuIGtleXMxLmV2ZXJ5KGtleSA9PiBcbiAgICBrZXlzMi5pbmNsdWRlcyhrZXkpICYmIGlzRXF1YWwob2JqMVtrZXldLCBvYmoyW2tleV0pXG4gICk7XG59O1xuXG4vLyBDcmVhdGUgYSBiYXNpYyBBY3Rpb25CdXR0b24gY29tcG9uZW50IHdpdGggb3B0aW1pemF0aW9uXG5jb25zdCBBY3Rpb25CdXR0b24gPSAoeyB0ZXh0LCBhYmJyZXZpYXRlZFRleHQsIG9uQ2xpY2ssIGN1c3RvbUNsYXNzID0gJycsIGRpc2FibGVkID0gZmFsc2UsIGFjdGl2ZSA9IGZhbHNlIH0pID0+IHtcbiAgY29uc3QgW2lzQWJicmV2aWF0ZWQsIHNldElzQWJicmV2aWF0ZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCB7IHNldHRpbmdzIH0gPSB1c2VBZG1pblNldHRpbmdzKCk7XG4gIGNvbnN0IFtjdXJyZW50VXNlcklkLCBzZXRDdXJyZW50VXNlcklkXSA9IHVzZVN0YXRlKCdkZWZhdWx0Jyk7XG4gIGNvbnN0IFtpc0NhcHR1cmluZywgc2V0SXNDYXB0dXJpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbY2FwdHVyZUNvdW50ZXIsIHNldENhcHR1cmVDb3VudGVyXSA9IHVzZVN0YXRlKDEpO1xuICBjb25zdCBbcHJvY2Vzc1N0YXR1cywgc2V0UHJvY2Vzc1N0YXR1c10gPSB1c2VTdGF0ZSgnJyk7XG5cbiAgLy8gTWVtb2l6ZSBidXR0b24gcHJvcHMgdG8gcHJldmVudCB1bm5lY2Vzc2FyeSByZS1yZW5kZXJzXG4gIGNvbnN0IGJ1dHRvblByb3BzID0gdXNlTWVtbygoKSA9PiAoe1xuICAgIGNsYXNzTmFtZTogYGFjdGlvbi1idXR0b24gJHtjdXN0b21DbGFzc30gJHtpc0FiYnJldmlhdGVkID8gJ2FiYnJldmlhdGVkJyA6ICcnfSAke2FjdGl2ZSA/ICdhY3RpdmUnIDogJyd9YCxcbiAgICBvbkNsaWNrLFxuICAgIGRpc2FibGVkLFxuICAgIHRpdGxlOiB0ZXh0XG4gIH0pLCBbY3VzdG9tQ2xhc3MsIGlzQWJicmV2aWF0ZWQsIGFjdGl2ZSwgb25DbGljaywgZGlzYWJsZWQsIHRleHRdKTtcblxuICAvLyBDaGVjayB3aW5kb3cgc2l6ZSBhbmQgc2V0IGFiYnJldmlhdGVkIG1vZGUgd2l0aCBkZWJvdW5jZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgIFxuICAgIGxldCB0aW1lb3V0SWQ7XG4gICAgY29uc3QgaGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY29uc3Qgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgc2V0SXNBYmJyZXZpYXRlZCh3aWR0aCA8IDc2OCk7XG4gICAgICB9LCAxMDApO1xuICAgIH07XG4gICAgXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgaGFuZGxlUmVzaXplKCk7IC8vIEluaXRpYWwgY2FsbFxuICAgIFxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgIH07XG4gIH0sIFtdKTtcblxuICAvLyBBZGQgZWZmZWN0IHRvIGxpc3RlbiBmb3IgdXNlciBJRCBjaGFuZ2VzIHdpdGggb3B0aW1pemF0aW9uXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlVXNlcklkQ2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQuZGV0YWlsICYmIGV2ZW50LmRldGFpbC50eXBlID09PSAndXNlcklkQ2hhbmdlJykge1xuICAgICAgICBjb25zdCBuZXdVc2VySWQgPSBldmVudC5kZXRhaWwudXNlcklkO1xuICAgICAgICBpZiAobmV3VXNlcklkICE9PSBjdXJyZW50VXNlcklkKSB7XG4gICAgICAgICAgc2V0Q3VycmVudFVzZXJJZChuZXdVc2VySWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1c2VySWRDaGFuZ2UnLCBoYW5kbGVVc2VySWRDaGFuZ2UpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndXNlcklkQ2hhbmdlJywgaGFuZGxlVXNlcklkQ2hhbmdlKTtcbiAgICB9O1xuICB9LCBbY3VycmVudFVzZXJJZF0pO1xuXG4gIHJldHVybiAoXG4gICAgPGJ1dHRvbiB7Li4uYnV0dG9uUHJvcHN9PlxuICAgICAge2lzQWJicmV2aWF0ZWQgPyBhYmJyZXZpYXRlZFRleHQgOiB0ZXh0fVxuICAgICAge3Byb2Nlc3NTdGF0dXMgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2Nlc3Mtc3RhdHVzXCI+XG4gICAgICAgICAge3Byb2Nlc3NTdGF0dXN9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8L2J1dHRvbj5cbiAgKTtcbn07XG5cbi8vIENyZWF0ZSB0aGUgQWN0aW9uQnV0dG9uR3JvdXAgY29tcG9uZW50IHdpdGggY2xpZW50LXNpZGUgb25seSByZW5kZXJpbmcgYW5kIG9wdGltaXphdGlvblxuY29uc3QgQWN0aW9uQnV0dG9uR3JvdXBJbm5lciA9IGZvcndhcmRSZWYoKHsgdHJpZ2dlckNhbWVyYUFjY2VzcywgaXNDb21wYWN0TW9kZSwgb25BY3Rpb25DbGljayB9LCByZWYpID0+IHtcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gIGNvbnN0IHsgc2V0dGluZ3MsIHVwZGF0ZVNldHRpbmdzIH0gPSB1c2VBZG1pblNldHRpbmdzKHJlZik7XG4gIFxuICAvLyBTdGF0ZSBmb3IgYnV0dG9uIGFjdGlvbnNcbiAgY29uc3QgW3JhbmRvbVRpbWVzLCBzZXRSYW5kb21UaW1lc10gPSB1c2VTdGF0ZSgxKTtcbiAgY29uc3QgW2RlbGF5U2Vjb25kcywgc2V0RGVsYXlTZWNvbmRzXSA9IHVzZVN0YXRlKDMpO1xuICBjb25zdCBjYW52YXNSZWYgPSB1c2VSZWYobnVsbCk7XG4gIGNvbnN0IFtwcm9jZXNzU3RhdHVzLCBzZXRQcm9jZXNzU3RhdHVzXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW2NvdW50ZG93blZhbHVlLCBzZXRDb3VudGRvd25WYWx1ZV0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW2N1cnJlbnREb3QsIHNldEN1cnJlbnREb3RdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFtjYWxpYnJhdGlvblBvaW50cywgc2V0Q2FsaWJyYXRpb25Qb2ludHNdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBbcmVtYWluaW5nQ2FwdHVyZXMsIHNldFJlbWFpbmluZ0NhcHR1cmVzXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbc2hvd0NhbnZhcywgc2V0U2hvd0NhbnZhc10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgXG4gIC8vIFRyYWNrIHRoZSBjYXB0dXJlIGNvdW50XG4gIGNvbnN0IFtjYWxpYnJhdGlvbkhhbmRsZXIsIHNldENhbGlicmF0aW9uSGFuZGxlcl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW2NhcHR1cmVDb3VudCwgc2V0Q2FwdHVyZUNvdW50XSA9IHVzZVN0YXRlKDEpO1xuICBjb25zdCBbaXNDYXB0dXJpbmcsIHNldElzQ2FwdHVyaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgXG4gIC8vIFRvZ2dsZSBzdGF0ZXNcbiAgY29uc3QgW3Nob3dIZWFkUG9zZSwgc2V0U2hvd0hlYWRQb3NlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3Nob3dCb3VuZGluZ0JveCwgc2V0U2hvd0JvdW5kaW5nQm94XSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3Nob3dNYXNrLCBzZXRTaG93TWFza10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtzaG93UGFyYW1ldGVycywgc2V0U2hvd1BhcmFtZXRlcnNdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbaXNDYW1lcmFBY3RpdmUsIHNldElzQ2FtZXJhQWN0aXZlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW3Nob3dQZXJtaXNzaW9uUG9wdXAsIHNldFNob3dQZXJtaXNzaW9uUG9wdXBdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbY3VycmVudFVzZXJJZCwgc2V0Q3VycmVudFVzZXJJZF0gPSB1c2VTdGF0ZSgnZGVmYXVsdCcpO1xuXG4gIC8vIEFkZCBjYWNoZSBmb3Igc2V0dGluZ3NcbiAgY29uc3Qgc2V0dGluZ3NDYWNoZSA9IHVzZVJlZihuZXcgTWFwKCkpO1xuICBjb25zdCBsYXN0U2V0dGluZ3NVcGRhdGUgPSB1c2VSZWYobmV3IE1hcCgpKTtcblxuICBcbiAgLy8gT3B0aW1pemUgc2V0dGluZ3MgdXBkYXRlc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzZXR0aW5ncyAmJiBjdXJyZW50VXNlcklkICYmIHNldHRpbmdzW2N1cnJlbnRVc2VySWRdKSB7XG4gICAgICBjb25zdCB1c2VyU2V0dGluZ3MgPSBzZXR0aW5nc1tjdXJyZW50VXNlcklkXTtcbiAgICAgIGNvbnN0IGNhY2hlZFNldHRpbmdzID0gc2V0dGluZ3NDYWNoZS5jdXJyZW50LmdldChjdXJyZW50VXNlcklkKTtcbiAgICAgIFxuICAgICAgaWYgKCFpc0VxdWFsKGNhY2hlZFNldHRpbmdzLCB1c2VyU2V0dGluZ3MpKSB7XG4gICAgICAgIHNldFJhbmRvbVRpbWVzKE51bWJlcih1c2VyU2V0dGluZ3MudGltZXNfc2V0X3JhbmRvbSkgfHwgMSk7XG4gICAgICAgIHNldERlbGF5U2Vjb25kcyhOdW1iZXIodXNlclNldHRpbmdzLmRlbGF5X3NldF9yYW5kb20pIHx8IDMpO1xuICAgICAgICBzZXR0aW5nc0NhY2hlLmN1cnJlbnQuc2V0KGN1cnJlbnRVc2VySWQsIHVzZXJTZXR0aW5ncyk7XG4gICAgICAgIGxhc3RTZXR0aW5nc1VwZGF0ZS5jdXJyZW50LnNldChjdXJyZW50VXNlcklkLCBEYXRlLm5vdygpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtzZXR0aW5ncywgY3VycmVudFVzZXJJZF0pO1xuXG4gIC8vIExpc3RlbiBmb3IgdXNlciBJRCBjaGFuZ2VzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlVXNlcklkQ2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQuZGV0YWlsICYmIGV2ZW50LmRldGFpbC50eXBlID09PSAndXNlcklkQ2hhbmdlJykge1xuICAgICAgICBjb25zdCBuZXdVc2VySWQgPSBldmVudC5kZXRhaWwudXNlcklkO1xuICAgICAgICBzZXRDdXJyZW50VXNlcklkKG5ld1VzZXJJZCk7XG4gICAgICAgIC8vIFVwZGF0ZSBzZXR0aW5ncyBmb3IgbmV3IHVzZXJcbiAgICAgICAgaWYgKHNldHRpbmdzICYmIHNldHRpbmdzW25ld1VzZXJJZF0pIHtcbiAgICAgICAgICBjb25zdCB1c2VyU2V0dGluZ3MgPSBzZXR0aW5nc1tuZXdVc2VySWRdO1xuICAgICAgICAgIHNldFJhbmRvbVRpbWVzKE51bWJlcih1c2VyU2V0dGluZ3MudGltZXNfc2V0X3JhbmRvbSkgfHwgMSk7XG4gICAgICAgICAgc2V0RGVsYXlTZWNvbmRzKE51bWJlcih1c2VyU2V0dGluZ3MuZGVsYXlfc2V0X3JhbmRvbSkgfHwgMyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1c2VySWRDaGFuZ2UnLCBoYW5kbGVVc2VySWRDaGFuZ2UpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndXNlcklkQ2hhbmdlJywgaGFuZGxlVXNlcklkQ2hhbmdlKTtcbiAgICB9O1xuICB9LCBbc2V0dGluZ3NdKTtcblxuICAvLyBMaXN0ZW4gZm9yIHNldHRpbmdzIHVwZGF0ZXNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVTZXR0aW5nc1VwZGF0ZSA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50LmRldGFpbCAmJiBldmVudC5kZXRhaWwudHlwZSA9PT0gJ2NhcHR1cmVTZXR0aW5ncycpIHtcbiAgICAgICAgY29uc3QgeyB1c2VySWQsIHRpbWVzX3NldF9yYW5kb20sIGRlbGF5X3NldF9yYW5kb20gfSA9IGV2ZW50LmRldGFpbDtcbiAgICAgICAgaWYgKHVzZXJJZCA9PT0gY3VycmVudFVzZXJJZCkge1xuICAgICAgICAgIGlmICh0aW1lc19zZXRfcmFuZG9tICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1RpbWVzID0gTnVtYmVyKHRpbWVzX3NldF9yYW5kb20pIHx8IDE7XG4gICAgICAgICAgICBzZXRSYW5kb21UaW1lcyhuZXdUaW1lcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkZWxheV9zZXRfcmFuZG9tICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0RlbGF5ID0gTnVtYmVyKGRlbGF5X3NldF9yYW5kb20pIHx8IDM7XG4gICAgICAgICAgICBzZXREZWxheVNlY29uZHMobmV3RGVsYXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NhcHR1cmVTZXR0aW5nc1VwZGF0ZScsIGhhbmRsZVNldHRpbmdzVXBkYXRlKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NhcHR1cmVTZXR0aW5nc1VwZGF0ZScsIGhhbmRsZVNldHRpbmdzVXBkYXRlKTtcbiAgICB9O1xuICB9LCBbY3VycmVudFVzZXJJZF0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gTWFrZSBmdW5jdGlvbnMgZ2xvYmFsbHkgYWNjZXNzaWJsZSBhcyBhIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB3aW5kb3cuYWN0aW9uQnV0dG9uRnVuY3Rpb25zID0ge1xuICAgICAgICBoYW5kbGVSYW5kb21Eb3QsXG4gICAgICAgIGhhbmRsZVNldFJhbmRvbSxcbiAgICAgICAgaGFuZGxlU2V0Q2FsaWJyYXRlLFxuICAgICAgICBoYW5kbGVDbGVhckFsbFxuICAgICAgfTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdBY3Rpb24gYnV0dG9uIGZ1bmN0aW9ucyBleHBvc2VkIHRvIHdpbmRvdy5hY3Rpb25CdXR0b25GdW5jdGlvbnMnKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBkZWxldGUgd2luZG93LmFjdGlvbkJ1dHRvbkZ1bmN0aW9ucztcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gT25seSBpbml0aWFsaXplIGlmIGNhbnZhcyBkb2Vzbid0IGV4aXN0XG4gICAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdHJhY2tpbmctY2FudmFzJykpIHtcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGdldE1haW5DYW52YXMoKTtcbiAgICAgIGNvbnNvbGUubG9nKCdDYW52YXMgaW5pdGlhbGl6ZWQ6JywgY2FudmFzID8gJ3N1Y2Nlc3MnIDogJ2ZhaWxlZCcpO1xuICAgIH1cbiAgICBcbiAgICAvLyBDbGVhbnVwIGZ1bmN0aW9uXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIC8vIERvbid0IHJlbW92ZSBjYW52YXMgb24gY2xlYW51cCB0byBwcmV2ZW50IHJlY3JlYXRpb24gaXNzdWVzXG4gICAgICBjb25zb2xlLmxvZygnQWN0aW9uQnV0dG9uIGNsZWFudXAgLSBjYW52YXMgcHJlc2VydmVkJyk7XG4gICAgfTtcbiAgfSwgW10pO1xuICBcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICBcbiAgICAvLyBGdW5jdGlvbiB0byBnZXQgY29udHJvbCB2YWx1ZXMgZnJvbSBUb3BCYXJcbiAgICBjb25zdCB1cGRhdGVDb250cm9sVmFsdWVzID0gKCkgPT4ge1xuICAgICAgLy8gR2V0IHRoZSB0aW1lIGlucHV0IGVsZW1lbnRcbiAgICAgIGNvbnN0IHRpbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250cm9sLWlucHV0LWZpZWxkW2RhdGEtY29udHJvbD1cInRpbWVcIl0nKTtcbiAgICAgIGlmICh0aW1lSW5wdXQpIHtcbiAgICAgICAgY29uc3QgdGltZVZhbHVlID0gcGFyc2VJbnQodGltZUlucHV0LnZhbHVlLCAxMCk7XG4gICAgICAgIGlmICghaXNOYU4odGltZVZhbHVlKSAmJiB0aW1lVmFsdWUgPiAwKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1VwZGF0aW5nIHJhbmRvbVRpbWVzIHRvOicsIHRpbWVWYWx1ZSk7XG4gICAgICAgICAgc2V0UmFuZG9tVGltZXModGltZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBHZXQgdGhlIGRlbGF5IGlucHV0IGVsZW1lbnRcbiAgICAgIGNvbnN0IGRlbGF5SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udHJvbC1pbnB1dC1maWVsZFtkYXRhLWNvbnRyb2w9XCJkZWxheVwiXScpO1xuICAgICAgaWYgKGRlbGF5SW5wdXQpIHtcbiAgICAgICAgY29uc3QgZGVsYXlWYWx1ZSA9IHBhcnNlSW50KGRlbGF5SW5wdXQudmFsdWUsIDEwKTtcbiAgICAgICAgaWYgKCFpc05hTihkZWxheVZhbHVlKSAmJiBkZWxheVZhbHVlID4gMCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdVcGRhdGluZyBkZWxheVNlY29uZHMgdG86JywgZGVsYXlWYWx1ZSk7XG4gICAgICAgICAgc2V0RGVsYXlTZWNvbmRzKGRlbGF5VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBcbiAgICAvLyBBZGQgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBjb250cm9sIGlucHV0c1xuICAgIGNvbnN0IHRpbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250cm9sLWlucHV0LWZpZWxkW2RhdGEtY29udHJvbD1cInRpbWVcIl0nKTtcbiAgICBjb25zdCBkZWxheUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRyb2wtaW5wdXQtZmllbGRbZGF0YS1jb250cm9sPVwiZGVsYXlcIl0nKTtcbiAgICBcbiAgICBpZiAodGltZUlucHV0KSB7XG4gICAgICB0aW1lSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdXBkYXRlQ29udHJvbFZhbHVlcyk7XG4gICAgICB0aW1lSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB1cGRhdGVDb250cm9sVmFsdWVzKTsgLy8gQWxzbyBsaXN0ZW4gZm9yIGlucHV0IGV2ZW50c1xuICAgIH1cbiAgICBcbiAgICBpZiAoZGVsYXlJbnB1dCkge1xuICAgICAgZGVsYXlJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB1cGRhdGVDb250cm9sVmFsdWVzKTtcbiAgICAgIGRlbGF5SW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB1cGRhdGVDb250cm9sVmFsdWVzKTsgLy8gQWxzbyBsaXN0ZW4gZm9yIGlucHV0IGV2ZW50c1xuICAgIH1cbiAgICBcbiAgICAvLyBJbml0aWFsIHVwZGF0ZVxuICAgIHVwZGF0ZUNvbnRyb2xWYWx1ZXMoKTtcbiAgICBcbiAgICAvLyBDbGVhbnVwIGV2ZW50IGxpc3RlbmVyc1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAodGltZUlucHV0KSB7XG4gICAgICAgIHRpbWVJbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB1cGRhdGVDb250cm9sVmFsdWVzKTtcbiAgICAgICAgdGltZUlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgdXBkYXRlQ29udHJvbFZhbHVlcyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChkZWxheUlucHV0KSB7XG4gICAgICAgIGRlbGF5SW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdXBkYXRlQ29udHJvbFZhbHVlcyk7XG4gICAgICAgIGRlbGF5SW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB1cGRhdGVDb250cm9sVmFsdWVzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgLy8gSW5pdGlhbGl6ZSBjYW52YXMgb24gY29tcG9uZW50IG1vdW50XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaW5pdGlhbGl6ZUNhbnZhcyA9ICgpID0+IHtcbiAgICAgIC8vIFJlbW92ZSBhbnkgZXhpc3RpbmcgY2FudmFzXG4gICAgICBjb25zdCBleGlzdGluZ0NhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50cmFja2luZy1jYW52YXMnKTtcbiAgICAgIGlmIChleGlzdGluZ0NhbnZhcykge1xuICAgICAgICBleGlzdGluZ0NhbnZhcy5yZW1vdmUoKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIG5ldyBjYW52YXNcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgY2FudmFzLmNsYXNzTmFtZSA9ICd0cmFja2luZy1jYW52YXMnO1xuICAgICAgY2FudmFzLmlkID0gJ3RyYWNraW5nLWNhbnZhcyc7XG4gICAgICBjYW52YXMuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICAgIHdpZHRoOiAxMDB2dztcbiAgICAgICAgaGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgIHotaW5kZXg6IDU7XG4gICAgICBgO1xuXG4gICAgICAvLyBTZXQgY2FudmFzIGRpbWVuc2lvbnNcbiAgICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgICAgLy8gQWRkIGNhbnZhcyB0byBib2R5XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7XG5cbiAgICAgIC8vIFN0b3JlIHJlZmVyZW5jZVxuICAgICAgY2FudmFzUmVmLmN1cnJlbnQgPSBjYW52YXM7XG4gICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2luZG93LndoaXRlU2NyZWVuQ2FudmFzID0gY2FudmFzO1xuICAgICAgfVxuXG4gICAgICAvLyBJbml0aWFsaXplIHdpdGggd2hpdGUgYmFja2dyb3VuZFxuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuXG4gICAgICAvLyBBZGQgcmVzaXplIGhhbmRsZXJcbiAgICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICAgICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnd2hpdGUnO1xuICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgIH07XG5cbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuXG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICAgICAgaWYgKGNhbnZhcy5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgY2FudmFzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2FudmFzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgY29uc3QgY2xlYW51cCA9IGluaXRpYWxpemVDYW52YXMoKTtcbiAgICByZXR1cm4gY2xlYW51cDtcbiAgfSwgW10pO1xuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgdGhlIG1haW4gY2FudmFzIC0gaW1wcm92ZWQgdG8gYmUgbW9yZSByZWxpYWJsZVxuICBjb25zdCBnZXRNYWluQ2FudmFzID0gKCkgPT4ge1xuICAgIC8vIEZpcnN0IGNoZWNrIGlmIHdlIGhhdmUgYSB2YWxpZCBjYW52YXMgcmVmZXJlbmNlXG4gICAgaWYgKGNhbnZhc1JlZi5jdXJyZW50ICYmIGRvY3VtZW50LmNvbnRhaW5zKGNhbnZhc1JlZi5jdXJyZW50KSkge1xuICAgICAgcmV0dXJuIGNhbnZhc1JlZi5jdXJyZW50O1xuICAgIH1cbiAgICBcbiAgICAvLyBUcnkgdG8gZmluZCBleGlzdGluZyBjYW52YXMgaW4gRE9NXG4gICAgbGV0IGV4aXN0aW5nQ2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RyYWNraW5nLWNhbnZhcycpO1xuICAgIFxuICAgIGlmIChleGlzdGluZ0NhbnZhcyAmJiBkb2N1bWVudC5jb250YWlucyhleGlzdGluZ0NhbnZhcykpIHtcbiAgICAgIGNhbnZhc1JlZi5jdXJyZW50ID0gZXhpc3RpbmdDYW52YXM7XG4gICAgICB3aW5kb3cud2hpdGVTY3JlZW5DYW52YXMgPSBleGlzdGluZ0NhbnZhcztcbiAgICAgIHJldHVybiBleGlzdGluZ0NhbnZhcztcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgbmV3IGNhbnZhcyBvbmx5IGlmIG5vbmUgZXhpc3RzXG4gICAgY29uc29sZS5sb2coJ0NyZWF0aW5nIG5ldyBjYW52YXMuLi4nKTtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjYW52YXMuY2xhc3NOYW1lID0gJ3RyYWNraW5nLWNhbnZhcyc7XG4gICAgY2FudmFzLmlkID0gJ3RyYWNraW5nLWNhbnZhcyc7XG4gICAgXG4gICAgLy8gU2V0IGluaXRpYWwgZGltZW5zaW9ucyBhbmQgc3R5bGVcbiAgICBjYW52YXMud2lkdGggPSA4MDA7XG4gICAgY2FudmFzLmhlaWdodCA9IDQwMDtcbiAgICBjYW52YXMuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiA0MDBweDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGA7XG4gICAgXG4gICAgLy8gSW5pdGlhbGl6ZSB3aXRoIHdoaXRlIGJhY2tncm91bmRcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICBcbiAgICAvLyBGaW5kIGNvbnRhaW5lciBhbmQgYXBwZW5kXG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbnZhcy1jb250YWluZXInKSB8fCBcbiAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWFpbi1jb250ZW50JykgfHxcbiAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5O1xuICAgIFxuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChjYW52YXMpO1xuICAgIFxuICAgIC8vIFN0b3JlIHJlZmVyZW5jZXNcbiAgICBjYW52YXNSZWYuY3VycmVudCA9IGNhbnZhcztcbiAgICB3aW5kb3cud2hpdGVTY3JlZW5DYW52YXMgPSBjYW52YXM7XG4gICAgXG4gICAgcmV0dXJuIGNhbnZhcztcbiAgfTtcblxuICBjb25zdCBoYW5kbGVQZXJtaXNzaW9uQWNjZXB0ZWQgPSAoKSA9PiB7XG4gICAgc2V0U2hvd1Blcm1pc3Npb25Qb3B1cChmYWxzZSk7XG4gICAgaWYgKHRyaWdnZXJDYW1lcmFBY2Nlc3MpIHtcbiAgICAgIHRyaWdnZXJDYW1lcmFBY2Nlc3ModHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEhhbmRsZXIgdG8gY2FuY2VsIHBlcm1pc3Npb24gcG9wdXBcbiAgY29uc3QgaGFuZGxlUGVybWlzc2lvbkRlbmllZCA9ICgpID0+IHtcbiAgICBzZXRTaG93UGVybWlzc2lvblBvcHVwKGZhbHNlKTtcbiAgfTtcblxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gcmVzdG9yZSB0aGUgY2FudmFzIHRvIGl0cyBvcmlnaW5hbCBwYXJlbnQgYW5kIHN0eWxpbmdcbiAgY29uc3QgcmVzdG9yZUNhbnZhcyA9IChjYW52YXMpID0+IHtcbiAgICBpZiAoIWNhbnZhcyB8fCAhY2FudmFzLl9vcmlnaW5hbFN0YXRlKSByZXR1cm47XG4gICAgXG4gICAgY29uc3Qgb3JpZ2luYWwgPSBjYW52YXMuX29yaWdpbmFsU3RhdGU7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIC8vIFJlc3RvcmUgdG8gb3JpZ2luYWwgcGFyZW50XG4gICAgICBpZiAob3JpZ2luYWwucGFyZW50ICYmIGRvY3VtZW50LmNvbnRhaW5zKG9yaWdpbmFsLnBhcmVudCkpIHtcbiAgICAgICAgb3JpZ2luYWwucGFyZW50LmFwcGVuZENoaWxkKGNhbnZhcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGYWxsYmFjayB0byBhIGNvbnRhaW5lciBpZiBvcmlnaW5hbCBwYXJlbnQgaXMgZ29uZVxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FudmFzLWNvbnRhaW5lcicpIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1haW4tY29udGVudCcpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5O1xuICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2FudmFzKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gUmVzdG9yZSBzdHlsZXNcbiAgICAgIGNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9IG9yaWdpbmFsLnBvc2l0aW9uIHx8ICdyZWxhdGl2ZSc7XG4gICAgICBjYW52YXMuc3R5bGUudG9wID0gb3JpZ2luYWwudG9wIHx8ICcnO1xuICAgICAgY2FudmFzLnN0eWxlLmxlZnQgPSBvcmlnaW5hbC5sZWZ0IHx8ICcnO1xuICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gb3JpZ2luYWwud2lkdGggfHwgJzEwMCUnO1xuICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IG9yaWdpbmFsLmhlaWdodCB8fCAnNDAwcHgnO1xuICAgICAgY2FudmFzLnN0eWxlLnpJbmRleCA9IG9yaWdpbmFsLnpJbmRleCB8fCAnJztcbiAgICAgIGNhbnZhcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnd2hpdGUnO1xuICAgICAgXG4gICAgICAvLyBSZXN0b3JlIGRpbWVuc2lvbnNcbiAgICAgIGNhbnZhcy53aWR0aCA9IG9yaWdpbmFsLmNhbnZhc1dpZHRoIHx8IDgwMDtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBvcmlnaW5hbC5jYW52YXNIZWlnaHQgfHwgNDAwO1xuICAgICAgXG4gICAgICAvLyBDbGVhciB3aXRoIHdoaXRlIGJhY2tncm91bmRcbiAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgIFxuICAgICAgLy8gQ2xlYXIgdGhlIHNhdmVkIHN0YXRlXG4gICAgICBkZWxldGUgY2FudmFzLl9vcmlnaW5hbFN0YXRlO1xuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlc3RvcmluZyBjYW52YXM6JywgZXJyb3IpO1xuICAgICAgLy8gRmFsbGJhY2s6IGp1c3QgY2xlYXIgdGhlIGNhbnZhc1xuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgIH1cbiAgfTtcblxuXG4gIC8vIENsZWFyIHRoZSBjYW52YXNcbiAgY29uc3QgY2xlYXJDYW52YXMgPSAoKSA9PiB7XG4gICAgY29uc3QgY2FudmFzID0gZ2V0TWFpbkNhbnZhcygpO1xuICAgIGlmICghY2FudmFzKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJObyBjYW52YXMgZm91bmQgZm9yIGNsZWFyaW5nXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgc2V0Q3VycmVudERvdChudWxsKTtcbiAgfTtcbiAgLy8gQWRkIHRoaXMgZnVuY3Rpb24gdG8gYWN0aW9uQnV0dG9uLmpzXG5cbiAgLyoqXG4gICAqIENvbnNvbGlkYXRlZCBmdW5jdGlvbiB0aGF0IGhhbmRsZXMgdGhlIGVudGlyZSBkb3QgcHJvY2VzczogZHJhd2luZywgY291bnRkb3duLCBjYXB0dXJlLCBhbmQgcHJldmlld1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIENvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5wb3NpdGlvbiAtIHt4LCB5fSBjb29yZGluYXRlcyB3aGVyZSB0byBkcmF3IHRoZSBkb3RcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucy5vblN0YXR1c1VwZGF0ZSAtIENhbGxiYWNrIGZvciBzdGF0dXMgdXBkYXRlc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLnRvZ2dsZVRvcEJhciAtIEZ1bmN0aW9uIHRvIHRvZ2dsZSB0b3AgYmFyIHZpc2liaWxpdHlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucy50cmlnZ2VyQ2FtZXJhQWNjZXNzIC0gRnVuY3Rpb24gdG8gZW5zdXJlIGNhbWVyYSBpcyBhdmFpbGFibGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucy5zZXRJc0NhcHR1cmluZyAtIEZ1bmN0aW9uIHRvIHVwZGF0ZSBjYXB0dXJpbmcgc3RhdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMuY2FwdHVyZUNvdW50IC0gQ3VycmVudCBjYXB0dXJlIGNvdW50ZXJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucy5zZXRDYXB0dXJlQ291bnQgLSBGdW5jdGlvbiB0byB1cGRhdGUgdGhlIGNhcHR1cmUgY291bnRlclxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMudXNlUmFuZG9tUG9zaXRpb24gLSBXaGV0aGVyIHRvIGdlbmVyYXRlIGEgcmFuZG9tIHBvc2l0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IC0gUmVzdWx0IG9iamVjdCB3aXRoIGNhcHR1cmUgZGF0YVxuICAgKi9cblxuICBjb25zdCBlbnN1cmVDYW52YXNFeGlzdHMgPSAoKSA9PiB7XG4gICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0cmFja2luZy1jYW52YXMnKTtcbiAgICBpZiAoIWNhbnZhcykge1xuICAgICAgLy8gQ3JlYXRlIGNhbnZhc1xuICAgICAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAvLyBET04nVCB1c2UgY2xhc3NOYW1lIHRoYXQgbWlnaHQgaGF2ZSBmaXhlZCBDU1NcbiAgICAgIC8vIGNhbnZhcy5jbGFzc05hbWUgPSAndHJhY2tpbmctY2FudmFzJzsgLy8g4p2MIFRoaXMgbWlnaHQgYXBwbHkgZml4ZWQgZGltZW5zaW9uc1xuICAgICAgY2FudmFzLmlkID0gJ3RyYWNraW5nLWNhbnZhcyc7XG4gICAgICBcbiAgICAgIC8vIEdldCBFWEFDVCB3aW5kb3cgZGltZW5zaW9uc1xuICAgICAgY29uc3Qgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIGNvbnN0IHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgIFxuICAgICAgLy8gU2V0IGNhbnZhcyBpbnRlcm5hbCBkaW1lbnNpb25zXG4gICAgICBjYW52YXMud2lkdGggPSB3aW5kb3dXaWR0aDtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3dIZWlnaHQ7XG4gICAgICBcbiAgICAgIC8vIFVzZSBPTkxZIGlubGluZSBzdHlsZXMgdG8gZW5zdXJlIG5vIENTUyBjbGFzcyBvdmVycmlkZVxuICAgICAgY2FudmFzLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZCAhaW1wb3J0YW50O1xuICAgICAgICB0b3A6IDAgIWltcG9ydGFudDtcbiAgICAgICAgbGVmdDogMCAhaW1wb3J0YW50O1xuICAgICAgICB3aWR0aDogJHt3aW5kb3dXaWR0aH1weCAhaW1wb3J0YW50O1xuICAgICAgICBoZWlnaHQ6ICR7d2luZG93SGVpZ2h0fXB4ICFpbXBvcnRhbnQ7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlICFpbXBvcnRhbnQ7XG4gICAgICAgIGJvcmRlcjogbm9uZSAhaW1wb3J0YW50O1xuICAgICAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xuICAgICAgICB6LWluZGV4OiA5OTk5OSAhaW1wb3J0YW50O1xuICAgICAgICBvcGFjaXR5OiAxICFpbXBvcnRhbnQ7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBhdXRvICFpbXBvcnRhbnQ7XG4gICAgICAgIG1hcmdpbjogMCAhaW1wb3J0YW50O1xuICAgICAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7XG4gICAgICAgIG1heC13aWR0aDogbm9uZSAhaW1wb3J0YW50O1xuICAgICAgICBtYXgtaGVpZ2h0OiBub25lICFpbXBvcnRhbnQ7XG4gICAgICAgIG1pbi13aWR0aDogMCAhaW1wb3J0YW50O1xuICAgICAgICBtaW4taGVpZ2h0OiAwICFpbXBvcnRhbnQ7XG4gICAgICBgO1xuICAgICAgXG4gICAgICAvLyBJbml0aWFsaXplIHdpdGggd2hpdGUgYmFja2dyb3VuZFxuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCB3aW5kb3dXaWR0aCwgd2luZG93SGVpZ2h0KTtcbiAgICAgIFxuICAgICAgLy8gSGlkZSBvdGhlciBVSSBlbGVtZW50c1xuICAgICAgY29uc3QgZWxlbWVudHNUb0hpZGUgPSBbXG4gICAgICAgICcudG9wYmFyJyxcbiAgICAgICAgJy5jYW52YXMtY29udGFpbmVyJywgXG4gICAgICAgICcubWFpbi1jb250ZW50JyxcbiAgICAgICAgJy5tZXRyaWNzLXBhbmVsJyxcbiAgICAgICAgJ25hdicsXG4gICAgICAgICdoZWFkZXInLFxuICAgICAgICAnLmRpc3BsYXktbWV0cmljcydcbiAgICAgIF07XG4gICAgICBcbiAgICAgIGVsZW1lbnRzVG9IaWRlLmZvckVhY2goc2VsZWN0b3IgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICBlbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS1oaWRkZW4tYnktY2FudmFzJywgJ3RydWUnKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQXBwZW5kIHRvIGJvZHlcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcbiAgICAgIHdpbmRvdy53aGl0ZVNjcmVlbkNhbnZhcyA9IGNhbnZhcztcbiAgICAgIFxuICAgICAgLy8gUmVzaXplIGhhbmRsZXIgdGhhdCBtYWludGFpbnMgZXhhY3QgZGltZW5zaW9uc1xuICAgICAgY29uc3QgaGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICBjb25zdCBuZXdIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICAgIFxuICAgICAgICAvLyBVcGRhdGUgYm90aCBpbnRlcm5hbCBhbmQgQ1NTIGRpbWVuc2lvbnMgd2l0aCAhaW1wb3J0YW50XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IG5ld1dpZHRoO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuICAgICAgICBjYW52YXMuc3R5bGUuc2V0UHJvcGVydHkoJ3dpZHRoJywgYCR7bmV3V2lkdGh9cHhgLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5zZXRQcm9wZXJ0eSgnaGVpZ2h0JywgYCR7bmV3SGVpZ2h0fXB4YCwgJ2ltcG9ydGFudCcpO1xuICAgICAgICBcbiAgICAgICAgLy8gUmVkcmF3IHdoaXRlIGJhY2tncm91bmRcbiAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnd2hpdGUnO1xuICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgbmV3V2lkdGgsIG5ld0hlaWdodCk7XG4gICAgICB9O1xuICAgICAgXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcbiAgICAgIGNhbnZhcy5fcmVzaXplSGFuZGxlciA9IGhhbmRsZVJlc2l6ZTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYENhbnZhcyBjcmVhdGVkIHdpdGggRVhBQ1Qgd2luZG93IHNpemU6ICR7d2luZG93V2lkdGh9eCR7d2luZG93SGVpZ2h0fWApO1xuICAgICAgXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIGNhbnZhcyBhbHJlYWR5IGV4aXN0cywgZm9yY2UgdXBkYXRlIGl0cyBkaW1lbnNpb25zXG4gICAgICBjb25zdCB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgY29uc3Qgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgXG4gICAgICAvLyBPdmVycmlkZSBhbnkgZXhpc3RpbmcgQ1NTIGNsYXNzIHdpdGggaW5saW5lIHN0eWxlc1xuICAgICAgY2FudmFzLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZCAhaW1wb3J0YW50O1xuICAgICAgICB0b3A6IDAgIWltcG9ydGFudDtcbiAgICAgICAgbGVmdDogMCAhaW1wb3J0YW50O1xuICAgICAgICB3aWR0aDogJHt3aW5kb3dXaWR0aH1weCAhaW1wb3J0YW50O1xuICAgICAgICBoZWlnaHQ6ICR7d2luZG93SGVpZ2h0fXB4ICFpbXBvcnRhbnQ7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlICFpbXBvcnRhbnQ7XG4gICAgICAgIGJvcmRlcjogbm9uZSAhaW1wb3J0YW50O1xuICAgICAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xuICAgICAgICB6LWluZGV4OiA5OTk5OSAhaW1wb3J0YW50O1xuICAgICAgICBvcGFjaXR5OiAxICFpbXBvcnRhbnQ7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBhdXRvICFpbXBvcnRhbnQ7XG4gICAgICAgIG1hcmdpbjogMCAhaW1wb3J0YW50O1xuICAgICAgICBwYWRkaW5nOiAwICFpbXBvcnRhbnQ7XG4gICAgICAgIG1heC13aWR0aDogbm9uZSAhaW1wb3J0YW50O1xuICAgICAgICBtYXgtaGVpZ2h0OiBub25lICFpbXBvcnRhbnQ7XG4gICAgICAgIG1pbi13aWR0aDogMCAhaW1wb3J0YW50O1xuICAgICAgICBtaW4taGVpZ2h0OiAwICFpbXBvcnRhbnQ7XG4gICAgICBgO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgaW50ZXJuYWwgZGltZW5zaW9uc1xuICAgICAgY2FudmFzLndpZHRoID0gd2luZG93V2lkdGg7XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gd2luZG93SGVpZ2h0O1xuICAgICAgXG4gICAgICAvLyBSZWRyYXcgd2hpdGUgYmFja2dyb3VuZFxuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCB3aW5kb3dXaWR0aCwgd2luZG93SGVpZ2h0KTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYENhbnZhcyB1cGRhdGVkIHRvIEVYQUNUIHdpbmRvdyBzaXplOiAke3dpbmRvd1dpZHRofXgke3dpbmRvd0hlaWdodH1gKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGNhbnZhcztcbiAgfTtcbiAgLy8gQ2xlYW51cCBmdW5jdGlvbiB0byByZW1vdmUgY2FudmFzIGFuZCBpdHMgcHJvcGVydGllc1xuICBjb25zdCBjbGVhbnVwQ2FudmFzID0gKCkgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0cmFja2luZy1jYW52YXMnKTtcbiAgICBpZiAoY2FudmFzKSB7XG4gICAgICAvLyBSZW1vdmUgcmVzaXplIGV2ZW50IGxpc3RlbmVyIGlmIGl0IGV4aXN0c1xuICAgICAgaWYgKGNhbnZhcy5fcmVzaXplSGFuZGxlcikge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgY2FudmFzLl9yZXNpemVIYW5kbGVyKTtcbiAgICAgICAgZGVsZXRlIGNhbnZhcy5fcmVzaXplSGFuZGxlcjtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gUmVtb3ZlIGNhbnZhcyBmcm9tIERPTVxuICAgICAgaWYgKGNhbnZhcy5wYXJlbnROb2RlKSB7XG4gICAgICAgIGNhbnZhcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNhbnZhcyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIENsZWFyIGdsb2JhbCByZWZlcmVuY2VzXG4gICAgICBpZiAod2luZG93LndoaXRlU2NyZWVuQ2FudmFzID09PSBjYW52YXMpIHtcbiAgICAgICAgZGVsZXRlIHdpbmRvdy53aGl0ZVNjcmVlbkNhbnZhcztcbiAgICAgIH1cbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coJ0NhbnZhcyBjbGVhbmVkIHVwIGFuZCByZW1vdmVkJyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIE1vZGlmaWVkIGNhbnZhcyByZXN0b3JlIGZ1bmN0aW9uIGZvciB0ZW1wb3Jhcnkgb3BlcmF0aW9uc1xuICBjb25zdCByZXN0b3JlQ2FudmFzVG9Db250YWluZXIgPSAoY2FudmFzKSA9PiB7XG4gICAgaWYgKCFjYW52YXMpIHJldHVybjtcbiAgICBcbiAgICAvLyBSZW1vdmUgcmVzaXplIGhhbmRsZXJcbiAgICBpZiAoY2FudmFzLl9yZXNpemVIYW5kbGVyKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgY2FudmFzLl9yZXNpemVIYW5kbGVyKTtcbiAgICAgIGRlbGV0ZSBjYW52YXMuX3Jlc2l6ZUhhbmRsZXI7XG4gICAgfVxuICAgIFxuICAgIC8vIFNob3cgYWxsIHByZXZpb3VzbHkgaGlkZGVuIFVJIGVsZW1lbnRzXG4gICAgY29uc3QgaGlkZGVuRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1oaWRkZW4tYnktY2FudmFzPVwidHJ1ZVwiXScpO1xuICAgIGhpZGRlbkVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWhpZGRlbi1ieS1jYW52YXMnKTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBGaW5kIGFwcHJvcHJpYXRlIGNvbnRhaW5lclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYW52YXMtY29udGFpbmVyJykgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1haW4tY29udGVudCcpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keTtcbiAgICBcbiAgICAvLyBNb3ZlIGNhbnZhcyB0byBjb250YWluZXJcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoY2FudmFzKTtcbiAgICBcbiAgICAvLyBSZXNldCB0byBjb250YWluZXItZnJpZW5kbHkgZGltZW5zaW9uc1xuICAgIGNvbnN0IGNvbnRhaW5lcldpZHRoID0gY29udGFpbmVyLmNsaWVudFdpZHRoIHx8IDgwMDtcbiAgICBjb25zdCBjb250YWluZXJIZWlnaHQgPSA0MDA7XG4gICAgXG4gICAgY2FudmFzLndpZHRoID0gY29udGFpbmVyV2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGNvbnRhaW5lckhlaWdodDtcbiAgICBcbiAgICAvLyBSZXNldCBDU1MgZm9yIGNvbnRhaW5lciBtb2RlXG4gICAgY2FudmFzLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogNDAwcHg7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIHotaW5kZXg6IGF1dG87XG4gICAgICBvcGFjaXR5OiAxO1xuICAgICAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gICAgYDtcbiAgICBcbiAgICAvLyBDbGVhciBhbmQgcmVkcmF3IHdoaXRlIGJhY2tncm91bmRcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYENhbnZhcyByZXN0b3JlZCB0byBjb250YWluZXIgbW9kZTogJHtjb250YWluZXJXaWR0aH14JHtjb250YWluZXJIZWlnaHR9YCk7XG4gIH07XG4gIFxuICAvLyBNb2RpZmllZCBoYW5kbGVEb3RQcm9jZXNzIGZ1bmN0aW9uIHdpdGggaW1wcm92ZWQgZG90IGFuZCBjb3VudGRvd24gYWxpZ25tZW50XG4gIC8vIENvbXBsZXRlIGhhbmRsZURvdFByb2Nlc3MgZnVuY3Rpb24gd2l0aCBwcm9wZXIgY2FudmFzIG1hbmFnZW1lbnRcbiAgY29uc3QgaGFuZGxlRG90UHJvY2VzcyA9IGFzeW5jIChvcHRpb25zKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgcG9zaXRpb24sXG4gICAgICBvblN0YXR1c1VwZGF0ZSxcbiAgICAgIHRvZ2dsZVRvcEJhcixcbiAgICAgIHRyaWdnZXJDYW1lcmFBY2Nlc3MsXG4gICAgICBzZXRJc0NhcHR1cmluZyxcbiAgICAgIGNhcHR1cmVDb3VudCxcbiAgICAgIHNldENhcHR1cmVDb3VudCxcbiAgICAgIHVzZVJhbmRvbVBvc2l0aW9uID0gZmFsc2UsXG4gICAgICBwb3N0Q291bnRkb3duRGVsYXkgPSA1MDAgXG4gICAgfSA9IG9wdGlvbnM7XG4gICAgXG4gICAgbGV0IGNhbnZhcyA9IG51bGw7XG4gICAgbGV0IGtlZXBEb3RWaXNpYmxlSW50ZXJ2YWwgPSBudWxsO1xuICAgIGxldCBjb3VudGRvd25FbGVtZW50ID0gbnVsbDtcbiAgICBcbiAgICB0cnkge1xuICAgICAgLy8gSGlkZSB0aGUgVG9wQmFyIGJlZm9yZSBzaG93aW5nIHRoZSBkb3RcbiAgICAgIGlmICh0eXBlb2YgdG9nZ2xlVG9wQmFyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRvZ2dsZVRvcEJhcihmYWxzZSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy50b2dnbGVUb3BCYXIpIHtcbiAgICAgICAgd2luZG93LnRvZ2dsZVRvcEJhcihmYWxzZSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFNldCBjYXB0dXJpbmcgc3RhdGVcbiAgICAgIHNldElzQ2FwdHVyaW5nKHRydWUpO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgc3RhdHVzXG4gICAgICBvblN0YXR1c1VwZGF0ZT8uKHtcbiAgICAgICAgcHJvY2Vzc1N0YXR1czogdXNlUmFuZG9tUG9zaXRpb24gPyAnR2VuZXJhdGluZyByYW5kb20gZG90Li4uJyA6ICdTdGFydGluZyBkb3QgcHJvY2Vzcy4uLicsXG4gICAgICAgIGlzQ2FwdHVyaW5nOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gV2FpdCBmb3IgVUkgdXBkYXRlcyB0byB0YWtlIGVmZmVjdFxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDIwMCkpO1xuICAgICAgXG4gICAgICAvLyBVc2UgZW5zdXJlQ2FudmFzRXhpc3RzIHRvIGdldCBvciBjcmVhdGUgY2FudmFzXG4gICAgICBjYW52YXMgPSBlbnN1cmVDYW52YXNFeGlzdHMoKTtcbiAgICAgIGlmICghY2FudmFzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgb3IgZmluZCBjYW52YXNcIik7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIENhbnZhcyBpcyBhbHJlYWR5IHNldCB0byBmdWxsc2NyZWVuIGJ5IGVuc3VyZUNhbnZhc0V4aXN0c1xuICAgICAgY29uc3QgY2FudmFzV2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICBjb25zdCBjYW52YXNIZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xuICAgICAgXG4gICAgICAvLyBHZXQgY29udGV4dCBhbmQgY2xlYXIgY2FudmFzIHdpdGggd2hpdGUgYmFja2dyb3VuZFxuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCk7XG4gICAgICBcbiAgICAgIC8vIEdldCBwb3NpdGlvbiBmb3IgdGhlIGRvdCAtIGVpdGhlciB1c2UgcHJvdmlkZWQgcG9zaXRpb24gb3IgZ2VuZXJhdGUgcmFuZG9tIG9uZVxuICAgICAgY29uc3QgZG90UG9zaXRpb24gPSB1c2VSYW5kb21Qb3NpdGlvbiBcbiAgICAgICAgPyBnZXRSYW5kb21Qb3NpdGlvbihjYW52YXMsIDIwKSBcbiAgICAgICAgOiBwb3NpdGlvbjtcbiAgICAgIFxuICAgICAgaWYgKCFkb3RQb3NpdGlvbiB8fCB0eXBlb2YgZG90UG9zaXRpb24ueCAhPT0gJ251bWJlcicgfHwgdHlwZW9mIGRvdFBvc2l0aW9uLnkgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZG90IHBvc2l0aW9uXCIpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBEcmF3IHRoZSBkb3RcbiAgICAgIGNvbnN0IGRvdFJhZGl1cyA9IDEyO1xuICAgICAgZHJhd1JlZERvdChjdHgsIGRvdFBvc2l0aW9uLngsIGRvdFBvc2l0aW9uLnksIGRvdFJhZGl1cywgZmFsc2UpO1xuICAgICAgXG4gICAgICAvLyBDcmVhdGUgYSByZWRyYXcgaW50ZXJ2YWwgdG8gZW5zdXJlIGRvdCBzdGF5cyB2aXNpYmxlXG4gICAgICBrZWVwRG90VmlzaWJsZUludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBkcmF3UmVkRG90KGN0eCwgZG90UG9zaXRpb24ueCwgZG90UG9zaXRpb24ueSwgZG90UmFkaXVzLCBmYWxzZSk7XG4gICAgICB9LCA1MCk7ICAvLyBNb3JlIGZyZXF1ZW50IHVwZGF0ZXMgZm9yIHJlbGlhYmlsaXR5XG4gICAgICBcbiAgICAgIC8vIFJlbW92ZSBhbnkgZXhpc3RpbmcgY291bnRkb3duIGVsZW1lbnRzXG4gICAgICBjb25zdCBleGlzdGluZ0NvdW50ZG93bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZG90LWNvdW50ZG93biwgLmNhbGlicmF0ZS1jb3VudGRvd24nKTtcbiAgICAgIGV4aXN0aW5nQ291bnRkb3ducy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgaWYgKGVsLnBhcmVudE5vZGUpIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIENyZWF0ZSBhIGNvdW50ZG93biBlbGVtZW50IGRpcmVjdGx5IG9uIHRvcCBvZiB0aGUgZG90XG4gICAgICBjb3VudGRvd25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb3VudGRvd25FbGVtZW50LmNsYXNzTmFtZSA9ICdkb3QtY291bnRkb3duJztcbiAgICAgIGNvdW50ZG93bkVsZW1lbnQuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICBsZWZ0OiAke2RvdFBvc2l0aW9uLnh9cHg7XG4gICAgICAgIHRvcDogJHtkb3RQb3NpdGlvbi55fXB4O1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICAgZm9udC1zaXplOiAzNnB4O1xuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgdGV4dC1zaGFkb3c6IDAgMCAxMHB4IHdoaXRlLCAwIDAgMjBweCB3aGl0ZTtcbiAgICAgICAgei1pbmRleDogMTAwMDA7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTtcbiAgICAgICAgYm9yZGVyOiAycHggc29saWQgcmVkO1xuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgIHdpZHRoOiA1MHB4O1xuICAgICAgICBoZWlnaHQ6IDUwcHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBib3gtc2hhZG93OiAwIDAgMTBweCByZ2JhKDAsIDAsIDAsIDAuMyk7XG4gICAgICBgO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb3VudGRvd25FbGVtZW50KTtcbiAgICAgIFxuICAgICAgLy8gTWFudWFsIGNvdW50ZG93blxuICAgICAgZm9yIChsZXQgY291bnQgPSAzOyBjb3VudCA+IDA7IGNvdW50LS0pIHtcbiAgICAgICAgY291bnRkb3duRWxlbWVudC50ZXh0Q29udGVudCA9IGNvdW50O1xuICAgICAgICBcbiAgICAgICAgb25TdGF0dXNVcGRhdGU/Lih7XG4gICAgICAgICAgcHJvY2Vzc1N0YXR1czogYENvdW50ZG93bjogJHtjb3VudH1gLFxuICAgICAgICAgIGNvdW50ZG93blZhbHVlOiBjb3VudCxcbiAgICAgICAgICBpc0NhcHR1cmluZzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFJlZHJhdyB0aGUgZG90IGZvciByZWxpYWJpbGl0eVxuICAgICAgICBkcmF3UmVkRG90KGN0eCwgZG90UG9zaXRpb24ueCwgZG90UG9zaXRpb24ueSwgZG90UmFkaXVzLCBmYWxzZSk7XG4gICAgICAgIFxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgODAwKSk7XG4gICAgICAgIFxuICAgICAgICAvLyBBZGRpdGlvbmFsIHJlZHJhdyBkdXJpbmcgY291bnRkb3duIHRvIGVuc3VyZSB2aXNpYmlsaXR5XG4gICAgICAgIGRyYXdSZWREb3QoY3R4LCBkb3RQb3NpdGlvbi54LCBkb3RQb3NpdGlvbi55LCBkb3RSYWRpdXMsIGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gU2hvdyBjaGVja21hcmtcbiAgICAgIGNvdW50ZG93bkVsZW1lbnQudGV4dENvbnRlbnQgPSBcIuKck1wiO1xuICAgICAgLy8gTWFrZSBzdXJlIGRvdCBpcyBzdGlsbCB2aXNpYmxlXG4gICAgICBkcmF3UmVkRG90KGN0eCwgZG90UG9zaXRpb24ueCwgZG90UG9zaXRpb24ueSwgZG90UmFkaXVzLCBmYWxzZSk7XG4gICAgICBcbiAgICAgIC8vIFJlbW92ZSBjb3VudGRvd24gZWxlbWVudCBhZnRlciBkZWxheVxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmIChjb3VudGRvd25FbGVtZW50ICYmIGNvdW50ZG93bkVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGNvdW50ZG93bkVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjb3VudGRvd25FbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfSwgMzAwKTtcbiAgICAgIFxuICAgICAgLy8gV2FpdCBhZnRlciBjb3VudGRvd24gY29tcGxldGVzXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgcG9zdENvdW50ZG93bkRlbGF5KSk7XG4gICAgICBcbiAgICAgIC8vIEVuc3VyZSB0aGUgZG90IGlzIHN0aWxsIHZpc2libGVcbiAgICAgIGRyYXdSZWREb3QoY3R4LCBkb3RQb3NpdGlvbi54LCBkb3RQb3NpdGlvbi55LCBkb3RSYWRpdXMsIGZhbHNlKTtcbiAgICAgIFxuICAgICAgLy8gQ2FwdHVyZSBpbWFnZXMgYXQgdGhpcyBwb2ludFxuICAgICAgY29uc3QgY2FwdHVyZVJlc3VsdCA9IGF3YWl0IGNhcHR1cmVJbWFnZXNBdFBvaW50KHtcbiAgICAgICAgcG9pbnQ6IGRvdFBvc2l0aW9uLFxuICAgICAgICBjYXB0dXJlQ291bnQ6IGNhcHR1cmVDb3VudCxcbiAgICAgICAgY2FudmFzUmVmOiB7IGN1cnJlbnQ6IGNhbnZhcyB9LFxuICAgICAgICBzZXRDYXB0dXJlQ291bnQ6IHNldENhcHR1cmVDb3VudCxcbiAgICAgICAgc2hvd0NhcHR1cmVQcmV2aWV3XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gVXBkYXRlIHN0YXR1c1xuICAgICAgb25TdGF0dXNVcGRhdGU/Lih7XG4gICAgICAgIHByb2Nlc3NTdGF0dXM6ICdDYXB0dXJlIGNvbXBsZXRlZCcsXG4gICAgICAgIGlzQ2FwdHVyaW5nOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHBvc2l0aW9uOiBkb3RQb3NpdGlvbixcbiAgICAgICAgY2FwdHVyZVJlc3VsdFxuICAgICAgfTtcbiAgICAgIFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gaGFuZGxlRG90UHJvY2VzczpcIiwgZXJyb3IpO1xuICAgICAgXG4gICAgICBvblN0YXR1c1VwZGF0ZT8uKHtcbiAgICAgICAgcHJvY2Vzc1N0YXR1czogYEVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCxcbiAgICAgICAgaXNDYXB0dXJpbmc6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlXG4gICAgICB9O1xuICAgICAgXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIENsZWFyIHJlZHJhdyBpbnRlcnZhbCBmaXJzdFxuICAgICAgaWYgKGtlZXBEb3RWaXNpYmxlSW50ZXJ2YWwpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChrZWVwRG90VmlzaWJsZUludGVydmFsKTtcbiAgICAgICAga2VlcERvdFZpc2libGVJbnRlcnZhbCA9IG51bGw7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFJlbW92ZSBjb3VudGRvd24gZWxlbWVudCBpZiBpdCBzdGlsbCBleGlzdHNcbiAgICAgIGlmIChjb3VudGRvd25FbGVtZW50ICYmIGNvdW50ZG93bkVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICBjb3VudGRvd25FbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY291bnRkb3duRWxlbWVudCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIGNvdW50ZG93biBlbGVtZW50c1xuICAgICAgY29uc3QgcmVtYWluaW5nQ291bnRkb3ducyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kb3QtY291bnRkb3duLCAuY2FsaWJyYXRlLWNvdW50ZG93bicpO1xuICAgICAgcmVtYWluaW5nQ291bnRkb3ducy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgaWYgKGVsLnBhcmVudE5vZGUpIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIC8vIFVzZSByZXN0b3JlQ2FudmFzVG9Db250YWluZXIgdG8gcHJvcGVybHkgcmVzdG9yZSBjYW52YXNcbiAgICAgIGlmIChjYW52YXMpIHtcbiAgICAgICAgcmVzdG9yZUNhbnZhc1RvQ29udGFpbmVyKGNhbnZhcyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFNob3cgVG9wQmFyIGFnYWluIGFmdGVyIGEgZGVsYXlcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRvZ2dsZVRvcEJhciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRvZ2dsZVRvcEJhcih0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cudG9nZ2xlVG9wQmFyKSB7XG4gICAgICAgICAgd2luZG93LnRvZ2dsZVRvcEJhcih0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICB9O1xuICBcbiAgY29uc3QgaGFuZGxlU2V0Q2FsaWJyYXRlID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmIChpc0NhcHR1cmluZykgcmV0dXJuO1xuICAgIFxuICAgIC8vIERlY2xhcmUgdGhlc2UgdmFyaWFibGVzIE9VVFNJREUgdGhlIHRyeSBibG9ja1xuICAgIGxldCBjYW52YXMgPSBudWxsO1xuICAgIGxldCBvcmlnaW5hbENhbnZhc1BhcmVudCA9IG51bGw7XG4gICAgbGV0IG9yaWdpbmFsQ2FudmFzU3R5bGUgPSB7fTtcbiAgICBsZXQgc3RhdHVzSW5kaWNhdG9yID0gbnVsbDtcbiAgICBsZXQgY3VycmVudFJlZHJhd0ludGVydmFsID0gbnVsbDtcblxuICAgIHRyeSB7XG4gICAgICBjYW52YXMgPSBlbnN1cmVDYW52YXNFeGlzdHMoKTtcbiAgICAgIGlmICghY2FudmFzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgY2FudmFzIGZvciBjYWxpYnJhdGlvbicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBIaWRlIFRvcEJhclxuICAgICAgaWYgKHR5cGVvZiBvbkFjdGlvbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9uQWN0aW9uQ2xpY2soJ3RvZ2dsZVRvcEJhcicsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnRvZ2dsZVRvcEJhcikge1xuICAgICAgICB3aW5kb3cudG9nZ2xlVG9wQmFyKGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgc2V0SXNDYXB0dXJpbmcodHJ1ZSk7XG4gICAgICBzZXRTaG93Q2FudmFzKHRydWUpO1xuICAgICAgc2V0UHJvY2Vzc1N0YXR1cyhcIlN0YXJ0aW5nIGNhbGlicmF0aW9uIHNlcXVlbmNlLi4uXCIpO1xuICAgICAgXG4gICAgICAvLyBXYWl0IGZvciBVSSB1cGRhdGVzIHRvIHRha2UgZWZmZWN0XG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMzAwKSk7XG4gICAgICBcbiAgICAgIC8vIEdldCBjYW52YXMgcmVmZXJlbmNlXG4gICAgICBjYW52YXMgPSBnZXRNYWluQ2FudmFzKCk7XG4gICAgICBpZiAoIWNhbnZhcykge1xuICAgICAgICBzZXRQcm9jZXNzU3RhdHVzKFwiRXJyb3I6IENhbnZhcyBub3QgZm91bmRcIik7XG4gICAgICAgIHNldElzQ2FwdHVyaW5nKGZhbHNlKTtcbiAgICAgICAgaWYgKHR5cGVvZiBvbkFjdGlvbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgb25BY3Rpb25DbGljaygndG9nZ2xlVG9wQmFyJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBTYXZlIG9yaWdpbmFsIHBhcmVudCBhbmQgc3R5bGVcbiAgICAgIG9yaWdpbmFsQ2FudmFzUGFyZW50ID0gY2FudmFzLnBhcmVudEVsZW1lbnQ7XG4gICAgICBvcmlnaW5hbENhbnZhc1N0eWxlID0ge1xuICAgICAgICBwb3NpdGlvbjogY2FudmFzLnN0eWxlLnBvc2l0aW9uLFxuICAgICAgICB0b3A6IGNhbnZhcy5zdHlsZS50b3AsXG4gICAgICAgIGxlZnQ6IGNhbnZhcy5zdHlsZS5sZWZ0LFxuICAgICAgICB3aWR0aDogY2FudmFzLnN0eWxlLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IGNhbnZhcy5zdHlsZS5oZWlnaHQsXG4gICAgICAgIHpJbmRleDogY2FudmFzLnN0eWxlLnpJbmRleFxuICAgICAgfTtcbiAgICAgIFxuICAgICAgLy8gTW92ZSBjYW52YXMgdG8gYm9keSBmb3IgbWF4aW11bSByZWxpYWJpbGl0eVxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xuICAgICAgXG4gICAgICAvLyBNYWtlIGNhbnZhcyBmdWxsc2NyZWVuIHdpdGggZml4ZWQgcG9zaXRpb25pbmdcbiAgICAgIGNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgICBjYW52YXMuc3R5bGUudG9wID0gJzAnO1xuICAgICAgY2FudmFzLnN0eWxlLmxlZnQgPSAnMCc7XG4gICAgICBjYW52YXMuc3R5bGUud2lkdGggPSAnMTAwdncnO1xuICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9ICcxMDB2aCc7XG4gICAgICBjYW52YXMuc3R5bGUuekluZGV4ID0gJzEwJztcbiAgICAgIFxuICAgICAgLy8gU2V0IGRpbWVuc2lvbnMgdG8gbWF0Y2ggd2luZG93IGV4YWN0bHlcbiAgICAgIGNvbnN0IGNhbnZhc1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICBjb25zdCBjYW52YXNIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICBjYW52YXMud2lkdGggPSBjYW52YXNXaWR0aDtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXNIZWlnaHQ7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKGBDYW52YXMgc2V0IHRvIGZ1bGxzY3JlZW46ICR7Y2FudmFzV2lkdGh9eCR7Y2FudmFzSGVpZ2h0fWApO1xuICAgICAgXG4gICAgICAvLyBHZXQgY29udGV4dFxuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBcbiAgICAgIC8vIENsZWFyIGNhbnZhcyB3aXRoIHdoaXRlIGJhY2tncm91bmRcbiAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KTtcblxuICAgICAgLy8gR2VuZXJhdGUgY2FsaWJyYXRpb24gcG9pbnRzIGJhc2VkIG9uIHRoZSBjYW52YXMgc2l6ZVxuICAgICAgY29uc3QgeyBnZW5lcmF0ZUNhbGlicmF0aW9uUG9pbnRzIH0gPSBhd2FpdCBpbXBvcnQoJy4uLy4uLy4uL2NvbXBvbmVudHMvY29sbGVjdGVkLWRhdGFzZXQtY3VzdG9taXplZC9BY3Rpb24vQ2FsaWJyYXRlUG9pbnRzJyk7XG4gICAgICBjb25zdCBwb2ludHMgPSBnZW5lcmF0ZUNhbGlicmF0aW9uUG9pbnRzKGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQpO1xuICAgICAgXG4gICAgICBpZiAoIXBvaW50cyB8fCBwb2ludHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZW5lcmF0ZSBjYWxpYnJhdGlvbiBwb2ludHNcIik7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIENyZWF0ZSBhIHN0YXR1cyBpbmRpY2F0b3JcbiAgICAgIHN0YXR1c0luZGljYXRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc3RhdHVzSW5kaWNhdG9yLmNsYXNzTmFtZSA9ICdjYWxpYnJhdGUtc3RhdHVzLWluZGljYXRvcic7XG4gICAgICBzdGF0dXNJbmRpY2F0b3Iuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICB0b3A6IDIwcHg7XG4gICAgICAgIHJpZ2h0OiAyMHB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDEwMiwgMjA0LCAwLjkpO1xuICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgIHBhZGRpbmc6IDEwcHggMTVweDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgICAgICB6LWluZGV4OiAxMDAwMDtcbiAgICAgICAgYm94LXNoYWRvdzogMCA0cHggMTJweCByZ2JhKDAsIDAsIDAsIDAuMyk7XG4gICAgICBgO1xuICAgICAgc3RhdHVzSW5kaWNhdG9yLnRleHRDb250ZW50ID0gJ0NhbGlicmF0aW9uOiBJbml0aWFsaXppbmcuLi4nO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzdGF0dXNJbmRpY2F0b3IpO1xuICAgICAgXG4gICAgICAvLyBQcm9jZXNzIGVhY2ggY2FsaWJyYXRpb24gcG9pbnRcbiAgICAgIGxldCBzdWNjZXNzQ291bnQgPSAwO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgIFxuICAgICAgICAvLyBDbGVhciBhbnkgZXhpc3RpbmcgcmVkcmF3IGludGVydmFsXG4gICAgICAgIGlmIChjdXJyZW50UmVkcmF3SW50ZXJ2YWwpIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKGN1cnJlbnRSZWRyYXdJbnRlcnZhbCk7XG4gICAgICAgICAgY3VycmVudFJlZHJhd0ludGVydmFsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gVXBkYXRlIHN0YXR1cyBkaXNwbGF5c1xuICAgICAgICBzdGF0dXNJbmRpY2F0b3IudGV4dENvbnRlbnQgPSBgQ2FsaWJyYXRpb246IFBvaW50ICR7aSArIDF9LyR7cG9pbnRzLmxlbmd0aH1gO1xuICAgICAgICBzZXRQcm9jZXNzU3RhdHVzKGBQcm9jZXNzaW5nIGNhbGlicmF0aW9uIHBvaW50ICR7aSArIDF9LyR7cG9pbnRzLmxlbmd0aH1gKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFJlc2V0IGNhbnZhcyBpZiBkaW1lbnNpb25zIGNoYW5nZWRcbiAgICAgICAgaWYgKGNhbnZhcy53aWR0aCAhPT0gY2FudmFzV2lkdGggfHwgY2FudmFzLmhlaWdodCAhPT0gY2FudmFzSGVpZ2h0KSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGBDYW52YXMgZGltZW5zaW9ucyBjaGFuZ2VkLiBSZXNldHRpbmcgdG8gJHtjYW52YXNXaWR0aH14JHtjYW52YXNIZWlnaHR9YCk7XG4gICAgICAgICAgY2FudmFzLndpZHRoID0gY2FudmFzV2lkdGg7XG4gICAgICAgICAgY2FudmFzLmhlaWdodCA9IGNhbnZhc0hlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gTWFrZSBzdXJlIGNhbnZhcyBpcyBzdGlsbCBhdHRhY2hlZCB0byBib2R5IGFuZCBpbiBmdWxsc2NyZWVuIG1vZGVcbiAgICAgICAgaWYgKGNhbnZhcy5wYXJlbnRFbGVtZW50ICE9PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xuICAgICAgICAgIGNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgICAgICAgY2FudmFzLnN0eWxlLnRvcCA9ICcwJztcbiAgICAgICAgICBjYW52YXMuc3R5bGUubGVmdCA9ICcwJztcbiAgICAgICAgICBjYW52YXMuc3R5bGUud2lkdGggPSAnMTAwdncnO1xuICAgICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSAnMTAwdmgnO1xuICAgICAgICAgIGNhbnZhcy5zdHlsZS56SW5kZXggPSAnMTAnO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBDbGVhciBjYW52YXMgd2l0aCB3aGl0ZSBiYWNrZ3JvdW5kXG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSAnd2hpdGUnO1xuICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCk7XG4gICAgICAgIFxuICAgICAgICAvLyBEcmF3IHRoZSBjYWxpYnJhdGlvbiBwb2ludFxuICAgICAgICBjb25zdCByYWRpdXMgPSAxNDsgLy8gU2xpZ2h0bHkgbGFyZ2VyIGZvciBiZXR0ZXIgdmlzaWJpbGl0eVxuICAgICAgICBkcmF3UmVkRG90KGN0eCwgcG9pbnQueCwgcG9pbnQueSwgcmFkaXVzLCBmYWxzZSk7XG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhdGUgcmVkcmF3IGZ1bmN0aW9uIGZvciB0aGlzIHBvaW50XG4gICAgICAgIGNvbnN0IHJlZHJhd0N1cnJlbnREb3QgPSAoKSA9PiB7XG4gICAgICAgICAgLy8gVmVyaWZ5IGNhbnZhcyBkaW1lbnNpb25zIGFuZCBwYXJlbnRcbiAgICAgICAgICBpZiAoY2FudmFzLndpZHRoICE9PSBjYW52YXNXaWR0aCB8fCBjYW52YXMuaGVpZ2h0ICE9PSBjYW52YXNIZWlnaHQpIHtcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IGNhbnZhc1dpZHRoO1xuICAgICAgICAgICAgY2FudmFzLmhlaWdodCA9IGNhbnZhc0hlaWdodDtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAnd2hpdGUnO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBNYWtlIHN1cmUgY2FudmFzIGlzIHN0aWxsIGF0dGFjaGVkIHRvIGJvZHlcbiAgICAgICAgICBpZiAoY2FudmFzLnBhcmVudEVsZW1lbnQgIT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gUmVkcmF3IGRvdCB3aXRob3V0IGNsZWFyaW5nXG4gICAgICAgICAgZHJhd1JlZERvdChjdHgsIHBvaW50LngsIHBvaW50LnksIHJhZGl1cywgZmFsc2UpO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gU3RhcnQgcmVkcmF3IGludGVydmFsIC0gbW9yZSBmcmVxdWVudCB1cGRhdGVzIGZvciByZWxpYWJsZSBkb3QgdmlzaWJpbGl0eVxuICAgICAgICBjdXJyZW50UmVkcmF3SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChyZWRyYXdDdXJyZW50RG90LCA1MCk7XG4gICAgICAgIFxuICAgICAgICAvLyBSZW1vdmUgYW55IGV4aXN0aW5nIGNvdW50ZG93biBlbGVtZW50c1xuICAgICAgICBjb25zdCBleGlzdGluZ0NvdW50ZG93bnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZG90LWNvdW50ZG93biwgLmNhbGlicmF0ZS1jb3VudGRvd24nKTtcbiAgICAgICAgZXhpc3RpbmdDb3VudGRvd25zLmZvckVhY2goZWwgPT4ge1xuICAgICAgICAgIGlmIChlbC5wYXJlbnROb2RlKSBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBDcmVhdGUgY3VzdG9tIGNvdW50ZG93biBlbGVtZW50XG4gICAgICAgIGNvbnN0IGNvdW50ZG93bkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgY291bnRkb3duRWxlbWVudC5jbGFzc05hbWUgPSAnZG90LWNvdW50ZG93bic7IC8vIENvbnNpc3RlbnQgY2xhc3MgbmFtZVxuICAgICAgICBjb3VudGRvd25FbGVtZW50LnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICAgIGxlZnQ6ICR7cG9pbnQueH1weDtcbiAgICAgICAgICB0b3A6ICR7cG9pbnQueSAtIDYwfXB4O1xuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMzZweDtcbiAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICB0ZXh0LXNoYWRvdzogMCAwIDEwcHggd2hpdGUsIDAgMCAyMHB4IHdoaXRlO1xuICAgICAgICAgIHotaW5kZXg6IDEwMDAwO1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTtcbiAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCByZWQ7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICAgIHdpZHRoOiA1MHB4O1xuICAgICAgICAgIGhlaWdodDogNTBweDtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLCAwLCAwLCAwLjMpO1xuICAgICAgICBgO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvdW50ZG93bkVsZW1lbnQpO1xuICAgICAgICBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBNYW51YWwgY291bnRkb3duXG4gICAgICAgICAgZm9yIChsZXQgY291bnQgPSAzOyBjb3VudCA+IDA7IGNvdW50LS0pIHtcbiAgICAgICAgICAgIGNvdW50ZG93bkVsZW1lbnQudGV4dENvbnRlbnQgPSBjb3VudDtcbiAgICAgICAgICAgIHNldFByb2Nlc3NTdGF0dXMoYFBvaW50ICR7aSsxfS8ke3BvaW50cy5sZW5ndGh9OiBDb3VudGRvd24gJHtjb3VudH1gKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRm9yY2UgcmVkcmF3IG11bHRpcGxlIHRpbWVzIGR1cmluZyBjb3VudGRvd24gdG8gZW5zdXJlIHZpc2liaWxpdHlcbiAgICAgICAgICAgIHJlZHJhd0N1cnJlbnREb3QoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDgwMCkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBSZWRyYXcgYWdhaW4gaGFsZndheSB0aHJvdWdoIHRoZSB3YWl0IHRvIGVuc3VyZSBkb3Qgc3RheXMgdmlzaWJsZVxuICAgICAgICAgICAgcmVkcmF3Q3VycmVudERvdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBTaG93IGNoZWNrbWFya1xuICAgICAgICAgIGNvdW50ZG93bkVsZW1lbnQudGV4dENvbnRlbnQgPSBcIuKck1wiO1xuICAgICAgICAgIHJlZHJhd0N1cnJlbnREb3QoKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBSZW1vdmUgY291bnRkb3duIGVsZW1lbnQgYWZ0ZXIgZGVsYXlcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmIChjb3VudGRvd25FbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgY291bnRkb3duRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvdW50ZG93bkVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIDMwMCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gTWFrZSBzdXJlIGRvdCBpcyBzdGlsbCB2aXNpYmxlXG4gICAgICAgICAgcmVkcmF3Q3VycmVudERvdCgpO1xuXG4gICAgICAgICAgLy8gQ2FwdHVyZSBpbWFnZXMgYXQgdGhpcyBwb2ludFxuICAgICAgICAgIGNvbnNvbGUubG9nKGBDYXB0dXJpbmcgY2FsaWJyYXRpb24gcG9pbnQgJHtpKzF9LyR7cG9pbnRzLmxlbmd0aH0gYXQgKCR7cG9pbnQueH0sICR7cG9pbnQueX0pYCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gTWFudWFsIGZvcmNlIHJlZHJhdyBvbmUgbW9yZSB0aW1lIGp1c3QgYmVmb3JlIGNhcHR1cmVcbiAgICAgICAgICBkcmF3UmVkRG90KGN0eCwgcG9pbnQueCwgcG9pbnQueSwgcmFkaXVzLCBmYWxzZSk7XG4gICAgICAgICAgXG4gICAgICAgIGNvbnN0IGNhcHR1cmVSZXN1bHQgPSBhd2FpdCBjYXB0dXJlSW1hZ2VzQXRQb2ludCh7XG4gICAgICAgICAgICBwb2ludDogcG9pbnQsXG4gICAgICAgICAgY2FwdHVyZUNvdW50OiBjYXB0dXJlQ291bnQsXG4gICAgICAgICAgY2FudmFzUmVmOiB7IGN1cnJlbnQ6IGNhbnZhcyB9LFxuICAgICAgICAgIHNldENhcHR1cmVDb3VudDogc2V0Q2FwdHVyZUNvdW50LFxuICAgICAgICAgIHNob3dDYXB0dXJlUHJldmlld1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoY2FwdHVyZVJlc3VsdCAmJiAoY2FwdHVyZVJlc3VsdC5zY3JlZW5JbWFnZSB8fCBjYXB0dXJlUmVzdWx0LnN1Y2Nlc3MpKSB7XG4gICAgICAgICAgc3VjY2Vzc0NvdW50Kys7XG4gICAgICAgIH1cblxuICAgICAgICAgIC8vIFdhaXQgYmV0d2VlbiBwb2ludHNcbiAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTIwMCkpO1xuICAgICAgICAgIFxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIHByb2Nlc3NpbmcgY2FsaWJyYXRpb24gcG9pbnQgJHtpKzF9OmAsIGVycm9yKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAvLyBDbGVhbiB1cCBjb3VudGRvd24gaWYgaXQgc3RpbGwgZXhpc3RzXG4gICAgICAgICAgaWYgKGNvdW50ZG93bkVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgY291bnRkb3duRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvdW50ZG93bkVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBDbGVhciByZWRyYXcgaW50ZXJ2YWxcbiAgICAgICAgICBpZiAoY3VycmVudFJlZHJhd0ludGVydmFsKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGN1cnJlbnRSZWRyYXdJbnRlcnZhbCk7XG4gICAgICAgICAgICBjdXJyZW50UmVkcmF3SW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBDYWxpYnJhdGlvbiBjb21wbGV0ZVxuICAgICAgaWYgKHN0YXR1c0luZGljYXRvcikge1xuICAgICAgICBzdGF0dXNJbmRpY2F0b3IudGV4dENvbnRlbnQgPSBgQ2FsaWJyYXRpb24gY29tcGxldGU6ICR7c3VjY2Vzc0NvdW50fS8ke3BvaW50cy5sZW5ndGh9IHBvaW50c2A7XG4gICAgICB9XG4gICAgICBzZXRQcm9jZXNzU3RhdHVzKGBDYWxpYnJhdGlvbiBjb21wbGV0ZWQ6ICR7c3VjY2Vzc0NvdW50fS8ke3BvaW50cy5sZW5ndGh9IHBvaW50cyBjYXB0dXJlZGApO1xuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJDYWxpYnJhdGlvbiBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgc2V0UHJvY2Vzc1N0YXR1cyhgQ2FsaWJyYXRpb24gZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgIFxuICAgICAgLy8gQ2xlYW4gdXAgcmVkcmF3IGludGVydmFsXG4gICAgICBpZiAoY3VycmVudFJlZHJhd0ludGVydmFsKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoY3VycmVudFJlZHJhd0ludGVydmFsKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gUmVtb3ZlIHN0YXR1cyBpbmRpY2F0b3IgaWYgaXQgZXhpc3RzXG4gICAgICBpZiAoc3RhdHVzSW5kaWNhdG9yICYmIHN0YXR1c0luZGljYXRvci5wYXJlbnROb2RlKSB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHN0YXR1c0luZGljYXRvci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0YXR1c0luZGljYXRvcik7XG4gICAgICAgIH0sIDMwMDApO1xuICAgICAgfVxuICAgICAgXG4gICAgICBzZXRJc0NhcHR1cmluZyhmYWxzZSk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY2xlYW51cENhbnZhcygpO1xuICAgICAgfSwgMzAwMCk7XG4gICAgICBpZiAoY2FudmFzKSB7XG4gICAgICAgIHJlc3RvcmVDYW52YXNUb0NvbnRhaW5lcihjYW52YXMpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBTaG93IFRvcEJhciBhZ2FpblxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2Ygb25BY3Rpb25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG9uQWN0aW9uQ2xpY2soJ3RvZ2dsZVRvcEJhcicsIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy50b2dnbGVUb3BCYXIpIHtcbiAgICAgICAgICB3aW5kb3cudG9nZ2xlVG9wQmFyKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9LCAxMDAwKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlU2V0UmFuZG9tID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmIChpc0NhcHR1cmluZykgcmV0dXJuO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICBjb25zdCBjYW52YXMgPSBlbnN1cmVDYW52YXNFeGlzdHMoKTtcbiAgICAgIGlmICghY2FudmFzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgY2FudmFzIGZvciBzZXQgcmFuZG9tJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIEFsd2F5cyBnZXQgdGhlIGxhdGVzdCBzZXR0aW5ncyBmcm9tIGNvbnRleHQgZm9yIHRoZSBjdXJyZW50IHVzZXJcbiAgICAgIGNvbnN0IHVzZXJTZXR0aW5ncyA9IHNldHRpbmdzICYmIHNldHRpbmdzW2N1cnJlbnRVc2VySWRdID8gc2V0dGluZ3NbY3VycmVudFVzZXJJZF0gOiB7fTtcbiAgICAgIGNvbnN0IHRpbWVzID0gTnVtYmVyKHVzZXJTZXR0aW5ncy50aW1lc19zZXRfcmFuZG9tKSB8fCBOdW1iZXIocmFuZG9tVGltZXMpIHx8IDE7XG4gICAgICBjb25zdCBkZWxheSA9IE51bWJlcih1c2VyU2V0dGluZ3MuZGVsYXlfc2V0X3JhbmRvbSkgfHwgTnVtYmVyKGRlbGF5U2Vjb25kcykgfHwgMztcblxuICAgICAgLy8gTG9nIGN1cnJlbnQgc2V0dGluZ3MgYmVmb3JlIHN0YXJ0aW5nXG4gICAgICBjb25zb2xlLmxvZygnU3RhcnRpbmcgU2V0IFJhbmRvbSB3aXRoIHNldHRpbmdzOicsIHtcbiAgICAgICAgcmFuZG9tVGltZXMsXG4gICAgICAgIGRlbGF5U2Vjb25kcyxcbiAgICAgICAgY3VycmVudFVzZXJJZCxcbiAgICAgICAgc2V0dGluZ3MsXG4gICAgICAgIHVzZXJTZXR0aW5ncyxcbiAgICAgICAgdGltZXMsXG4gICAgICAgIGRlbGF5XG4gICAgICB9KTtcblxuICAgICAgLy8gSGlkZSBUb3BCYXJcbiAgICAgIGlmICh0eXBlb2Ygb25BY3Rpb25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvbkFjdGlvbkNsaWNrKCd0b2dnbGVUb3BCYXInLCBmYWxzZSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy50b2dnbGVUb3BCYXIpIHtcbiAgICAgICAgd2luZG93LnRvZ2dsZVRvcEJhcihmYWxzZSk7XG4gICAgICB9XG5cbiAgICAgIHNldElzQ2FwdHVyaW5nKHRydWUpO1xuICAgICAgc2V0UmVtYWluaW5nQ2FwdHVyZXModGltZXMpO1xuICAgICAgc2V0UHJvY2Vzc1N0YXR1cyhgU3RhcnRpbmcgJHt0aW1lc30gcmFuZG9tIGNhcHR1cmVzIHdpdGggJHtkZWxheX1zIGRlbGF5Li4uYCk7XG5cbiAgICAgIC8vIFByb2Nlc3MgYWxsIGNhcHR1cmVzIGluIHNlcXVlbmNlXG4gICAgICBsZXQgc3VjY2Vzc0NvdW50ID0gMDtcbiAgICAgIFxuICAgICAgZm9yIChsZXQgY3VycmVudEluZGV4ID0gMTsgY3VycmVudEluZGV4IDw9IHRpbWVzOyBjdXJyZW50SW5kZXgrKykge1xuICAgICAgICAvLyBVcGRhdGUgc3RhdHVzIGZvciBjdXJyZW50IGNhcHR1cmVcbiAgICAgICAgc2V0UHJvY2Vzc1N0YXR1cyhgQ2FwdHVyZSAke2N1cnJlbnRJbmRleH0gb2YgJHt0aW1lc31gKTtcbiAgICAgICAgc2V0UmVtYWluaW5nQ2FwdHVyZXModGltZXMgLSBjdXJyZW50SW5kZXggKyAxKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKGBTdGFydGluZyBjYXB0dXJlICR7Y3VycmVudEluZGV4fSBvZiAke3RpbWVzfWApO1xuICAgICAgICBcbiAgICAgICAgLy8gVXNlIGhhbmRsZURvdFByb2Nlc3MgZm9yIGVhY2ggY2FwdHVyZVxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBoYW5kbGVEb3RQcm9jZXNzKHtcbiAgICAgICAgICB1c2VSYW5kb21Qb3NpdGlvbjogdHJ1ZSxcbiAgICAgICAgICBvblN0YXR1c1VwZGF0ZTogKHN0YXR1cykgPT4ge1xuICAgICAgICAgICAgaWYgKHN0YXR1cy5wcm9jZXNzU3RhdHVzKSB7XG4gICAgICAgICAgICAgIHNldFByb2Nlc3NTdGF0dXMoYENhcHR1cmUgJHtjdXJyZW50SW5kZXh9LyR7dGltZXN9OiAke3N0YXR1cy5wcm9jZXNzU3RhdHVzfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9nZ2xlVG9wQmFyOiAoc2hvdykgPT4ge1xuICAgICAgICAgICAgLy8gT25seSBzaG93IFRvcEJhciBhZnRlciB0aGUgbGFzdCBjYXB0dXJlXG4gICAgICAgICAgICBpZiAoc2hvdyAmJiBjdXJyZW50SW5kZXggPCB0aW1lcykge1xuICAgICAgICAgICAgICByZXR1cm47IC8vIERvbid0IHNob3cgeWV0IGZvciBpbnRlcm1lZGlhdGUgY2FwdHVyZXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvbkFjdGlvbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIG9uQWN0aW9uQ2xpY2soJ3RvZ2dsZVRvcEJhcicsIHNob3cpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cudG9nZ2xlVG9wQmFyKSB7XG4gICAgICAgICAgICAgIHdpbmRvdy50b2dnbGVUb3BCYXIoc2hvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0cmlnZ2VyQ2FtZXJhQWNjZXNzLFxuICAgICAgICAgIHNldElzQ2FwdHVyaW5nOiAoY2FwdHVyaW5nKSA9PiB7XG4gICAgICAgICAgICAvLyBPbmx5IHNldCBjYXB0dXJpbmcgdG8gZmFsc2UgYWZ0ZXIgYWxsIGNhcHR1cmVzXG4gICAgICAgICAgICBpZiAoIWNhcHR1cmluZyAmJiBjdXJyZW50SW5kZXggPCB0aW1lcykge1xuICAgICAgICAgICAgICByZXR1cm47IC8vIFN0YXkgaW4gY2FwdHVyaW5nIHN0YXRlIGJldHdlZW4gZG90c1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0SXNDYXB0dXJpbmcoY2FwdHVyaW5nKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNhcHR1cmVDb3VudCxcbiAgICAgICAgICBzZXRDYXB0dXJlQ291bnQsXG4gICAgICAgICAgcG9zdENvdW50ZG93bkRlbGF5OiA4MDBcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICAgICAgc3VjY2Vzc0NvdW50Kys7XG4gICAgICAgICAgY29uc29sZS5sb2coYFN1Y2Nlc3NmdWxseSBjb21wbGV0ZWQgY2FwdHVyZSAke2N1cnJlbnRJbmRleH1gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYENhcHR1cmUgJHtjdXJyZW50SW5kZXh9IG1heSBoYXZlIGZhaWxlZDpgLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBXYWl0IGJldHdlZW4gY2FwdHVyZXMgLSBidXQgb25seSBpZiB0aGVyZSBhcmUgbW9yZSBjYXB0dXJlcyB0byBnb1xuICAgICAgICBpZiAoY3VycmVudEluZGV4IDwgdGltZXMpIHtcbiAgICAgICAgICBzZXRQcm9jZXNzU3RhdHVzKGBXYWl0aW5nICR7ZGVsYXl9cyBiZWZvcmUgbmV4dCBjYXB0dXJlLi4uYCk7XG4gICAgICAgICAgY29uc29sZS5sb2coYFdhaXRpbmcgJHtkZWxheX1zIGJlZm9yZSBuZXh0IGNhcHR1cmUuLi5gKTtcbiAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgZGVsYXkgKiAxMDAwKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQ29tcGxldGlvbiBub3RpZmljYXRpb25cbiAgICAgIHNldFByb2Nlc3NTdGF0dXMoYFJhbmRvbSBjYXB0dXJlIHNlcXVlbmNlIGNvbXBsZXRlZDogJHtzdWNjZXNzQ291bnR9LyR7dGltZXN9IGNhcHR1cmVzIHN1Y2Nlc3NmdWxgKTtcbiAgICAgIHNldFJlbWFpbmluZ0NhcHR1cmVzKDApO1xuICAgICAgY29uc29sZS5sb2coYENvbXBsZXRlZCBhbGwgY2FwdHVyZXM6ICR7c3VjY2Vzc0NvdW50fS8ke3RpbWVzfSBzdWNjZXNzZnVsYCk7XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIlJhbmRvbSBzZXF1ZW5jZSBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgc2V0UHJvY2Vzc1N0YXR1cyhgUmFuZG9tIHNlcXVlbmNlIGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc0NhcHR1cmluZyhmYWxzZSk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY2xlYW51cENhbnZhcygpO1xuICAgICAgfSwgMzAwMCk7XG4gICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdHJhY2tpbmctY2FudmFzJyk7XG4gICAgICBpZiAoY2FudmFzKSB7XG4gICAgICAgIHJlc3RvcmVDYW52YXNUb0NvbnRhaW5lcihjYW52YXMpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBTaG93IFRvcEJhciBhZ2FpblxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2Ygb25BY3Rpb25DbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG9uQWN0aW9uQ2xpY2soJ3RvZ2dsZVRvcEJhcicsIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy50b2dnbGVUb3BCYXIpIHtcbiAgICAgICAgICB3aW5kb3cudG9nZ2xlVG9wQmFyKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9LCAxMDAwKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlUmFuZG9tRG90ID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmIChpc0NhcHR1cmluZykgcmV0dXJuO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGVuc3VyZUNhbnZhc0V4aXN0cygpO1xuICAgICAgaWYgKCFjYW52YXMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBjYW52YXMgZm9yIHJhbmRvbSBkb3QnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBVc2UgdGhlIGNvbnNvbGlkYXRlZCBmdW5jdGlvbiB3aXRoIHJhbmRvbSBwb3NpdGlvblxuICAgICAgYXdhaXQgaGFuZGxlRG90UHJvY2Vzcyh7XG4gICAgICAgIHVzZVJhbmRvbVBvc2l0aW9uOiB0cnVlLFxuICAgICAgICBvblN0YXR1c1VwZGF0ZTogKHN0YXR1cykgPT4ge1xuICAgICAgICAgIGlmIChzdGF0dXMucHJvY2Vzc1N0YXR1cykgc2V0UHJvY2Vzc1N0YXR1cyhzdGF0dXMucHJvY2Vzc1N0YXR1cyk7XG4gICAgICAgICAgaWYgKHN0YXR1cy5pc0NhcHR1cmluZyAhPT0gdW5kZWZpbmVkKSBzZXRJc0NhcHR1cmluZyhzdGF0dXMuaXNDYXB0dXJpbmcpO1xuICAgICAgICB9LFxuICAgICAgICB0b2dnbGVUb3BCYXI6IChzaG93KSA9PiB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvbkFjdGlvbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBvbkFjdGlvbkNsaWNrKCd0b2dnbGVUb3BCYXInLCBzaG93KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRyaWdnZXJDYW1lcmFBY2Nlc3MsXG4gICAgICAgIHNldElzQ2FwdHVyaW5nLFxuICAgICAgICBjYXB0dXJlQ291bnQsXG4gICAgICAgIHNldENhcHR1cmVDb3VudDogc2V0Q2FwdHVyZUNvdW50LFxuICAgICAgICBwb3N0Q291bnRkb3duRGVsYXk6IDEwMDBcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignUmFuZG9tIGRvdCBlcnJvcjonLCBlcnJvcik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIENsZWFuIHVwIGNhbnZhcyBhZnRlciBwcm9jZXNzIGNvbXBsZXRlc1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNsZWFudXBDYW52YXMoKTtcbiAgICAgIH0sIDIwMDApOyAvLyBXYWl0IDIgc2Vjb25kcyBiZWZvcmUgY2xlYW51cFxuICAgIH1cbiAgICBcbiAgfTtcbiAgY29uc3QgbWFrZUNhbnZhc0Z1bGxzY3JlZW4gPSAoY2FudmFzKSA9PiB7XG4gICAgaWYgKCFjYW52YXMpIHJldHVybiBudWxsO1xuICAgIFxuICAgIC8vIFNhdmUgb3JpZ2luYWwgc3RhdGUgaWYgbm90IGFscmVhZHkgc2F2ZWRcbiAgICBpZiAoIWNhbnZhcy5fb3JpZ2luYWxTdGF0ZSkge1xuICAgICAgY2FudmFzLl9vcmlnaW5hbFN0YXRlID0ge1xuICAgICAgICBwYXJlbnQ6IGNhbnZhcy5wYXJlbnRFbGVtZW50LFxuICAgICAgICBwb3NpdGlvbjogY2FudmFzLnN0eWxlLnBvc2l0aW9uLFxuICAgICAgICB0b3A6IGNhbnZhcy5zdHlsZS50b3AsXG4gICAgICAgIGxlZnQ6IGNhbnZhcy5zdHlsZS5sZWZ0LFxuICAgICAgICB3aWR0aDogY2FudmFzLnN0eWxlLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IGNhbnZhcy5zdHlsZS5oZWlnaHQsXG4gICAgICAgIHpJbmRleDogY2FudmFzLnN0eWxlLnpJbmRleCxcbiAgICAgICAgY2FudmFzV2lkdGg6IGNhbnZhcy53aWR0aCxcbiAgICAgICAgY2FudmFzSGVpZ2h0OiBjYW52YXMuaGVpZ2h0XG4gICAgICB9O1xuICAgIH1cbiAgICBcbiAgICAvLyBNb3ZlIHRvIGJvZHkgYW5kIG1ha2UgZnVsbHNjcmVlblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcbiAgICBjYW52YXMuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuICAgIGNhbnZhcy5zdHlsZS50b3AgPSAnMCc7XG4gICAgY2FudmFzLnN0eWxlLmxlZnQgPSAnMCc7XG4gICAgY2FudmFzLnN0eWxlLndpZHRoID0gJzEwMHZ3JztcbiAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gJzEwMHZoJztcbiAgICBjYW52YXMuc3R5bGUuekluZGV4ID0gJzEwJztcbiAgICBjYW52YXMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJ3doaXRlJztcbiAgICBcbiAgICAvLyBTZXQgY2FudmFzIGRpbWVuc2lvbnMgdG8gbWF0Y2ggd2luZG93XG4gICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICBcbiAgICAvLyBDbGVhciB3aXRoIHdoaXRlIGJhY2tncm91bmRcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICBcbiAgICByZXR1cm4gY2FudmFzO1xuICB9O1xuICBcblxuICAvLyBMb2FkIGNhbGlicmF0aW9uIHNldHVwXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG5cbiAgICBjb25zdCBzZXR1cENhbGlicmF0aW9uID0gYXN5bmMgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyBkZWZhdWx0OiBDYWxpYnJhdGVIYW5kbGVyIH0gPSBhd2FpdCBpbXBvcnQoJy4uLy4uLy4uL2NvbXBvbmVudHMvY29sbGVjdGVkLWRhdGFzZXQtY3VzdG9taXplZC9BY3Rpb24vQ2FsaWJyYXRlSGFuZGxlcicpO1xuICAgIFxuICAgICAgICBjb25zdCBjYW52YXMgPSBnZXRNYWluQ2FudmFzKCk7XG4gICAgICAgIGlmICghY2FudmFzKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwiQ2FudmFzIG5vdCBhdmFpbGFibGUgZHVyaW5nIHNldHVwQ2FsaWJyYXRpb25cIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYW52YXMpIHtcbiAgICAgICAgICBtYWtlQ2FudmFzRnVsbHNjcmVlbihjYW52YXMpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdDYW52YXMgc2l6ZTonLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICBjb25zdCBwb2ludHMgPSBnZW5lcmF0ZUNhbGlicmF0aW9uUG9pbnRzKGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdHZW5lcmF0ZWQgY2FsaWJyYXRpb24gcG9pbnRzOicsIHBvaW50cyk7XG4gICAgICAgIHNldENhbGlicmF0aW9uUG9pbnRzKHBvaW50cyk7XG4gICAgXG4gICAgICAgIGNvbnN0IGNhbGlicmF0ZUhhbmRsZXIgPSBuZXcgQ2FsaWJyYXRlSGFuZGxlcih7XG4gICAgICAgICAgY2FudmFzUmVmOiB7IGN1cnJlbnQ6IGNhbnZhcyB9LFxuICAgICAgICAgIGNhbGlicmF0aW9uUG9pbnRzOiBwb2ludHMsXG4gICAgICAgICAgdG9nZ2xlVG9wQmFyOiAoc2hvdykgPT4gb25BY3Rpb25DbGljaz8uKCd0b2dnbGVUb3BCYXInLCBzaG93KSxcbiAgICAgICAgICBzZXRPdXRwdXRUZXh0OiAoc3RhdHVzKSA9PiB7XG4gICAgICAgICAgICBzZXRQcm9jZXNzU3RhdHVzKHN0YXR1cyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjYXB0dXJlQ291bnRlcjogY2FwdHVyZUNvdW50LFxuICAgICAgICAgIHNldENhcHR1cmVDb3VudGVyOiAobmV3Q291bnRlcikgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBuZXdDb3VudGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHNldENhcHR1cmVDb3VudChwcmV2ID0+IG5ld0NvdW50ZXIocHJldikpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2V0Q2FwdHVyZUNvdW50KG5ld0NvdW50ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2FwdHVyZUZvbGRlcjogJ2V5ZV90cmFja2luZ19jYXB0dXJlcycsXG4gICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgc2V0SXNDYXB0dXJpbmcoZmFsc2UpO1xuICAgICAgICAgICAgc2V0UHJvY2Vzc1N0YXR1cygnQ2FsaWJyYXRpb24gY29tcGxldGVkJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICBcbiAgICAgICAgc2V0Q2FsaWJyYXRpb25IYW5kbGVyKHtcbiAgICAgICAgICBoYW5kbGVBY3Rpb246IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHNldElzQ2FwdHVyaW5nKHRydWUpO1xuICAgICAgICAgICAgc2V0UHJvY2Vzc1N0YXR1cygnU3RhcnRpbmcgY2FsaWJyYXRpb24uLi4nKTtcbiAgICAgICAgICAgIGF3YWl0IGNhbGlicmF0ZUhhbmRsZXIuc3RhcnRDYWxpYnJhdGlvbigpO1xuICAgICAgICAgICAgc2V0SXNDYXB0dXJpbmcoZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjYW52YXMpIHtcbiAgICAgICAgICByZXN0b3JlQ2FudmFzU2l6ZShjYW52YXMpO1xuICAgICAgICB9XG4gICAgXG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW5pdGlhbGl6aW5nIGNhbGlicmF0aW9uOicsIGVycik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHNldHVwQ2FsaWJyYXRpb24oKTtcbiAgfSwgW2NhcHR1cmVDb3VudCwgb25BY3Rpb25DbGlja10pO1xuICBcbiAgLy8gQ2xlYXIgQWxsIEJ1dHRvbiAtIFJlc2V0IGV2ZXJ5dGhpbmdcbiAgY29uc3QgaGFuZGxlQ2xlYXJBbGwgPSAoKSA9PiB7XG4gICAgLy8gQ2xlYXIgY2FudmFzIGNvbnRlbnRcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdHJhY2tpbmctY2FudmFzJyk7XG4gICAgaWYgKGNhbnZhcykge1xuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgXG4gICAgICAvLyBSZXN0b3JlIGNhbnZhcyB0byBjb250YWluZXIgbW9kZVxuICAgICAgcmVzdG9yZUNhbnZhc1RvQ29udGFpbmVyKGNhbnZhcyk7XG4gICAgfVxuICAgIFxuICAgIC8vIFJlc2V0IHN0YXRlc1xuICAgIHNldFByb2Nlc3NTdGF0dXMoJycpO1xuICAgIHNldFJlbWFpbmluZ0NhcHR1cmVzKDApO1xuICAgIHNldElzQ2FwdHVyaW5nKGZhbHNlKTtcbiAgICBzZXRDb3VudGRvd25WYWx1ZShudWxsKTtcbiAgICBzZXRTaG93Q2FudmFzKHRydWUpO1xuICAgIHNldEN1cnJlbnREb3QobnVsbCk7XG4gIH07XG5cbiAgLy8gVG9nZ2xlIEhlYWQgUG9zZSB2aXN1YWxpemF0aW9uXG4gIGNvbnN0IGhhbmRsZVRvZ2dsZUhlYWRQb3NlID0gKCkgPT4ge1xuICAgIGNvbnN0IG5ld0hlYWRQb3NlU3RhdGUgPSAhc2hvd0hlYWRQb3NlO1xuICAgIHNldFNob3dIZWFkUG9zZShuZXdIZWFkUG9zZVN0YXRlKTtcbiAgICBzZXRQcm9jZXNzU3RhdHVzKGBIZWFkIHBvc2UgdmlzdWFsaXphdGlvbiAke25ld0hlYWRQb3NlU3RhdGUgPyAnZW5hYmxlZCcgOiAnZGlzYWJsZWQnfWApO1xuICAgIFxuICAgIC8vIENhbGwgdGhlIHBhcmVudCBoYW5kbGVyIHRvIHVwZGF0ZSBwcm9jZXNzb3Igb3B0aW9uc1xuICAgIGlmIChvbkFjdGlvbkNsaWNrKSB7XG4gICAgICBvbkFjdGlvbkNsaWNrKCdoZWFkUG9zZScpO1xuICAgIH1cbiAgICBcbiAgICAvLyBVcGRhdGUgdmlkZW9Qcm9jZXNzb3Igb3B0aW9ucyBkaXJlY3RseSBpZiBhdmFpbGFibGVcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnZpZGVvUHJvY2Vzc29yKSB7XG4gICAgICB3aW5kb3cudmlkZW9Qcm9jZXNzb3IudXBkYXRlT3B0aW9ucyh7XG4gICAgICAgIHNob3dIZWFkUG9zZTogbmV3SGVhZFBvc2VTdGF0ZVxuICAgICAgfSk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhgVXBkYXRlZCBiYWNrZW5kIGhlYWQgcG9zZTogJHtuZXdIZWFkUG9zZVN0YXRlfWApO1xuICAgIH1cbiAgfTtcblxuICAvLyBUb2dnbGUgQm91bmRpbmcgQm94IHZpc3VhbGl6YXRpb25cbiAgY29uc3QgaGFuZGxlVG9nZ2xlQm91bmRpbmdCb3ggPSAoKSA9PiB7XG4gICAgY29uc3QgbmV3Qm91bmRpbmdCb3hTdGF0ZSA9ICFzaG93Qm91bmRpbmdCb3g7XG4gICAgc2V0U2hvd0JvdW5kaW5nQm94KG5ld0JvdW5kaW5nQm94U3RhdGUpO1xuICAgIHNldFByb2Nlc3NTdGF0dXMoYEJvdW5kaW5nIGJveCAke25ld0JvdW5kaW5nQm94U3RhdGUgPyAnc2hvd24nIDogJ2hpZGRlbid9YCk7XG4gICAgXG4gICAgLy8gQ2FsbCB0aGUgcGFyZW50IGhhbmRsZXIgdG8gdXBkYXRlIHByb2Nlc3NvciBvcHRpb25zXG4gICAgaWYgKG9uQWN0aW9uQ2xpY2spIHtcbiAgICAgIG9uQWN0aW9uQ2xpY2soJ2JvdW5kaW5nQm94Jyk7XG4gICAgfVxuICAgIFxuICAgIC8vIFVwZGF0ZSB2aWRlb1Byb2Nlc3NvciBvcHRpb25zIGRpcmVjdGx5IGlmIGF2YWlsYWJsZVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cudmlkZW9Qcm9jZXNzb3IpIHtcbiAgICAgIHdpbmRvdy52aWRlb1Byb2Nlc3Nvci51cGRhdGVPcHRpb25zKHtcbiAgICAgICAgc2hvd0JvdW5kaW5nQm94OiBuZXdCb3VuZGluZ0JveFN0YXRlXG4gICAgICB9KTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGBVcGRhdGVkIGJhY2tlbmQgYm91bmRpbmcgYm94OiAke25ld0JvdW5kaW5nQm94U3RhdGV9YCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFRvZ2dsZSBNYXNrIHZpc3VhbGl6YXRpb25cbiAgY29uc3QgaGFuZGxlVG9nZ2xlTWFzayA9ICgpID0+IHtcbiAgICBjb25zdCBuZXdNYXNrU3RhdGUgPSAhc2hvd01hc2s7XG4gICAgc2V0U2hvd01hc2sobmV3TWFza1N0YXRlKTtcbiAgICBzZXRQcm9jZXNzU3RhdHVzKGBNYXNrICR7bmV3TWFza1N0YXRlID8gJ3Nob3duJyA6ICdoaWRkZW4nfWApO1xuICAgIFxuICAgIC8vIENhbGwgdGhlIHBhcmVudCBoYW5kbGVyIHRvIHVwZGF0ZSBwcm9jZXNzb3Igb3B0aW9uc1xuICAgIGlmIChvbkFjdGlvbkNsaWNrKSB7XG4gICAgICBvbkFjdGlvbkNsaWNrKCdtYXNrJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIFVwZGF0ZSB2aWRlb1Byb2Nlc3NvciBvcHRpb25zIGRpcmVjdGx5IGlmIGF2YWlsYWJsZVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cudmlkZW9Qcm9jZXNzb3IpIHtcbiAgICAgIHdpbmRvdy52aWRlb1Byb2Nlc3Nvci51cGRhdGVPcHRpb25zKHtcbiAgICAgICAgc2hvd01hc2s6IG5ld01hc2tTdGF0ZVxuICAgICAgfSk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhgVXBkYXRlZCBiYWNrZW5kIG1hc2s6ICR7bmV3TWFza1N0YXRlfWApO1xuICAgIH1cbiAgfTtcblxuICAvLyBUb2dnbGUgUGFyYW1ldGVycyBkaXNwbGF5XG4gIGNvbnN0IGhhbmRsZVRvZ2dsZVBhcmFtZXRlcnMgPSAoKSA9PiB7XG4gICAgY29uc3QgbmV3UGFyYW1ldGVyc1N0YXRlID0gIXNob3dQYXJhbWV0ZXJzO1xuICAgIHNldFNob3dQYXJhbWV0ZXJzKG5ld1BhcmFtZXRlcnNTdGF0ZSk7XG4gICAgc2V0UHJvY2Vzc1N0YXR1cyhgUGFyYW1ldGVycyAke25ld1BhcmFtZXRlcnNTdGF0ZSA/ICdzaG93bicgOiAnaGlkZGVuJ31gKTtcbiAgICBcbiAgICAvLyBDYWxsIHRoZSBwYXJlbnQgaGFuZGxlciB0byB1cGRhdGUgcHJvY2Vzc29yIG9wdGlvbnNcbiAgICBpZiAob25BY3Rpb25DbGljaykge1xuICAgICAgb25BY3Rpb25DbGljaygncGFyYW1ldGVycycpO1xuICAgIH1cbiAgICBcbiAgICAvLyBVcGRhdGUgdmlkZW9Qcm9jZXNzb3Igb3B0aW9ucyBkaXJlY3RseSBpZiBhdmFpbGFibGVcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnZpZGVvUHJvY2Vzc29yKSB7XG4gICAgICB3aW5kb3cudmlkZW9Qcm9jZXNzb3IudXBkYXRlT3B0aW9ucyh7XG4gICAgICAgIHNob3dQYXJhbWV0ZXJzOiBuZXdQYXJhbWV0ZXJzU3RhdGVcbiAgICAgIH0pO1xuICAgICAgLy8gY29uc29sZS5sb2coYFVwZGF0ZWQgYmFja2VuZCBwYXJhbWV0ZXJzOiAke25ld1BhcmFtZXRlcnNTdGF0ZX1gKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gVG9nZ2xlIGNhbWVyYSBwcmV2aWV3XG4gIGNvbnN0IGhhbmRsZVRvZ2dsZUNhbWVyYSA9ICgpID0+IHtcbiAgICBjb25zdCBuZXdDYW1lcmFTdGF0ZSA9ICFpc0NhbWVyYUFjdGl2ZTtcbiAgICBzZXRJc0NhbWVyYUFjdGl2ZShuZXdDYW1lcmFTdGF0ZSk7XG4gICAgXG4gICAgLy8gQ2FsbCB0aGUgcGFyZW50IGhhbmRsZXIgd2l0aCAncHJldmlldycgYWN0aW9uXG4gICAgaWYgKG9uQWN0aW9uQ2xpY2spIHtcbiAgICAgIG9uQWN0aW9uQ2xpY2soJ3ByZXZpZXcnLCBuZXdDYW1lcmFTdGF0ZSk7IC8vIFBhc3MgdGhlIG5ldyBzdGF0ZVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGYWxsYmFjayB0byBkaXJlY3QgdHJpZ2dlciBpZiBubyBhY3Rpb24gaGFuZGxlclxuICAgICAgc2V0U2hvd1Blcm1pc3Npb25Qb3B1cCh0cnVlKTtcbiAgICB9XG4gICAgXG4gICAgLy8gSWYgdHVybmluZyBvbiBjYW1lcmEsIGVuc3VyZSB3ZSBhcHBseSBjdXJyZW50IHZpc3VhbGl6YXRpb24gc2V0dGluZ3NcbiAgICBpZiAobmV3Q2FtZXJhU3RhdGUgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnZpZGVvUHJvY2Vzc29yKSB7XG4gICAgICAvLyBXYWl0IGEgc2hvcnQgbW9tZW50IHRvIGVuc3VyZSB0aGUgdmlkZW8gZWxlbWVudCBpcyByZWFkeVxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh3aW5kb3cudmlkZW9Qcm9jZXNzb3IpIHtcbiAgICAgICAgICB3aW5kb3cudmlkZW9Qcm9jZXNzb3IudXBkYXRlT3B0aW9ucyh7XG4gICAgICAgICAgICBzaG93SGVhZFBvc2UsXG4gICAgICAgICAgICBzaG93Qm91bmRpbmdCb3gsXG4gICAgICAgICAgICBzaG93TWFzayxcbiAgICAgICAgICAgIHNob3dQYXJhbWV0ZXJzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIDEwMCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEFkZCBiYWNrIGJ1dHRvbiBoYW5kbGVyXG4gIGNvbnN0IGhhbmRsZUdvQmFjayA9ICgpID0+IHtcbiAgICByb3V0ZXIucHVzaCgnLycpO1xuICB9O1xuXG4gIC8vIE1vYmlsZSBsYXlvdXQgLSAyeDUgZ3JpZFxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICB7aXNDb21wYWN0TW9kZSA/IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0yIGdhcC0yIG1iLTRcIj5cbiAgICAgICAgICA8ZGl2PjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICkgOiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMiBnYXAtMlwiPlxuICAgICAgICAgIDxkaXY+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgey8qIENhbWVyYSBQZXJtaXNzaW9uIFBvcHVwICovfVxuICAgICAge3Nob3dQZXJtaXNzaW9uUG9wdXAgJiYgKFxuICAgICAgICA8ZGl2IFxuICAgICAgICAgIGNsYXNzTmFtZT1cImNhbWVyYS1wZXJtaXNzaW9uLXBvcHVwXCIgXG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC41KScsXG4gICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgICAgICAgIHpJbmRleDogMTVcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPGRpdiBcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImNhbWVyYS1wZXJtaXNzaW9uLWRpYWxvZ1wiIFxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgd2lkdGg6ICc0MDBweCcsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnOHB4JyxcbiAgICAgICAgICAgICAgcGFkZGluZzogJzIwcHgnLFxuICAgICAgICAgICAgICBib3hTaGFkb3c6ICcwIDRweCA4cHggcmdiYSgwLCAwLCAwLCAwLjIpJ1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aDMgXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImNhbWVyYS1wZXJtaXNzaW9uLXRpdGxlXCIgXG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAnMCAwIDE1cHgnLFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMThweCcsXG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIENhbWVyYSBBY2Nlc3MgUmVxdWlyZWRcbiAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICA8cCBcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2FtZXJhLXBlcm1pc3Npb24tbWVzc2FnZVwiIFxuICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIG1hcmdpbjogJzAgMCAyMHB4JyxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6ICcxLjQnXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIFRoaXMgYXBwbGljYXRpb24gbmVlZHMgYWNjZXNzIHRvIHlvdXIgY2FtZXJhIHRvIGZ1bmN0aW9uIHByb3Blcmx5LiBXaGVuIHByb21wdGVkIGJ5IHlvdXIgYnJvd3NlciwgcGxlYXNlIGNsaWNrIFwiQWxsb3dcIiB0byBncmFudCBjYW1lcmEgYWNjZXNzLlxuICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgPGRpdiBcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2FtZXJhLXBlcm1pc3Npb24tYnV0dG9uc1wiIFxuICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcbiAgICAgICAgICAgICAgICBnYXA6ICcxMHB4J1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8YnV0dG9uIFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVBlcm1pc3Npb25EZW5pZWR9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2FtZXJhLWJ0blwiXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICc4cHggMTZweCcsXG4gICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZjBmMGYwJyxcbiAgICAgICAgICAgICAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNHB4JyxcbiAgICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIENhbmNlbFxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVQZXJtaXNzaW9uQWNjZXB0ZWR9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2FtZXJhLWJ0blwiXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICc4cHggMTZweCcsXG4gICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjMDA2NmNjJyxcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgICAgICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcidcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgQ29udGludWVcbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xufSk7XG5jb25zdCBBY3Rpb25CdXR0b25Hcm91cCA9IGR5bmFtaWMoKCkgPT4gUHJvbWlzZS5yZXNvbHZlKFxuICBmb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiA8QWN0aW9uQnV0dG9uR3JvdXBJbm5lciB7Li4ucHJvcHN9IHJlZj17cmVmfSAvPilcbiksIHsgc3NyOiBmYWxzZSB9KTtcbi8vIENyZWF0ZSBhIGNsaWVudC1vbmx5IHZlcnNpb24gb2YgQWN0aW9uQnV0dG9uR3JvdXBcbi8vIGNvbnN0IEFjdGlvbkJ1dHRvbkdyb3VwID0gZHluYW1pYygoKSA9PiBQcm9taXNlLnJlc29sdmUoQWN0aW9uQnV0dG9uR3JvdXBJbm5lciksIHsgc3NyOiBmYWxzZSB9KTtcblxuLy8gQWRkIGRlZmF1bHQgZXhwb3J0IGNvbXBvbmVudFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQWN0aW9uQnV0dG9uUGFnZSgpIHtcbiAgcmV0dXJuIG51bGw7IC8vIFRoaXMgaXMgYSB1dGlsaXR5IGZpbGUsIHNvIHdlIGRvbid0IG5lZWQgdG8gcmVuZGVyIGFueXRoaW5nXG59XG5cbmV4cG9ydCB7IEFjdGlvbkJ1dHRvbiwgQWN0aW9uQnV0dG9uR3JvdXAgfTsiXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZVJlZiIsImZvcndhcmRSZWYiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTWVtbyIsImR5bmFtaWMiLCJnZW5lcmF0ZUNhbGlicmF0aW9uUG9pbnRzIiwic2hvd0NhcHR1cmVQcmV2aWV3IiwiZHJhd1JlZERvdCIsImdldFJhbmRvbVBvc2l0aW9uIiwiY3JlYXRlQ291bnRkb3duRWxlbWVudCIsInJ1bkNvdW50ZG93biIsImNhcHR1cmVJbWFnZXNBdFBvaW50IiwidXNlUm91dGVyIiwidXNlQWRtaW5TZXR0aW5ncyIsImlzRXF1YWwiLCJvYmoxIiwib2JqMiIsImtleXMxIiwiT2JqZWN0Iiwia2V5cyIsImtleXMyIiwibGVuZ3RoIiwiZXZlcnkiLCJrZXkiLCJpbmNsdWRlcyIsIkFjdGlvbkJ1dHRvbiIsInRleHQiLCJhYmJyZXZpYXRlZFRleHQiLCJvbkNsaWNrIiwiY3VzdG9tQ2xhc3MiLCJkaXNhYmxlZCIsImFjdGl2ZSIsImlzQWJicmV2aWF0ZWQiLCJzZXRJc0FiYnJldmlhdGVkIiwic2V0dGluZ3MiLCJjdXJyZW50VXNlcklkIiwic2V0Q3VycmVudFVzZXJJZCIsImlzQ2FwdHVyaW5nIiwic2V0SXNDYXB0dXJpbmciLCJjYXB0dXJlQ291bnRlciIsInNldENhcHR1cmVDb3VudGVyIiwicHJvY2Vzc1N0YXR1cyIsInNldFByb2Nlc3NTdGF0dXMiLCJidXR0b25Qcm9wcyIsImNsYXNzTmFtZSIsInRpdGxlIiwidGltZW91dElkIiwiaGFuZGxlUmVzaXplIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsIndpZHRoIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaGFuZGxlVXNlcklkQ2hhbmdlIiwiZXZlbnQiLCJkZXRhaWwiLCJ0eXBlIiwibmV3VXNlcklkIiwidXNlcklkIiwiYnV0dG9uIiwiZGl2IiwiQWN0aW9uQnV0dG9uR3JvdXBJbm5lciIsInJlZiIsInRyaWdnZXJDYW1lcmFBY2Nlc3MiLCJpc0NvbXBhY3RNb2RlIiwib25BY3Rpb25DbGljayIsInJvdXRlciIsInVwZGF0ZVNldHRpbmdzIiwicmFuZG9tVGltZXMiLCJzZXRSYW5kb21UaW1lcyIsImRlbGF5U2Vjb25kcyIsInNldERlbGF5U2Vjb25kcyIsImNhbnZhc1JlZiIsImNvdW50ZG93blZhbHVlIiwic2V0Q291bnRkb3duVmFsdWUiLCJjdXJyZW50RG90Iiwic2V0Q3VycmVudERvdCIsImNhbGlicmF0aW9uUG9pbnRzIiwic2V0Q2FsaWJyYXRpb25Qb2ludHMiLCJyZW1haW5pbmdDYXB0dXJlcyIsInNldFJlbWFpbmluZ0NhcHR1cmVzIiwic2hvd0NhbnZhcyIsInNldFNob3dDYW52YXMiLCJjYWxpYnJhdGlvbkhhbmRsZXIiLCJzZXRDYWxpYnJhdGlvbkhhbmRsZXIiLCJjYXB0dXJlQ291bnQiLCJzZXRDYXB0dXJlQ291bnQiLCJzaG93SGVhZFBvc2UiLCJzZXRTaG93SGVhZFBvc2UiLCJzaG93Qm91bmRpbmdCb3giLCJzZXRTaG93Qm91bmRpbmdCb3giLCJzaG93TWFzayIsInNldFNob3dNYXNrIiwic2hvd1BhcmFtZXRlcnMiLCJzZXRTaG93UGFyYW1ldGVycyIsImlzQ2FtZXJhQWN0aXZlIiwic2V0SXNDYW1lcmFBY3RpdmUiLCJzaG93UGVybWlzc2lvblBvcHVwIiwic2V0U2hvd1Blcm1pc3Npb25Qb3B1cCIsInNldHRpbmdzQ2FjaGUiLCJNYXAiLCJsYXN0U2V0dGluZ3NVcGRhdGUiLCJ1c2VyU2V0dGluZ3MiLCJjYWNoZWRTZXR0aW5ncyIsImN1cnJlbnQiLCJnZXQiLCJOdW1iZXIiLCJ0aW1lc19zZXRfcmFuZG9tIiwiZGVsYXlfc2V0X3JhbmRvbSIsInNldCIsIkRhdGUiLCJub3ciLCJoYW5kbGVTZXR0aW5nc1VwZGF0ZSIsInVuZGVmaW5lZCIsIm5ld1RpbWVzIiwibmV3RGVsYXkiLCJhY3Rpb25CdXR0b25GdW5jdGlvbnMiLCJoYW5kbGVSYW5kb21Eb3QiLCJoYW5kbGVTZXRSYW5kb20iLCJoYW5kbGVTZXRDYWxpYnJhdGUiLCJoYW5kbGVDbGVhckFsbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNhbnZhcyIsImdldE1haW5DYW52YXMiLCJjb25zb2xlIiwibG9nIiwidXBkYXRlQ29udHJvbFZhbHVlcyIsInRpbWVJbnB1dCIsInRpbWVWYWx1ZSIsInBhcnNlSW50IiwidmFsdWUiLCJpc05hTiIsImRlbGF5SW5wdXQiLCJkZWxheVZhbHVlIiwiaW5pdGlhbGl6ZUNhbnZhcyIsImV4aXN0aW5nQ2FudmFzIiwicmVtb3ZlIiwiY3JlYXRlRWxlbWVudCIsImlkIiwic3R5bGUiLCJjc3NUZXh0IiwiaGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJ3aGl0ZVNjcmVlbkNhbnZhcyIsImN0eCIsImdldENvbnRleHQiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImNsZWFudXAiLCJjb250YWlucyIsImNvbnRhaW5lciIsImhhbmRsZVBlcm1pc3Npb25BY2NlcHRlZCIsImhhbmRsZVBlcm1pc3Npb25EZW5pZWQiLCJyZXN0b3JlQ2FudmFzIiwiX29yaWdpbmFsU3RhdGUiLCJvcmlnaW5hbCIsInBhcmVudCIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsInpJbmRleCIsImJhY2tncm91bmRDb2xvciIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwiZXJyb3IiLCJjbGVhckNhbnZhcyIsIndhcm4iLCJjbGVhclJlY3QiLCJlbnN1cmVDYW52YXNFeGlzdHMiLCJ3aW5kb3dXaWR0aCIsIndpbmRvd0hlaWdodCIsImVsZW1lbnRzVG9IaWRlIiwiZm9yRWFjaCIsInNlbGVjdG9yIiwiZWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWwiLCJkaXNwbGF5Iiwic2V0QXR0cmlidXRlIiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJzZXRQcm9wZXJ0eSIsIl9yZXNpemVIYW5kbGVyIiwiY2xlYW51cENhbnZhcyIsInJlc3RvcmVDYW52YXNUb0NvbnRhaW5lciIsImhpZGRlbkVsZW1lbnRzIiwicmVtb3ZlQXR0cmlidXRlIiwiY29udGFpbmVyV2lkdGgiLCJjbGllbnRXaWR0aCIsImNvbnRhaW5lckhlaWdodCIsImhhbmRsZURvdFByb2Nlc3MiLCJvcHRpb25zIiwib25TdGF0dXNVcGRhdGUiLCJ0b2dnbGVUb3BCYXIiLCJ1c2VSYW5kb21Qb3NpdGlvbiIsInBvc3RDb3VudGRvd25EZWxheSIsImtlZXBEb3RWaXNpYmxlSW50ZXJ2YWwiLCJjb3VudGRvd25FbGVtZW50IiwiUHJvbWlzZSIsInJlc29sdmUiLCJFcnJvciIsImRvdFBvc2l0aW9uIiwieCIsInkiLCJkb3RSYWRpdXMiLCJzZXRJbnRlcnZhbCIsImV4aXN0aW5nQ291bnRkb3ducyIsImNvdW50IiwidGV4dENvbnRlbnQiLCJjYXB0dXJlUmVzdWx0IiwicG9pbnQiLCJzdWNjZXNzIiwibWVzc2FnZSIsImNsZWFySW50ZXJ2YWwiLCJyZW1haW5pbmdDb3VudGRvd25zIiwib3JpZ2luYWxDYW52YXNQYXJlbnQiLCJvcmlnaW5hbENhbnZhc1N0eWxlIiwic3RhdHVzSW5kaWNhdG9yIiwiY3VycmVudFJlZHJhd0ludGVydmFsIiwicGFyZW50RWxlbWVudCIsInBvaW50cyIsInN1Y2Nlc3NDb3VudCIsImkiLCJyYWRpdXMiLCJyZWRyYXdDdXJyZW50RG90Iiwic2NyZWVuSW1hZ2UiLCJ0aW1lcyIsImRlbGF5IiwiY3VycmVudEluZGV4IiwicmVzdWx0Iiwic3RhdHVzIiwic2hvdyIsImNhcHR1cmluZyIsIm1ha2VDYW52YXNGdWxsc2NyZWVuIiwic2V0dXBDYWxpYnJhdGlvbiIsImRlZmF1bHQiLCJDYWxpYnJhdGVIYW5kbGVyIiwiY2FsaWJyYXRlSGFuZGxlciIsInNldE91dHB1dFRleHQiLCJuZXdDb3VudGVyIiwicHJldiIsImNhcHR1cmVGb2xkZXIiLCJvbkNvbXBsZXRlIiwiaGFuZGxlQWN0aW9uIiwic3RhcnRDYWxpYnJhdGlvbiIsInJlc3RvcmVDYW52YXNTaXplIiwiZXJyIiwiaGFuZGxlVG9nZ2xlSGVhZFBvc2UiLCJuZXdIZWFkUG9zZVN0YXRlIiwidmlkZW9Qcm9jZXNzb3IiLCJ1cGRhdGVPcHRpb25zIiwiaGFuZGxlVG9nZ2xlQm91bmRpbmdCb3giLCJuZXdCb3VuZGluZ0JveFN0YXRlIiwiaGFuZGxlVG9nZ2xlTWFzayIsIm5ld01hc2tTdGF0ZSIsImhhbmRsZVRvZ2dsZVBhcmFtZXRlcnMiLCJuZXdQYXJhbWV0ZXJzU3RhdGUiLCJoYW5kbGVUb2dnbGVDYW1lcmEiLCJuZXdDYW1lcmFTdGF0ZSIsImhhbmRsZUdvQmFjayIsInB1c2giLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJib3JkZXJSYWRpdXMiLCJwYWRkaW5nIiwiYm94U2hhZG93IiwiaDMiLCJtYXJnaW4iLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJwIiwibGluZUhlaWdodCIsImdhcCIsImJvcmRlciIsImN1cnNvciIsImNvbG9yIiwiQWN0aW9uQnV0dG9uR3JvdXAiLCJwcm9wcyIsInNzciIsIkFjdGlvbkJ1dHRvblBhZ2UiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/actionButton.js\n"));

/***/ })

});
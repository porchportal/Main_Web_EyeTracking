"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/collected-dataset-customized",{

/***/ "(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/adminSettings.js":
/*!****************************************************************************!*\
  !*** ./pages/collected-dataset-customized/components-gui/adminSettings.js ***!
  \****************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAdminSettings: () => (/* binding */ useAdminSettings)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _s = $RefreshSig$();\n\nconst useAdminSettings = (ref)=>{\n    _s();\n    const [settings, setSettings] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const [currentUserId, setCurrentUserId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isTopBarUpdated, setIsTopBarUpdated] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const initialized = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const pollingInterval = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // Initialize polling for settings updates\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            const fetchSettings = {\n                \"useAdminSettings.useEffect.fetchSettings\": async ()=>{\n                    if (!currentUserId) return;\n                    try {\n                        const response = await fetch(\"/api/data-center/settings/\".concat(currentUserId));\n                        if (!response.ok) throw new Error('Failed to fetch settings');\n                        const newSettings = await response.json();\n                        setSettings({\n                            \"useAdminSettings.useEffect.fetchSettings\": (prev)=>({\n                                    ...prev,\n                                    [currentUserId]: newSettings\n                                })\n                        }[\"useAdminSettings.useEffect.fetchSettings\"]);\n                        // First update topBar through ref\n                        if (ref && ref.current) {\n                            if (ref.current.setCaptureSettings) {\n                                ref.current.setCaptureSettings(newSettings);\n                                setIsTopBarUpdated(true);\n                            }\n                        }\n                    } catch (error) {\n                        console.error('Error fetching settings:', error);\n                    }\n                }\n            }[\"useAdminSettings.useEffect.fetchSettings\"];\n            // Initial fetch\n            fetchSettings();\n            // Set up polling interval\n            pollingInterval.current = setInterval(fetchSettings, 3000);\n            return ({\n                \"useAdminSettings.useEffect\": ()=>{\n                    if (pollingInterval.current) {\n                        clearInterval(pollingInterval.current);\n                    }\n                }\n            })[\"useAdminSettings.useEffect\"];\n        }\n    }[\"useAdminSettings.useEffect\"], [\n        currentUserId,\n        ref\n    ]);\n    // Effect to handle index.js update after topBar is updated\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            if (isTopBarUpdated) {\n                // Dispatch event to update index.js\n                const event = new CustomEvent('settingsUpdated', {\n                    detail: {\n                        type: 'settings',\n                        userId: currentUserId,\n                        settings: settings[currentUserId]\n                    }\n                });\n                window.dispatchEvent(event);\n                setIsTopBarUpdated(false);\n            }\n        }\n    }[\"useAdminSettings.useEffect\"], [\n        isTopBarUpdated,\n        currentUserId,\n        settings\n    ]);\n    // Load settings from localStorage on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            try {\n                const savedSettings = localStorage.getItem('adminSettings');\n                if (savedSettings) {\n                    const parsedSettings = JSON.parse(savedSettings);\n                    setSettings(parsedSettings);\n                }\n            } catch (error) {\n                console.error('Error loading settings from localStorage:', error);\n            }\n        }\n    }[\"useAdminSettings.useEffect\"], []);\n    // Save settings to localStorage when they change\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            if (initialized.current) {\n                try {\n                    localStorage.setItem('adminSettings', JSON.stringify(settings));\n                } catch (error) {\n                    console.error('Error saving settings to localStorage:', error);\n                }\n            }\n        }\n    }[\"useAdminSettings.useEffect\"], [\n        settings\n    ]);\n    // Listen for user ID changes\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            const handleUserIdChange = {\n                \"useAdminSettings.useEffect.handleUserIdChange\": (event)=>{\n                    if (event.detail && event.detail.userId) {\n                        setCurrentUserId(event.detail.userId);\n                        // Trigger immediate settings fetch for new user\n                        const fetchSettings = {\n                            \"useAdminSettings.useEffect.handleUserIdChange.fetchSettings\": async ()=>{\n                                try {\n                                    const response = await fetch(\"/api/data-center/settings/\".concat(event.detail.userId));\n                                    if (!response.ok) throw new Error('Failed to fetch settings');\n                                    const newSettings = await response.json();\n                                    setSettings({\n                                        \"useAdminSettings.useEffect.handleUserIdChange.fetchSettings\": (prev)=>({\n                                                ...prev,\n                                                [event.detail.userId]: newSettings\n                                            })\n                                    }[\"useAdminSettings.useEffect.handleUserIdChange.fetchSettings\"]);\n                                    if (ref && ref.current && ref.current.setCaptureSettings) {\n                                        ref.current.setCaptureSettings(newSettings);\n                                        setIsTopBarUpdated(true);\n                                    }\n                                } catch (error) {\n                                    console.error('Error fetching settings for new user:', error);\n                                }\n                            }\n                        }[\"useAdminSettings.useEffect.handleUserIdChange.fetchSettings\"];\n                        fetchSettings();\n                    }\n                }\n            }[\"useAdminSettings.useEffect.handleUserIdChange\"];\n            window.addEventListener('userIdChange', handleUserIdChange);\n            return ({\n                \"useAdminSettings.useEffect\": ()=>{\n                    window.removeEventListener('userIdChange', handleUserIdChange);\n                }\n            })[\"useAdminSettings.useEffect\"];\n        }\n    }[\"useAdminSettings.useEffect\"], [\n        ref\n    ]);\n    // Listen for settings updates from admin page\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            const handleSettingsUpdate = {\n                \"useAdminSettings.useEffect.handleSettingsUpdate\": (event)=>{\n                    if (event.detail && event.detail.type === 'captureSettings') {\n                        const { userId, times, delay } = event.detail;\n                        if (times !== undefined || delay !== undefined) {\n                            var _settings_userId, _settings_userId1;\n                            const newSettings = {\n                                times: times !== undefined ? times : ((_settings_userId = settings[userId]) === null || _settings_userId === void 0 ? void 0 : _settings_userId.times) || 1,\n                                delay: delay !== undefined ? delay : ((_settings_userId1 = settings[userId]) === null || _settings_userId1 === void 0 ? void 0 : _settings_userId1.delay) || 3\n                            };\n                            setSettings({\n                                \"useAdminSettings.useEffect.handleSettingsUpdate\": (prev)=>({\n                                        ...prev,\n                                        [userId]: newSettings\n                                    })\n                            }[\"useAdminSettings.useEffect.handleSettingsUpdate\"]);\n                            // First update topBar through ref\n                            if (ref && ref.current) {\n                                if (ref.current.setCaptureSettings) {\n                                    ref.current.setCaptureSettings(newSettings);\n                                    setIsTopBarUpdated(true);\n                                }\n                            }\n                            // Save to backend\n                            const saveToBackend = {\n                                \"useAdminSettings.useEffect.handleSettingsUpdate.saveToBackend\": async ()=>{\n                                    try {\n                                        const response = await fetch(\"/api/data-center/settings/\".concat(userId), {\n                                            method: 'POST',\n                                            headers: {\n                                                'Content-Type': 'application/json'\n                                            },\n                                            body: JSON.stringify(newSettings)\n                                        });\n                                        if (!response.ok) {\n                                            throw new Error('Failed to save settings to backend');\n                                        }\n                                    } catch (error) {\n                                        console.error('Error saving settings to backend:', error);\n                                    }\n                                }\n                            }[\"useAdminSettings.useEffect.handleSettingsUpdate.saveToBackend\"];\n                            saveToBackend();\n                        }\n                    }\n                }\n            }[\"useAdminSettings.useEffect.handleSettingsUpdate\"];\n            window.addEventListener('captureSettingsUpdate', handleSettingsUpdate);\n            return ({\n                \"useAdminSettings.useEffect\": ()=>{\n                    window.removeEventListener('captureSettingsUpdate', handleSettingsUpdate);\n                }\n            })[\"useAdminSettings.useEffect\"];\n        }\n    }[\"useAdminSettings.useEffect\"], [\n        settings,\n        ref\n    ]);\n    const updateSettings = async (newSettings, userId)=>{\n        try {\n            if (!newSettings || typeof newSettings !== 'object') {\n                throw new Error('Invalid settings format');\n            }\n            const { times, delay } = newSettings;\n            if (typeof times !== 'number' || typeof delay !== 'number' || times < 1 || delay < 1) {\n                throw new Error('Invalid settings values');\n            }\n            const updatedSettings = {\n                ...settings,\n                [userId]: {\n                    times,\n                    delay\n                }\n            };\n            setSettings(updatedSettings);\n            initialized.current = true;\n            // Save settings to backend\n            const response = await fetch(\"/api/data-center/settings/\".concat(userId), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    times,\n                    delay\n                })\n            });\n            if (!response.ok) {\n                throw new Error('Failed to save settings to backend');\n            }\n            // First update topBar through ref\n            if (ref && ref.current) {\n                if (ref.current.setCaptureSettings) {\n                    ref.current.setCaptureSettings({\n                        times,\n                        delay\n                    });\n                    setIsTopBarUpdated(true);\n                }\n            }\n        } catch (error) {\n            console.error('Error updating settings:', error);\n            throw error;\n        }\n    };\n    return {\n        settings,\n        updateSettings\n    };\n};\n_s(useAdminSettings, \"nuvxxM8Wg39fvpcwYnB6g4V14AE=\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3BhZ2VzL2NvbGxlY3RlZC1kYXRhc2V0LWN1c3RvbWl6ZWQvY29tcG9uZW50cy1ndWkvYWRtaW5TZXR0aW5ncy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW9EO0FBRTdDLE1BQU1HLG1CQUFtQixDQUFDQzs7SUFDL0IsTUFBTSxDQUFDQyxVQUFVQyxZQUFZLEdBQUdKLCtDQUFRQSxDQUFDLENBQUM7SUFDMUMsTUFBTSxDQUFDSyxlQUFlQyxpQkFBaUIsR0FBR04sK0NBQVFBLENBQUM7SUFDbkQsTUFBTSxDQUFDTyxpQkFBaUJDLG1CQUFtQixHQUFHUiwrQ0FBUUEsQ0FBQztJQUN2RCxNQUFNUyxjQUFjViw2Q0FBTUEsQ0FBQztJQUMzQixNQUFNVyxrQkFBa0JYLDZDQUFNQSxDQUFDO0lBRS9CLDBDQUEwQztJQUMxQ0QsZ0RBQVNBO3NDQUFDO1lBQ1IsTUFBTWE7NERBQWdCO29CQUNwQixJQUFJLENBQUNOLGVBQWU7b0JBRXBCLElBQUk7d0JBQ0YsTUFBTU8sV0FBVyxNQUFNQyxNQUFNLDZCQUEyQyxPQUFkUjt3QkFDMUQsSUFBSSxDQUFDTyxTQUFTRSxFQUFFLEVBQUUsTUFBTSxJQUFJQyxNQUFNO3dCQUVsQyxNQUFNQyxjQUFjLE1BQU1KLFNBQVNLLElBQUk7d0JBQ3ZDYjt3RUFBWWMsQ0FBQUEsT0FBUztvQ0FDbkIsR0FBR0EsSUFBSTtvQ0FDUCxDQUFDYixjQUFjLEVBQUVXO2dDQUNuQjs7d0JBRUEsa0NBQWtDO3dCQUNsQyxJQUFJZCxPQUFPQSxJQUFJaUIsT0FBTyxFQUFFOzRCQUN0QixJQUFJakIsSUFBSWlCLE9BQU8sQ0FBQ0Msa0JBQWtCLEVBQUU7Z0NBQ2xDbEIsSUFBSWlCLE9BQU8sQ0FBQ0Msa0JBQWtCLENBQUNKO2dDQUMvQlIsbUJBQW1COzRCQUNyQjt3QkFDRjtvQkFDRixFQUFFLE9BQU9hLE9BQU87d0JBQ2RDLFFBQVFELEtBQUssQ0FBQyw0QkFBNEJBO29CQUM1QztnQkFDRjs7WUFFQSxnQkFBZ0I7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UUFBUUQsS0FBSyxDQUFDLDRCQUE0QkE7WUFDMUMsTUFBTUE7UUFDUjtJQUNGO0lBRUEsT0FBTztRQUFFbEI7UUFBVWdEO0lBQWU7QUFDcEMsRUFBRTtHQWpPV2xEIiwic291cmNlcyI6WyIvVXNlcnMvcG9yY2hwb3J0YWwyL0Rlc2t0b3Av8J+UpWV2ZXJ5dGhpbmcvTWFpbl9XZWJfRXllVHJhY2tpbmcvbWFpbi13ZWIvZnJvbnRlbmQvcGFnZXMvY29sbGVjdGVkLWRhdGFzZXQtY3VzdG9taXplZC9jb21wb25lbnRzLWd1aS9hZG1pblNldHRpbmdzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGNvbnN0IHVzZUFkbWluU2V0dGluZ3MgPSAocmVmKSA9PiB7XG4gIGNvbnN0IFtzZXR0aW5ncywgc2V0U2V0dGluZ3NdID0gdXNlU3RhdGUoe30pO1xuICBjb25zdCBbY3VycmVudFVzZXJJZCwgc2V0Q3VycmVudFVzZXJJZF0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW2lzVG9wQmFyVXBkYXRlZCwgc2V0SXNUb3BCYXJVcGRhdGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgaW5pdGlhbGl6ZWQgPSB1c2VSZWYoZmFsc2UpO1xuICBjb25zdCBwb2xsaW5nSW50ZXJ2YWwgPSB1c2VSZWYobnVsbCk7XG5cbiAgLy8gSW5pdGlhbGl6ZSBwb2xsaW5nIGZvciBzZXR0aW5ncyB1cGRhdGVzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZmV0Y2hTZXR0aW5ncyA9IGFzeW5jICgpID0+IHtcbiAgICAgIGlmICghY3VycmVudFVzZXJJZCkgcmV0dXJuO1xuICAgICAgXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYXBpL2RhdGEtY2VudGVyL3NldHRpbmdzLyR7Y3VycmVudFVzZXJJZH1gKTtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2ggc2V0dGluZ3MnKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG5ld1NldHRpbmdzID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICBzZXRTZXR0aW5ncyhwcmV2ID0+ICh7XG4gICAgICAgICAgLi4ucHJldixcbiAgICAgICAgICBbY3VycmVudFVzZXJJZF06IG5ld1NldHRpbmdzXG4gICAgICAgIH0pKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEZpcnN0IHVwZGF0ZSB0b3BCYXIgdGhyb3VnaCByZWZcbiAgICAgICAgaWYgKHJlZiAmJiByZWYuY3VycmVudCkge1xuICAgICAgICAgIGlmIChyZWYuY3VycmVudC5zZXRDYXB0dXJlU2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHJlZi5jdXJyZW50LnNldENhcHR1cmVTZXR0aW5ncyhuZXdTZXR0aW5ncyk7XG4gICAgICAgICAgICBzZXRJc1RvcEJhclVwZGF0ZWQodHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBzZXR0aW5nczonLCBlcnJvcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEluaXRpYWwgZmV0Y2hcbiAgICBmZXRjaFNldHRpbmdzKCk7XG5cbiAgICAvLyBTZXQgdXAgcG9sbGluZyBpbnRlcnZhbFxuICAgIHBvbGxpbmdJbnRlcnZhbC5jdXJyZW50ID0gc2V0SW50ZXJ2YWwoZmV0Y2hTZXR0aW5ncywgMzAwMCk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHBvbGxpbmdJbnRlcnZhbC5jdXJyZW50KSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwocG9sbGluZ0ludGVydmFsLmN1cnJlbnQpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtjdXJyZW50VXNlcklkLCByZWZdKTtcblxuICAvLyBFZmZlY3QgdG8gaGFuZGxlIGluZGV4LmpzIHVwZGF0ZSBhZnRlciB0b3BCYXIgaXMgdXBkYXRlZFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc1RvcEJhclVwZGF0ZWQpIHtcbiAgICAgIC8vIERpc3BhdGNoIGV2ZW50IHRvIHVwZGF0ZSBpbmRleC5qc1xuICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ3NldHRpbmdzVXBkYXRlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgdHlwZTogJ3NldHRpbmdzJyxcbiAgICAgICAgICB1c2VySWQ6IGN1cnJlbnRVc2VySWQsXG4gICAgICAgICAgc2V0dGluZ3M6IHNldHRpbmdzW2N1cnJlbnRVc2VySWRdXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgc2V0SXNUb3BCYXJVcGRhdGVkKGZhbHNlKTtcbiAgICB9XG4gIH0sIFtpc1RvcEJhclVwZGF0ZWQsIGN1cnJlbnRVc2VySWQsIHNldHRpbmdzXSk7XG5cbiAgLy8gTG9hZCBzZXR0aW5ncyBmcm9tIGxvY2FsU3RvcmFnZSBvbiBtb3VudFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzYXZlZFNldHRpbmdzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FkbWluU2V0dGluZ3MnKTtcbiAgICAgIGlmIChzYXZlZFNldHRpbmdzKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFNldHRpbmdzID0gSlNPTi5wYXJzZShzYXZlZFNldHRpbmdzKTtcbiAgICAgICAgc2V0U2V0dGluZ3MocGFyc2VkU2V0dGluZ3MpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIHNldHRpbmdzIGZyb20gbG9jYWxTdG9yYWdlOicsIGVycm9yKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICAvLyBTYXZlIHNldHRpbmdzIHRvIGxvY2FsU3RvcmFnZSB3aGVuIHRoZXkgY2hhbmdlXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGluaXRpYWxpemVkLmN1cnJlbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdhZG1pblNldHRpbmdzJywgSlNPTi5zdHJpbmdpZnkoc2V0dGluZ3MpKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNhdmluZyBzZXR0aW5ncyB0byBsb2NhbFN0b3JhZ2U6JywgZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW3NldHRpbmdzXSk7XG5cbiAgLy8gTGlzdGVuIGZvciB1c2VyIElEIGNoYW5nZXNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVVc2VySWRDaGFuZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC5kZXRhaWwgJiYgZXZlbnQuZGV0YWlsLnVzZXJJZCkge1xuICAgICAgICBzZXRDdXJyZW50VXNlcklkKGV2ZW50LmRldGFpbC51c2VySWQpO1xuICAgICAgICAvLyBUcmlnZ2VyIGltbWVkaWF0ZSBzZXR0aW5ncyBmZXRjaCBmb3IgbmV3IHVzZXJcbiAgICAgICAgY29uc3QgZmV0Y2hTZXR0aW5ncyA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgL2FwaS9kYXRhLWNlbnRlci9zZXR0aW5ncy8ke2V2ZW50LmRldGFpbC51c2VySWR9YCk7XG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBzZXR0aW5ncycpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBuZXdTZXR0aW5ncyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIHNldFNldHRpbmdzKHByZXYgPT4gKHtcbiAgICAgICAgICAgICAgLi4ucHJldixcbiAgICAgICAgICAgICAgW2V2ZW50LmRldGFpbC51c2VySWRdOiBuZXdTZXR0aW5nc1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAocmVmICYmIHJlZi5jdXJyZW50ICYmIHJlZi5jdXJyZW50LnNldENhcHR1cmVTZXR0aW5ncykge1xuICAgICAgICAgICAgICByZWYuY3VycmVudC5zZXRDYXB0dXJlU2V0dGluZ3MobmV3U2V0dGluZ3MpO1xuICAgICAgICAgICAgICBzZXRJc1RvcEJhclVwZGF0ZWQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHNldHRpbmdzIGZvciBuZXcgdXNlcjonLCBlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmZXRjaFNldHRpbmdzKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1c2VySWRDaGFuZ2UnLCBoYW5kbGVVc2VySWRDaGFuZ2UpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndXNlcklkQ2hhbmdlJywgaGFuZGxlVXNlcklkQ2hhbmdlKTtcbiAgICB9O1xuICB9LCBbcmVmXSk7XG5cbiAgLy8gTGlzdGVuIGZvciBzZXR0aW5ncyB1cGRhdGVzIGZyb20gYWRtaW4gcGFnZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZVNldHRpbmdzVXBkYXRlID0gKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQuZGV0YWlsICYmIGV2ZW50LmRldGFpbC50eXBlID09PSAnY2FwdHVyZVNldHRpbmdzJykge1xuICAgICAgICBjb25zdCB7IHVzZXJJZCwgdGltZXMsIGRlbGF5IH0gPSBldmVudC5kZXRhaWw7XG4gICAgICAgIGlmICh0aW1lcyAhPT0gdW5kZWZpbmVkIHx8IGRlbGF5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zdCBuZXdTZXR0aW5ncyA9IHtcbiAgICAgICAgICAgIHRpbWVzOiB0aW1lcyAhPT0gdW5kZWZpbmVkID8gdGltZXMgOiAoc2V0dGluZ3NbdXNlcklkXT8udGltZXMgfHwgMSksXG4gICAgICAgICAgICBkZWxheTogZGVsYXkgIT09IHVuZGVmaW5lZCA/IGRlbGF5IDogKHNldHRpbmdzW3VzZXJJZF0/LmRlbGF5IHx8IDMpXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHNldFNldHRpbmdzKHByZXYgPT4gKHtcbiAgICAgICAgICAgIC4uLnByZXYsXG4gICAgICAgICAgICBbdXNlcklkXTogbmV3U2V0dGluZ3NcbiAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAvLyBGaXJzdCB1cGRhdGUgdG9wQmFyIHRocm91Z2ggcmVmXG4gICAgICAgICAgaWYgKHJlZiAmJiByZWYuY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKHJlZi5jdXJyZW50LnNldENhcHR1cmVTZXR0aW5ncykge1xuICAgICAgICAgICAgICByZWYuY3VycmVudC5zZXRDYXB0dXJlU2V0dGluZ3MobmV3U2V0dGluZ3MpO1xuICAgICAgICAgICAgICBzZXRJc1RvcEJhclVwZGF0ZWQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU2F2ZSB0byBiYWNrZW5kXG4gICAgICAgICAgY29uc3Qgc2F2ZVRvQmFja2VuZCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvZGF0YS1jZW50ZXIvc2V0dGluZ3MvJHt1c2VySWR9YCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShuZXdTZXR0aW5ncylcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHNhdmUgc2V0dGluZ3MgdG8gYmFja2VuZCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzYXZpbmcgc2V0dGluZ3MgdG8gYmFja2VuZDonLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBzYXZlVG9CYWNrZW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NhcHR1cmVTZXR0aW5nc1VwZGF0ZScsIGhhbmRsZVNldHRpbmdzVXBkYXRlKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NhcHR1cmVTZXR0aW5nc1VwZGF0ZScsIGhhbmRsZVNldHRpbmdzVXBkYXRlKTtcbiAgICB9O1xuICB9LCBbc2V0dGluZ3MsIHJlZl0pO1xuXG4gIGNvbnN0IHVwZGF0ZVNldHRpbmdzID0gYXN5bmMgKG5ld1NldHRpbmdzLCB1c2VySWQpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFuZXdTZXR0aW5ncyB8fCB0eXBlb2YgbmV3U2V0dGluZ3MgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzZXR0aW5ncyBmb3JtYXQnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyB0aW1lcywgZGVsYXkgfSA9IG5ld1NldHRpbmdzO1xuICAgICAgaWYgKHR5cGVvZiB0aW1lcyAhPT0gJ251bWJlcicgfHwgdHlwZW9mIGRlbGF5ICE9PSAnbnVtYmVyJyB8fCB0aW1lcyA8IDEgfHwgZGVsYXkgPCAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzZXR0aW5ncyB2YWx1ZXMnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXBkYXRlZFNldHRpbmdzID0ge1xuICAgICAgICAuLi5zZXR0aW5ncyxcbiAgICAgICAgW3VzZXJJZF06IHtcbiAgICAgICAgICB0aW1lcyxcbiAgICAgICAgICBkZWxheVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZXRTZXR0aW5ncyh1cGRhdGVkU2V0dGluZ3MpO1xuICAgICAgaW5pdGlhbGl6ZWQuY3VycmVudCA9IHRydWU7XG5cbiAgICAgIC8vIFNhdmUgc2V0dGluZ3MgdG8gYmFja2VuZFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgL2FwaS9kYXRhLWNlbnRlci9zZXR0aW5ncy8ke3VzZXJJZH1gLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyB0aW1lcywgZGVsYXkgfSlcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHNhdmUgc2V0dGluZ3MgdG8gYmFja2VuZCcpO1xuICAgICAgfVxuXG4gICAgICAvLyBGaXJzdCB1cGRhdGUgdG9wQmFyIHRocm91Z2ggcmVmXG4gICAgICBpZiAocmVmICYmIHJlZi5jdXJyZW50KSB7XG4gICAgICAgIGlmIChyZWYuY3VycmVudC5zZXRDYXB0dXJlU2V0dGluZ3MpIHtcbiAgICAgICAgICByZWYuY3VycmVudC5zZXRDYXB0dXJlU2V0dGluZ3MoeyB0aW1lcywgZGVsYXkgfSk7XG4gICAgICAgICAgc2V0SXNUb3BCYXJVcGRhdGVkKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgc2V0dGluZ3M6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7IHNldHRpbmdzLCB1cGRhdGVTZXR0aW5ncyB9O1xufTsiXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VBZG1pblNldHRpbmdzIiwicmVmIiwic2V0dGluZ3MiLCJzZXRTZXR0aW5ncyIsImN1cnJlbnRVc2VySWQiLCJzZXRDdXJyZW50VXNlcklkIiwiaXNUb3BCYXJVcGRhdGVkIiwic2V0SXNUb3BCYXJVcGRhdGVkIiwiaW5pdGlhbGl6ZWQiLCJwb2xsaW5nSW50ZXJ2YWwiLCJmZXRjaFNldHRpbmdzIiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwiRXJyb3IiLCJuZXdTZXR0aW5ncyIsImpzb24iLCJwcmV2IiwiY3VycmVudCIsInNldENhcHR1cmVTZXR0aW5ncyIsImVycm9yIiwiY29uc29sZSIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJ0eXBlIiwidXNlcklkIiwid2luZG93IiwiZGlzcGF0Y2hFdmVudCIsInNhdmVkU2V0dGluZ3MiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicGFyc2VkU2V0dGluZ3MiLCJKU09OIiwicGFyc2UiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiaGFuZGxlVXNlcklkQ2hhbmdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJoYW5kbGVTZXR0aW5nc1VwZGF0ZSIsInRpbWVzIiwiZGVsYXkiLCJ1bmRlZmluZWQiLCJzYXZlVG9CYWNrZW5kIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJ1cGRhdGVTZXR0aW5ncyIsInVwZGF0ZWRTZXR0aW5ncyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/adminSettings.js\n"));

/***/ })

});
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/process_set",{

/***/ "(pages-dir-browser)/./pages/process_set/processApi.js":
/*!*****************************************!*\
  !*** ./pages/process_set/processApi.js ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkBackendConnection: () => (/* binding */ checkBackendConnection),\n/* harmony export */   checkFilesCompleteness: () => (/* binding */ checkFilesCompleteness),\n/* harmony export */   checkProcessingStatus: () => (/* binding */ checkProcessingStatus),\n/* harmony export */   compareFileCounts: () => (/* binding */ compareFileCounts),\n/* harmony export */   getFilesList: () => (/* binding */ getFilesList),\n/* harmony export */   previewFile: () => (/* binding */ previewFile),\n/* harmony export */   processFiles: () => (/* binding */ processFiles)\n/* harmony export */ });\n// pages/process_set/processApi.js - API functions for process_set\n// Check if the backend is connected\nconst checkBackendConnection = async ()=>{\n    try {\n        const response = await fetch('/api/check-backend-connection');\n        const data = await response.json();\n        return {\n            success: true,\n            connected: data.connected\n        };\n    } catch (error) {\n        console.error('Error checking backend connection:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Get list of files from both capture and enhance folders\nconst getFilesList = async ()=>{\n    try {\n        // Make sure we're using the correct API endpoint\n        const response = await fetch('/api/file-api?operation=list');\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error getting files list:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Check file completeness (if webcam, screen, and parameter files exist for each set)\nconst checkFilesCompleteness = async ()=>{\n    try {\n        const response = await fetch('/api/file-api?operation=check-completeness');\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error checking files completeness:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Preview a specific file\nconst previewFile = async (filename)=>{\n    try {\n        const response = await fetch(\"/api/preview-api?filename=\".concat(encodeURIComponent(filename)));\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error previewing file:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Process files - trigger the processing\nconst processFiles = async (setNumbers)=>{\n    try {\n        const response = await fetch('/api/process-status-api', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                setNumbers\n            })\n        });\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error processing files:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Compare files between capture and enhance folders\nconst compareFileCounts = async ()=>{\n    try {\n        const response = await fetch('/api/file-api?operation=compare');\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error comparing file counts:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Check if processing is currently running\nconst checkProcessingStatus = async ()=>{\n    try {\n        const response = await fetch('/api/process-status-api');\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error checking processing status:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3BhZ2VzL3Byb2Nlc3Nfc2V0L3Byb2Nlc3NBcGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLGtFQUFrRTtBQUVsRSxvQ0FBb0M7QUFDN0IsTUFBTUEseUJBQXlCO0lBQ2xDLElBQUk7UUFDRixNQUFNQyxXQUFXLE1BQU1DLE1BQU07UUFDN0IsTUFBTUMsT0FBTyxNQUFNRixTQUFTRyxJQUFJO1FBQ2hDLE9BQU87WUFBRUMsU0FBUztZQUFNQyxXQUFXSCxLQUFLRyxTQUFTO1FBQUM7SUFDcEQsRUFBRSxPQUFPQyxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxzQ0FBc0NBO1FBQ3BELE9BQU87WUFBRUYsU0FBUztZQUFPRSxPQUFPQSxNQUFNRSxPQUFPO1FBQUM7SUFDaEQ7QUFDRixFQUFFO0FBRUYsMERBQTBEO0FBQ25ELE1BQU1DLGVBQWU7SUFDMUIsSUFBSTtRQUNGLGlEQUFpRDtRQUNqRCxNQUFNVCxXQUFXLE1BQU1DLE1BQU07UUFDN0IsTUFBTUMsT0FBTyxNQUFNRixTQUFTRyxJQUFJO1FBQ2hDLE9BQU9EO0lBQ1QsRUFBRSxPQUFPSSxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyw2QkFBNkJBO1FBQzNDLE9BQU87WUFBRUYsU0FBUztZQUFPRSxPQUFPQSxNQUFNRSxPQUFPO1FBQUM7SUFDaEQ7QUFDRixFQUFFO0FBRUYsc0ZBQXNGO0FBQy9FLE1BQU1FLHlCQUF5QjtJQUNwQyxJQUFJO1FBQ0YsTUFBTVYsV0FBVyxNQUFNQyxNQUFNO1FBQzdCLE1BQU1DLE9BQU8sTUFBTUYsU0FBU0csSUFBSTtRQUNoQyxPQUFPRDtJQUNULEVBQUUsT0FBT0ksT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsc0NBQXNDQTtRQUNwRCxPQUFPO1lBQUVGLFNBQVM7WUFBT0UsT0FBT0EsTUFBTUUsT0FBTztRQUFDO0lBQ2hEO0FBQ0YsRUFBRTtBQUVGLDBCQUEwQjtBQUNuQixNQUFNRyxjQUFjLE9BQU9DO0lBQ2hDLElBQUk7UUFDRixNQUFNWixXQUFXLE1BQU1DLE1BQU0sNkJBQTBELE9BQTdCWSxtQkFBbUJEO1FBQzdFLE1BQU1WLE9BQU8sTUFBTUYsU0FBU0csSUFBSTtRQUNoQyxPQUFPRDtJQUNULEVBQUUsT0FBT0ksT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsMEJBQTBCQTtRQUN4QyxPQUFPO1lBQUVGLFNBQVM7WUFBT0UsT0FBT0EsTUFBTUUsT0FBTztRQUFDO0lBQ2hEO0FBQ0YsRUFBRTtBQUVGLHlDQUF5QztBQUNsQyxNQUFNTSxlQUFlLE9BQU9DO0lBQ2pDLElBQUk7UUFDRixNQUFNZixXQUFXLE1BQU1DLE1BQU0sMkJBQTJCO1lBQ3REZSxRQUFRO1lBQ1JDLFNBQVM7Z0JBQ1AsZ0JBQWdCO1lBQ2xCO1lBQ0FDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQztnQkFBRUw7WUFBVztRQUNwQztRQUNBLE1BQU1iLE9BQU8sTUFBTUYsU0FBU0csSUFBSTtRQUNoQyxPQUFPRDtJQUNULEVBQUUsT0FBT0ksT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsMkJBQTJCQTtRQUN6QyxPQUFPO1lBQUVGLFNBQVM7WUFBT0UsT0FBT0EsTUFBTUUsT0FBTztRQUFDO0lBQ2hEO0FBQ0YsRUFBRTtBQUVGLG9EQUFvRDtBQUM3QyxNQUFNYSxvQkFBb0I7SUFDL0IsSUFBSTtRQUNGLE1BQU1yQixXQUFXLE1BQU1DLE1BQU07UUFDN0IsTUFBTUMsT0FBTyxNQUFNRixTQUFTRyxJQUFJO1FBQ2hDLE9BQU9EO0lBQ1QsRUFBRSxPQUFPSSxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxnQ0FBZ0NBO1FBQzlDLE9BQU87WUFBRUYsU0FBUztZQUFPRSxPQUFPQSxNQUFNRSxPQUFPO1FBQUM7SUFDaEQ7QUFDRixFQUFFO0FBRUYsMkNBQTJDO0FBQ3BDLE1BQU1jLHdCQUF3QjtJQUNuQyxJQUFJO1FBQ0YsTUFBTXRCLFdBQVcsTUFBTUMsTUFBTTtRQUM3QixNQUFNQyxPQUFPLE1BQU1GLFNBQVNHLElBQUk7UUFDaEMsT0FBT0Q7SUFDVCxFQUFFLE9BQU9JLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLHFDQUFxQ0E7UUFDbkQsT0FBTztZQUFFRixTQUFTO1lBQU9FLE9BQU9BLE1BQU1FLE9BQU87UUFBQztJQUNoRDtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9wb3JjaHBvcnRhbDIvRGVza3RvcC/wn5SlZXZlcnl0aGluZy9NYWluX1dlYl9FeWVUcmFja2luZy9tYWluLXdlYi9mcm9udGVuZC9wYWdlcy9wcm9jZXNzX3NldC9wcm9jZXNzQXBpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHBhZ2VzL3Byb2Nlc3Nfc2V0L3Byb2Nlc3NBcGkuanMgLSBBUEkgZnVuY3Rpb25zIGZvciBwcm9jZXNzX3NldFxuXG4vLyBDaGVjayBpZiB0aGUgYmFja2VuZCBpcyBjb25uZWN0ZWRcbmV4cG9ydCBjb25zdCBjaGVja0JhY2tlbmRDb25uZWN0aW9uID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2NoZWNrLWJhY2tlbmQtY29ubmVjdGlvbicpO1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGNvbm5lY3RlZDogZGF0YS5jb25uZWN0ZWQgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hlY2tpbmcgYmFja2VuZCBjb25uZWN0aW9uOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9O1xuICAgIH1cbiAgfTtcbiAgXG4gIC8vIEdldCBsaXN0IG9mIGZpbGVzIGZyb20gYm90aCBjYXB0dXJlIGFuZCBlbmhhbmNlIGZvbGRlcnNcbiAgZXhwb3J0IGNvbnN0IGdldEZpbGVzTGlzdCA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gTWFrZSBzdXJlIHdlJ3JlIHVzaW5nIHRoZSBjb3JyZWN0IEFQSSBlbmRwb2ludFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS9maWxlLWFwaT9vcGVyYXRpb249bGlzdCcpO1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIGZpbGVzIGxpc3Q6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIH07XG4gICAgfVxuICB9O1xuICBcbiAgLy8gQ2hlY2sgZmlsZSBjb21wbGV0ZW5lc3MgKGlmIHdlYmNhbSwgc2NyZWVuLCBhbmQgcGFyYW1ldGVyIGZpbGVzIGV4aXN0IGZvciBlYWNoIHNldClcbiAgZXhwb3J0IGNvbnN0IGNoZWNrRmlsZXNDb21wbGV0ZW5lc3MgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvZmlsZS1hcGk/b3BlcmF0aW9uPWNoZWNrLWNvbXBsZXRlbmVzcycpO1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjaGVja2luZyBmaWxlcyBjb21wbGV0ZW5lc3M6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIH07XG4gICAgfVxuICB9O1xuICBcbiAgLy8gUHJldmlldyBhIHNwZWNpZmljIGZpbGVcbiAgZXhwb3J0IGNvbnN0IHByZXZpZXdGaWxlID0gYXN5bmMgKGZpbGVuYW1lKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvcHJldmlldy1hcGk/ZmlsZW5hbWU9JHtlbmNvZGVVUklDb21wb25lbnQoZmlsZW5hbWUpfWApO1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwcmV2aWV3aW5nIGZpbGU6JywgZXJyb3IpO1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIH07XG4gICAgfVxuICB9O1xuICBcbiAgLy8gUHJvY2VzcyBmaWxlcyAtIHRyaWdnZXIgdGhlIHByb2Nlc3NpbmdcbiAgZXhwb3J0IGNvbnN0IHByb2Nlc3NGaWxlcyA9IGFzeW5jIChzZXROdW1iZXJzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvcHJvY2Vzcy1zdGF0dXMtYXBpJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgc2V0TnVtYmVycyB9KSxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwcm9jZXNzaW5nIGZpbGVzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9O1xuICAgIH1cbiAgfTtcbiAgXG4gIC8vIENvbXBhcmUgZmlsZXMgYmV0d2VlbiBjYXB0dXJlIGFuZCBlbmhhbmNlIGZvbGRlcnNcbiAgZXhwb3J0IGNvbnN0IGNvbXBhcmVGaWxlQ291bnRzID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2ZpbGUtYXBpP29wZXJhdGlvbj1jb21wYXJlJyk7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNvbXBhcmluZyBmaWxlIGNvdW50czonLCBlcnJvcik7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfTtcbiAgICB9XG4gIH07XG4gIFxuICAvLyBDaGVjayBpZiBwcm9jZXNzaW5nIGlzIGN1cnJlbnRseSBydW5uaW5nXG4gIGV4cG9ydCBjb25zdCBjaGVja1Byb2Nlc3NpbmdTdGF0dXMgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvcHJvY2Vzcy1zdGF0dXMtYXBpJyk7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNoZWNraW5nIHByb2Nlc3Npbmcgc3RhdHVzOicsIGVycm9yKTtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9O1xuICAgIH1cbiAgfTsiXSwibmFtZXMiOlsiY2hlY2tCYWNrZW5kQ29ubmVjdGlvbiIsInJlc3BvbnNlIiwiZmV0Y2giLCJkYXRhIiwianNvbiIsInN1Y2Nlc3MiLCJjb25uZWN0ZWQiLCJlcnJvciIsImNvbnNvbGUiLCJtZXNzYWdlIiwiZ2V0RmlsZXNMaXN0IiwiY2hlY2tGaWxlc0NvbXBsZXRlbmVzcyIsInByZXZpZXdGaWxlIiwiZmlsZW5hbWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJwcm9jZXNzRmlsZXMiLCJzZXROdW1iZXJzIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiY29tcGFyZUZpbGVDb3VudHMiLCJjaGVja1Byb2Nlc3NpbmdTdGF0dXMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/process_set/processApi.js\n"));

/***/ })

});
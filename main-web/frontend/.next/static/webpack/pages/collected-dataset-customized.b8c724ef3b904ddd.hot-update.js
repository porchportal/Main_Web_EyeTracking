"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/collected-dataset-customized",{

/***/ "(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/adminSettings.js":
/*!****************************************************************************!*\
  !*** ./pages/collected-dataset-customized/components-gui/adminSettings.js ***!
  \****************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AdminSettings),\n/* harmony export */   useAdminSettings: () => (/* binding */ useAdminSettings)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(pages-dir-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nvar _s = $RefreshSig$();\n\nconst useAdminSettings = (ref)=>{\n    _s();\n    const [settings, setSettings] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const [currentUserId, setCurrentUserId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isTopBarUpdated, setIsTopBarUpdated] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const initialized = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const pollingInterval = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // Initialize polling for settings updates\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            const fetchSettings = {\n                \"useAdminSettings.useEffect.fetchSettings\": async ()=>{\n                    if (!currentUserId) return;\n                    try {\n                        console.log('Polling settings for user:', currentUserId);\n                        const response = await fetch(\"/api/data-center/settings/\".concat(currentUserId), {\n                            headers: {\n                                'Accept': 'application/json',\n                                'Content-Type': 'application/json',\n                                'X-API-Key': process.env.NEXT_PUBLIC_API_KEY || 'A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV'\n                            }\n                        });\n                        if (!response.ok) {\n                            const errorData = await response.json();\n                            throw new Error(errorData.detail || 'Failed to fetch settings');\n                        }\n                        const newSettings = await response.json();\n                        console.log('Fetched settings for user:', currentUserId, newSettings);\n                        // Only update if settings have changed\n                        const currentUserSettings = settings[currentUserId];\n                        if (JSON.stringify(currentUserSettings) !== JSON.stringify(newSettings)) {\n                            setSettings({\n                                \"useAdminSettings.useEffect.fetchSettings\": (prev)=>({\n                                        ...prev,\n                                        [currentUserId]: {\n                                            ...newSettings,\n                                            times: newSettings.times,\n                                            delay: newSettings.delay // Preserve the exact delay value\n                                        }\n                                    })\n                            }[\"useAdminSettings.useEffect.fetchSettings\"]);\n                            // Update topBar through ref\n                            if (ref && ref.current) {\n                                if (ref.current.setCaptureSettings) {\n                                    ref.current.setCaptureSettings(newSettings);\n                                    setIsTopBarUpdated(true);\n                                }\n                            }\n                        }\n                        setError(null);\n                    } catch (error) {\n                        console.error('Error fetching settings:', error);\n                        setError(error.message);\n                    }\n                }\n            }[\"useAdminSettings.useEffect.fetchSettings\"];\n            // Initial fetch\n            fetchSettings();\n            // Set up polling interval\n            pollingInterval.current = setInterval(fetchSettings, 3000);\n            return ({\n                \"useAdminSettings.useEffect\": ()=>{\n                    if (pollingInterval.current) {\n                        clearInterval(pollingInterval.current);\n                    }\n                }\n            })[\"useAdminSettings.useEffect\"];\n        }\n    }[\"useAdminSettings.useEffect\"], [\n        currentUserId,\n        ref,\n        settings\n    ]);\n    // Effect to handle index.js update after topBar is updated\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            if (isTopBarUpdated) {\n                // Dispatch event to update index.js\n                const event = new CustomEvent('settingsUpdated', {\n                    detail: {\n                        type: 'settings',\n                        userId: currentUserId,\n                        settings: settings[currentUserId]\n                    }\n                });\n                window.dispatchEvent(event);\n                setIsTopBarUpdated(false);\n            }\n        }\n    }[\"useAdminSettings.useEffect\"], [\n        isTopBarUpdated,\n        currentUserId,\n        settings\n    ]);\n    // Load settings from localStorage on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            try {\n                const savedSettings = localStorage.getItem('adminSettings');\n                if (savedSettings) {\n                    const parsedSettings = JSON.parse(savedSettings);\n                    setSettings(parsedSettings);\n                }\n            } catch (error) {\n                console.error('Error loading settings from localStorage:', error);\n            }\n        }\n    }[\"useAdminSettings.useEffect\"], []);\n    // Save settings to localStorage when they change\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            if (initialized.current) {\n                try {\n                    localStorage.setItem('adminSettings', JSON.stringify(settings));\n                } catch (error) {\n                    console.error('Error saving settings to localStorage:', error);\n                }\n            }\n        }\n    }[\"useAdminSettings.useEffect\"], [\n        settings\n    ]);\n    // Listen for user ID changes\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            const handleUserIdChange = {\n                \"useAdminSettings.useEffect.handleUserIdChange\": (event)=>{\n                    if (event.detail && event.detail.userId) {\n                        setCurrentUserId(event.detail.userId);\n                        // Trigger immediate settings fetch for new user\n                        const fetchSettings = {\n                            \"useAdminSettings.useEffect.handleUserIdChange.fetchSettings\": async ()=>{\n                                try {\n                                    const response = await fetch(\"/api/data-center/settings/\".concat(event.detail.userId), {\n                                        headers: {\n                                            'Accept': 'application/json',\n                                            'Content-Type': 'application/json',\n                                            'X-API-Key': process.env.NEXT_PUBLIC_API_KEY || 'A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV'\n                                        }\n                                    });\n                                    if (!response.ok) throw new Error('Failed to fetch settings');\n                                    const newSettings = await response.json();\n                                    console.log('Fetched settings for new user:', newSettings);\n                                    setSettings({\n                                        \"useAdminSettings.useEffect.handleUserIdChange.fetchSettings\": (prev)=>({\n                                                ...prev,\n                                                [event.detail.userId]: newSettings\n                                            })\n                                    }[\"useAdminSettings.useEffect.handleUserIdChange.fetchSettings\"]);\n                                    if (ref && ref.current && ref.current.setCaptureSettings) {\n                                        ref.current.setCaptureSettings(newSettings);\n                                        setIsTopBarUpdated(true);\n                                    }\n                                } catch (error) {\n                                    console.error('Error fetching settings for new user:', error);\n                                }\n                            }\n                        }[\"useAdminSettings.useEffect.handleUserIdChange.fetchSettings\"];\n                        fetchSettings();\n                    }\n                }\n            }[\"useAdminSettings.useEffect.handleUserIdChange\"];\n            window.addEventListener('userIdChange', handleUserIdChange);\n            return ({\n                \"useAdminSettings.useEffect\": ()=>{\n                    window.removeEventListener('userIdChange', handleUserIdChange);\n                }\n            })[\"useAdminSettings.useEffect\"];\n        }\n    }[\"useAdminSettings.useEffect\"], [\n        ref\n    ]);\n    // Listen for settings updates from admin page\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            const handleSettingsUpdate = {\n                \"useAdminSettings.useEffect.handleSettingsUpdate\": async (event)=>{\n                    if (event.detail && event.detail.type === 'captureSettings') {\n                        const { userId, times, delay } = event.detail;\n                        if (times !== undefined || delay !== undefined) {\n                            // Get current settings for this user\n                            const currentSettings = settings[userId] || {};\n                            // Create new settings by preserving current values and only updating what's provided\n                            const newSettings = {\n                                ...currentSettings,\n                                times: times !== undefined ? times : currentSettings.times,\n                                delay: delay !== undefined ? delay : currentSettings.delay,\n                                // Remove default values to prevent overriding user input\n                                image_path: currentSettings.image_path,\n                                updateImage: currentSettings.updateImage,\n                                set_timeRandomImage: currentSettings.set_timeRandomImage,\n                                every_set: currentSettings.every_set,\n                                zoom_percentage: currentSettings.zoom_percentage,\n                                position_zoom: currentSettings.position_zoom,\n                                state_isProcessOn: currentSettings.state_isProcessOn,\n                                currentlyPage: currentSettings.currentlyPage,\n                                freeState: currentSettings.freeState\n                            };\n                            console.log('Updating settings with:', newSettings);\n                            setSettings({\n                                \"useAdminSettings.useEffect.handleSettingsUpdate\": (prev)=>({\n                                        ...prev,\n                                        [userId]: newSettings\n                                    })\n                            }[\"useAdminSettings.useEffect.handleSettingsUpdate\"]);\n                            // First update topBar through ref\n                            if (ref && ref.current) {\n                                if (ref.current.setCaptureSettings) {\n                                    ref.current.setCaptureSettings(newSettings);\n                                    setIsTopBarUpdated(true);\n                                }\n                            }\n                            // Save to backend using REST API\n                            try {\n                                const response = await fetch(\"/api/data-center/settings/\".concat(userId), {\n                                    method: 'POST',\n                                    headers: {\n                                        'Content-Type': 'application/json',\n                                        'X-API-Key': process.env.NEXT_PUBLIC_API_KEY || 'A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV'\n                                    },\n                                    body: JSON.stringify(newSettings)\n                                });\n                                if (!response.ok) {\n                                    const errorData = await response.json();\n                                    throw new Error(errorData.detail || 'Failed to save settings to backend');\n                                }\n                                console.log('Settings saved to backend:', newSettings);\n                                setError(null);\n                            } catch (error) {\n                                console.error('Error saving settings to backend:', error);\n                                setError(error.message);\n                            }\n                        }\n                    }\n                }\n            }[\"useAdminSettings.useEffect.handleSettingsUpdate\"];\n            window.addEventListener('captureSettingsUpdate', handleSettingsUpdate);\n            return ({\n                \"useAdminSettings.useEffect\": ()=>{\n                    window.removeEventListener('captureSettingsUpdate', handleSettingsUpdate);\n                }\n            })[\"useAdminSettings.useEffect\"];\n        }\n    }[\"useAdminSettings.useEffect\"], [\n        settings,\n        ref\n    ]);\n    const updateSettings = async (newSettings, userId)=>{\n        var _settings_userId, _settings_userId1;\n        if (!userId) {\n            console.error('No user ID provided for settings update');\n            return;\n        }\n        // Create a clean settings object for this user\n        const updatedSettings = {\n            ...settings[userId],\n            ...newSettings,\n            // Ensure times and delay are preserved exactly as provided\n            times: newSettings.times !== undefined ? newSettings.times : (_settings_userId = settings[userId]) === null || _settings_userId === void 0 ? void 0 : _settings_userId.times,\n            delay: newSettings.delay !== undefined ? newSettings.delay : (_settings_userId1 = settings[userId]) === null || _settings_userId1 === void 0 ? void 0 : _settings_userId1.delay\n        };\n        console.log(\"Updating settings for user \".concat(userId, \":\"), updatedSettings);\n        // Update local state\n        setSettings((prev)=>({\n                ...prev,\n                [userId]: updatedSettings\n            }));\n        // Save to backend using REST API\n        try {\n            const response = await fetch(\"/api/data-center/settings/\".concat(userId), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-API-Key': process.env.NEXT_PUBLIC_API_KEY || 'A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV'\n                },\n                body: JSON.stringify(updatedSettings)\n            });\n            if (!response.ok) {\n                throw new Error('Failed to save settings');\n            }\n            const savedSettings = await response.json();\n            console.log('Settings saved successfully:', savedSettings);\n            // Update local state with the saved settings\n            setSettings((prev)=>({\n                    ...prev,\n                    [userId]: savedSettings\n                }));\n        } catch (error) {\n            console.error('Error saving settings:', error);\n        }\n    };\n    return {\n        settings,\n        updateSettings,\n        error\n    };\n};\n_s(useAdminSettings, \"wyRehNK8BbZecFVC4rDbi09GWoI=\");\n// Add default export component\nfunction AdminSettings() {\n    return null; // This is a utility file, so we don't need to render anything\n}\n_c = AdminSettings;\nvar _c;\n$RefreshReg$(_c, \"AdminSettings\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/adminSettings.js\n"));

/***/ })

});
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/process_set",{

/***/ "(pages-dir-browser)/./pages/process_set/processApi.js":
/*!*****************************************!*\
  !*** ./pages/process_set/processApi.js ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkBackendConnection: () => (/* binding */ checkBackendConnection),\n/* harmony export */   checkFilesCompleteness: () => (/* binding */ checkFilesCompleteness),\n/* harmony export */   checkProcessingStatus: () => (/* binding */ checkProcessingStatus),\n/* harmony export */   compareFileCounts: () => (/* binding */ compareFileCounts),\n/* harmony export */   getFilesList: () => (/* binding */ getFilesList),\n/* harmony export */   previewFile: () => (/* binding */ previewFile),\n/* harmony export */   processFiles: () => (/* binding */ processFiles)\n/* harmony export */ });\n// pages/process_set/processApi.js - API functions for process_set\n// Check if the backend is connected\nconst checkBackendConnection = async ()=>{\n    try {\n        const response = await fetch('/api/check-backend-connection');\n        const data = await response.json();\n        return {\n            success: true,\n            connected: data.connected\n        };\n    } catch (error) {\n        console.error('Error checking backend connection:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Get list of files from both capture and enhance folders\nconst getFilesList = async ()=>{\n    try {\n        const response = await fetch('/api/file-api?operation=list');\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error getting files list:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Check file completeness (if webcam, screen, and parameter files exist for each set)\nconst checkFilesCompleteness = async ()=>{\n    try {\n        const response = await fetch('/api/file-api?operation=check-completeness');\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error checking files completeness:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Preview a specific file\nconst previewFile = async (filename)=>{\n    try {\n        const response = await fetch(\"/api/preview-api?filename=\".concat(encodeURIComponent(filename)));\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error previewing file:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Process files - trigger the processing to enhance files\nconst processFiles = async (setNumbers)=>{\n    try {\n        const response = await fetch('/api/process-status-api', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                setNumbers\n            })\n        });\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error processing files:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Compare files between capture and enhance folders\nconst compareFileCounts = async ()=>{\n    try {\n        const response = await fetch('/api/file-api?operation=compare');\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error comparing file counts:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Check if processing is currently running\nconst checkProcessingStatus = async ()=>{\n    try {\n        const response = await fetch('/api/process-status-api');\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('Error checking processing status:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3BhZ2VzL3Byb2Nlc3Nfc2V0L3Byb2Nlc3NBcGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLGtFQUFrRTtBQUVsRSxvQ0FBb0M7QUFDN0IsTUFBTUEseUJBQXlCO0lBQ3BDLElBQUk7UUFDRixNQUFNQyxXQUFXLE1BQU1DLE1BQU07UUFDN0IsTUFBTUMsT0FBTyxNQUFNRixTQUFTRyxJQUFJO1FBQ2hDLE9BQU87WUFBRUMsU0FBUztZQUFNQyxXQUFXSCxLQUFLRyxTQUFTO1FBQUM7SUFDcEQsRUFBRSxPQUFPQyxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxzQ0FBc0NBO1FBQ3BELE9BQU87WUFBRUYsU0FBUztZQUFPRSxPQUFPQSxNQUFNRSxPQUFPO1FBQUM7SUFDaEQ7QUFDRixFQUFFO0FBRUYsMERBQTBEO0FBQ25ELE1BQU1DLGVBQWU7SUFDMUIsSUFBSTtRQUNGLE1BQU1ULFdBQVcsTUFBTUMsTUFBTTtRQUM3QixNQUFNQyxPQUFPLE1BQU1GLFNBQVNHLElBQUk7UUFDaEMsT0FBT0Q7SUFDVCxFQUFFLE9BQU9JLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLDZCQUE2QkE7UUFDM0MsT0FBTztZQUFFRixTQUFTO1lBQU9FLE9BQU9BLE1BQU1FLE9BQU87UUFBQztJQUNoRDtBQUNGLEVBQUU7QUFFRixzRkFBc0Y7QUFDL0UsTUFBTUUseUJBQXlCO0lBQ3BDLElBQUk7UUFDRixNQUFNVixXQUFXLE1BQU1DLE1BQU07UUFDN0IsTUFBTUMsT0FBTyxNQUFNRixTQUFTRyxJQUFJO1FBQ2hDLE9BQU9EO0lBQ1QsRUFBRSxPQUFPSSxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxzQ0FBc0NBO1FBQ3BELE9BQU87WUFBRUYsU0FBUztZQUFPRSxPQUFPQSxNQUFNRSxPQUFPO1FBQUM7SUFDaEQ7QUFDRixFQUFFO0FBRUYsMEJBQTBCO0FBQ25CLE1BQU1HLGNBQWMsT0FBT0M7SUFDaEMsSUFBSTtRQUNGLE1BQU1aLFdBQVcsTUFBTUMsTUFBTSw2QkFBMEQsT0FBN0JZLG1CQUFtQkQ7UUFDN0UsTUFBTVYsT0FBTyxNQUFNRixTQUFTRyxJQUFJO1FBQ2hDLE9BQU9EO0lBQ1QsRUFBRSxPQUFPSSxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQywwQkFBMEJBO1FBQ3hDLE9BQU87WUFBRUYsU0FBUztZQUFPRSxPQUFPQSxNQUFNRSxPQUFPO1FBQUM7SUFDaEQ7QUFDRixFQUFFO0FBRUYsMERBQTBEO0FBQ25ELE1BQU1NLGVBQWUsT0FBT0M7SUFDakMsSUFBSTtRQUNGLE1BQU1mLFdBQVcsTUFBTUMsTUFBTSwyQkFBMkI7WUFDdERlLFFBQVE7WUFDUkMsU0FBUztnQkFDUCxnQkFBZ0I7WUFDbEI7WUFDQUMsTUFBTUMsS0FBS0MsU0FBUyxDQUFDO2dCQUFFTDtZQUFXO1FBQ3BDO1FBQ0EsTUFBTWIsT0FBTyxNQUFNRixTQUFTRyxJQUFJO1FBQ2hDLE9BQU9EO0lBQ1QsRUFBRSxPQUFPSSxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQywyQkFBMkJBO1FBQ3pDLE9BQU87WUFBRUYsU0FBUztZQUFPRSxPQUFPQSxNQUFNRSxPQUFPO1FBQUM7SUFDaEQ7QUFDRixFQUFFO0FBRUYsb0RBQW9EO0FBQzdDLE1BQU1hLG9CQUFvQjtJQUMvQixJQUFJO1FBQ0YsTUFBTXJCLFdBQVcsTUFBTUMsTUFBTTtRQUM3QixNQUFNQyxPQUFPLE1BQU1GLFNBQVNHLElBQUk7UUFDaEMsT0FBT0Q7SUFDVCxFQUFFLE9BQU9JLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLGdDQUFnQ0E7UUFDOUMsT0FBTztZQUFFRixTQUFTO1lBQU9FLE9BQU9BLE1BQU1FLE9BQU87UUFBQztJQUNoRDtBQUNGLEVBQUU7QUFFRiwyQ0FBMkM7QUFDcEMsTUFBTWMsd0JBQXdCO0lBQ25DLElBQUk7UUFDRixNQUFNdEIsV0FBVyxNQUFNQyxNQUFNO1FBQzdCLE1BQU1DLE9BQU8sTUFBTUYsU0FBU0csSUFBSTtRQUNoQyxPQUFPRDtJQUNULEVBQUUsT0FBT0ksT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMscUNBQXFDQTtRQUNuRCxPQUFPO1lBQUVGLFNBQVM7WUFBT0UsT0FBT0EsTUFBTUUsT0FBTztRQUFDO0lBQ2hEO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsiL1VzZXJzL3BvcmNocG9ydGFsMi9EZXNrdG9wL/CflKVldmVyeXRoaW5nL01haW5fV2ViX0V5ZVRyYWNraW5nL21haW4td2ViL2Zyb250ZW5kL3BhZ2VzL3Byb2Nlc3Nfc2V0L3Byb2Nlc3NBcGkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcGFnZXMvcHJvY2Vzc19zZXQvcHJvY2Vzc0FwaS5qcyAtIEFQSSBmdW5jdGlvbnMgZm9yIHByb2Nlc3Nfc2V0XG5cbi8vIENoZWNrIGlmIHRoZSBiYWNrZW5kIGlzIGNvbm5lY3RlZFxuZXhwb3J0IGNvbnN0IGNoZWNrQmFja2VuZENvbm5lY3Rpb24gPSBhc3luYyAoKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS9jaGVjay1iYWNrZW5kLWNvbm5lY3Rpb24nKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIGNvbm5lY3RlZDogZGF0YS5jb25uZWN0ZWQgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjaGVja2luZyBiYWNrZW5kIGNvbm5lY3Rpb246JywgZXJyb3IpO1xuICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9O1xuICB9XG59O1xuXG4vLyBHZXQgbGlzdCBvZiBmaWxlcyBmcm9tIGJvdGggY2FwdHVyZSBhbmQgZW5oYW5jZSBmb2xkZXJzXG5leHBvcnQgY29uc3QgZ2V0RmlsZXNMaXN0ID0gYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvZmlsZS1hcGk/b3BlcmF0aW9uPWxpc3QnKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIHJldHVybiBkYXRhO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgZmlsZXMgbGlzdDonLCBlcnJvcik7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIH07XG4gIH1cbn07XG5cbi8vIENoZWNrIGZpbGUgY29tcGxldGVuZXNzIChpZiB3ZWJjYW0sIHNjcmVlbiwgYW5kIHBhcmFtZXRlciBmaWxlcyBleGlzdCBmb3IgZWFjaCBzZXQpXG5leHBvcnQgY29uc3QgY2hlY2tGaWxlc0NvbXBsZXRlbmVzcyA9IGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2ZpbGUtYXBpP29wZXJhdGlvbj1jaGVjay1jb21wbGV0ZW5lc3MnKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIHJldHVybiBkYXRhO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNoZWNraW5nIGZpbGVzIGNvbXBsZXRlbmVzczonLCBlcnJvcik7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIH07XG4gIH1cbn07XG5cbi8vIFByZXZpZXcgYSBzcGVjaWZpYyBmaWxlXG5leHBvcnQgY29uc3QgcHJldmlld0ZpbGUgPSBhc3luYyAoZmlsZW5hbWUpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYXBpL3ByZXZpZXctYXBpP2ZpbGVuYW1lPSR7ZW5jb2RlVVJJQ29tcG9uZW50KGZpbGVuYW1lKX1gKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIHJldHVybiBkYXRhO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHByZXZpZXdpbmcgZmlsZTonLCBlcnJvcik7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIH07XG4gIH1cbn07XG5cbi8vIFByb2Nlc3MgZmlsZXMgLSB0cmlnZ2VyIHRoZSBwcm9jZXNzaW5nIHRvIGVuaGFuY2UgZmlsZXNcbmV4cG9ydCBjb25zdCBwcm9jZXNzRmlsZXMgPSBhc3luYyAoc2V0TnVtYmVycykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvcHJvY2Vzcy1zdGF0dXMtYXBpJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBzZXROdW1iZXJzIH0pLFxuICAgIH0pO1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJvY2Vzc2luZyBmaWxlczonLCBlcnJvcik7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIH07XG4gIH1cbn07XG5cbi8vIENvbXBhcmUgZmlsZXMgYmV0d2VlbiBjYXB0dXJlIGFuZCBlbmhhbmNlIGZvbGRlcnNcbmV4cG9ydCBjb25zdCBjb21wYXJlRmlsZUNvdW50cyA9IGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2ZpbGUtYXBpP29wZXJhdGlvbj1jb21wYXJlJyk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjb21wYXJpbmcgZmlsZSBjb3VudHM6JywgZXJyb3IpO1xuICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9O1xuICB9XG59O1xuXG4vLyBDaGVjayBpZiBwcm9jZXNzaW5nIGlzIGN1cnJlbnRseSBydW5uaW5nXG5leHBvcnQgY29uc3QgY2hlY2tQcm9jZXNzaW5nU3RhdHVzID0gYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvcHJvY2Vzcy1zdGF0dXMtYXBpJyk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjaGVja2luZyBwcm9jZXNzaW5nIHN0YXR1czonLCBlcnJvcik7XG4gICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIH07XG4gIH1cbn07Il0sIm5hbWVzIjpbImNoZWNrQmFja2VuZENvbm5lY3Rpb24iLCJyZXNwb25zZSIsImZldGNoIiwiZGF0YSIsImpzb24iLCJzdWNjZXNzIiwiY29ubmVjdGVkIiwiZXJyb3IiLCJjb25zb2xlIiwibWVzc2FnZSIsImdldEZpbGVzTGlzdCIsImNoZWNrRmlsZXNDb21wbGV0ZW5lc3MiLCJwcmV2aWV3RmlsZSIsImZpbGVuYW1lIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicHJvY2Vzc0ZpbGVzIiwic2V0TnVtYmVycyIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbXBhcmVGaWxlQ291bnRzIiwiY2hlY2tQcm9jZXNzaW5nU3RhdHVzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/process_set/processApi.js\n"));

/***/ })

});
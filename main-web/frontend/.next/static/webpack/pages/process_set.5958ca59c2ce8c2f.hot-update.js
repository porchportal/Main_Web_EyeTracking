"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/process_set",{

/***/ "(pages-dir-browser)/./pages/process_set/processApi.js":
/*!*****************************************!*\
  !*** ./pages/process_set/processApi.js ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkBackendConnection: () => (/* binding */ checkBackendConnection),\n/* harmony export */   checkFilesCompleteness: () => (/* binding */ checkFilesCompleteness),\n/* harmony export */   checkFilesNeedProcessing: () => (/* binding */ checkFilesNeedProcessing),\n/* harmony export */   checkProcessingStatus: () => (/* binding */ checkProcessingStatus),\n/* harmony export */   compareFileCounts: () => (/* binding */ compareFileCounts),\n/* harmony export */   \"default\": () => (/* binding */ ProcessApiPage),\n/* harmony export */   getFilesList: () => (/* binding */ getFilesList),\n/* harmony export */   previewFile: () => (/* binding */ previewFile),\n/* harmony export */   processFiles: () => (/* binding */ processFiles)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(pages-dir-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// pages/process_set/processApi.js - API functions for process_set with improved connection handling\n// Utility function for making API requests with retry and better error handling\nconst fetchWithRetry = async function(url) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, retries = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 2;\n    let lastError;\n    // Get API key from environment variable\n    const apiKey = \"A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV\" || 0;\n    // Get backend URL from environment variable\n    const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || '';\n    // Ensure URL is absolute\n    const absoluteUrl = url.startsWith('http') ? url : \"\".concat(backendUrl).concat(url);\n    for(let i = 0; i <= retries; i++){\n        try {\n            console.log(\"Fetching \".concat(absoluteUrl).concat(i > 0 ? \" (retry \".concat(i, \"/\").concat(retries, \")\") : ''));\n            const controller = new AbortController();\n            const timeout = setTimeout(()=>controller.abort(), 8000); // 8 second timeout\n            const response = await fetch(absoluteUrl, {\n                ...options,\n                signal: controller.signal,\n                headers: {\n                    ...options.headers,\n                    'Content-Type': 'application/json',\n                    'X-API-Key': apiKey\n                }\n            });\n            clearTimeout(timeout);\n            // Check for response errors\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"API error (\".concat(response.status, \"):\"), errorText);\n                // Special handling for 401 (Unauthorized)\n                if (response.status === 401) {\n                    throw new Error('Invalid API key. Please check your configuration.');\n                }\n                throw new Error(\"API returned \".concat(response.status, \": \").concat(errorText || response.statusText));\n            }\n            // Try to parse JSON response\n            try {\n                const data = await response.json();\n                return data;\n            } catch (parseError) {\n                console.error('JSON parse error:', parseError);\n                throw new Error(\"Failed to parse response: \".concat(parseError.message));\n            }\n        } catch (error) {\n            console.error(\"Fetch error (attempt \".concat(i + 1, \"/\").concat(retries + 1, \"):\"), error);\n            lastError = error;\n            // If this was an abort error (timeout), log it specifically\n            if (error.name === 'AbortError') {\n                console.error('Request timed out');\n            }\n            // If we have retries left, wait before trying again\n            if (i < retries) {\n                const delay = 1000 * Math.pow(2, i); // Exponential backoff: 1s, 2s, 4s, etc.\n                // console.log(`Waiting ${delay}ms before retry...`);\n                await new Promise((resolve)=>setTimeout(resolve, delay));\n            }\n        }\n    }\n    // If we got here, all retries failed\n    throw lastError;\n};\n// API configuration\nconst API_BASE_URL = \"http://backend:8000\" || 0;\nconst API_KEY = \"A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV\";\n// Check if the backend is connected\nconst checkBackendConnection = async ()=>{\n    try {\n        // console.log('Checking backend connection...');\n        const response = await fetchWithRetry('/api/check-backend-connection');\n        // console.log('Backend connection response:', response);\n        return {\n            success: true,\n            connected: response.connected || false,\n            status: response.status || 'unknown'\n        };\n    } catch (error) {\n        console.error('Backend connection check failed:', error);\n        return {\n            success: false,\n            connected: false,\n            error: error.message,\n            status: 'error'\n        };\n    }\n};\n// Get list of files from both capture and enhance folders\nconst getFilesList = async ()=>{\n    try {\n        const response = await fetchWithRetry('/api/for-process-folder/file-api?operation=list');\n        if (!response.success) {\n            throw new Error(response.message || 'Failed to get files list');\n        }\n        // Organize files into capture and enhance arrays\n        const organizedFiles = {\n            capture: [],\n            enhance: []\n        };\n        if (response.files && response.files.capture && response.files.enhance) {\n            organizedFiles.capture = response.files.capture.map((filename)=>({\n                    filename,\n                    path: \"/captures/eye_tracking_captures/\".concat(filename),\n                    file_type: filename.split('.').pop(),\n                    size: 0 // Size will be updated when file is accessed\n                }));\n            organizedFiles.enhance = response.files.enhance.map((filename)=>({\n                    filename,\n                    path: \"/captures/enhance/\".concat(filename),\n                    file_type: filename.split('.').pop(),\n                    size: 0 // Size will be updated when file is accessed\n                }));\n        }\n        return {\n            success: true,\n            files: organizedFiles,\n            message: response.message || 'Files retrieved successfully'\n        };\n    } catch (error) {\n        console.error('Error getting files list:', error);\n        return {\n            success: false,\n            error: error.message,\n            message: 'Failed to get files list',\n            files: {\n                capture: [],\n                enhance: []\n            }\n        };\n    }\n};\n// Check file completeness (if webcam, screen, and parameter files exist for each set)\nconst checkFilesCompleteness = async ()=>{\n    try {\n        const response = await fetch('/api/for-process-folder/file-api?operation=check-completeness');\n        const data = await response.json();\n        if (!data.success) {\n            throw new Error(data.error || 'Failed to check files');\n        }\n        return {\n            success: true,\n            isComplete: data.isComplete,\n            missingFiles: data.missingFiles,\n            totalFiles: data.totalSets,\n            incompleteSets: data.incompleteSets || []\n        };\n    } catch (error) {\n        console.error('Error checking files completeness:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Preview a specific file\nconst previewFile = async (filename)=>{\n    try {\n        const data = await fetchWithRetry(\"/api/preview-api?filename=\".concat(encodeURIComponent(filename)));\n        if (!data.success) {\n            throw new Error(data.error || 'Failed to get preview');\n        }\n        return {\n            success: true,\n            data: data.data,\n            type: data.type\n        };\n    } catch (error) {\n        console.error('Preview API error:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Check if files need processing\nconst checkFilesNeedProcessing = async ()=>{\n    try {\n        const response = await fetchWithRetry('/api/for-process-folder/file-api?operation=compare');\n        if (!response.success) {\n            throw new Error(response.message || 'Failed to get files list');\n        }\n        const captureCount = response.captureCount || 0;\n        const enhanceCount = response.enhanceCount || 0;\n        const needsProcessing = captureCount > enhanceCount;\n        const filesToProcess = captureCount - enhanceCount;\n        return {\n            success: true,\n            needsProcessing,\n            captureCount,\n            enhanceCount,\n            filesToProcess,\n            setsNeedingProcessing: response.setsNeedingProcessing || []\n        };\n    } catch (error) {\n        console.error('Error checking files:', error);\n        return {\n            success: false,\n            error: error.message,\n            needsProcessing: false,\n            captureCount: 0,\n            enhanceCount: 0,\n            filesToProcess: 0,\n            setsNeedingProcessing: []\n        };\n    }\n};\n// Process files\nconst processFiles = async (setNumbers)=>{\n    try {\n        // console.log('Starting processing for sets:', setNumbers);\n        const response = await fetchWithRetry('/api/process-images', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                set_numbers: setNumbers\n            })\n        });\n        if (!response.success) {\n            throw new Error(response.message || 'Failed to start processing');\n        }\n        return {\n            success: true,\n            message: response.message\n        };\n    } catch (error) {\n        console.error('Error processing files:', error);\n        return {\n            success: false,\n            error: error.message,\n            message: 'Failed to process files'\n        };\n    }\n};\n// Compare files between capture and enhance folders\nconst compareFileCounts = async ()=>{\n    try {\n        const response = await fetchWithRetry('/api/file-api?operation=compare');\n        if (!response.success) {\n            throw new Error(response.message || 'Failed to compare file counts');\n        }\n        return {\n            success: true,\n            captureCount: response.captureCount,\n            enhanceCount: response.enhanceCount,\n            needsProcessing: response.needsProcessing\n        };\n    } catch (error) {\n        console.error('Error comparing file counts:', error);\n        return {\n            success: false,\n            error: error.message,\n            captureCount: 0,\n            enhanceCount: 0,\n            needsProcessing: false\n        };\n    }\n};\n// Check if processing is currently running\nconst checkProcessingStatus = async ()=>{\n    try {\n        // console.log('Requesting processing status...');\n        const response = await fetchWithRetry('/api/process-status-api', {}, 1); // Only 1 retry for status checks\n        // If fetch succeeded but response is malformed, handle it gracefully\n        if (!response || typeof response !== 'object') {\n            console.error('Invalid response format:', response);\n            return {\n                success: false,\n                error: \"Invalid response format: \".concat(typeof response),\n                isProcessing: false\n            };\n        }\n        return response;\n    } catch (error) {\n        console.error('Error checking processing status:', error);\n        return {\n            success: false,\n            error: error.message,\n            isProcessing: false\n        };\n    }\n};\n// Add default export component\nfunction ProcessApiPage() {\n    return null; // This is a utility file, so we don't need to render anything\n}\n_c = ProcessApiPage;\nvar _c;\n$RefreshReg$(_c, \"ProcessApiPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/process_set/processApi.js\n"));

/***/ })

});
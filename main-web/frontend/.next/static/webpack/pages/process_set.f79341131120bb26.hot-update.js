"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/process_set",{

/***/ "(pages-dir-browser)/./pages/process_set/processApi.js":
/*!*****************************************!*\
  !*** ./pages/process_set/processApi.js ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkBackendConnection: () => (/* binding */ checkBackendConnection),\n/* harmony export */   checkFilesCompleteness: () => (/* binding */ checkFilesCompleteness),\n/* harmony export */   checkFilesNeedProcessing: () => (/* binding */ checkFilesNeedProcessing),\n/* harmony export */   checkProcessingStatus: () => (/* binding */ checkProcessingStatus),\n/* harmony export */   compareFileCounts: () => (/* binding */ compareFileCounts),\n/* harmony export */   \"default\": () => (/* binding */ ProcessApiPage),\n/* harmony export */   getFilesList: () => (/* binding */ getFilesList),\n/* harmony export */   previewFile: () => (/* binding */ previewFile),\n/* harmony export */   processFiles: () => (/* binding */ processFiles)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(pages-dir-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n// pages/process_set/processApi.js - API functions for process_set with improved connection handling\n// Utility function for making API requests with retry and better error handling\nconst fetchWithRetry = async function(url) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, retries = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 2;\n    let lastError;\n    // Get API key from environment variable\n    const apiKey = \"A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV\" || 0;\n    // Get backend URL from environment variable\n    const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL || '';\n    // Ensure URL is absolute\n    const absoluteUrl = url.startsWith('http') ? url : \"\".concat(backendUrl).concat(url);\n    for(let i = 0; i <= retries; i++){\n        try {\n            console.log(\"Fetching \".concat(absoluteUrl).concat(i > 0 ? \" (retry \".concat(i, \"/\").concat(retries, \")\") : ''));\n            const controller = new AbortController();\n            const timeout = setTimeout(()=>controller.abort(), 8000); // 8 second timeout\n            const response = await fetch(absoluteUrl, {\n                ...options,\n                signal: controller.signal,\n                headers: {\n                    ...options.headers,\n                    'Content-Type': 'application/json',\n                    'X-API-Key': apiKey\n                }\n            });\n            clearTimeout(timeout);\n            // Check for response errors\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error(\"API error (\".concat(response.status, \"):\"), errorText);\n                // Special handling for 401 (Unauthorized)\n                if (response.status === 401) {\n                    throw new Error('Invalid API key. Please check your configuration.');\n                }\n                throw new Error(\"API returned \".concat(response.status, \": \").concat(errorText || response.statusText));\n            }\n            // Try to parse JSON response\n            try {\n                const data = await response.json();\n                return data;\n            } catch (parseError) {\n                console.error('JSON parse error:', parseError);\n                throw new Error(\"Failed to parse response: \".concat(parseError.message));\n            }\n        } catch (error) {\n            console.error(\"Fetch error (attempt \".concat(i + 1, \"/\").concat(retries + 1, \"):\"), error);\n            lastError = error;\n            // If this was an abort error (timeout), log it specifically\n            if (error.name === 'AbortError') {\n                console.error('Request timed out');\n            }\n            // If we have retries left, wait before trying again\n            if (i < retries) {\n                const delay = 1000 * Math.pow(2, i); // Exponential backoff: 1s, 2s, 4s, etc.\n                // console.log(`Waiting ${delay}ms before retry...`);\n                await new Promise((resolve)=>setTimeout(resolve, delay));\n            }\n        }\n    }\n    // If we got here, all retries failed\n    throw lastError;\n};\n// API configuration\nconst API_BASE_URL = \"http://backend:8000\" || 0;\nconst API_KEY = \"A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV\";\n// Check if the backend is connected\nconst checkBackendConnection = async ()=>{\n    try {\n        // console.log('Checking backend connection...');\n        const response = await fetchWithRetry('/api/check-backend-connection');\n        // console.log('Backend connection response:', response);\n        return {\n            success: true,\n            connected: response.connected || false,\n            status: response.status || 'unknown'\n        };\n    } catch (error) {\n        console.error('Backend connection check failed:', error);\n        return {\n            success: false,\n            connected: false,\n            error: error.message,\n            status: 'error'\n        };\n    }\n};\n// Get list of files from both capture and enhance folders\nconst getFilesList = async ()=>{\n    try {\n        const response = await fetchWithRetry('/api/for-process-folder/file-api?operation=list');\n        if (!response.success) {\n            throw new Error(response.message || 'Failed to get files list');\n        }\n        // Organize files into capture and enhance arrays\n        const organizedFiles = {\n            capture: [],\n            enhance: []\n        };\n        if (response.files && response.files.capture && response.files.enhance) {\n            organizedFiles.capture = response.files.capture.map((filename)=>({\n                    filename,\n                    path: \"/captures/eye_tracking_captures/\".concat(filename),\n                    file_type: filename.split('.').pop(),\n                    size: 0 // Size will be updated when file is accessed\n                }));\n            organizedFiles.enhance = response.files.enhance.map((filename)=>({\n                    filename,\n                    path: \"/captures/enhance/\".concat(filename),\n                    file_type: filename.split('.').pop(),\n                    size: 0 // Size will be updated when file is accessed\n                }));\n        }\n        return {\n            success: true,\n            files: organizedFiles,\n            message: response.message || 'Files retrieved successfully'\n        };\n    } catch (error) {\n        console.error('Error getting files list:', error);\n        return {\n            success: false,\n            error: error.message,\n            message: 'Failed to get files list',\n            files: {\n                capture: [],\n                enhance: []\n            }\n        };\n    }\n};\n// Check file completeness (if webcam, screen, and parameter files exist for each set)\nconst checkFilesCompleteness = async ()=>{\n    try {\n        const response = await fetch('/api/for-process-folder/file-api?operation=check-completeness');\n        const data = await response.json();\n        if (!data.success) {\n            throw new Error(data.error || 'Failed to check files');\n        }\n        return {\n            success: true,\n            isComplete: data.isComplete,\n            missingFiles: data.missingFiles,\n            totalFiles: data.totalSets,\n            incompleteSets: data.incompleteSets || []\n        };\n    } catch (error) {\n        console.error('Error checking files completeness:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Preview a specific file\nconst previewFile = async (filename)=>{\n    try {\n        // console.log('Fetching preview for file:', filename);\n        const response = await fetchWithRetry(\"/api/preview-api?filename=\".concat(encodeURIComponent(filename)));\n        // console.log('Raw preview response:', response);\n        // Check if response has the expected format\n        if (!response || typeof response !== 'object') {\n            throw new Error('Invalid response format from preview API');\n        }\n        if (!response.success) {\n            throw new Error(response.message || 'Failed to get preview');\n        }\n        return {\n            success: true,\n            data: response.data,\n            type: response.type,\n            message: response.message\n        };\n    } catch (error) {\n        console.error('Error previewing file:', error);\n        return {\n            success: false,\n            error: error.message,\n            message: 'Failed to get preview'\n        };\n    }\n};\n// Check if files need processing\nconst checkFilesNeedProcessing = async ()=>{\n    try {\n        const response = await fetchWithRetry('/api/file-api?operation=list');\n        if (!response.success) {\n            throw new Error(response.message || 'Failed to get files list');\n        }\n        // Get unique set numbers from each folder\n        const captureSets = new Set();\n        const enhanceSets = new Set();\n        if (response.files && Array.isArray(response.files)) {\n            response.files.forEach((file)=>{\n                const match = file.filename.match(/_(\\d+)\\./);\n                if (match) {\n                    const setNumber = parseInt(match[1]);\n                    if (file.path.includes('eye_tracking_captures')) {\n                        captureSets.add(setNumber);\n                    } else if (file.path.includes('enhance')) {\n                        enhanceSets.add(setNumber);\n                    }\n                }\n            });\n        }\n        const captureCount = captureSets.size;\n        const enhanceCount = enhanceSets.size;\n        const needsProcessing = captureCount > enhanceCount;\n        const filesToProcess = captureCount - enhanceCount;\n        return {\n            success: true,\n            needsProcessing,\n            captureCount,\n            enhanceCount,\n            filesToProcess\n        };\n    } catch (error) {\n        console.error('Error checking files:', error);\n        return {\n            success: false,\n            error: error.message,\n            needsProcessing: false,\n            captureCount: 0,\n            enhanceCount: 0,\n            filesToProcess: 0\n        };\n    }\n};\n// Process files\nconst processFiles = async (setNumbers)=>{\n    try {\n        // console.log('Starting processing for sets:', setNumbers);\n        const response = await fetchWithRetry('/api/process-images', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                set_numbers: setNumbers\n            })\n        });\n        if (!response.success) {\n            throw new Error(response.message || 'Failed to start processing');\n        }\n        return {\n            success: true,\n            message: response.message\n        };\n    } catch (error) {\n        console.error('Error processing files:', error);\n        return {\n            success: false,\n            error: error.message,\n            message: 'Failed to process files'\n        };\n    }\n};\n// Compare files between capture and enhance folders\nconst compareFileCounts = async ()=>{\n    try {\n        const response = await fetchWithRetry('/api/file-api?operation=compare');\n        if (!response.success) {\n            throw new Error(response.message || 'Failed to compare file counts');\n        }\n        return {\n            success: true,\n            captureCount: response.captureCount,\n            enhanceCount: response.enhanceCount,\n            needsProcessing: response.needsProcessing\n        };\n    } catch (error) {\n        console.error('Error comparing file counts:', error);\n        return {\n            success: false,\n            error: error.message,\n            captureCount: 0,\n            enhanceCount: 0,\n            needsProcessing: false\n        };\n    }\n};\n// Check if processing is currently running\nconst checkProcessingStatus = async ()=>{\n    try {\n        // console.log('Requesting processing status...');\n        const response = await fetchWithRetry('/api/process-status-api', {}, 1); // Only 1 retry for status checks\n        // If fetch succeeded but response is malformed, handle it gracefully\n        if (!response || typeof response !== 'object') {\n            console.error('Invalid response format:', response);\n            return {\n                success: false,\n                error: \"Invalid response format: \".concat(typeof response),\n                isProcessing: false\n            };\n        }\n        return response;\n    } catch (error) {\n        console.error('Error checking processing status:', error);\n        return {\n            success: false,\n            error: error.message,\n            isProcessing: false\n        };\n    }\n};\n// Add default export component\nfunction ProcessApiPage() {\n    return null; // This is a utility file, so we don't need to render anything\n}\n_c = ProcessApiPage;\nvar _c;\n$RefreshReg$(_c, \"ProcessApiPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3BhZ2VzL3Byb2Nlc3Nfc2V0L3Byb2Nlc3NBcGkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLG9HQUFvRztBQUVwRyxnRkFBZ0Y7QUFDaEYsTUFBTUEsaUJBQWlCLGVBQU9DO1FBQUtDLDJFQUFVLENBQUMsR0FBR0MsMkVBQVU7SUFDekQsSUFBSUM7SUFFSix3Q0FBd0M7SUFDeEMsTUFBTUMsU0FBU0Msc0NBQStCLElBQUksQ0FBc0M7SUFFeEYsNENBQTRDO0lBQzVDLE1BQU1HLGFBQWFILE9BQU9BLENBQUNDLEdBQUcsQ0FBQ0csdUJBQXVCLElBQUk7SUFFMUQseUJBQXlCO0lBQ3pCLE1BQU1DLGNBQWNWLElBQUlXLFVBQVUsQ0FBQyxVQUFVWCxNQUFNLEdBQWdCQSxPQUFiUSxZQUFpQixPQUFKUjtJQUVuRSxJQUFLLElBQUlZLElBQUksR0FBR0EsS0FBS1YsU0FBU1UsSUFBSztRQUNqQyxJQUFJO1lBQ0ZDLFFBQVFDLEdBQUcsQ0FBQyxZQUEwQkYsT0FBZEYsYUFBc0QsT0FBeENFLElBQUksSUFBSSxXQUFnQlYsT0FBTFUsR0FBRSxLQUFXLE9BQVJWLFNBQVEsT0FBSztZQUUzRSxNQUFNYSxhQUFhLElBQUlDO1lBQ3ZCLE1BQU1DLFVBQVVDLFdBQVcsSUFBTUgsV0FBV0ksS0FBSyxJQUFJLE9BQU8sbUJBQW1CO1lBRS9FLE1BQU1DLFdBQVcsTUFBTUMsTUFBTVgsYUFBYTtnQkFDeEMsR0FBR1QsT0FBTztnQkFDVnFCLFFBQVFQLFdBQVdPLE1BQU07Z0JBQ3pCQyxTQUFTO29CQUNQLEdBQUd0QixRQUFRc0IsT0FBTztvQkFDbEIsZ0JBQWdCO29CQUNoQixhQUFhbkI7Z0JBQ2Y7WUFDRjtZQUVBb0IsYUFBYVA7WUFFYiw0QkFBNEI7WUFDNUIsSUFBSSxDQUFDRyxTQUFTSyxFQUFFLEVBQUU7Z0JBQ2hCLE1BQU1DLFlBQVksTUFBTU4sU0FBU08sSUFBSTtnQkFDckNkLFFBQVFlLEtBQUssQ0FBQyxjQUE4QixP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b3VyY2VzQ29udGVudCI6WyIvLyBwYWdlcy9wcm9jZXNzX3NldC9wcm9jZXNzQXBpLmpzIC0gQVBJIGZ1bmN0aW9ucyBmb3IgcHJvY2Vzc19zZXQgd2l0aCBpbXByb3ZlZCBjb25uZWN0aW9uIGhhbmRsaW5nXG5cbi8vIFV0aWxpdHkgZnVuY3Rpb24gZm9yIG1ha2luZyBBUEkgcmVxdWVzdHMgd2l0aCByZXRyeSBhbmQgYmV0dGVyIGVycm9yIGhhbmRsaW5nXG5jb25zdCBmZXRjaFdpdGhSZXRyeSA9IGFzeW5jICh1cmwsIG9wdGlvbnMgPSB7fSwgcmV0cmllcyA9IDIpID0+IHtcbiAgbGV0IGxhc3RFcnJvcjtcbiAgXG4gIC8vIEdldCBBUEkga2V5IGZyb20gZW52aXJvbm1lbnQgdmFyaWFibGVcbiAgY29uc3QgYXBpS2V5ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBJX0tFWSB8fCAnQTFCMkMzRDQtRTVGNi03ODkwLUdISUotS0xNTk9QUVJTVFVWJztcbiAgXG4gIC8vIEdldCBiYWNrZW5kIFVSTCBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlXG4gIGNvbnN0IGJhY2tlbmRVcmwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19CQUNLRU5EX1VSTCB8fCAnJztcbiAgXG4gIC8vIEVuc3VyZSBVUkwgaXMgYWJzb2x1dGVcbiAgY29uc3QgYWJzb2x1dGVVcmwgPSB1cmwuc3RhcnRzV2l0aCgnaHR0cCcpID8gdXJsIDogYCR7YmFja2VuZFVybH0ke3VybH1gO1xuICBcbiAgZm9yIChsZXQgaSA9IDA7IGkgPD0gcmV0cmllczsgaSsrKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKGBGZXRjaGluZyAke2Fic29sdXRlVXJsfSR7aSA+IDAgPyBgIChyZXRyeSAke2l9LyR7cmV0cmllc30pYCA6ICcnfWApO1xuICAgICAgXG4gICAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4gY29udHJvbGxlci5hYm9ydCgpLCA4MDAwKTsgLy8gOCBzZWNvbmQgdGltZW91dFxuICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFic29sdXRlVXJsLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIHNpZ25hbDogY29udHJvbGxlci5zaWduYWwsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAuLi5vcHRpb25zLmhlYWRlcnMsXG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAnWC1BUEktS2V5JzogYXBpS2V5XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICBcbiAgICAgIC8vIENoZWNrIGZvciByZXNwb25zZSBlcnJvcnNcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGBBUEkgZXJyb3IgKCR7cmVzcG9uc2Uuc3RhdHVzfSk6YCwgZXJyb3JUZXh0KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgZm9yIDQwMSAoVW5hdXRob3JpemVkKVxuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgQVBJIGtleS4gUGxlYXNlIGNoZWNrIHlvdXIgY29uZmlndXJhdGlvbi4nKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBUEkgcmV0dXJuZWQgJHtyZXNwb25zZS5zdGF0dXN9OiAke2Vycm9yVGV4dCB8fCByZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBUcnkgdG8gcGFyc2UgSlNPTiByZXNwb25zZVxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0pTT04gcGFyc2UgZXJyb3I6JywgcGFyc2VFcnJvcik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHBhcnNlIHJlc3BvbnNlOiAke3BhcnNlRXJyb3IubWVzc2FnZX1gKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgRmV0Y2ggZXJyb3IgKGF0dGVtcHQgJHtpKzF9LyR7cmV0cmllcysxfSk6YCwgZXJyb3IpO1xuICAgICAgbGFzdEVycm9yID0gZXJyb3I7XG4gICAgICBcbiAgICAgIC8vIElmIHRoaXMgd2FzIGFuIGFib3J0IGVycm9yICh0aW1lb3V0KSwgbG9nIGl0IHNwZWNpZmljYWxseVxuICAgICAgaWYgKGVycm9yLm5hbWUgPT09ICdBYm9ydEVycm9yJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdSZXF1ZXN0IHRpbWVkIG91dCcpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBJZiB3ZSBoYXZlIHJldHJpZXMgbGVmdCwgd2FpdCBiZWZvcmUgdHJ5aW5nIGFnYWluXG4gICAgICBpZiAoaSA8IHJldHJpZXMpIHtcbiAgICAgICAgY29uc3QgZGVsYXkgPSAxMDAwICogTWF0aC5wb3coMiwgaSk7IC8vIEV4cG9uZW50aWFsIGJhY2tvZmY6IDFzLCAycywgNHMsIGV0Yy5cbiAgICAgICAgLy8gY29uc29sZS5sb2coYFdhaXRpbmcgJHtkZWxheX1tcyBiZWZvcmUgcmV0cnkuLi5gKTtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGRlbGF5KSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICAvLyBJZiB3ZSBnb3QgaGVyZSwgYWxsIHJldHJpZXMgZmFpbGVkXG4gIHRocm93IGxhc3RFcnJvcjtcbn07XG5cbi8vIEFQSSBjb25maWd1cmF0aW9uXG5jb25zdCBBUElfQkFTRV9VUkwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUElfVVJMIHx8ICdodHRwOi8vYmFja2VuZDo4MDAwJztcbmNvbnN0IEFQSV9LRVkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUElfS0VZO1xuXG4vLyBDaGVjayBpZiB0aGUgYmFja2VuZCBpcyBjb25uZWN0ZWRcbmV4cG9ydCBjb25zdCBjaGVja0JhY2tlbmRDb25uZWN0aW9uID0gYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdDaGVja2luZyBiYWNrZW5kIGNvbm5lY3Rpb24uLi4nKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoV2l0aFJldHJ5KCcvYXBpL2NoZWNrLWJhY2tlbmQtY29ubmVjdGlvbicpO1xuICAgIC8vIGNvbnNvbGUubG9nKCdCYWNrZW5kIGNvbm5lY3Rpb24gcmVzcG9uc2U6JywgcmVzcG9uc2UpO1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgY29ubmVjdGVkOiByZXNwb25zZS5jb25uZWN0ZWQgfHwgZmFsc2UsXG4gICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1cyB8fCAndW5rbm93bidcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0JhY2tlbmQgY29ubmVjdGlvbiBjaGVjayBmYWlsZWQ6JywgZXJyb3IpO1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGNvbm5lY3RlZDogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgIHN0YXR1czogJ2Vycm9yJ1xuICAgIH07XG4gIH1cbn07XG4gIFxuLy8gR2V0IGxpc3Qgb2YgZmlsZXMgZnJvbSBib3RoIGNhcHR1cmUgYW5kIGVuaGFuY2UgZm9sZGVyc1xuZXhwb3J0IGNvbnN0IGdldEZpbGVzTGlzdCA9IGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoV2l0aFJldHJ5KCcvYXBpL2Zvci1wcm9jZXNzLWZvbGRlci9maWxlLWFwaT9vcGVyYXRpb249bGlzdCcpO1xuICAgIFxuICAgIGlmICghcmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBnZXQgZmlsZXMgbGlzdCcpO1xuICAgIH1cbiAgICBcbiAgICAvLyBPcmdhbml6ZSBmaWxlcyBpbnRvIGNhcHR1cmUgYW5kIGVuaGFuY2UgYXJyYXlzXG4gICAgY29uc3Qgb3JnYW5pemVkRmlsZXMgPSB7XG4gICAgICBjYXB0dXJlOiBbXSxcbiAgICAgIGVuaGFuY2U6IFtdXG4gICAgfTtcbiAgICBcbiAgICBpZiAocmVzcG9uc2UuZmlsZXMgJiYgcmVzcG9uc2UuZmlsZXMuY2FwdHVyZSAmJiByZXNwb25zZS5maWxlcy5lbmhhbmNlKSB7XG4gICAgICBvcmdhbml6ZWRGaWxlcy5jYXB0dXJlID0gcmVzcG9uc2UuZmlsZXMuY2FwdHVyZS5tYXAoZmlsZW5hbWUgPT4gKHtcbiAgICAgICAgZmlsZW5hbWUsXG4gICAgICAgIHBhdGg6IGAvY2FwdHVyZXMvZXllX3RyYWNraW5nX2NhcHR1cmVzLyR7ZmlsZW5hbWV9YCxcbiAgICAgICAgZmlsZV90eXBlOiBmaWxlbmFtZS5zcGxpdCgnLicpLnBvcCgpLFxuICAgICAgICBzaXplOiAwIC8vIFNpemUgd2lsbCBiZSB1cGRhdGVkIHdoZW4gZmlsZSBpcyBhY2Nlc3NlZFxuICAgICAgfSkpO1xuICAgICAgXG4gICAgICBvcmdhbml6ZWRGaWxlcy5lbmhhbmNlID0gcmVzcG9uc2UuZmlsZXMuZW5oYW5jZS5tYXAoZmlsZW5hbWUgPT4gKHtcbiAgICAgICAgZmlsZW5hbWUsXG4gICAgICAgIHBhdGg6IGAvY2FwdHVyZXMvZW5oYW5jZS8ke2ZpbGVuYW1lfWAsXG4gICAgICAgIGZpbGVfdHlwZTogZmlsZW5hbWUuc3BsaXQoJy4nKS5wb3AoKSxcbiAgICAgICAgc2l6ZTogMCAvLyBTaXplIHdpbGwgYmUgdXBkYXRlZCB3aGVuIGZpbGUgaXMgYWNjZXNzZWRcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBmaWxlczogb3JnYW5pemVkRmlsZXMsXG4gICAgICBtZXNzYWdlOiByZXNwb25zZS5tZXNzYWdlIHx8ICdGaWxlcyByZXRyaWV2ZWQgc3VjY2Vzc2Z1bGx5J1xuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyBmaWxlcyBsaXN0OicsIGVycm9yKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gZ2V0IGZpbGVzIGxpc3QnLFxuICAgICAgZmlsZXM6IHsgY2FwdHVyZTogW10sIGVuaGFuY2U6IFtdIH1cbiAgICB9O1xuICB9XG59O1xuICBcbi8vIENoZWNrIGZpbGUgY29tcGxldGVuZXNzIChpZiB3ZWJjYW0sIHNjcmVlbiwgYW5kIHBhcmFtZXRlciBmaWxlcyBleGlzdCBmb3IgZWFjaCBzZXQpXG5leHBvcnQgY29uc3QgY2hlY2tGaWxlc0NvbXBsZXRlbmVzcyA9IGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2Zvci1wcm9jZXNzLWZvbGRlci9maWxlLWFwaT9vcGVyYXRpb249Y2hlY2stY29tcGxldGVuZXNzJyk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBcbiAgICBpZiAoIWRhdGEuc3VjY2Vzcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGRhdGEuZXJyb3IgfHwgJ0ZhaWxlZCB0byBjaGVjayBmaWxlcycpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgaXNDb21wbGV0ZTogZGF0YS5pc0NvbXBsZXRlLFxuICAgICAgbWlzc2luZ0ZpbGVzOiBkYXRhLm1pc3NpbmdGaWxlcyxcbiAgICAgIHRvdGFsRmlsZXM6IGRhdGEudG90YWxTZXRzLFxuICAgICAgaW5jb21wbGV0ZVNldHM6IGRhdGEuaW5jb21wbGV0ZVNldHMgfHwgW11cbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNoZWNraW5nIGZpbGVzIGNvbXBsZXRlbmVzczonLCBlcnJvcik7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2VcbiAgICB9O1xuICB9XG59O1xuICBcbi8vIFByZXZpZXcgYSBzcGVjaWZpYyBmaWxlXG5leHBvcnQgY29uc3QgcHJldmlld0ZpbGUgPSBhc3luYyAoZmlsZW5hbWUpID0+IHtcbiAgdHJ5IHtcbiAgICAvLyBjb25zb2xlLmxvZygnRmV0Y2hpbmcgcHJldmlldyBmb3IgZmlsZTonLCBmaWxlbmFtZSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaFdpdGhSZXRyeShgL2FwaS9wcmV2aWV3LWFwaT9maWxlbmFtZT0ke2VuY29kZVVSSUNvbXBvbmVudChmaWxlbmFtZSl9YCk7XG4gICAgLy8gY29uc29sZS5sb2coJ1JhdyBwcmV2aWV3IHJlc3BvbnNlOicsIHJlc3BvbnNlKTtcbiAgICBcbiAgICAvLyBDaGVjayBpZiByZXNwb25zZSBoYXMgdGhlIGV4cGVjdGVkIGZvcm1hdFxuICAgIGlmICghcmVzcG9uc2UgfHwgdHlwZW9mIHJlc3BvbnNlICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlc3BvbnNlIGZvcm1hdCBmcm9tIHByZXZpZXcgQVBJJyk7XG4gICAgfVxuICAgIFxuICAgIGlmICghcmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBnZXQgcHJldmlldycpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgIGRhdGE6IHJlc3BvbnNlLmRhdGEsXG4gICAgICB0eXBlOiByZXNwb25zZS50eXBlLFxuICAgICAgbWVzc2FnZTogcmVzcG9uc2UubWVzc2FnZVxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJldmlld2luZyBmaWxlOicsIGVycm9yKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gZ2V0IHByZXZpZXcnXG4gICAgfTtcbiAgfVxufTtcbiAgXG4vLyBDaGVjayBpZiBmaWxlcyBuZWVkIHByb2Nlc3NpbmdcbmV4cG9ydCBjb25zdCBjaGVja0ZpbGVzTmVlZFByb2Nlc3NpbmcgPSBhc3luYyAoKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaFdpdGhSZXRyeSgnL2FwaS9maWxlLWFwaT9vcGVyYXRpb249bGlzdCcpO1xuICAgIGlmICghcmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBnZXQgZmlsZXMgbGlzdCcpO1xuICAgIH1cbiAgICBcbiAgICAvLyBHZXQgdW5pcXVlIHNldCBudW1iZXJzIGZyb20gZWFjaCBmb2xkZXJcbiAgICBjb25zdCBjYXB0dXJlU2V0cyA9IG5ldyBTZXQoKTtcbiAgICBjb25zdCBlbmhhbmNlU2V0cyA9IG5ldyBTZXQoKTtcbiAgICBcbiAgICBpZiAocmVzcG9uc2UuZmlsZXMgJiYgQXJyYXkuaXNBcnJheShyZXNwb25zZS5maWxlcykpIHtcbiAgICAgIHJlc3BvbnNlLmZpbGVzLmZvckVhY2goZmlsZSA9PiB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gZmlsZS5maWxlbmFtZS5tYXRjaCgvXyhcXGQrKVxcLi8pO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICBjb25zdCBzZXROdW1iZXIgPSBwYXJzZUludChtYXRjaFsxXSk7XG4gICAgICAgICAgaWYgKGZpbGUucGF0aC5pbmNsdWRlcygnZXllX3RyYWNraW5nX2NhcHR1cmVzJykpIHtcbiAgICAgICAgICAgIGNhcHR1cmVTZXRzLmFkZChzZXROdW1iZXIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZmlsZS5wYXRoLmluY2x1ZGVzKCdlbmhhbmNlJykpIHtcbiAgICAgICAgICAgIGVuaGFuY2VTZXRzLmFkZChzZXROdW1iZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGNhcHR1cmVDb3VudCA9IGNhcHR1cmVTZXRzLnNpemU7XG4gICAgY29uc3QgZW5oYW5jZUNvdW50ID0gZW5oYW5jZVNldHMuc2l6ZTtcbiAgICBjb25zdCBuZWVkc1Byb2Nlc3NpbmcgPSBjYXB0dXJlQ291bnQgPiBlbmhhbmNlQ291bnQ7XG4gICAgY29uc3QgZmlsZXNUb1Byb2Nlc3MgPSBjYXB0dXJlQ291bnQgLSBlbmhhbmNlQ291bnQ7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBuZWVkc1Byb2Nlc3NpbmcsXG4gICAgICBjYXB0dXJlQ291bnQsXG4gICAgICBlbmhhbmNlQ291bnQsXG4gICAgICBmaWxlc1RvUHJvY2Vzc1xuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hlY2tpbmcgZmlsZXM6JywgZXJyb3IpO1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgbmVlZHNQcm9jZXNzaW5nOiBmYWxzZSxcbiAgICAgIGNhcHR1cmVDb3VudDogMCxcbiAgICAgIGVuaGFuY2VDb3VudDogMCxcbiAgICAgIGZpbGVzVG9Qcm9jZXNzOiAwXG4gICAgfTtcbiAgfVxufTtcblxuLy8gUHJvY2VzcyBmaWxlc1xuZXhwb3J0IGNvbnN0IHByb2Nlc3NGaWxlcyA9IGFzeW5jIChzZXROdW1iZXJzKSA9PiB7XG4gIHRyeSB7XG4gICAgLy8gY29uc29sZS5sb2coJ1N0YXJ0aW5nIHByb2Nlc3NpbmcgZm9yIHNldHM6Jywgc2V0TnVtYmVycyk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaFdpdGhSZXRyeSgnL2FwaS9wcm9jZXNzLWltYWdlcycsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgfSxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgc2V0X251bWJlcnM6IHNldE51bWJlcnMgfSksXG4gICAgfSk7XG4gICAgXG4gICAgaWYgKCFyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2UubWVzc2FnZSB8fCAnRmFpbGVkIHRvIHN0YXJ0IHByb2Nlc3NpbmcnKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBtZXNzYWdlOiByZXNwb25zZS5tZXNzYWdlXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwcm9jZXNzaW5nIGZpbGVzOicsIGVycm9yKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gcHJvY2VzcyBmaWxlcydcbiAgICB9O1xuICB9XG59O1xuICBcbi8vIENvbXBhcmUgZmlsZXMgYmV0d2VlbiBjYXB0dXJlIGFuZCBlbmhhbmNlIGZvbGRlcnNcbmV4cG9ydCBjb25zdCBjb21wYXJlRmlsZUNvdW50cyA9IGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoV2l0aFJldHJ5KCcvYXBpL2ZpbGUtYXBpP29wZXJhdGlvbj1jb21wYXJlJyk7XG4gICAgaWYgKCFyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2UubWVzc2FnZSB8fCAnRmFpbGVkIHRvIGNvbXBhcmUgZmlsZSBjb3VudHMnKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBjYXB0dXJlQ291bnQ6IHJlc3BvbnNlLmNhcHR1cmVDb3VudCxcbiAgICAgIGVuaGFuY2VDb3VudDogcmVzcG9uc2UuZW5oYW5jZUNvdW50LFxuICAgICAgbmVlZHNQcm9jZXNzaW5nOiByZXNwb25zZS5uZWVkc1Byb2Nlc3NpbmdcbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNvbXBhcmluZyBmaWxlIGNvdW50czonLCBlcnJvcik7XG4gICAgcmV0dXJuIHsgXG4gICAgICBzdWNjZXNzOiBmYWxzZSwgXG4gICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSxcbiAgICAgIGNhcHR1cmVDb3VudDogMCxcbiAgICAgIGVuaGFuY2VDb3VudDogMCxcbiAgICAgIG5lZWRzUHJvY2Vzc2luZzogZmFsc2VcbiAgICB9O1xuICB9XG59O1xuICBcbi8vIENoZWNrIGlmIHByb2Nlc3NpbmcgaXMgY3VycmVudGx5IHJ1bm5pbmdcbmV4cG9ydCBjb25zdCBjaGVja1Byb2Nlc3NpbmdTdGF0dXMgPSBhc3luYyAoKSA9PiB7XG4gIHRyeSB7XG4gICAgLy8gY29uc29sZS5sb2coJ1JlcXVlc3RpbmcgcHJvY2Vzc2luZyBzdGF0dXMuLi4nKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoV2l0aFJldHJ5KCcvYXBpL3Byb2Nlc3Mtc3RhdHVzLWFwaScsIHt9LCAxKTsgLy8gT25seSAxIHJldHJ5IGZvciBzdGF0dXMgY2hlY2tzXG4gICAgXG4gICAgLy8gSWYgZmV0Y2ggc3VjY2VlZGVkIGJ1dCByZXNwb25zZSBpcyBtYWxmb3JtZWQsIGhhbmRsZSBpdCBncmFjZWZ1bGx5XG4gICAgaWYgKCFyZXNwb25zZSB8fCB0eXBlb2YgcmVzcG9uc2UgIT09ICdvYmplY3QnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdJbnZhbGlkIHJlc3BvbnNlIGZvcm1hdDonLCByZXNwb25zZSk7XG4gICAgICByZXR1cm4geyBcbiAgICAgICAgc3VjY2VzczogZmFsc2UsIFxuICAgICAgICBlcnJvcjogYEludmFsaWQgcmVzcG9uc2UgZm9ybWF0OiAke3R5cGVvZiByZXNwb25zZX1gLFxuICAgICAgICBpc1Byb2Nlc3Npbmc6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY2hlY2tpbmcgcHJvY2Vzc2luZyBzdGF0dXM6JywgZXJyb3IpO1xuICAgIHJldHVybiB7IFxuICAgICAgc3VjY2VzczogZmFsc2UsIFxuICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UsXG4gICAgICBpc1Byb2Nlc3Npbmc6IGZhbHNlXG4gICAgfTtcbiAgfVxufTtcblxuLy8gQWRkIGRlZmF1bHQgZXhwb3J0IGNvbXBvbmVudFxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUHJvY2Vzc0FwaVBhZ2UoKSB7XG4gIHJldHVybiBudWxsOyAvLyBUaGlzIGlzIGEgdXRpbGl0eSBmaWxlLCBzbyB3ZSBkb24ndCBuZWVkIHRvIHJlbmRlciBhbnl0aGluZ1xufSJdLCJuYW1lcyI6WyJmZXRjaFdpdGhSZXRyeSIsInVybCIsIm9wdGlvbnMiLCJyZXRyaWVzIiwibGFzdEVycm9yIiwiYXBpS2V5IiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0FQSV9LRVkiLCJiYWNrZW5kVXJsIiwiTkVYVF9QVUJMSUNfQkFDS0VORF9VUkwiLCJhYnNvbHV0ZVVybCIsInN0YXJ0c1dpdGgiLCJpIiwiY29uc29sZSIsImxvZyIsImNvbnRyb2xsZXIiLCJBYm9ydENvbnRyb2xsZXIiLCJ0aW1lb3V0Iiwic2V0VGltZW91dCIsImFib3J0IiwicmVzcG9uc2UiLCJmZXRjaCIsInNpZ25hbCIsImhlYWRlcnMiLCJjbGVhclRpbWVvdXQiLCJvayIsImVycm9yVGV4dCIsInRleHQiLCJlcnJvciIsInN0YXR1cyIsIkVycm9yIiwic3RhdHVzVGV4dCIsImRhdGEiLCJqc29uIiwicGFyc2VFcnJvciIsIm1lc3NhZ2UiLCJuYW1lIiwiZGVsYXkiLCJNYXRoIiwicG93IiwiUHJvbWlzZSIsInJlc29sdmUiLCJBUElfQkFTRV9VUkwiLCJORVhUX1BVQkxJQ19BUElfVVJMIiwiQVBJX0tFWSIsImNoZWNrQmFja2VuZENvbm5lY3Rpb24iLCJzdWNjZXNzIiwiY29ubmVjdGVkIiwiZ2V0RmlsZXNMaXN0Iiwib3JnYW5pemVkRmlsZXMiLCJjYXB0dXJlIiwiZW5oYW5jZSIsImZpbGVzIiwibWFwIiwiZmlsZW5hbWUiLCJwYXRoIiwiZmlsZV90eXBlIiwic3BsaXQiLCJwb3AiLCJzaXplIiwiY2hlY2tGaWxlc0NvbXBsZXRlbmVzcyIsImlzQ29tcGxldGUiLCJtaXNzaW5nRmlsZXMiLCJ0b3RhbEZpbGVzIiwidG90YWxTZXRzIiwiaW5jb21wbGV0ZVNldHMiLCJwcmV2aWV3RmlsZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInR5cGUiLCJjaGVja0ZpbGVzTmVlZFByb2Nlc3NpbmciLCJjYXB0dXJlU2V0cyIsIlNldCIsImVuaGFuY2VTZXRzIiwiQXJyYXkiLCJpc0FycmF5IiwiZm9yRWFjaCIsImZpbGUiLCJtYXRjaCIsInNldE51bWJlciIsInBhcnNlSW50IiwiaW5jbHVkZXMiLCJhZGQiLCJjYXB0dXJlQ291bnQiLCJlbmhhbmNlQ291bnQiLCJuZWVkc1Byb2Nlc3NpbmciLCJmaWxlc1RvUHJvY2VzcyIsInByb2Nlc3NGaWxlcyIsInNldE51bWJlcnMiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsInNldF9udW1iZXJzIiwiY29tcGFyZUZpbGVDb3VudHMiLCJjaGVja1Byb2Nlc3NpbmdTdGF0dXMiLCJpc1Byb2Nlc3NpbmciLCJQcm9jZXNzQXBpUGFnZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/process_set/processApi.js\n"));

/***/ })

});
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/admin",{

/***/ "(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/adminSettings.js":
/*!****************************************************************************!*\
  !*** ./pages/collected-dataset-customized/components-gui/adminSettings.js ***!
  \****************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AdminSettings),\n/* harmony export */   useAdminSettings: () => (/* binding */ useAdminSettings)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(pages-dir-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nvar _s = $RefreshSig$();\n\nconst useAdminSettings = (ref)=>{\n    _s();\n    const [settings, setSettings] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const [currentUserId, setCurrentUserId] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isTopBarUpdated, setIsTopBarUpdated] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const initialized = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const pollingInterval = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    // Initialize polling for settings updates\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            const fetchSettings = {\n                \"useAdminSettings.useEffect.fetchSettings\": async ()=>{\n                    if (!currentUserId) return;\n                    try {\n                        const response = await fetch(\"/api/data-center/settings/\".concat(currentUserId), {\n                            headers: {\n                                'Accept': 'application/json',\n                                'Content-Type': 'application/json',\n                                'X-API-Key': process.env.NEXT_PUBLIC_API_KEY || 'A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV'\n                            }\n                        });\n                        if (!response.ok) {\n                            const errorData = await response.json();\n                            throw new Error(errorData.detail || 'Failed to fetch settings');\n                        }\n                        const newSettings = await response.json();\n                        console.log('Fetched settings:', newSettings);\n                        setSettings({\n                            \"useAdminSettings.useEffect.fetchSettings\": (prev)=>({\n                                    ...prev,\n                                    [currentUserId]: newSettings\n                                })\n                        }[\"useAdminSettings.useEffect.fetchSettings\"]);\n                        setError(null);\n                        // First update topBar through ref\n                        if (ref && ref.current) {\n                            if (ref.current.setCaptureSettings) {\n                                ref.current.setCaptureSettings(newSettings);\n                                setIsTopBarUpdated(true);\n                            }\n                        }\n                    } catch (error) {\n                        console.error('Error fetching settings:', error);\n                        setError(error.message);\n                    }\n                }\n            }[\"useAdminSettings.useEffect.fetchSettings\"];\n            // Initial fetch\n            fetchSettings();\n            // Set up polling interval\n            pollingInterval.current = setInterval(fetchSettings, 3000);\n            return ({\n                \"useAdminSettings.useEffect\": ()=>{\n                    if (pollingInterval.current) {\n                        clearInterval(pollingInterval.current);\n                    }\n                }\n            })[\"useAdminSettings.useEffect\"];\n        }\n    }[\"useAdminSettings.useEffect\"], [\n        currentUserId,\n        ref\n    ]);\n    // Effect to handle index.js update after topBar is updated\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            if (isTopBarUpdated) {\n                // Dispatch event to update index.js\n                const event = new CustomEvent('settingsUpdated', {\n                    detail: {\n                        type: 'settings',\n                        userId: currentUserId,\n                        settings: settings[currentUserId]\n                    }\n                });\n                window.dispatchEvent(event);\n                setIsTopBarUpdated(false);\n            }\n        }\n    }[\"useAdminSettings.useEffect\"], [\n        isTopBarUpdated,\n        currentUserId,\n        settings\n    ]);\n    // Load settings from localStorage on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            try {\n                const savedSettings = localStorage.getItem('adminSettings');\n                if (savedSettings) {\n                    const parsedSettings = JSON.parse(savedSettings);\n                    setSettings(parsedSettings);\n                }\n            } catch (error) {\n                console.error('Error loading settings from localStorage:', error);\n            }\n        }\n    }[\"useAdminSettings.useEffect\"], []);\n    // Save settings to localStorage when they change\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            if (initialized.current) {\n                try {\n                    localStorage.setItem('adminSettings', JSON.stringify(settings));\n                } catch (error) {\n                    console.error('Error saving settings to localStorage:', error);\n                }\n            }\n        }\n    }[\"useAdminSettings.useEffect\"], [\n        settings\n    ]);\n    // Listen for user ID changes\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            const handleUserIdChange = {\n                \"useAdminSettings.useEffect.handleUserIdChange\": (event)=>{\n                    if (event.detail && event.detail.userId) {\n                        setCurrentUserId(event.detail.userId);\n                        // Trigger immediate settings fetch for new user\n                        const fetchSettings = {\n                            \"useAdminSettings.useEffect.handleUserIdChange.fetchSettings\": async ()=>{\n                                try {\n                                    const response = await fetch(\"/api/data-center/settings/\".concat(event.detail.userId));\n                                    if (!response.ok) throw new Error('Failed to fetch settings');\n                                    const newSettings = await response.json();\n                                    console.log('Fetched settings for new user:', newSettings);\n                                    setSettings({\n                                        \"useAdminSettings.useEffect.handleUserIdChange.fetchSettings\": (prev)=>({\n                                                ...prev,\n                                                [event.detail.userId]: newSettings\n                                            })\n                                    }[\"useAdminSettings.useEffect.handleUserIdChange.fetchSettings\"]);\n                                    if (ref && ref.current && ref.current.setCaptureSettings) {\n                                        ref.current.setCaptureSettings(newSettings);\n                                        setIsTopBarUpdated(true);\n                                    }\n                                } catch (error) {\n                                    console.error('Error fetching settings for new user:', error);\n                                }\n                            }\n                        }[\"useAdminSettings.useEffect.handleUserIdChange.fetchSettings\"];\n                        fetchSettings();\n                    } else {\n                        // Handle user ID deletion\n                        const handleUserIdDeletion = {\n                            \"useAdminSettings.useEffect.handleUserIdChange.handleUserIdDeletion\": async ()=>{\n                                try {\n                                    // Get the last known user ID\n                                    const lastUserId = currentUserId;\n                                    if (lastUserId) {\n                                        // Update user preferences to set cookie to false\n                                        const response = await fetch(\"/api/user-preferences/\".concat(lastUserId), {\n                                            method: 'PUT',\n                                            headers: {\n                                                'Content-Type': 'application/json',\n                                                'X-API-Key': process.env.NEXT_PUBLIC_API_KEY || 'A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV'\n                                            },\n                                            body: JSON.stringify({\n                                                cookie: false\n                                            })\n                                        });\n                                        if (!response.ok) {\n                                            throw new Error('Failed to update cookie status');\n                                        }\n                                        // Clear settings for the deleted user\n                                        setSettings({\n                                            \"useAdminSettings.useEffect.handleUserIdChange.handleUserIdDeletion\": (prev)=>{\n                                                const newSettings = {\n                                                    ...prev\n                                                };\n                                                delete newSettings[lastUserId];\n                                                return newSettings;\n                                            }\n                                        }[\"useAdminSettings.useEffect.handleUserIdChange.handleUserIdDeletion\"]);\n                                        // Reset current user ID\n                                        setCurrentUserId(null);\n                                        // Show cookie banner by dispatching an event\n                                        const event = new CustomEvent('showCookieBanner', {\n                                            detail: {\n                                                show: true\n                                            }\n                                        });\n                                        window.dispatchEvent(event);\n                                    }\n                                } catch (error) {\n                                    console.error('Error handling user ID deletion:', error);\n                                }\n                            }\n                        }[\"useAdminSettings.useEffect.handleUserIdChange.handleUserIdDeletion\"];\n                        handleUserIdDeletion();\n                    }\n                }\n            }[\"useAdminSettings.useEffect.handleUserIdChange\"];\n            window.addEventListener('userIdChange', handleUserIdChange);\n            return ({\n                \"useAdminSettings.useEffect\": ()=>{\n                    window.removeEventListener('userIdChange', handleUserIdChange);\n                }\n            })[\"useAdminSettings.useEffect\"];\n        }\n    }[\"useAdminSettings.useEffect\"], [\n        ref,\n        currentUserId\n    ]);\n    // Listen for settings updates from admin page\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useAdminSettings.useEffect\": ()=>{\n            const handleSettingsUpdate = {\n                \"useAdminSettings.useEffect.handleSettingsUpdate\": (event)=>{\n                    if (event.detail && event.detail.type === 'captureSettings') {\n                        const { userId, times, delay } = event.detail;\n                        if (times !== undefined || delay !== undefined) {\n                            var _settings_userId, _settings_userId1, _settings_userId2, _settings_userId3, _settings_userId4, _settings_userId5, _settings_userId6, _settings_userId7, _settings_userId8, _settings_userId9, _settings_userId10;\n                            var _settings_userId_state_isProcessOn;\n                            const newSettings = {\n                                times: times !== undefined ? times : ((_settings_userId = settings[userId]) === null || _settings_userId === void 0 ? void 0 : _settings_userId.times) || 1,\n                                delay: delay !== undefined ? delay : ((_settings_userId1 = settings[userId]) === null || _settings_userId1 === void 0 ? void 0 : _settings_userId1.delay) || 3,\n                                image_path: ((_settings_userId2 = settings[userId]) === null || _settings_userId2 === void 0 ? void 0 : _settings_userId2.image_path) || \"/asfgrebvxcv\",\n                                updateImage: ((_settings_userId3 = settings[userId]) === null || _settings_userId3 === void 0 ? void 0 : _settings_userId3.updateImage) || \"image.jpg\",\n                                set_timeRandomImage: ((_settings_userId4 = settings[userId]) === null || _settings_userId4 === void 0 ? void 0 : _settings_userId4.set_timeRandomImage) || 1,\n                                every_set: ((_settings_userId5 = settings[userId]) === null || _settings_userId5 === void 0 ? void 0 : _settings_userId5.every_set) || 2,\n                                zoom_percentage: ((_settings_userId6 = settings[userId]) === null || _settings_userId6 === void 0 ? void 0 : _settings_userId6.zoom_percentage) || 100,\n                                position_zoom: ((_settings_userId7 = settings[userId]) === null || _settings_userId7 === void 0 ? void 0 : _settings_userId7.position_zoom) || [\n                                    3,\n                                    4\n                                ],\n                                state_isProcessOn: (_settings_userId_state_isProcessOn = (_settings_userId8 = settings[userId]) === null || _settings_userId8 === void 0 ? void 0 : _settings_userId8.state_isProcessOn) !== null && _settings_userId_state_isProcessOn !== void 0 ? _settings_userId_state_isProcessOn : true,\n                                currentlyPage: ((_settings_userId9 = settings[userId]) === null || _settings_userId9 === void 0 ? void 0 : _settings_userId9.currentlyPage) || \"str\",\n                                freeState: ((_settings_userId10 = settings[userId]) === null || _settings_userId10 === void 0 ? void 0 : _settings_userId10.freeState) || 3\n                            };\n                            setSettings({\n                                \"useAdminSettings.useEffect.handleSettingsUpdate\": (prev)=>({\n                                        ...prev,\n                                        [userId]: newSettings\n                                    })\n                            }[\"useAdminSettings.useEffect.handleSettingsUpdate\"]);\n                            // First update topBar through ref\n                            if (ref && ref.current) {\n                                if (ref.current.setCaptureSettings) {\n                                    ref.current.setCaptureSettings(newSettings);\n                                    setIsTopBarUpdated(true);\n                                }\n                            }\n                            // Save to backend\n                            const saveToBackend = {\n                                \"useAdminSettings.useEffect.handleSettingsUpdate.saveToBackend\": async ()=>{\n                                    try {\n                                        const response = await fetch(\"/api/data-center/settings/\".concat(userId), {\n                                            method: 'POST',\n                                            headers: {\n                                                'Content-Type': 'application/json',\n                                                'X-API-Key': process.env.NEXT_PUBLIC_API_KEY || 'A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV'\n                                            },\n                                            body: JSON.stringify(newSettings)\n                                        });\n                                        if (!response.ok) {\n                                            const errorData = await response.json();\n                                            throw new Error(errorData.detail || 'Failed to save settings to backend');\n                                        }\n                                        console.log('Settings saved to backend:', newSettings);\n                                        setError(null);\n                                    } catch (error) {\n                                        console.error('Error saving settings to backend:', error);\n                                        setError(error.message);\n                                    }\n                                }\n                            }[\"useAdminSettings.useEffect.handleSettingsUpdate.saveToBackend\"];\n                            saveToBackend();\n                        }\n                    }\n                }\n            }[\"useAdminSettings.useEffect.handleSettingsUpdate\"];\n            window.addEventListener('captureSettingsUpdate', handleSettingsUpdate);\n            return ({\n                \"useAdminSettings.useEffect\": ()=>{\n                    window.removeEventListener('captureSettingsUpdate', handleSettingsUpdate);\n                }\n            })[\"useAdminSettings.useEffect\"];\n        }\n    }[\"useAdminSettings.useEffect\"], [\n        settings,\n        ref\n    ]);\n    const updateSettings = async (newSettings, userId)=>{\n        try {\n            var _settings_userId, _settings_userId1, _settings_userId2, _settings_userId3, _settings_userId4, _settings_userId5, _settings_userId6, _settings_userId7, _settings_userId8;\n            if (!newSettings || typeof newSettings !== 'object') {\n                throw new Error('Invalid settings format');\n            }\n            const { times, delay } = newSettings;\n            if (typeof times !== 'number' || typeof delay !== 'number' || times < 1 || delay < 1) {\n                throw new Error('Invalid settings values');\n            }\n            var _settings_userId_state_isProcessOn;\n            // Preserve existing settings while updating times and delay\n            const updatedSettings = {\n                ...settings[userId],\n                times,\n                delay,\n                image_path: ((_settings_userId = settings[userId]) === null || _settings_userId === void 0 ? void 0 : _settings_userId.image_path) || \"/asfgrebvxcv\",\n                updateImage: ((_settings_userId1 = settings[userId]) === null || _settings_userId1 === void 0 ? void 0 : _settings_userId1.updateImage) || \"image.jpg\",\n                set_timeRandomImage: ((_settings_userId2 = settings[userId]) === null || _settings_userId2 === void 0 ? void 0 : _settings_userId2.set_timeRandomImage) || 1,\n                every_set: ((_settings_userId3 = settings[userId]) === null || _settings_userId3 === void 0 ? void 0 : _settings_userId3.every_set) || 2,\n                zoom_percentage: ((_settings_userId4 = settings[userId]) === null || _settings_userId4 === void 0 ? void 0 : _settings_userId4.zoom_percentage) || 100,\n                position_zoom: ((_settings_userId5 = settings[userId]) === null || _settings_userId5 === void 0 ? void 0 : _settings_userId5.position_zoom) || [\n                    3,\n                    4\n                ],\n                state_isProcessOn: (_settings_userId_state_isProcessOn = (_settings_userId6 = settings[userId]) === null || _settings_userId6 === void 0 ? void 0 : _settings_userId6.state_isProcessOn) !== null && _settings_userId_state_isProcessOn !== void 0 ? _settings_userId_state_isProcessOn : true,\n                currentlyPage: ((_settings_userId7 = settings[userId]) === null || _settings_userId7 === void 0 ? void 0 : _settings_userId7.currentlyPage) || \"str\",\n                freeState: ((_settings_userId8 = settings[userId]) === null || _settings_userId8 === void 0 ? void 0 : _settings_userId8.freeState) || 3\n            };\n            setSettings((prev)=>({\n                    ...prev,\n                    [userId]: updatedSettings\n                }));\n            initialized.current = true;\n            // Save settings to backend\n            const response = await fetch(\"/api/data-center/settings/\".concat(userId), {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-API-Key': process.env.NEXT_PUBLIC_API_KEY || 'A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV'\n                },\n                body: JSON.stringify(updatedSettings)\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.detail || 'Failed to save settings to backend');\n            }\n            console.log('Settings updated and saved:', {\n                userId,\n                ...updatedSettings\n            });\n            setError(null);\n            // First update topBar through ref\n            if (ref && ref.current) {\n                if (ref.current.setCaptureSettings) {\n                    ref.current.setCaptureSettings(updatedSettings);\n                    setIsTopBarUpdated(true);\n                }\n            }\n        } catch (error) {\n            console.error('Error updating settings:', error);\n            setError(error.message);\n            throw error;\n        }\n    };\n    return {\n        settings,\n        updateSettings,\n        error\n    };\n};\n_s(useAdminSettings, \"wyRehNK8BbZecFVC4rDbi09GWoI=\");\n// Add default export component\nfunction AdminSettings() {\n    return null; // This is a utility file, so we don't need to render anything\n}\n_c = AdminSettings;\nvar _c;\n$RefreshReg$(_c, \"AdminSettings\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3BhZ2VzL2NvbGxlY3RlZC1kYXRhc2V0LWN1c3RvbWl6ZWQvY29tcG9uZW50cy1ndWkvYWRtaW5TZXR0aW5ncy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBb0Q7QUFFN0MsTUFBTUcsbUJBQW1CLENBQUNDOztJQUMvQixNQUFNLENBQUNDLFVBQVVDLFlBQVksR0FBR0osK0NBQVFBLENBQUMsQ0FBQztJQUMxQyxNQUFNLENBQUNLLGVBQWVDLGlCQUFpQixHQUFHTiwrQ0FBUUEsQ0FBQztJQUNuRCxNQUFNLENBQUNPLGlCQUFpQkMsbUJBQW1CLEdBQUdSLCtDQUFRQSxDQUFDO0lBQ3ZELE1BQU0sQ0FBQ1MsT0FBT0MsU0FBUyxHQUFHViwrQ0FBUUEsQ0FBQztJQUNuQyxNQUFNVyxjQUFjWiw2Q0FBTUEsQ0FBQztJQUMzQixNQUFNYSxrQkFBa0JiLDZDQUFNQSxDQUFDO0lBRS9CLDBDQUEwQztJQUMxQ0QsZ0RBQVNBO3NDQUFDO1lBQ1IsTUFBTWU7NERBQWdCO29CQUNwQixJQUFJLENBQUNSLGVBQWU7b0JBRXBCLElBQUk7d0JBQ0YsTUFBTVMsV0FBVyxNQUFNQyxNQUFNLDZCQUEyQyxPQUFkVixnQkFBaUI7NEJBQ3pFVyxTQUFTO2dDQUNQLFVBQVU7Z0NBQ1YsZ0JBQWdCO2dDQUNoQixhQUFhQyxPQUFPQSxDQUFDQyxHQUFHLENBQUNDLG1CQUFtQixJQUFJOzRCQUNsRDt3QkFDRjt3QkFFQSxJQUFJLENBQUNMLFNBQVNNLEVBQUUsRUFBRTs0QkFDaEIsTUFBTUMsWUFBWSxNQUFNUCxTQUFTUSxJQUFJOzRCQUNyQyxNQUFNLElBQUlDLE1BQU1GLFVBQVVHLE1BQU0sSUFBSTt3QkFDdEM7d0JBRUEsTUFBTUMsY0FBYyxNQUFNWCxTQUFTUSxJQUFJO3dCQUN2Q0ksUUFBUUMsR0FBRyxDQUFDLHFCQUFxQkY7d0JBQ2pDckI7d0VBQVl3QixDQUFBQSxPQUFTO29DQUNuQixHQUFHQSxJQUFJO29DQUNQLENBQUN2QixjQUFjLEVB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R0FBRyxDQUFDQyxtQkFBbUIsSUFBSTtnQkFDbEQ7Z0JBQ0FpQyxNQUFNUixLQUFLRyxTQUFTLENBQUN5QjtZQUN2QjtZQUVBLElBQUksQ0FBQzFELFNBQVNNLEVBQUUsRUFBRTtnQkFDaEIsTUFBTUMsWUFBWSxNQUFNUCxTQUFTUSxJQUFJO2dCQUNyQyxNQUFNLElBQUlDLE1BQU1GLFVBQVVHLE1BQU0sSUFBSTtZQUN0QztZQUVBRSxRQUFRQyxHQUFHLENBQUMsK0JBQStCO2dCQUFFVTtnQkFBUSxHQUFHbUMsZUFBZTtZQUFDO1lBQ3hFOUQsU0FBUztZQUVULGtDQUFrQztZQUNsQyxJQUFJUixPQUFPQSxJQUFJMkIsT0FBTyxFQUFFO2dCQUN0QixJQUFJM0IsSUFBSTJCLE9BQU8sQ0FBQ0Msa0JBQWtCLEVBQUU7b0JBQ2xDNUIsSUFBSTJCLE9BQU8sQ0FBQ0Msa0JBQWtCLENBQUMwQztvQkFDL0JoRSxtQkFBbUI7Z0JBQ3JCO1lBQ0Y7UUFFRixFQUFFLE9BQU9DLE9BQU87WUFDZGlCLFFBQVFqQixLQUFLLENBQUMsNEJBQTRCQTtZQUMxQ0MsU0FBU0QsTUFBTXNCLE9BQU87WUFDdEIsTUFBTXRCO1FBQ1I7SUFDRjtJQUVBLE9BQU87UUFBRU47UUFBVW9FO1FBQWdCOUQ7SUFBTTtBQUMzQyxFQUFFO0dBNVRXUjtBQThUYiwrQkFBK0I7QUFDaEIsU0FBU3dFO0lBQ3RCLE9BQU8sTUFBTSw4REFBOEQ7QUFDN0U7S0FGd0JBIiwic291cmNlcyI6WyIvVXNlcnMvcG9yY2hwb3J0YWwyL0Rlc2t0b3Av8J+UpWV2ZXJ5dGhpbmcvTWFpbl9XZWJfRXllVHJhY2tpbmcvbWFpbi13ZWIvZnJvbnRlbmQvcGFnZXMvY29sbGVjdGVkLWRhdGFzZXQtY3VzdG9taXplZC9jb21wb25lbnRzLWd1aS9hZG1pblNldHRpbmdzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGNvbnN0IHVzZUFkbWluU2V0dGluZ3MgPSAocmVmKSA9PiB7XG4gIGNvbnN0IFtzZXR0aW5ncywgc2V0U2V0dGluZ3NdID0gdXNlU3RhdGUoe30pO1xuICBjb25zdCBbY3VycmVudFVzZXJJZCwgc2V0Q3VycmVudFVzZXJJZF0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW2lzVG9wQmFyVXBkYXRlZCwgc2V0SXNUb3BCYXJVcGRhdGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgaW5pdGlhbGl6ZWQgPSB1c2VSZWYoZmFsc2UpO1xuICBjb25zdCBwb2xsaW5nSW50ZXJ2YWwgPSB1c2VSZWYobnVsbCk7XG5cbiAgLy8gSW5pdGlhbGl6ZSBwb2xsaW5nIGZvciBzZXR0aW5ncyB1cGRhdGVzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgZmV0Y2hTZXR0aW5ncyA9IGFzeW5jICgpID0+IHtcbiAgICAgIGlmICghY3VycmVudFVzZXJJZCkgcmV0dXJuO1xuICAgICAgXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYXBpL2RhdGEtY2VudGVyL3NldHRpbmdzLyR7Y3VycmVudFVzZXJJZH1gLCB7XG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnWC1BUEktS2V5JzogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBJX0tFWSB8fCAnQTFCMkMzRDQtRTVGNi03ODkwLUdISUotS0xNTk9QUVJTVFVWJ1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgY29uc3QgZXJyb3JEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvckRhdGEuZGV0YWlsIHx8ICdGYWlsZWQgdG8gZmV0Y2ggc2V0dGluZ3MnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgbmV3U2V0dGluZ3MgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdGZXRjaGVkIHNldHRpbmdzOicsIG5ld1NldHRpbmdzKTtcbiAgICAgICAgc2V0U2V0dGluZ3MocHJldiA9PiAoe1xuICAgICAgICAgIC4uLnByZXYsXG4gICAgICAgICAgW2N1cnJlbnRVc2VySWRdOiBuZXdTZXR0aW5nc1xuICAgICAgICB9KSk7XG4gICAgICAgIHNldEVycm9yKG51bGwpO1xuICAgICAgICBcbiAgICAgICAgLy8gRmlyc3QgdXBkYXRlIHRvcEJhciB0aHJvdWdoIHJlZlxuICAgICAgICBpZiAocmVmICYmIHJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgaWYgKHJlZi5jdXJyZW50LnNldENhcHR1cmVTZXR0aW5ncykge1xuICAgICAgICAgICAgcmVmLmN1cnJlbnQuc2V0Q2FwdHVyZVNldHRpbmdzKG5ld1NldHRpbmdzKTtcbiAgICAgICAgICAgIHNldElzVG9wQmFyVXBkYXRlZCh0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIHNldHRpbmdzOicsIGVycm9yKTtcbiAgICAgICAgc2V0RXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEluaXRpYWwgZmV0Y2hcbiAgICBmZXRjaFNldHRpbmdzKCk7XG5cbiAgICAvLyBTZXQgdXAgcG9sbGluZyBpbnRlcnZhbFxuICAgIHBvbGxpbmdJbnRlcnZhbC5jdXJyZW50ID0gc2V0SW50ZXJ2YWwoZmV0Y2hTZXR0aW5ncywgMzAwMCk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHBvbGxpbmdJbnRlcnZhbC5jdXJyZW50KSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwocG9sbGluZ0ludGVydmFsLmN1cnJlbnQpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtjdXJyZW50VXNlcklkLCByZWZdKTtcblxuICAvLyBFZmZlY3QgdG8gaGFuZGxlIGluZGV4LmpzIHVwZGF0ZSBhZnRlciB0b3BCYXIgaXMgdXBkYXRlZFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc1RvcEJhclVwZGF0ZWQpIHtcbiAgICAgIC8vIERpc3BhdGNoIGV2ZW50IHRvIHVwZGF0ZSBpbmRleC5qc1xuICAgICAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ3NldHRpbmdzVXBkYXRlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgdHlwZTogJ3NldHRpbmdzJyxcbiAgICAgICAgICB1c2VySWQ6IGN1cnJlbnRVc2VySWQsXG4gICAgICAgICAgc2V0dGluZ3M6IHNldHRpbmdzW2N1cnJlbnRVc2VySWRdXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgc2V0SXNUb3BCYXJVcGRhdGVkKGZhbHNlKTtcbiAgICB9XG4gIH0sIFtpc1RvcEJhclVwZGF0ZWQsIGN1cnJlbnRVc2VySWQsIHNldHRpbmdzXSk7XG5cbiAgLy8gTG9hZCBzZXR0aW5ncyBmcm9tIGxvY2FsU3RvcmFnZSBvbiBtb3VudFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzYXZlZFNldHRpbmdzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2FkbWluU2V0dGluZ3MnKTtcbiAgICAgIGlmIChzYXZlZFNldHRpbmdzKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFNldHRpbmdzID0gSlNPTi5wYXJzZShzYXZlZFNldHRpbmdzKTtcbiAgICAgICAgc2V0U2V0dGluZ3MocGFyc2VkU2V0dGluZ3MpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIHNldHRpbmdzIGZyb20gbG9jYWxTdG9yYWdlOicsIGVycm9yKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICAvLyBTYXZlIHNldHRpbmdzIHRvIGxvY2FsU3RvcmFnZSB3aGVuIHRoZXkgY2hhbmdlXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGluaXRpYWxpemVkLmN1cnJlbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdhZG1pblNldHRpbmdzJywgSlNPTi5zdHJpbmdpZnkoc2V0dGluZ3MpKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNhdmluZyBzZXR0aW5ncyB0byBsb2NhbFN0b3JhZ2U6JywgZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW3NldHRpbmdzXSk7XG5cbiAgLy8gTGlzdGVuIGZvciB1c2VyIElEIGNoYW5nZXNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVVc2VySWRDaGFuZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC5kZXRhaWwgJiYgZXZlbnQuZGV0YWlsLnVzZXJJZCkge1xuICAgICAgICBzZXRDdXJyZW50VXNlcklkKGV2ZW50LmRldGFpbC51c2VySWQpO1xuICAgICAgICAvLyBUcmlnZ2VyIGltbWVkaWF0ZSBzZXR0aW5ncyBmZXRjaCBmb3IgbmV3IHVzZXJcbiAgICAgICAgY29uc3QgZmV0Y2hTZXR0aW5ncyA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgL2FwaS9kYXRhLWNlbnRlci9zZXR0aW5ncy8ke2V2ZW50LmRldGFpbC51c2VySWR9YCk7XG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBzZXR0aW5ncycpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBuZXdTZXR0aW5ncyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGZXRjaGVkIHNldHRpbmdzIGZvciBuZXcgdXNlcjonLCBuZXdTZXR0aW5ncyk7XG4gICAgICAgICAgICBzZXRTZXR0aW5ncyhwcmV2ID0+ICh7XG4gICAgICAgICAgICAgIC4uLnByZXYsXG4gICAgICAgICAgICAgIFtldmVudC5kZXRhaWwudXNlcklkXTogbmV3U2V0dGluZ3NcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHJlZiAmJiByZWYuY3VycmVudCAmJiByZWYuY3VycmVudC5zZXRDYXB0dXJlU2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgcmVmLmN1cnJlbnQuc2V0Q2FwdHVyZVNldHRpbmdzKG5ld1NldHRpbmdzKTtcbiAgICAgICAgICAgICAgc2V0SXNUb3BCYXJVcGRhdGVkKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBzZXR0aW5ncyBmb3IgbmV3IHVzZXI6JywgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZmV0Y2hTZXR0aW5ncygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSGFuZGxlIHVzZXIgSUQgZGVsZXRpb25cbiAgICAgICAgY29uc3QgaGFuZGxlVXNlcklkRGVsZXRpb24gPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEdldCB0aGUgbGFzdCBrbm93biB1c2VyIElEXG4gICAgICAgICAgICBjb25zdCBsYXN0VXNlcklkID0gY3VycmVudFVzZXJJZDtcbiAgICAgICAgICAgIGlmIChsYXN0VXNlcklkKSB7XG4gICAgICAgICAgICAgIC8vIFVwZGF0ZSB1c2VyIHByZWZlcmVuY2VzIHRvIHNldCBjb29raWUgdG8gZmFsc2VcbiAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgL2FwaS91c2VyLXByZWZlcmVuY2VzLyR7bGFzdFVzZXJJZH1gLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICAgJ1gtQVBJLUtleSc6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9LRVkgfHwgJ0ExQjJDM0Q0LUU1RjYtNzg5MC1HSElKLUtMTU5PUFFSU1RVVidcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICAgIGNvb2tpZTogZmFsc2VcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gdXBkYXRlIGNvb2tpZSBzdGF0dXMnKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIENsZWFyIHNldHRpbmdzIGZvciB0aGUgZGVsZXRlZCB1c2VyXG4gICAgICAgICAgICAgIHNldFNldHRpbmdzKHByZXYgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1NldHRpbmdzID0geyAuLi5wcmV2IH07XG4gICAgICAgICAgICAgICAgZGVsZXRlIG5ld1NldHRpbmdzW2xhc3RVc2VySWRdO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdTZXR0aW5ncztcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgLy8gUmVzZXQgY3VycmVudCB1c2VyIElEXG4gICAgICAgICAgICAgIHNldEN1cnJlbnRVc2VySWQobnVsbCk7XG5cbiAgICAgICAgICAgICAgLy8gU2hvdyBjb29raWUgYmFubmVyIGJ5IGRpc3BhdGNoaW5nIGFuIGV2ZW50XG4gICAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdzaG93Q29va2llQmFubmVyJywge1xuICAgICAgICAgICAgICAgIGRldGFpbDogeyBzaG93OiB0cnVlIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaGFuZGxpbmcgdXNlciBJRCBkZWxldGlvbjonLCBlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBoYW5kbGVVc2VySWREZWxldGlvbigpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndXNlcklkQ2hhbmdlJywgaGFuZGxlVXNlcklkQ2hhbmdlKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VzZXJJZENoYW5nZScsIGhhbmRsZVVzZXJJZENoYW5nZSk7XG4gICAgfTtcbiAgfSwgW3JlZiwgY3VycmVudFVzZXJJZF0pO1xuXG4gIC8vIExpc3RlbiBmb3Igc2V0dGluZ3MgdXBkYXRlcyBmcm9tIGFkbWluIHBhZ2VcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVTZXR0aW5nc1VwZGF0ZSA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50LmRldGFpbCAmJiBldmVudC5kZXRhaWwudHlwZSA9PT0gJ2NhcHR1cmVTZXR0aW5ncycpIHtcbiAgICAgICAgY29uc3QgeyB1c2VySWQsIHRpbWVzLCBkZWxheSB9ID0gZXZlbnQuZGV0YWlsO1xuICAgICAgICBpZiAodGltZXMgIT09IHVuZGVmaW5lZCB8fCBkZWxheSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29uc3QgbmV3U2V0dGluZ3MgPSB7XG4gICAgICAgICAgICB0aW1lczogdGltZXMgIT09IHVuZGVmaW5lZCA/IHRpbWVzIDogKHNldHRpbmdzW3VzZXJJZF0/LnRpbWVzIHx8IDEpLFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5ICE9PSB1bmRlZmluZWQgPyBkZWxheSA6IChzZXR0aW5nc1t1c2VySWRdPy5kZWxheSB8fCAzKSxcbiAgICAgICAgICAgIGltYWdlX3BhdGg6IHNldHRpbmdzW3VzZXJJZF0/LmltYWdlX3BhdGggfHwgXCIvYXNmZ3JlYnZ4Y3ZcIixcbiAgICAgICAgICAgIHVwZGF0ZUltYWdlOiBzZXR0aW5nc1t1c2VySWRdPy51cGRhdGVJbWFnZSB8fCBcImltYWdlLmpwZ1wiLFxuICAgICAgICAgICAgc2V0X3RpbWVSYW5kb21JbWFnZTogc2V0dGluZ3NbdXNlcklkXT8uc2V0X3RpbWVSYW5kb21JbWFnZSB8fCAxLFxuICAgICAgICAgICAgZXZlcnlfc2V0OiBzZXR0aW5nc1t1c2VySWRdPy5ldmVyeV9zZXQgfHwgMixcbiAgICAgICAgICAgIHpvb21fcGVyY2VudGFnZTogc2V0dGluZ3NbdXNlcklkXT8uem9vbV9wZXJjZW50YWdlIHx8IDEwMCxcbiAgICAgICAgICAgIHBvc2l0aW9uX3pvb206IHNldHRpbmdzW3VzZXJJZF0/LnBvc2l0aW9uX3pvb20gfHwgWzMsIDRdLFxuICAgICAgICAgICAgc3RhdGVfaXNQcm9jZXNzT246IHNldHRpbmdzW3VzZXJJZF0/LnN0YXRlX2lzUHJvY2Vzc09uID8/IHRydWUsXG4gICAgICAgICAgICBjdXJyZW50bHlQYWdlOiBzZXR0aW5nc1t1c2VySWRdPy5jdXJyZW50bHlQYWdlIHx8IFwic3RyXCIsXG4gICAgICAgICAgICBmcmVlU3RhdGU6IHNldHRpbmdzW3VzZXJJZF0/LmZyZWVTdGF0ZSB8fCAzXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHNldFNldHRpbmdzKHByZXYgPT4gKHtcbiAgICAgICAgICAgIC4uLnByZXYsXG4gICAgICAgICAgICBbdXNlcklkXTogbmV3U2V0dGluZ3NcbiAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAvLyBGaXJzdCB1cGRhdGUgdG9wQmFyIHRocm91Z2ggcmVmXG4gICAgICAgICAgaWYgKHJlZiAmJiByZWYuY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKHJlZi5jdXJyZW50LnNldENhcHR1cmVTZXR0aW5ncykge1xuICAgICAgICAgICAgICByZWYuY3VycmVudC5zZXRDYXB0dXJlU2V0dGluZ3MobmV3U2V0dGluZ3MpO1xuICAgICAgICAgICAgICBzZXRJc1RvcEJhclVwZGF0ZWQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU2F2ZSB0byBiYWNrZW5kXG4gICAgICAgICAgY29uc3Qgc2F2ZVRvQmFja2VuZCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvZGF0YS1jZW50ZXIvc2V0dGluZ3MvJHt1c2VySWR9YCwge1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgICAnWC1BUEktS2V5JzogcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBJX0tFWSB8fCAnQTFCMkMzRDQtRTVGNi03ODkwLUdISUotS0xNTk9QUVJTVFVWJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkobmV3U2V0dGluZ3MpXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yRGF0YS5kZXRhaWwgfHwgJ0ZhaWxlZCB0byBzYXZlIHNldHRpbmdzIHRvIGJhY2tlbmQnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NldHRpbmdzIHNhdmVkIHRvIGJhY2tlbmQ6JywgbmV3U2V0dGluZ3MpO1xuICAgICAgICAgICAgICBzZXRFcnJvcihudWxsKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNhdmluZyBzZXR0aW5ncyB0byBiYWNrZW5kOicsIGVycm9yKTtcbiAgICAgICAgICAgICAgc2V0RXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBzYXZlVG9CYWNrZW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NhcHR1cmVTZXR0aW5nc1VwZGF0ZScsIGhhbmRsZVNldHRpbmdzVXBkYXRlKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NhcHR1cmVTZXR0aW5nc1VwZGF0ZScsIGhhbmRsZVNldHRpbmdzVXBkYXRlKTtcbiAgICB9O1xuICB9LCBbc2V0dGluZ3MsIHJlZl0pO1xuXG4gIGNvbnN0IHVwZGF0ZVNldHRpbmdzID0gYXN5bmMgKG5ld1NldHRpbmdzLCB1c2VySWQpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFuZXdTZXR0aW5ncyB8fCB0eXBlb2YgbmV3U2V0dGluZ3MgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzZXR0aW5ncyBmb3JtYXQnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyB0aW1lcywgZGVsYXkgfSA9IG5ld1NldHRpbmdzO1xuICAgICAgaWYgKHR5cGVvZiB0aW1lcyAhPT0gJ251bWJlcicgfHwgdHlwZW9mIGRlbGF5ICE9PSAnbnVtYmVyJyB8fCB0aW1lcyA8IDEgfHwgZGVsYXkgPCAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzZXR0aW5ncyB2YWx1ZXMnKTtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlc2VydmUgZXhpc3Rpbmcgc2V0dGluZ3Mgd2hpbGUgdXBkYXRpbmcgdGltZXMgYW5kIGRlbGF5XG4gICAgICBjb25zdCB1cGRhdGVkU2V0dGluZ3MgPSB7XG4gICAgICAgIC4uLnNldHRpbmdzW3VzZXJJZF0sXG4gICAgICAgIHRpbWVzLFxuICAgICAgICBkZWxheSxcbiAgICAgICAgaW1hZ2VfcGF0aDogc2V0dGluZ3NbdXNlcklkXT8uaW1hZ2VfcGF0aCB8fCBcIi9hc2ZncmVidnhjdlwiLFxuICAgICAgICB1cGRhdGVJbWFnZTogc2V0dGluZ3NbdXNlcklkXT8udXBkYXRlSW1hZ2UgfHwgXCJpbWFnZS5qcGdcIixcbiAgICAgICAgc2V0X3RpbWVSYW5kb21JbWFnZTogc2V0dGluZ3NbdXNlcklkXT8uc2V0X3RpbWVSYW5kb21JbWFnZSB8fCAxLFxuICAgICAgICBldmVyeV9zZXQ6IHNldHRpbmdzW3VzZXJJZF0/LmV2ZXJ5X3NldCB8fCAyLFxuICAgICAgICB6b29tX3BlcmNlbnRhZ2U6IHNldHRpbmdzW3VzZXJJZF0/Lnpvb21fcGVyY2VudGFnZSB8fCAxMDAsXG4gICAgICAgIHBvc2l0aW9uX3pvb206IHNldHRpbmdzW3VzZXJJZF0/LnBvc2l0aW9uX3pvb20gfHwgWzMsIDRdLFxuICAgICAgICBzdGF0ZV9pc1Byb2Nlc3NPbjogc2V0dGluZ3NbdXNlcklkXT8uc3RhdGVfaXNQcm9jZXNzT24gPz8gdHJ1ZSxcbiAgICAgICAgY3VycmVudGx5UGFnZTogc2V0dGluZ3NbdXNlcklkXT8uY3VycmVudGx5UGFnZSB8fCBcInN0clwiLFxuICAgICAgICBmcmVlU3RhdGU6IHNldHRpbmdzW3VzZXJJZF0/LmZyZWVTdGF0ZSB8fCAzXG4gICAgICB9O1xuXG4gICAgICBzZXRTZXR0aW5ncyhwcmV2ID0+ICh7XG4gICAgICAgIC4uLnByZXYsXG4gICAgICAgIFt1c2VySWRdOiB1cGRhdGVkU2V0dGluZ3NcbiAgICAgIH0pKTtcbiAgICAgIGluaXRpYWxpemVkLmN1cnJlbnQgPSB0cnVlO1xuXG4gICAgICAvLyBTYXZlIHNldHRpbmdzIHRvIGJhY2tlbmRcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvZGF0YS1jZW50ZXIvc2V0dGluZ3MvJHt1c2VySWR9YCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgJ1gtQVBJLUtleSc6IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX0FQSV9LRVkgfHwgJ0ExQjJDM0Q0LUU1RjYtNzg5MC1HSElKLUtMTU5PUFFSU1RVVidcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXBkYXRlZFNldHRpbmdzKVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgY29uc3QgZXJyb3JEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JEYXRhLmRldGFpbCB8fCAnRmFpbGVkIHRvIHNhdmUgc2V0dGluZ3MgdG8gYmFja2VuZCcpO1xuICAgICAgfVxuXG4gICAgICBjb25zb2xlLmxvZygnU2V0dGluZ3MgdXBkYXRlZCBhbmQgc2F2ZWQ6JywgeyB1c2VySWQsIC4uLnVwZGF0ZWRTZXR0aW5ncyB9KTtcbiAgICAgIHNldEVycm9yKG51bGwpO1xuXG4gICAgICAvLyBGaXJzdCB1cGRhdGUgdG9wQmFyIHRocm91Z2ggcmVmXG4gICAgICBpZiAocmVmICYmIHJlZi5jdXJyZW50KSB7XG4gICAgICAgIGlmIChyZWYuY3VycmVudC5zZXRDYXB0dXJlU2V0dGluZ3MpIHtcbiAgICAgICAgICByZWYuY3VycmVudC5zZXRDYXB0dXJlU2V0dGluZ3ModXBkYXRlZFNldHRpbmdzKTtcbiAgICAgICAgICBzZXRJc1RvcEJhclVwZGF0ZWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyBzZXR0aW5nczonLCBlcnJvcik7XG4gICAgICBzZXRFcnJvcihlcnJvci5tZXNzYWdlKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4geyBzZXR0aW5ncywgdXBkYXRlU2V0dGluZ3MsIGVycm9yIH07XG59O1xuXG4vLyBBZGQgZGVmYXVsdCBleHBvcnQgY29tcG9uZW50XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBZG1pblNldHRpbmdzKCkge1xuICByZXR1cm4gbnVsbDsgLy8gVGhpcyBpcyBhIHV0aWxpdHkgZmlsZSwgc28gd2UgZG9uJ3QgbmVlZCB0byByZW5kZXIgYW55dGhpbmdcbn0iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VBZG1pblNldHRpbmdzIiwicmVmIiwic2V0dGluZ3MiLCJzZXRTZXR0aW5ncyIsImN1cnJlbnRVc2VySWQiLCJzZXRDdXJyZW50VXNlcklkIiwiaXNUb3BCYXJVcGRhdGVkIiwic2V0SXNUb3BCYXJVcGRhdGVkIiwiZXJyb3IiLCJzZXRFcnJvciIsImluaXRpYWxpemVkIiwicG9sbGluZ0ludGVydmFsIiwiZmV0Y2hTZXR0aW5ncyIsInJlc3BvbnNlIiwiZmV0Y2giLCJoZWFkZXJzIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0FQSV9LRVkiLCJvayIsImVycm9yRGF0YSIsImpzb24iLCJFcnJvciIsImRldGFpbCIsIm5ld1NldHRpbmdzIiwiY29uc29sZSIsImxvZyIsInByZXYiLCJjdXJyZW50Iiwic2V0Q2FwdHVyZVNldHRpbmdzIiwibWVzc2FnZSIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJ0eXBlIiwidXNlcklkIiwid2luZG93IiwiZGlzcGF0Y2hFdmVudCIsInNhdmVkU2V0dGluZ3MiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicGFyc2VkU2V0dGluZ3MiLCJKU09OIiwicGFyc2UiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiaGFuZGxlVXNlcklkQ2hhbmdlIiwiaGFuZGxlVXNlcklkRGVsZXRpb24iLCJsYXN0VXNlcklkIiwibWV0aG9kIiwiYm9keSIsImNvb2tpZSIsInNob3ciLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImhhbmRsZVNldHRpbmdzVXBkYXRlIiwidGltZXMiLCJkZWxheSIsInVuZGVmaW5lZCIsImltYWdlX3BhdGgiLCJ1cGRhdGVJbWFnZSIsInNldF90aW1lUmFuZG9tSW1hZ2UiLCJldmVyeV9zZXQiLCJ6b29tX3BlcmNlbnRhZ2UiLCJwb3NpdGlvbl96b29tIiwic3RhdGVfaXNQcm9jZXNzT24iLCJjdXJyZW50bHlQYWdlIiwiZnJlZVN0YXRlIiwic2F2ZVRvQmFja2VuZCIsInVwZGF0ZVNldHRpbmdzIiwidXBkYXRlZFNldHRpbmdzIiwiQWRtaW5TZXR0aW5ncyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/adminSettings.js\n"));

/***/ })

});
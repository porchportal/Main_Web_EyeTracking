"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_pages-dir-browser_pages_collected-dataset_components-gui_WhiteScreenMain_js"],{

/***/ "(pages-dir-browser)/./pages/collected-dataset/components-gui/Action/countSave.js":
/*!********************************************************************!*\
  !*** ./pages/collected-dataset/components-gui/Action/countSave.js ***!
  \********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   captureAndPreviewProcess: () => (/* binding */ captureAndPreviewProcess),\n/* harmony export */   captureImages: () => (/* binding */ captureImages),\n/* harmony export */   createCountdownElement: () => (/* binding */ createCountdownElement),\n/* harmony export */   drawRedDot: () => (/* binding */ drawRedDot),\n/* harmony export */   getRandomPosition: () => (/* binding */ getRandomPosition),\n/* harmony export */   initializeCanvas: () => (/* binding */ initializeCanvas),\n/* harmony export */   runCountdown: () => (/* binding */ runCountdown),\n/* harmony export */   showCapturePreview: () => (/* binding */ showCapturePreview)\n/* harmony export */ });\n// countSave.js\n// Shared functionality for countdown and image capture processes\n/**\n * Creates and displays a countdown element above a dot position\n * @param {Object} position - {x, y} position of the dot\n * @param {DOMRect} canvasRect - getBoundingClientRect() of the canvas\n * @param {Function} onComplete - Callback to execute when countdown finishes\n * @returns {HTMLElement} - The created countdown element\n */ const createCountdownElement = (position, canvasRect)=>{\n    if (!position || typeof position.x !== 'number' || typeof position.y !== 'number') {\n        console.warn('[createCountdownElement] Invalid position:', position);\n        return null;\n    }\n    const existingCountdowns = document.querySelectorAll('.calibrate-countdown, .forced-countdown, .center-countdown-backup');\n    existingCountdowns.forEach((el)=>el.remove());\n    const absoluteX = canvasRect.left + position.x;\n    const absoluteY = canvasRect.top + position.y;\n    const countdownElement = document.createElement('div');\n    countdownElement.className = 'dot-countdown';\n    countdownElement.style.cssText = \"\\n      position: fixed;\\n      left: \".concat(absoluteX, \"px;\\n      top: \").concat(absoluteY - 60, \"px;\\n      transform: translateX(-50%);\\n      color: red;\\n      font-size: 36px;\\n      font-weight: bold;\\n      text-shadow: 0 0 10px white, 0 0 20px white;\\n      z-index: 9999;\\n      background-color: rgba(255, 255, 255, 0.8);\\n      border: 2px solid red;\\n      border-radius: 50%;\\n      width: 50px;\\n      height: 50px;\\n      display: flex;\\n      justify-content: center;\\n      align-items: center;\\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\n    \");\n    document.body.appendChild(countdownElement);\n    return countdownElement;\n};\n/**\n * Runs a countdown process that displays 3-2-1 above a dot\n * @param {Object} position - {x, y} position of the dot\n * @param {HTMLCanvasElement} canvas - Canvas element with the dot\n * @param {Function} onStatusUpdate - Function to update status messages\n * @param {Function} onComplete - Callback to execute when countdown completes\n */ const runCountdown = async (position, canvas, onStatusUpdate, onComplete)=>{\n    if (!position || typeof position.x !== 'number' || typeof position.y !== 'number') {\n        console.warn('[runCountdown] Invalid position:', position);\n        onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n            processStatus: \"Invalid dot position\",\n            countdownValue: null,\n            isCapturing: false\n        });\n        return;\n    }\n    const canvasRect = canvas.getBoundingClientRect();\n    const countdownElement = createCountdownElement(position, canvasRect);\n    if (!countdownElement) {\n        console.warn('[runCountdown] Countdown element could not be created.');\n        return;\n    }\n    const ctx = canvas.getContext('2d');\n    drawRedDot(ctx, position.x, position.y);\n    let count = 3;\n    countdownElement.textContent = count;\n    onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n        processStatus: \"Countdown\",\n        countdownValue: count,\n        isCapturing: true\n    });\n    return new Promise((resolve)=>{\n        const countdownInterval = setInterval(()=>{\n            count--;\n            if (count <= 0) {\n                clearInterval(countdownInterval);\n                countdownElement.textContent = \"✓\";\n                onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                    countdownValue: \"Capturing...\",\n                    processStatus: \"Capturing image...\",\n                    isCapturing: true\n                });\n                setTimeout(()=>{\n                    if (countdownElement.parentNode) {\n                        countdownElement.parentNode.removeChild(countdownElement);\n                    }\n                    if (position && typeof position.x === 'number' && typeof position.y === 'number') {\n                        drawRedDot(ctx, position.x, position.y);\n                    } else {\n                        console.warn(\"[runCountdown] Position is null after countdown\", position);\n                    }\n                    if (onComplete) {\n                        onComplete();\n                    }\n                    resolve();\n                }, 300);\n            } else {\n                countdownElement.textContent = count;\n                onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                    processStatus: \"Countdown\",\n                    countdownValue: count,\n                    isCapturing: true\n                });\n            }\n        }, 800);\n    });\n};\n/**\n   * Captures images from both canvas and webcam\n   * @param {Object} options - Capture options\n   * @param {React.RefObject} options.canvasRef - Ref to the canvas element\n   * @param {Object} options.position - {x, y} position of the dot\n   * @param {number} options.captureCounter - Current capture counter\n   * @param {Function} options.saveImageToServer - Function to save image to server\n   * @param {Function} options.setCaptureCounter - Function to update capture counter\n   * @param {Function} options.setProcessStatus - Function to update process status\n   * @param {Function} options.toggleTopBar - Function to toggle top bar visibility\n   * @param {string} options.captureFolder - Folder to save captures in\n   * @returns {Object} - Result with captured image data\n   */ const captureImages = async (options)=>{\n    const { canvasRef, position, captureCounter, saveImageToServer, setCaptureCounter, setProcessStatus, toggleTopBar, captureFolder = 'eye_tracking_captures' } = options;\n    try {\n        const counter = String(captureCounter).padStart(3, '0');\n        const screenFilename = \"screen_\".concat(counter, \".jpg\");\n        const webcamFilename = \"webcam_\".concat(counter, \".jpg\");\n        const parameterFilename = \"parameter_\".concat(counter, \".csv\");\n        console.log(\"Starting capture process with counter: \".concat(counter));\n        console.log(\"Dot position: x=\".concat(position.x, \", y=\").concat(position.y));\n        let screenImageData = null;\n        let webcamImageData = null;\n        let usedCaptureNumber = captureCounter;\n        // === 1. Capture screen image from canvas ===\n        const canvas = canvasRef.current;\n        if (canvas) {\n            try {\n                const ctx = canvas.getContext('2d');\n                // ✅ Make sure the red dot is drawn RIGHT before screen capture\n                drawRedDot(ctx, position.x, position.y);\n                console.log(\"Canvas dimensions: \".concat(canvas.width, \"x\").concat(canvas.height));\n                screenImageData = canvas.toDataURL('image/png');\n                console.log(\"Screen image captured, size: \".concat(screenImageData.length, \" chars\"));\n                if (saveImageToServer) {\n                    const screenResponse = await saveImageToServer(screenImageData, screenFilename, 'screen', captureFolder);\n                    if (screenResponse && screenResponse.captureNumber) {\n                        usedCaptureNumber = screenResponse.captureNumber;\n                        console.log(\"Server assigned capture number: \".concat(usedCaptureNumber));\n                    }\n                }\n            } catch (screenError) {\n                console.error(\"Error capturing or saving screen image:\", screenError);\n            }\n        } else {\n            console.error(\"Canvas reference is null, cannot capture screen\");\n        }\n        // === 2. Capture webcam image ===\n        try {\n            console.log(\"Attempting to capture webcam silently\");\n            const videoElement = window.videoElement || document.querySelector('video');\n            if (videoElement && videoElement.readyState >= 2) {\n                const tempCanvas = document.createElement('canvas');\n                const ctx = tempCanvas.getContext('2d');\n                tempCanvas.width = videoElement.videoWidth || 640;\n                tempCanvas.height = videoElement.videoHeight || 480;\n                ctx.drawImage(videoElement, 0, 0, tempCanvas.width, tempCanvas.height);\n                webcamImageData = tempCanvas.toDataURL('image/png');\n                if (saveImageToServer) {\n                    await saveImageToServer(webcamImageData, \"webcam_\".concat(String(usedCaptureNumber).padStart(3, '0'), \".jpg\"), 'webcam', captureFolder);\n                }\n            } else {\n                const stream = await navigator.mediaDevices.getUserMedia({\n                    video: true,\n                    audio: false\n                });\n                const tempVideo = document.createElement('video');\n                tempVideo.autoplay = true;\n                tempVideo.playsInline = true;\n                tempVideo.muted = true;\n                tempVideo.style.position = 'absolute';\n                tempVideo.style.left = '-9999px';\n                tempVideo.style.opacity = '0';\n                document.body.appendChild(tempVideo);\n                tempVideo.srcObject = stream;\n                await new Promise((resolve)=>{\n                    const timeoutId = setTimeout(resolve, 1000);\n                    tempVideo.onloadeddata = ()=>{\n                        clearTimeout(timeoutId);\n                        resolve();\n                    };\n                });\n                await new Promise((resolve)=>setTimeout(resolve, 200));\n                const tempCanvas = document.createElement('canvas');\n                const ctx = tempCanvas.getContext('2d');\n                tempCanvas.width = tempVideo.videoWidth || 640;\n                tempCanvas.height = tempVideo.videoHeight || 480;\n                ctx.drawImage(tempVideo, 0, 0, tempCanvas.width, tempCanvas.height);\n                webcamImageData = tempCanvas.toDataURL('image/png');\n                if (saveImageToServer) {\n                    await saveImageToServer(webcamImageData, \"webcam_\".concat(String(usedCaptureNumber).padStart(3, '0'), \".jpg\"), 'webcam', captureFolder);\n                }\n                stream.getTracks().forEach((track)=>track.stop());\n                tempVideo.srcObject = null;\n                if (tempVideo.parentNode) {\n                    tempVideo.parentNode.removeChild(tempVideo);\n                }\n            }\n        } catch (webcamError) {\n            console.error(\"Error capturing webcam silently:\", webcamError);\n        }\n        // === 3. Save parameter CSV ===\n        try {\n            console.log(\"Creating parameter CSV\");\n            const csvData = [\n                \"name,value\",\n                \"dot_x,\".concat(position.x),\n                \"dot_y,\".concat(position.y),\n                \"canvas_width,\".concat(canvas ? canvas.width : 0),\n                \"canvas_height,\".concat(canvas ? canvas.height : 0),\n                \"window_width,\".concat(window.innerWidth),\n                \"window_height,\".concat(window.innerHeight),\n                \"timestamp,\".concat(new Date().toISOString())\n            ].join('\\n');\n            const csvBlob = new Blob([\n                csvData\n            ], {\n                type: 'text/csv'\n            });\n            const csvReader = new FileReader();\n            const csvDataUrl = await new Promise((resolve)=>{\n                csvReader.onloadend = ()=>resolve(csvReader.result);\n                csvReader.readAsDataURL(csvBlob);\n            });\n            if (saveImageToServer) {\n                await saveImageToServer(csvDataUrl, \"parameter_\".concat(String(usedCaptureNumber).padStart(3, '0'), \".csv\"), 'parameters', captureFolder);\n            }\n        } catch (csvError) {\n            console.error(\"Error saving parameter CSV:\", csvError);\n        }\n        // === 4. Update counter ===\n        if (setCaptureCounter) {\n            setCaptureCounter(usedCaptureNumber + 1);\n        }\n        // === 5. Set process status ===\n        if (setProcessStatus) {\n            setProcessStatus(\"Captured with dot at: x=\".concat(position.x, \", y=\").concat(position.y));\n        }\n        // === 6. Return capture data ===\n        return {\n            screenImage: screenImageData,\n            webcamImage: webcamImageData,\n            position,\n            captureNumber: usedCaptureNumber\n        };\n    } catch (error) {\n        console.error(\"Error during capture:\", error);\n        if (setProcessStatus) {\n            setProcessStatus(\"Error capturing images: \".concat(error.message));\n        }\n        throw error;\n    }\n};\n/**\n   * Display a preview of the captured images\n   * @param {string} screenImage - Data URL of the screen image\n   * @param {string} webcamImage - Data URL of the webcam image\n   * @param {Object} dotPosition - {x, y} position of the dot\n   */ const showCapturePreview = (screenImage, webcamImage, dotPosition)=>{\n    if (!screenImage && !webcamImage) {\n        console.warn(\"No images available to preview\");\n        return;\n    }\n    // Remove any existing preview containers first\n    try {\n        const existingPreviews = document.querySelectorAll('.capture-preview-container');\n        existingPreviews.forEach((preview)=>{\n            if (preview.parentNode) {\n                console.log(\"Removing existing preview container\");\n                preview.parentNode.removeChild(preview);\n            }\n        });\n    } catch (cleanupError) {\n        console.error(\"Error cleaning up existing previews:\", cleanupError);\n    }\n    // Create a new preview container\n    const previewContainer = document.createElement('div');\n    previewContainer.className = 'capture-preview-container';\n    previewContainer.style.cssText = \"\\n      position: fixed;\\n      top: 50%;\\n      left: 50%;\\n      transform: translate(-50%, -50%);\\n      display: flex;\\n      gap: 20px;\\n      background-color: rgba(0, 0, 0, 0.85);\\n      padding: 20px;\\n      border-radius: 12px;\\n      z-index: 999999;\\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.6);\\n    \";\n    // Function to add an image to the preview\n    const addImagePreview = (image, label)=>{\n        try {\n            const preview = document.createElement('div');\n            preview.style.cssText = \"\\n          display: flex;\\n          flex-direction: column;\\n          align-items: center;\\n        \";\n            const img = document.createElement('img');\n            img.src = image;\n            img.alt = label;\n            img.style.cssText = \"\\n          max-width: 320px;\\n          max-height: 240px;\\n          border: 3px solid white;\\n          border-radius: 8px;\\n          background-color: #333;\\n        \";\n            const labelElement = document.createElement('div');\n            labelElement.textContent = label;\n            labelElement.style.cssText = \"\\n          color: white;\\n          font-size: 14px;\\n          margin-top: 10px;\\n          font-weight: bold;\\n        \";\n            preview.appendChild(img);\n            preview.appendChild(labelElement);\n            previewContainer.appendChild(preview);\n            return true;\n        } catch (error) {\n            console.error(\"Error adding \".concat(label, \" preview:\"), error);\n            return false;\n        }\n    };\n    // Add debug info div\n    const debugInfo = document.createElement('div');\n    debugInfo.style.cssText = \"\\n      position: absolute;\\n      top: -30px;\\n      left: 0;\\n      width: 100%;\\n      color: white;\\n      font-size: 12px;\\n      text-align: center;\\n    \";\n    debugInfo.textContent = \"Screen: \".concat(screenImage ? 'YES' : 'NO', \", Webcam: \").concat(webcamImage ? 'YES' : 'NO');\n    previewContainer.appendChild(debugInfo);\n    // Add both images to preview if available\n    if (screenImage) {\n        addImagePreview(screenImage, 'Screen Capture');\n    }\n    if (webcamImage) {\n        addImagePreview(webcamImage, 'Webcam Capture');\n    }\n    // Add dot position info if available\n    if (dotPosition) {\n        const positionInfo = document.createElement('div');\n        positionInfo.textContent = \"Dot position: x=\".concat(Math.round(dotPosition.x), \", y=\").concat(Math.round(dotPosition.y));\n        positionInfo.style.cssText = \"\\n        color: #ffcc00;\\n        font-size: 14px;\\n        position: absolute;\\n        top: -50px;\\n        left: 0;\\n        width: 100%;\\n        text-align: center;\\n      \";\n        previewContainer.appendChild(positionInfo);\n    }\n    // Add countdown timer\n    const timerElement = document.createElement('div');\n    timerElement.textContent = '2.0s';\n    timerElement.style.cssText = \"\\n      position: absolute;\\n      bottom: -25px;\\n      right: 20px;\\n      color: white;\\n      font-size: 12px;\\n      background-color: rgba(0, 0, 0, 0.7);\\n      padding: 3px 8px;\\n      border-radius: 4px;\\n    \";\n    previewContainer.appendChild(timerElement);\n    // Add to document body\n    document.body.appendChild(previewContainer);\n    // Countdown and remove the preview after 2 seconds\n    let timeLeft = 2.0;\n    const interval = setInterval(()=>{\n        timeLeft -= 0.1;\n        if (timeLeft <= 0) {\n            clearInterval(interval);\n            // Fade out\n            previewContainer.style.transition = 'opacity 0.3s ease';\n            previewContainer.style.opacity = '0';\n            // Remove after fade\n            setTimeout(()=>{\n                if (previewContainer.parentNode) {\n                    previewContainer.parentNode.removeChild(previewContainer);\n                }\n            }, 300);\n        } else {\n            timerElement.textContent = \"\".concat(timeLeft.toFixed(1), \"s\");\n        }\n    }, 100);\n    // Safety cleanup after 5 seconds in case anything goes wrong\n    setTimeout(()=>{\n        if (previewContainer.parentNode) {\n            previewContainer.parentNode.removeChild(previewContainer);\n        }\n    }, 5000);\n    return previewContainer;\n};\n/**\n   * Complete capture and preview process\n   * @param {Object} options - Process options\n   * @param {React.RefObject} options.canvasRef - Ref to the canvas element\n   * @param {Object} options.position - {x, y} position of the dot\n   * @param {number} options.captureCounter - Current capture counter\n   * @param {Function} options.saveImageToServer - Function to save image to server\n   * @param {Function} options.setCaptureCounter - Function to update capture counter\n   * @param {Function} options.setProcessStatus - Function to update process status\n   * @param {Function} options.toggleTopBar - Function to toggle top bar visibility\n   * @param {Function} options.onStatusUpdate - Function to update status\n   * @param {string} options.captureFolder - Folder to save captures in\n   */ const captureAndPreviewProcess = async (options)=>{\n    const { canvasRef, position, captureCounter, saveImageToServer, setCaptureCounter, setProcessStatus, toggleTopBar, onStatusUpdate, captureFolder = 'eye_tracking_captures' } = options;\n    if (!position || typeof position.x !== 'number' || typeof position.y !== 'number') {\n        console.error('[captureImages] Invalid position:', position);\n        setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus('Error: Invalid dot position (captureImages)');\n        return;\n    }\n    let dotInterval;\n    try {\n        // Make sure we have a valid canvas reference\n        if (!(canvasRef === null || canvasRef === void 0 ? void 0 : canvasRef.current)) {\n            throw new Error(\"Canvas reference is invalid\");\n        }\n        // Draw the dot in its position first to ensure it's visible\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        // Initially draw the dot\n        drawRedDot(ctx, position.x, position.y);\n        // Create an interval to keep redrawing the dot to ensure it stays visible\n        dotInterval = setInterval(()=>{\n            drawRedDot(ctx, position.x, position.y);\n        }, 200);\n        // First run the countdown\n        //   await runCountdown(\n        //     position,\n        //     canvasRef.current,\n        //     onStatusUpdate, \n        //     null // No callback here as we'll handle it directly\n        //   );\n        await runCountdown(position, canvas, onStatusUpdate, async ()=>{\n            try {\n                // ✅ Validate again here if needed\n                if (!position || typeof position.x !== 'number' || typeof position.y !== 'number') {\n                    throw new Error('Position is missing after countdown');\n                }\n                // Capture both canvas and webcam\n                const result = await captureImages({\n                    canvasRef,\n                    position,\n                    captureCounter,\n                    saveImageToServer,\n                    setCaptureCounter,\n                    setProcessStatus,\n                    toggleTopBar,\n                    captureFolder\n                });\n                return result;\n            } catch (err) {\n                console.error('[captureAndPreviewProcess] Error during capture:', err);\n                setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(\"Error: \".concat(err.message));\n            }\n        });\n        // Make sure dot is visible after countdown\n        drawRedDot(ctx, position.x, position.y);\n        // Capture the images\n        const captureResult = await captureImages({\n            canvasRef,\n            position,\n            captureCounter,\n            saveImageToServer,\n            setCaptureCounter,\n            setProcessStatus,\n            toggleTopBar,\n            captureFolder\n        });\n        // Make sure dot is visible after capturing\n        drawRedDot(ctx, position.x, position.y);\n        // Show preview of captured images\n        showCapturePreview(captureResult.screenImage, captureResult.webcamImage, captureResult.position);\n        // Make sure dot is visible after preview\n        drawRedDot(ctx, position.x, position.y);\n        // Show TopBar again after a delay\n        setTimeout(()=>{\n            if (typeof toggleTopBar === 'function') {\n                toggleTopBar(true);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(true);\n            }\n            // Make sure dot is still visible even after showing TopBar\n            drawRedDot(ctx, position.x, position.y);\n        }, 2500);\n        return captureResult;\n    } catch (error) {\n        console.error(\"Error in capture and preview process:\", error);\n        if (setProcessStatus) {\n            setProcessStatus(\"Error: \".concat(error.message));\n        }\n        // Show TopBar again even if error occurred\n        setTimeout(()=>{\n            if (typeof toggleTopBar === 'function') {\n                toggleTopBar(true);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(true);\n            }\n        }, 1500);\n        throw error;\n    } finally{\n        // Clear the dot redraw interval if it was created\n        if (dotInterval) {\n            clearInterval(dotInterval);\n        }\n    }\n};\n/**\n   * Generate a random dot position within the canvas\n   * @param {HTMLCanvasElement} canvas - Canvas element\n   * @param {number} padding - Padding from the edges\n   * @returns {Object} - {x, y} position\n   */ const getRandomPosition = function(canvas) {\n    let padding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 40;\n    if (!canvas) return {\n        x: 100,\n        y: 100\n    }; // Fallback position\n    const width = canvas.width || 400; // Fallback if width is 0\n    const height = canvas.height || 300; // Fallback if height is 0\n    return {\n        x: Math.floor(Math.random() * (width - 2 * padding)) + padding,\n        y: Math.floor(Math.random() * (height - 2 * padding)) + padding\n    };\n};\n/**\n   * Draw a red dot on the canvas\n   * @param {CanvasRenderingContext2D} ctx - Canvas 2D context\n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   * @param {number} radius - Dot radius\n   * @param {boolean} clearCanvas - Whether to clear the canvas before drawing (default: true)\n   * @returns {Object} - {x, y} position\n   */ const drawRedDot = function(ctx, x, y) {\n    let radius = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 12, clearCanvas = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;\n    const canvas = ctx.canvas;\n    // Clear the canvas if requested (default behavior)\n    if (clearCanvas) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n    // Draw the dot with a bright red color\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = 'red';\n    ctx.fill();\n    // Add glow effect for better visibility\n    ctx.beginPath();\n    ctx.arc(x, y, radius + 3, 0, Math.PI * 2);\n    ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)';\n    ctx.lineWidth = 3;\n    ctx.stroke();\n    // Add a second larger glow for even better visibility\n    ctx.beginPath();\n    ctx.arc(x, y, radius + 6, 0, Math.PI * 2);\n    ctx.strokeStyle = 'rgba(255, 0, 0, 0.3)';\n    ctx.lineWidth = 2;\n    ctx.stroke();\n    return {\n        x,\n        y\n    };\n};\n/**\n   * Initialize canvas for drawing\n   * @param {HTMLCanvasElement} canvas - Canvas element\n   * @param {HTMLElement} parent - Parent element for dimensions\n   * @returns {boolean} - Success status\n   */ const initializeCanvas = (canvas, parent)=>{\n    if (!canvas || !parent) return false;\n    // Set canvas dimensions to match parent\n    canvas.width = parent.clientWidth;\n    canvas.height = parent.clientHeight;\n    // Clear canvas and set white background\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    return true;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/collected-dataset/components-gui/Action/countSave.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./pages/collected-dataset/components-gui/WhiteScreenMain.js":
/*!*******************************************************************!*\
  !*** ./pages/collected-dataset/components-gui/WhiteScreenMain.js ***!
  \*******************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dynamic */ \"(pages-dir-browser)/./node_modules/next/dynamic.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Action_countSave__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Action/countSave */ \"(pages-dir-browser)/./pages/collected-dataset/components-gui/Action/countSave.js\");\n// components-gui/WhiteScreenMain.js\n\nvar _s = $RefreshSig$();\n\n\n// Import the shared functionality\n\n// Create a client-only version of the component\nconst WhiteScreenMain = (param)=>{\n    let { onStatusUpdate, triggerCameraAccess, onButtonClick, canvasRef = null, toggleTopBar } = param;\n    _s();\n    // Use provided canvasRef or create a new one\n    const internalCanvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const activeCanvasRef = canvasRef || internalCanvasRef;\n    // Current dot state\n    const [currentDot, setCurrentDot] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isCapturing, setIsCapturing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [countdownValue, setCountdownValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [remainingCaptures, setRemainingCaptures] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [processStatus, setProcessStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    // Track capture session\n    const [captureCounter, setCaptureCounter] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [captureFolder] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('eye_tracking_captures'); // Fixed folder name\n    // Configuration state\n    const [randomTimes, setRandomTimes] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [delaySeconds, setDelaySeconds] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(3);\n    const [calibrationPoints, setCalibrationPoints] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentCalibrationIndex, setCurrentCalibrationIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Debug state to make visibility easier to track\n    const [canvasVisible, setCanvasVisible] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [forceShowCountdown, setForceShowCountdown] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Set up canvas when component mounts\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            // Skip if this runs during SSR\n            if (false) {}\n            const canvas = activeCanvasRef.current;\n            if (!canvas) {\n                console.error(\"Canvas ref is null in setup effect\");\n                return;\n            }\n            console.log(\"Canvas setup effect running\", {\n                hasCanvas: !!canvas,\n                canvasHeight: canvas.height,\n                canvasWidth: canvas.width\n            });\n            // Function to update canvas dimensions\n            const updateDimensions = {\n                \"WhiteScreenMain.useEffect.updateDimensions\": ()=>{\n                    const parent = canvas.parentElement;\n                    if (!parent) {\n                        console.error(\"Canvas parent is null\");\n                        return;\n                    }\n                    // Get the parent container dimensions\n                    const parentWidth = parent.clientWidth;\n                    const parentHeight = parent.clientHeight;\n                    console.log(\"Resizing canvas to:\", {\n                        parentWidth,\n                        parentHeight\n                    });\n                    canvas.width = parentWidth;\n                    canvas.height = parentHeight;\n                    // Clear the canvas and set background\n                    const ctx = canvas.getContext('2d');\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(0, 0, canvas.width, canvas.height);\n                    // Redraw current dot if exists\n                    if (currentDot) {\n                        console.log(\"Redrawing dot after resize:\", currentDot);\n                        drawDot(currentDot.x, currentDot.y, 'red', 8);\n                    }\n                    setCanvasVisible(true);\n                }\n            }[\"WhiteScreenMain.useEffect.updateDimensions\"];\n            // Initial sizing\n            updateDimensions();\n            // Listen for window resize\n            window.addEventListener('resize', updateDimensions);\n            // Clean up\n            return ({\n                \"WhiteScreenMain.useEffect\": ()=>{\n                    window.removeEventListener('resize', updateDimensions);\n                }\n            })[\"WhiteScreenMain.useEffect\"];\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        activeCanvasRef,\n        currentDot\n    ]);\n    // Draw a dot on the canvas\n    const drawDot = function(x, y) {\n        let color = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'red', radius = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 12;\n        console.log(\"Drawing dot at:\", {\n            x,\n            y,\n            color,\n            radius\n        });\n        const canvas = activeCanvasRef.current;\n        if (!canvas) {\n            console.error(\"Canvas ref is null in drawDot\");\n            return null;\n        }\n        const ctx = canvas.getContext('2d');\n        // Clear canvas\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        // Draw dot with glow effect\n        ctx.beginPath();\n        ctx.arc(x, y, radius, 0, Math.PI * 2);\n        ctx.fillStyle = color;\n        ctx.fill();\n        // Add glow effect\n        ctx.beginPath();\n        ctx.arc(x, y, radius + 5, 0, Math.PI * 2); // Increased glow\n        ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)'; // More visible glow\n        ctx.lineWidth = 3; // Thicker line\n        ctx.stroke();\n        // Store current dot position - using callback form to ensure it updates\n        setCurrentDot((prev)=>{\n            console.log(\"Updating currentDot state from:\", prev, \"to:\", {\n                x,\n                y\n            });\n            return {\n                x,\n                y\n            };\n        });\n        return {\n            x,\n            y\n        };\n    };\n    // Clear the canvas\n    const clearCanvas = ()=>{\n        console.log(\"Clearing canvas\");\n        const canvas = activeCanvasRef.current;\n        if (!canvas) {\n            console.error(\"Canvas ref is null in clearCanvas\");\n            return;\n        }\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        setCurrentDot(null);\n        setCountdownValue(null);\n        setForceShowCountdown(false);\n        setProcessStatus('Canvas cleared');\n        // Clear the message after a delay\n        setTimeout(()=>{\n            setProcessStatus('');\n        }, 1500);\n    };\n    // Save an image to the server\n    const saveImageToServer = async (imageData, filename, type)=>{\n        try {\n            console.log(\"Attempting to save \".concat(type, \" image: \").concat(filename));\n            const response = await fetch('/api/save-capture', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    imageData,\n                    filename,\n                    type,\n                    folder: captureFolder\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Server responded with \".concat(response.status));\n            }\n            const result = await response.json();\n            console.log(\"Saved \".concat(type, \" image:\"), result);\n            // If the server returns a new capture number, update our counter\n            if (result.captureNumber) {\n                setCaptureCounter(result.captureNumber + 1);\n            }\n            return result;\n        } catch (error) {\n            console.error(\"Error saving \".concat(type, \" image:\"), error);\n            throw error;\n        }\n    };\n    // Updated captureImage function using countSave module\n    const captureImage = async ()=>{\n        console.log(\"Capturing images...\");\n        setIsCapturing(true);\n        try {\n            // Use the shared capture function\n            const captureResult = await (0,_Action_countSave__WEBPACK_IMPORTED_MODULE_3__.captureImages)({\n                canvasRef: activeCanvasRef,\n                position: currentDot,\n                captureCounter,\n                saveImageToServer,\n                setCaptureCounter,\n                setProcessStatus,\n                toggleTopBar,\n                captureFolder: 'eye_tracking_captures'\n            });\n            // Show preview using the shared function\n            (0,_Action_countSave__WEBPACK_IMPORTED_MODULE_3__.showCapturePreview)(captureResult.screenImage, captureResult.webcamImage, currentDot);\n            // Update status\n            setIsCapturing(false);\n            setProcessStatus(\"Captured with dot at: x=\".concat(currentDot === null || currentDot === void 0 ? void 0 : currentDot.x, \", y=\").concat(currentDot === null || currentDot === void 0 ? void 0 : currentDot.y));\n            // Update parent component\n            if (onStatusUpdate) {\n                onStatusUpdate(\"Images and parameters saved for capture #\".concat(captureCounter));\n            }\n            // Show TopBar again after capture with a delay to let preview finish\n            setTimeout(()=>{\n                console.log(\"Showing TopBar after capture\");\n                if (typeof toggleTopBar === 'function') {\n                    toggleTopBar(true);\n                } else if ( true && window.toggleTopBar) {\n                    window.toggleTopBar(true);\n                }\n            }, 2500);\n        } catch (error) {\n            console.error('Error during capture:', error);\n            setIsCapturing(false);\n            setProcessStatus('Error capturing images: ' + error.message);\n        }\n        // Clear status after a delay\n        setTimeout(()=>{\n            setProcessStatus('');\n        }, 3000);\n    };\n    // Random Dot action\n    const handleRandomDot = ()=>{\n        // Hide the TopBar before showing dot\n        if (typeof toggleTopBar === 'function') {\n            toggleTopBar(false);\n        } else if ( true && window.toggleTopBar) {\n            toggleTopBar(false);\n        }\n        setIsCapturing(true);\n        setProcessStatus('Generating random dot...');\n        // Give the component time to update\n        setTimeout(async ()=>{\n            const canvas = activeCanvasRef.current;\n            if (canvas) {\n                // Make sure canvas dimensions are properly set\n                const parent = canvas.parentElement;\n                (0,_Action_countSave__WEBPACK_IMPORTED_MODULE_3__.initializeCanvas)(canvas, parent);\n                // Generate random position\n                const position = (0,_Action_countSave__WEBPACK_IMPORTED_MODULE_3__.getRandomPosition)(canvas);\n                // Draw the dot\n                const ctx = canvas.getContext('2d');\n                (0,_Action_countSave__WEBPACK_IMPORTED_MODULE_3__.drawRedDot)(ctx, position.x, position.y);\n                // Store current dot position directly\n                setCurrentDot(position);\n                try {\n                    // Use the shared capture and preview process\n                    await (0,_Action_countSave__WEBPACK_IMPORTED_MODULE_3__.captureAndPreviewProcess)({\n                        canvasRef: activeCanvasRef,\n                        position,\n                        captureCounter,\n                        saveImageToServer,\n                        setCaptureCounter,\n                        setProcessStatus,\n                        toggleTopBar,\n                        onStatusUpdate: (status)=>{\n                            if (onStatusUpdate) {\n                                onStatusUpdate(status);\n                            }\n                        },\n                        captureFolder: 'eye_tracking_captures'\n                    });\n                    // Set capturing state to false after a delay\n                    setTimeout(()=>{\n                        setIsCapturing(false);\n                    }, 2200);\n                } catch (error) {\n                    console.error(\"Error in capture and preview process:\", error);\n                    setIsCapturing(false);\n                    setProcessStatus('Error capturing images: ' + error.message);\n                    // Clear error message after a delay\n                    setTimeout(()=>{\n                        setProcessStatus('');\n                    }, 3000);\n                }\n            }\n        }, 200);\n    };\n    // Multiple random dots sequence - also updated to use countSave functions\n    const handleSetRandom = ()=>{\n        if (isCapturing) return;\n        // Parse input values (use defaults if invalid)\n        const times = parseInt(randomTimes) || 1;\n        const delay = parseInt(delaySeconds) || 3;\n        if (times <= 0 || delay <= 0) {\n            setProcessStatus('Please use positive values for times and delay');\n            return;\n        }\n        setIsCapturing(true);\n        setRemainingCaptures(times);\n        setProcessStatus(\"Starting \".concat(times, \" random captures...\"));\n        // Start sequence\n        scheduleRandomCaptures(times, times, delay);\n    };\n    // Schedule sequence of random captures - updated with countSave\n    const scheduleRandomCaptures = (remaining, total, delay)=>{\n        if (remaining <= 0) {\n            setIsCapturing(false);\n            setRemainingCaptures(0);\n            setProcessStatus('Random capture sequence completed');\n            // Clear status after a delay\n            setTimeout(()=>{\n                setProcessStatus('');\n            }, 2000);\n            return;\n        }\n        setRemainingCaptures(remaining);\n        setProcessStatus(\"Capture \".concat(total - remaining + 1, \" of \").concat(total));\n        // Generate random position and draw\n        const canvas = activeCanvasRef.current;\n        const ctx = canvas.getContext('2d');\n        const position = (0,_Action_countSave__WEBPACK_IMPORTED_MODULE_3__.getRandomPosition)(canvas);\n        (0,_Action_countSave__WEBPACK_IMPORTED_MODULE_3__.drawRedDot)(ctx, position.x, position.y);\n        setCurrentDot(position);\n        // Use shared capture and preview process\n        (0,_Action_countSave__WEBPACK_IMPORTED_MODULE_3__.captureAndPreviewProcess)({\n            canvasRef: activeCanvasRef,\n            position,\n            captureCounter,\n            saveImageToServer,\n            setCaptureCounter,\n            setProcessStatus,\n            toggleTopBar,\n            onStatusUpdate: (status)=>{\n                if (onStatusUpdate) {\n                    onStatusUpdate(status);\n                }\n            },\n            captureFolder: 'eye_tracking_captures'\n        }).then(()=>{\n            // Schedule next capture\n            setTimeout(()=>{\n                scheduleRandomCaptures(remaining - 1, total, delay);\n            }, delay * 1000);\n        }).catch((error)=>{\n            console.error('Error during random capture:', error);\n            setIsCapturing(false);\n            setProcessStatus('Error: ' + error.message);\n            // Clear error message after a delay\n            setTimeout(()=>{\n                setProcessStatus('');\n            }, 3000);\n        });\n    };\n    // Generate calibration points based on canvas dimensions\n    const generateCalibrationPoints = (width, height)=>{\n        if (!width || !height || width <= 0 || height <= 0) {\n            console.error(\"generateCalibrationPoints: Invalid canvas dimensions\", {\n                width,\n                height\n            });\n            return [];\n        }\n        const conditionalRound = (dimension, percentage)=>Math.round(dimension * percentage);\n        // Outer frame (12% from edges)\n        const xLeftOuter = conditionalRound(width, 0.12);\n        const xRightOuter = width - xLeftOuter;\n        const yTopOuter = conditionalRound(height, 0.12);\n        const yBottomOuter = height - yTopOuter;\n        // Inner frame (26% from edges)\n        const xLeftInner = conditionalRound(width, 0.26);\n        const xRightInner = width - xLeftInner;\n        const yTopInner = conditionalRound(height, 0.26);\n        const yBottomInner = height - yTopInner;\n        const xCenter = Math.floor(width / 2);\n        const yCenter = Math.floor(height / 2);\n        return [\n            // Outer frame (8 points)\n            {\n                x: xLeftOuter,\n                y: yTopOuter,\n                label: \"Outer Top-Left\"\n            },\n            {\n                x: xCenter,\n                y: yTopOuter,\n                label: \"Outer Top-Center\"\n            },\n            {\n                x: xRightOuter,\n                y: yTopOuter,\n                label: \"Outer Top-Right\"\n            },\n            {\n                x: xLeftOuter,\n                y: yCenter,\n                label: \"Outer Middle-Left\"\n            },\n            {\n                x: xRightOuter,\n                y: yCenter,\n                label: \"Outer Middle-Right\"\n            },\n            {\n                x: xLeftOuter,\n                y: yBottomOuter,\n                label: \"Outer Bottom-Left\"\n            },\n            {\n                x: xCenter,\n                y: yBottomOuter,\n                label: \"Outer Bottom-Center\"\n            },\n            {\n                x: xRightOuter,\n                y: yBottomOuter,\n                label: \"Outer Bottom-Right\"\n            },\n            // Inner frame (8 points)\n            {\n                x: xLeftInner,\n                y: yTopInner,\n                label: \"Inner Top-Left\"\n            },\n            {\n                x: xCenter,\n                y: yTopInner,\n                label: \"Inner Top-Center\"\n            },\n            {\n                x: xRightInner,\n                y: yTopInner,\n                label: \"Inner Top-Right\"\n            },\n            {\n                x: xLeftInner,\n                y: yCenter,\n                label: \"Inner Middle-Left\"\n            },\n            {\n                x: xRightInner,\n                y: yCenter,\n                label: \"Inner Middle-Right\"\n            },\n            {\n                x: xLeftInner,\n                y: yBottomInner,\n                label: \"Inner Bottom-Left\"\n            },\n            {\n                x: xCenter,\n                y: yBottomInner,\n                label: \"Inner Bottom-Center\"\n            },\n            {\n                x: xRightInner,\n                y: yBottomInner,\n                label: \"Inner Bottom-Right\"\n            }\n        ];\n    };\n    // Handle Set Calibrate action\n    const handleSetCalibrate = async ()=>{\n        try {\n            // STEP 1: HIDE THE TOP BAR IMMEDIATELY (before anything else happens)\n            if (typeof toggleTopBar === 'function') {\n                toggleTopBar(false);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(false);\n            }\n            // Add a small delay to ensure UI updates\n            await new Promise((resolve)=>setTimeout(resolve, 50));\n            // STEP 2: Initial setup\n            setIsCapturing(true);\n            setProcessStatus('Starting calibration sequence...');\n            if (onStatusUpdate) {\n                onStatusUpdate({\n                    processStatus: 'Starting calibration sequence',\n                    isCapturing: true\n                });\n            }\n            // Create a status indicator\n            const statusIndicator = document.createElement('div');\n            statusIndicator.className = 'calibrate-status-indicator';\n            statusIndicator.style.cssText = \"\\n        position: fixed;\\n        top: 10px;\\n        right: 10px;\\n        background-color: rgba(0, 102, 204, 0.9);\\n        color: white;\\n        font-size: 14px;\\n        font-weight: bold;\\n        padding: 8px 12px;\\n        border-radius: 6px;\\n        z-index: 9999;\\n        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\\n      \";\n            statusIndicator.textContent = 'Calibrate Set Active: Initializing...';\n            document.body.appendChild(statusIndicator);\n            // STEP 3: Setup canvas and generate points\n            const canvas = activeCanvasRef.current;\n            if (!canvas) {\n                throw new Error(\"Canvas reference is null\");\n            }\n            // Ensure canvas dimensions are set\n            const parent = canvas.parentElement;\n            if (parent) {\n                canvas.width = parent.clientWidth;\n                canvas.height = parent.clientHeight;\n            }\n            console.log(\"Canvas dimensions for calibration:\", {\n                width: canvas.width,\n                height: canvas.height\n            });\n            // Generate calibration points using the imported function\n            const points = generateCalibrationPoints(canvas.width, canvas.height);\n            setCalibrationPoints(points);\n            console.log(\"Generated \".concat(points.length, \" calibration points\"));\n            if (!points || points.length === 0) {\n                throw new Error('Failed to generate calibration points');\n            }\n            setRemainingCaptures(points.length);\n            // STEP 4: Process each calibration point in sequence\n            for(let i = 0; i < points.length; i++){\n                // Update state\n                setCurrentCalibrationIndex(i);\n                setRemainingCaptures(points.length - i);\n                // Update status\n                const statusText = \"Calibration \".concat(i + 1, \"/\").concat(points.length);\n                setProcessStatus(statusText);\n                statusIndicator.textContent = \"Calibrate Set Active: Processing point \".concat(i + 1, \"/\").concat(points.length);\n                if (onStatusUpdate) {\n                    onStatusUpdate(statusText);\n                }\n                // STEP 5: Draw the red dot FIRST, before any countdown\n                const point = points[i];\n                drawDot(point.x, point.y);\n                // Wait a moment to ensure dot is visible\n                await new Promise((resolve)=>setTimeout(resolve, 50));\n                // STEP 6: Get canvas position for absolute positioning\n                const canvasRect = canvas.getBoundingClientRect();\n                // Create countdown element above the dot\n                const countdownElement = document.createElement('div');\n                countdownElement.className = 'calibrate-countdown';\n                // Position it above the dot\n                const absoluteX = canvasRect.left + point.x;\n                const absoluteY = canvasRect.top + point.y;\n                countdownElement.style.cssText = \"\\n          position: fixed;\\n          left: \".concat(absoluteX, \"px;\\n          top: \").concat(absoluteY - 60, \"px;\\n          transform: translateX(-50%);\\n          color: red;\\n          font-size: 36px;\\n          font-weight: bold;\\n          text-shadow: 0 0 10px white, 0 0 20px white;\\n          z-index: 9999;\\n          background-color: rgba(255, 255, 255, 0.8);\\n          border: 2px solid red;\\n          border-radius: 50%;\\n          width: 50px;\\n          height: 50px;\\n          display: flex;\\n          justify-content: center;\\n          align-items: center;\\n          box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\n        \");\n                document.body.appendChild(countdownElement);\n                // STEP 7: Run 3-2-1 countdown (the dot stays visible during this time)\n                for(let count = 3; count > 0; count--){\n                    countdownElement.textContent = count;\n                    statusIndicator.textContent = \"Calibrate Set Active: countdown \".concat(count, \" (\").concat(i + 1, \"/\").concat(points.length, \")\");\n                    // Wait for next countdown step\n                    await new Promise((resolve)=>setTimeout(resolve, 800));\n                }\n                // STEP 8: Show capturing indicator\n                countdownElement.textContent = \"✓\";\n                statusIndicator.textContent = \"Capturing point \".concat(i + 1, \"/\").concat(points.length);\n                // STEP 9: Remove countdown element but KEEP the dot visible\n                setTimeout(()=>{\n                    if (countdownElement.parentNode) {\n                        countdownElement.parentNode.removeChild(countdownElement);\n                    }\n                }, 300);\n                // STEP 10: Capture images (the dot is still visible)\n                await captureImage();\n                // STEP 11: Wait for preview to complete before moving to next point\n                // During this time, the dot remains visible\n                await new Promise((resolve)=>setTimeout(resolve, 2300));\n            }\n            // STEP 12: Calibration complete\n            statusIndicator.textContent = 'Calibration completed';\n            setProcessStatus('Calibration completed');\n            if (onStatusUpdate) {\n                onStatusUpdate('Calibration completed successfully');\n            }\n            setRemainingCaptures(0);\n            // Remove status indicator after a delay\n            setTimeout(()=>{\n                if (statusIndicator.parentNode) {\n                    statusIndicator.parentNode.removeChild(statusIndicator);\n                }\n            }, 3000);\n        } catch (error) {\n            console.error('Calibration error:', error);\n            setProcessStatus(\"Error: \".concat(error.message));\n            if (onStatusUpdate) {\n                onStatusUpdate(\"Calibration error: \".concat(error.message));\n            }\n        } finally{\n            setIsCapturing(false);\n            // Show TopBar again\n            if (typeof toggleTopBar === 'function') {\n                toggleTopBar(true);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(true);\n            }\n        }\n    };\n    // Map button clicks to appropriate handlers\n    const handleScreenAction = (actionType)=>{\n        console.log(\"Screen action received: \".concat(actionType));\n        switch(actionType){\n            case 'randomDot':\n                handleRandomDot();\n                break;\n            case 'setRandom':\n                handleSetRandom();\n                break;\n            case 'calibrate':\n                handleSetCalibrate();\n                break;\n            case 'clearAll':\n                clearCanvas();\n                break;\n            default:\n                // Forward to parent if not handled here\n                if (onButtonClick) {\n                    onButtonClick(actionType);\n                }\n        }\n    };\n    // Register action handlers with parent component\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            // Skip during SSR\n            if (false) {}\n            console.log(\"Registering action handlers with parent\");\n            if (onButtonClick) {\n                // Create action handlers\n                const actionHandlers = {\n                    randomDot: handleRandomDot,\n                    setRandom: handleSetRandom,\n                    calibrate: handleSetCalibrate,\n                    clearAll: clearCanvas\n                };\n                // Store in parent component context\n                onButtonClick('registerActions', actionHandlers);\n                // Also make them globally available for direct access\n                window.whiteScreenActions = actionHandlers;\n            }\n            // Cleanup on unmount\n            return ({\n                \"WhiteScreenMain.useEffect\": ()=>{\n                    if ( true && window.whiteScreenActions) {\n                        window.whiteScreenActions = null;\n                    }\n                }\n            })[\"WhiteScreenMain.useEffect\"];\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        onButtonClick\n    ]);\n    // Update parent with status changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            if (onStatusUpdate && processStatus) {\n                onStatusUpdate(processStatus);\n            }\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        processStatus,\n        onStatusUpdate\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"white-screen-container\",\n        style: {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            zIndex: 50,\n            backgroundColor: 'rgba(255, 255, 255, 0.5)' // Slight transparency to see if it's rendered\n        },\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"white-screen-canvas-container\",\n            style: {\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n                backgroundColor: 'white',\n                overflow: 'hidden',\n                border: '1px solid #ccc',\n                zIndex: 51\n            },\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n                    ref: canvasRef ? canvasRef : internalCanvasRef,\n                    className: \"white-screen-canvas\",\n                    style: {\n                        width: '100%',\n                        height: '100%',\n                        display: 'block'\n                    }\n                }, void 0, false, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 732,\n                    columnNumber: 9\n                }, undefined),\n                (countdownValue !== null || forceShowCountdown) && currentDot && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"dot-countdown\",\n                    style: {\n                        position: 'absolute',\n                        left: \"\".concat(currentDot.x - 30, \"px\"),\n                        top: \"\".concat(currentDot.y - 70, \"px\"),\n                        color: 'red',\n                        fontSize: '48px',\n                        fontWeight: 'bold',\n                        textShadow: '0 0 10px white, 0 0 20px white',\n                        zIndex: 999,\n                        backgroundColor: 'rgba(255, 255, 255, 0.8)',\n                        padding: '10px 20px',\n                        borderRadius: '50%',\n                        boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n                        width: '60px',\n                        height: '60px',\n                        display: 'flex',\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        border: '2px solid red' // Border to make it stand out\n                    },\n                    children: countdownValue || 3\n                }, void 0, false, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 744,\n                    columnNumber: 11\n                }, undefined),\n                (countdownValue !== null || forceShowCountdown) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"center-countdown-backup\",\n                    style: {\n                        position: 'fixed',\n                        top: '50%',\n                        left: '50%',\n                        transform: 'translate(-50%, -50%)',\n                        color: 'white',\n                        fontSize: '120px',\n                        fontWeight: 'bold',\n                        textShadow: '0 0 20px black',\n                        zIndex: 1000,\n                        backgroundColor: 'rgba(255, 0, 0, 0.7)',\n                        width: '200px',\n                        height: '200px',\n                        borderRadius: '50%',\n                        display: 'flex',\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        boxShadow: '0 0 30px rgba(0, 0, 0, 0.5)'\n                    },\n                    children: countdownValue || 3\n                }, void 0, false, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 773,\n                    columnNumber: 11\n                }, undefined),\n                currentDot && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"dot-indicator\",\n                    style: {\n                        position: 'absolute',\n                        top: '10px',\n                        right: '10px',\n                        backgroundColor: 'rgba(0, 255, 0, 0.7)',\n                        color: 'black',\n                        padding: '5px 10px',\n                        borderRadius: '4px',\n                        fontSize: '12px',\n                        zIndex: 52\n                    },\n                    children: [\n                        \"Dot at x:\",\n                        currentDot.x,\n                        \", y:\",\n                        currentDot.y\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 801,\n                    columnNumber: 11\n                }, undefined),\n                (processStatus || remainingCaptures > 0) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"status-overlay\",\n                    style: {\n                        position: 'absolute',\n                        bottom: '10px',\n                        left: '10px',\n                        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                        color: 'white',\n                        padding: '10px 15px',\n                        borderRadius: '4px',\n                        fontSize: '16px',\n                        fontWeight: 'bold',\n                        boxShadow: '0 4px 8px rgba(0,0,0,0.3)',\n                        zIndex: 53\n                    },\n                    children: [\n                        processStatus && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: processStatus\n                        }, void 0, false, {\n                            fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                            lineNumber: 837,\n                            columnNumber: 31\n                        }, undefined),\n                        remainingCaptures > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                color: '#ffcc00'\n                            },\n                            children: [\n                                \"Remaining: \",\n                                remainingCaptures\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                            lineNumber: 839,\n                            columnNumber: 15\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 821,\n                    columnNumber: 11\n                }, undefined),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"canvas-indicator\",\n                    style: {\n                        position: 'absolute',\n                        top: '10px',\n                        left: '10px',\n                        backgroundColor: canvasVisible ? 'rgba(0, 255, 0, 0.7)' : 'rgba(255, 0, 0, 0.7)',\n                        color: 'black',\n                        padding: '5px 10px',\n                        borderRadius: '4px',\n                        fontSize: '12px',\n                        zIndex: 52\n                    },\n                    children: [\n                        \"Canvas: \",\n                        canvasVisible ? 'Visible' : 'Hidden'\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 847,\n                    columnNumber: 9\n                }, undefined)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n            lineNumber: 717,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n        lineNumber: 707,\n        columnNumber: 5\n    }, undefined);\n};\n_s(WhiteScreenMain, \"PJgnBwbb+MxFn3w9CaII6BOFoCc=\");\n_c = WhiteScreenMain;\n// Export a dynamic version with SSR disabled to avoid useLayoutEffect warnings\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_c2 = next_dynamic__WEBPACK_IMPORTED_MODULE_2___default()(_c1 = ()=>Promise.resolve(WhiteScreenMain), {\n    ssr: false\n}));\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"WhiteScreenMain\");\n$RefreshReg$(_c1, \"%default%$dynamic\");\n$RefreshReg$(_c2, \"%default%\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/collected-dataset/components-gui/WhiteScreenMain.js\n"));

/***/ })

}]);
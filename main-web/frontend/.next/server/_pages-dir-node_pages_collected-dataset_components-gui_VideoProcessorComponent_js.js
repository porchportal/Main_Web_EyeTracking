"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_pages-dir-node_pages_collected-dataset_components-gui_VideoProcessorComponent_js";
exports.ids = ["_pages-dir-node_pages_collected-dataset_components-gui_VideoProcessorComponent_js"];
exports.modules = {

/***/ "(pages-dir-node)/./pages/collected-dataset/components-gui/VideoProcessorComponent.js":
/*!***************************************************************************!*\
  !*** ./pages/collected-dataset/components-gui/VideoProcessorComponent.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _videoProcessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./videoProcessor */ \"(pages-dir-node)/./pages/collected-dataset/components-gui/videoProcessor.js\");\n// components-gui/VideoProcessorComponent.js\n\n\nconst VideoProcessorComponent = ()=>{\n    const processor = (0,_videoProcessor__WEBPACK_IMPORTED_MODULE_1__[\"default\"])();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"VideoProcessorComponent.useEffect\": ()=>{\n            if (processor) {\n                window.videoProcessor = processor;\n            }\n        }\n    }[\"VideoProcessorComponent.useEffect\"], [\n        processor\n    ]);\n    return null;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VideoProcessorComponent);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL3BhZ2VzL2NvbGxlY3RlZC1kYXRhc2V0L2NvbXBvbmVudHMtZ3VpL1ZpZGVvUHJvY2Vzc29yQ29tcG9uZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSw0Q0FBNEM7QUFDSDtBQUNRO0FBRWpELE1BQU1HLDBCQUEwQjtJQUM5QixNQUFNQyxZQUFZRiwyREFBaUJBO0lBRW5DRCxnREFBU0E7NkNBQUM7WUFDUixJQUFJRyxXQUFXO2dCQUNiQyxPQUFPQyxjQUFjLEdBQUdGO1lBQzFCO1FBQ0Y7NENBQUc7UUFBQ0E7S0FBVTtJQUVkLE9BQU87QUFDVDtBQUVBLGlFQUFlRCx1QkFBdUJBLEVBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9wb3JjaHBvcnRhbDIvRGVza3RvcC/wn5SlZXZlcnl0aGluZy9NYWluX1dlYl9FeWVUcmFja2luZy9tYWluLXdlYi9mcm9udGVuZC9wYWdlcy9jb2xsZWN0ZWQtZGF0YXNldC9jb21wb25lbnRzLWd1aS9WaWRlb1Byb2Nlc3NvckNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjb21wb25lbnRzLWd1aS9WaWRlb1Byb2Nlc3NvckNvbXBvbmVudC5qc1xuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VWaWRlb1Byb2Nlc3NvciBmcm9tICcuL3ZpZGVvUHJvY2Vzc29yJztcblxuY29uc3QgVmlkZW9Qcm9jZXNzb3JDb21wb25lbnQgPSAoKSA9PiB7XG4gIGNvbnN0IHByb2Nlc3NvciA9IHVzZVZpZGVvUHJvY2Vzc29yKCk7XG4gIFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChwcm9jZXNzb3IpIHtcbiAgICAgIHdpbmRvdy52aWRlb1Byb2Nlc3NvciA9IHByb2Nlc3NvcjtcbiAgICB9XG4gIH0sIFtwcm9jZXNzb3JdKTtcbiAgXG4gIHJldHVybiBudWxsO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVmlkZW9Qcm9jZXNzb3JDb21wb25lbnQ7Il0sIm5hbWVzIjpbIlJlYWN0IiwidXNlRWZmZWN0IiwidXNlVmlkZW9Qcm9jZXNzb3IiLCJWaWRlb1Byb2Nlc3NvckNvbXBvbmVudCIsInByb2Nlc3NvciIsIndpbmRvdyIsInZpZGVvUHJvY2Vzc29yIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-node)/./pages/collected-dataset/components-gui/VideoProcessorComponent.js\n");

/***/ }),

/***/ "(pages-dir-node)/./pages/collected-dataset/components-gui/videoProcessor.js":
/*!******************************************************************!*\
  !*** ./pages/collected-dataset/components-gui/videoProcessor.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n// videoProcessor.js\n\nconst useVideoProcessor = ()=>{\n    const [isProcessing, setIsProcessing] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [processingResults, setProcessingResults] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [processingError, setProcessingError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [backendAvailable, setBackendAvailable] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const videoRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const streamRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const processingIntervalRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const [options, setOptions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        showHeadPose: false,\n        showBoundingBox: false,\n        showMask: false,\n        showParameters: false,\n        showProcessedImage: false\n    });\n    // Check backend connection on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useVideoProcessor.useEffect\": ()=>{\n            const checkBackendConnection = {\n                \"useVideoProcessor.useEffect.checkBackendConnection\": async ()=>{\n                    try {\n                        const response = await fetch('/api/check-backend-connection');\n                        const data = await response.json();\n                        setBackendAvailable(data.connected);\n                        console.log(`Backend connection: ${data.connected ? 'OK' : 'Failed'}`);\n                    } catch (error) {\n                        console.error('Error checking backend connection:', error);\n                        setBackendAvailable(false);\n                    }\n                }\n            }[\"useVideoProcessor.useEffect.checkBackendConnection\"];\n            checkBackendConnection();\n        }\n    }[\"useVideoProcessor.useEffect\"], []);\n    /**\n   * Start video processing with backend\n   */ const startVideoProcessing = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useVideoProcessor.useCallback[startVideoProcessing]\": async (newOptions = {})=>{\n            if (isProcessing) {\n                // If already processing, just update options\n                updateOptions(newOptions);\n                return;\n            }\n            setProcessingError(null);\n            // Update options\n            updateOptions(newOptions);\n            try {\n                // Request camera access\n                const mediaStream = await navigator.mediaDevices.getUserMedia({\n                    video: true,\n                    audio: false\n                });\n                // Store stream for later cleanup\n                streamRef.current = mediaStream;\n                // If we have a video element reference, attach the stream\n                if (videoRef.current) {\n                    videoRef.current.srcObject = mediaStream;\n                    try {\n                        await videoRef.current.play();\n                        console.log('Video playing successfully');\n                    } catch (playError) {\n                        console.error('Error playing video:', playError);\n                        setProcessingError(`Failed to play video: ${playError.message}`);\n                        stopVideoProcessing();\n                        return;\n                    }\n                }\n                setIsProcessing(true);\n                // Start the frame processing interval\n                processingIntervalRef.current = setInterval({\n                    \"useVideoProcessor.useCallback[startVideoProcessing]\": ()=>{\n                        processCurrentFrame();\n                    }\n                }[\"useVideoProcessor.useCallback[startVideoProcessing]\"], 200); // Process a frame every 200ms (5fps) to reduce server load\n            } catch (error) {\n                console.error('Error starting video processing:', error);\n                setProcessingError(`Failed to access camera: ${error.message}`);\n                stopVideoProcessing();\n            }\n        }\n    }[\"useVideoProcessor.useCallback[startVideoProcessing]\"], [\n        isProcessing\n    ]);\n    /**\n   * Update processing options\n   */ const updateOptions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useVideoProcessor.useCallback[updateOptions]\": (newOptions = {})=>{\n            setOptions({\n                \"useVideoProcessor.useCallback[updateOptions]\": (prevOptions)=>{\n                    const updatedOptions = {\n                        ...prevOptions,\n                        ...newOptions\n                    };\n                    // If we're already processing, update the backend with new options on next frame\n                    if (isProcessing) {\n                        // We don't need to call processCurrentFrame explicitly here\n                        // since it's handled by the interval\n                        console.log('Options updated, will be applied on next frame:', updatedOptions);\n                    }\n                    return updatedOptions;\n                }\n            }[\"useVideoProcessor.useCallback[updateOptions]\"]);\n        }\n    }[\"useVideoProcessor.useCallback[updateOptions]\"], [\n        isProcessing\n    ]);\n    /**\n   * Stop video processing\n   */ const stopVideoProcessing = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useVideoProcessor.useCallback[stopVideoProcessing]\": ()=>{\n            // Clear the processing interval\n            if (processingIntervalRef.current) {\n                clearInterval(processingIntervalRef.current);\n                processingIntervalRef.current = null;\n            }\n            // Stop all tracks in the media stream\n            if (streamRef.current) {\n                streamRef.current.getTracks().forEach({\n                    \"useVideoProcessor.useCallback[stopVideoProcessing]\": (track)=>{\n                        track.stop();\n                    }\n                }[\"useVideoProcessor.useCallback[stopVideoProcessing]\"]);\n                streamRef.current = null;\n            }\n            // Clear video source\n            if (videoRef.current) {\n                videoRef.current.srcObject = null;\n            }\n            setIsProcessing(false);\n            setProcessingResults(null);\n        }\n    }[\"useVideoProcessor.useCallback[stopVideoProcessing]\"], []);\n    /**\n   * Toggle video processing\n   */ const toggleVideoProcessing = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useVideoProcessor.useCallback[toggleVideoProcessing]\": (newOptions = {})=>{\n            if (isProcessing) {\n                stopVideoProcessing();\n            } else {\n                startVideoProcessing(newOptions);\n            }\n        }\n    }[\"useVideoProcessor.useCallback[toggleVideoProcessing]\"], [\n        isProcessing,\n        startVideoProcessing,\n        stopVideoProcessing\n    ]);\n    /**\n   * Process the current video frame\n   */ const processCurrentFrame = async ()=>{\n        if (!videoRef.current || !streamRef.current || !isProcessing) return;\n        try {\n            // Create a canvas to capture the current frame\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n            // Set canvas size to match video dimensions\n            canvas.width = videoRef.current.videoWidth;\n            canvas.height = videoRef.current.videoHeight;\n            // Draw the current video frame to the canvas\n            context.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\n            // Convert canvas to blob (JPEG format with 0.8 quality)\n            const blob = await new Promise((resolve)=>{\n                canvas.toBlob(resolve, 'image/jpeg', 0.8);\n            });\n            if (!blob) {\n                console.error('Failed to capture frame');\n                return;\n            }\n            // Create form data for the API request\n            const formData = new FormData();\n            formData.append('file', blob, 'frame.jpg');\n            // Add processing options - explicitly convert booleans to strings\n            // This is important for proper transmission to the backend\n            formData.append('showHeadPose', options.showHeadPose.toString());\n            formData.append('showBoundingBox', options.showBoundingBox.toString());\n            formData.append('showMask', options.showMask.toString());\n            formData.append('showParameters', options.showParameters.toString());\n            // Log what's being sent to the backend for debugging\n            console.log('Sending options to backend:', {\n                showHeadPose: options.showHeadPose,\n                showBoundingBox: options.showBoundingBox,\n                showMask: options.showMask,\n                showParameters: options.showParameters\n            });\n            // Send to backend API\n            const response = await fetch('/api/process-frame', {\n                method: 'POST',\n                body: formData\n            });\n            if (!response.ok) {\n                throw new Error(`Server error: ${response.status}`);\n            }\n            const result = await response.json();\n            if (result.success) {\n                setProcessingResults(result);\n                // If we have a processed image, display it\n                if (result.image && options.showProcessedImage && canvasRef.current) {\n                    displayProcessedImage(result.image, canvasRef.current);\n                }\n                return result;\n            } else {\n                console.error('Processing failed:', result.error);\n                return null;\n            }\n        } catch (error) {\n            console.error('Error processing frame:', error);\n            setProcessingError(`Processing error: ${error.message}`);\n            return null;\n        }\n    };\n    /**\n   * Display the processed image in a canvas element\n   */ const displayProcessedImage = (base64Image, canvas)=>{\n        if (!canvas || !base64Image) return;\n        const ctx = canvas.getContext('2d');\n        const img = new Image();\n        img.onload = ()=>{\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        };\n        img.src = `data:image/jpeg;base64,${base64Image}`;\n    };\n    return {\n        isProcessing,\n        processingResults,\n        processingError,\n        backendAvailable,\n        videoRef,\n        canvasRef,\n        options,\n        startVideoProcessing,\n        stopVideoProcessing,\n        toggleVideoProcessing,\n        updateOptions,\n        processCurrentFrame\n    };\n};\n// Make sure to export the hook as default\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useVideoProcessor);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./pages/collected-dataset/components-gui/videoProcessor.js\n");

/***/ })

};
;
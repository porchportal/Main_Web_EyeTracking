"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_pages-dir-node_pages_collected-dataset_components-gui_Action_CalibrateHandler_js";
exports.ids = ["_pages-dir-node_pages_collected-dataset_components-gui_Action_CalibrateHandler_js"];
exports.modules = {

/***/ "(pages-dir-node)/./pages/collected-dataset/components-gui/Action/CalibrateHandler.js":
/*!***************************************************************************!*\
  !*** ./pages/collected-dataset/components-gui/Action/CalibrateHandler.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _CalibratePoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CalibratePoints */ \"(pages-dir-node)/./pages/collected-dataset/components-gui/Action/CalibratePoints.js\");\n// CalibrateHandler.js - This should be placed in the components-gui folder\n// This is a complete implementation of the calibration functionality\n\nclass CalibrateHandler {\n    constructor(config){\n        // Required properties\n        this.canvasRef = config.canvasRef;\n        this.toggleTopBar = config.toggleTopBar;\n        this.setOutputText = config.setOutputText;\n        this.captureCounter = config.captureCount || 1;\n        this.setCaptureCounter = config.setCaptureCounter;\n        this.captureFolder = config.captureFolder || 'eye_tracking_captures';\n        this.onComplete = config.onComplete;\n        // Internal state\n        this.isProcessing = false;\n        this.currentPointIndex = 0;\n        this.calibrationPoints = [];\n        this.statusIndicator = null;\n        this.countdownElement = null;\n    }\n    // Create a status indicator in the top right corner\n    createStatusIndicator() {\n        // Remove any existing indicators first\n        const existingIndicators = document.querySelectorAll('.calibrate-status-indicator');\n        existingIndicators.forEach((indicator)=>{\n            if (indicator.parentNode) {\n                indicator.parentNode.removeChild(indicator);\n            }\n        });\n        // Create new status indicator\n        const indicator = document.createElement('div');\n        indicator.className = 'calibrate-status-indicator';\n        indicator.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      background-color: rgba(0, 102, 204, 0.9);\n      color: white;\n      font-size: 14px;\n      font-weight: bold;\n      padding: 8px 12px;\n      border-radius: 6px;\n      z-index: 9999;\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n    `;\n        document.body.appendChild(indicator);\n        this.statusIndicator = indicator;\n        return indicator;\n    }\n    // Draw a specific calibration point\n    drawCalibrationPoint(point) {\n        const canvas = this.canvasRef.current;\n        if (!canvas) return null;\n        const ctx = canvas.getContext('2d');\n        // Clear canvas\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        // Draw the point with larger radius and glow effect\n        const radius = 8;\n        // Draw the calibration point\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, radius, 0, Math.PI * 2);\n        ctx.fillStyle = 'red';\n        ctx.fill();\n        // Add glow effect\n        ctx.beginPath();\n        ctx.arc(point.x, point.y, radius + 4, 0, Math.PI * 2);\n        ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        return {\n            x: point.x,\n            y: point.y\n        };\n    }\n    // Create a countdown element above the current dot\n    createCountdownElement(position) {\n        // Remove any existing countdown elements\n        const existingCountdowns = document.querySelectorAll('.calibrate-countdown, .center-countdown-backup');\n        existingCountdowns.forEach((countdown)=>{\n            if (countdown.parentNode) {\n                countdown.parentNode.removeChild(countdown);\n            }\n        });\n        // Get canvas position for absolute positioning\n        const canvas = this.canvasRef.current;\n        if (!canvas) return null;\n        const canvasRect = canvas.getBoundingClientRect();\n        // Calculate absolute position\n        const absoluteX = canvasRect.left + position.x;\n        const absoluteY = canvasRect.top + position.y;\n        // Create new countdown element positioned above the dot\n        const countdown = document.createElement('div');\n        countdown.className = 'calibrate-countdown';\n        countdown.style.cssText = `\n      position: fixed;\n      left: ${absoluteX}px;\n      top: ${absoluteY - 60}px;\n      transform: translateX(-50%);\n      color: red;\n      font-size: 36px;\n      font-weight: bold;\n      text-shadow: 0 0 10px white, 0 0 20px white;\n      z-index: 9999;\n      background-color: rgba(255, 255, 255, 0.8);\n      border: 2px solid red;\n      border-radius: 50%;\n      width: 50px;\n      height: 50px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n    `;\n        document.body.appendChild(countdown);\n        this.countdownElement = countdown;\n        return {\n            dot: countdown\n        };\n    }\n    // Capture screen image\n    async captureScreenImage() {\n        try {\n            const canvas = this.canvasRef.current;\n            if (!canvas) throw new Error(\"Canvas reference is null\");\n            // Format filename with counter\n            const counter = String(this.captureCounter).padStart(3, '0');\n            const filename = `screen_${counter}.jpg`;\n            // Capture image data\n            const imageData = canvas.toDataURL('image/png');\n            // Save image via API\n            const response = await fetch('/api/save-capture', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    imageData,\n                    filename,\n                    type: 'screen',\n                    folder: this.captureFolder\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`Server responded with ${response.status}`);\n            }\n            const result = await response.json();\n            console.log(`Saved screen image: ${filename}`);\n            return {\n                data: imageData,\n                response: result\n            };\n        } catch (error) {\n            console.error(\"Error capturing screen image:\", error);\n            throw error;\n        }\n    }\n    // Capture webcam image silently\n    async captureWebcamImage() {\n        let stream = null;\n        let tempVideo = null;\n        try {\n            // Format filename with counter\n            const counter = String(this.captureCounter).padStart(3, '0');\n            const filename = `webcam_${counter}.jpg`;\n            // Look for an existing video element first\n            const videoElement = window.videoElement || document.querySelector('video');\n            if (videoElement && videoElement.readyState >= 2) {\n                // If we have a video element that's loaded, use it\n                const tempCanvas = document.createElement('canvas');\n                const ctx = tempCanvas.getContext('2d');\n                tempCanvas.width = videoElement.videoWidth || 640;\n                tempCanvas.height = videoElement.videoHeight || 480;\n                ctx.drawImage(videoElement, 0, 0, tempCanvas.width, tempCanvas.height);\n                const imageData = tempCanvas.toDataURL('image/png');\n                // Save the image\n                const response = await fetch('/api/save-capture', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        imageData,\n                        filename,\n                        type: 'webcam',\n                        folder: this.captureFolder\n                    })\n                });\n                if (!response.ok) {\n                    throw new Error(`Server responded with ${response.status}`);\n                }\n                const result = await response.json();\n                console.log(`Saved webcam image: ${filename}`);\n                return {\n                    data: imageData,\n                    response: result\n                };\n            }\n            // If no video element, create a temporary one\n            // Create a temporary stream for just this capture\n            stream = await navigator.mediaDevices.getUserMedia({\n                video: true,\n                audio: false\n            });\n            // Create a hidden video element to receive the stream\n            tempVideo = document.createElement('video');\n            tempVideo.autoplay = true;\n            tempVideo.playsInline = true;\n            tempVideo.muted = true;\n            tempVideo.style.position = 'absolute';\n            tempVideo.style.left = '-9999px';\n            tempVideo.style.opacity = '0';\n            document.body.appendChild(tempVideo);\n            // Set the stream to the video element\n            tempVideo.srcObject = stream;\n            // Wait for video to initialize\n            await new Promise((resolve)=>{\n                const timeoutId = setTimeout(()=>{\n                    console.warn(\"Video loading timed out, continuing anyway\");\n                    resolve();\n                }, 1000);\n                tempVideo.onloadeddata = ()=>{\n                    clearTimeout(timeoutId);\n                    resolve();\n                };\n            });\n            // Small delay to ensure a clear frame\n            await new Promise((resolve)=>setTimeout(resolve, 200));\n            // Check if video dimensions are valid\n            if (tempVideo.videoWidth === 0 || tempVideo.videoHeight === 0) {\n                console.warn(\"Video dimensions are invalid, using default dimensions\");\n            }\n            // Capture the frame to a canvas\n            const tempCanvas = document.createElement('canvas');\n            tempCanvas.width = tempVideo.videoWidth || 640;\n            tempCanvas.height = tempVideo.videoHeight || 480;\n            const ctx = tempCanvas.getContext('2d');\n            ctx.drawImage(tempVideo, 0, 0, tempCanvas.width, tempCanvas.height);\n            // Get image data\n            const imageData = tempCanvas.toDataURL('image/png');\n            // Save the image via API\n            const response = await fetch('/api/save-capture', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    imageData,\n                    filename,\n                    type: 'webcam',\n                    folder: this.captureFolder\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`Server responded with ${response.status}`);\n            }\n            const result = await response.json();\n            console.log(`Saved webcam image: ${filename}`);\n            return {\n                data: imageData,\n                response: result\n            };\n        } catch (error) {\n            console.error(\"Error capturing webcam image:\", error);\n            return {\n                data: null,\n                response: null\n            };\n        } finally{\n            // IMPORTANT: Clean up resources even if there was an error\n            if (stream) {\n                stream.getTracks().forEach((track)=>track.stop());\n            }\n            if (tempVideo) {\n                tempVideo.srcObject = null;\n                if (tempVideo.parentNode) {\n                    tempVideo.parentNode.removeChild(tempVideo);\n                }\n            }\n        }\n    }\n    // Save parameter CSV\n    async saveParameterCSV(point, index) {\n        try {\n            // Format filename with counter\n            const counter = String(this.captureCounter).padStart(3, '0');\n            const filename = `parameter_${counter}.csv`;\n            const canvas = this.canvasRef.current;\n            // Create CSV content with two columns: name and value\n            const csvData = [\n                \"name,value\",\n                `dot_x,${point.x}`,\n                `dot_y,${point.y}`,\n                `canvas_width,${canvas ? canvas.width : 0}`,\n                `canvas_height,${canvas ? canvas.height : 0}`,\n                `window_width,${window.innerWidth}`,\n                `window_height,${window.innerHeight}`,\n                `calibration_point_index,${index}`,\n                `calibration_point_label,${point.label || ''}`,\n                `timestamp,${new Date().toISOString()}`\n            ].join('\\n');\n            // Convert CSV to data URL\n            const csvBlob = new Blob([\n                csvData\n            ], {\n                type: 'text/csv'\n            });\n            const csvReader = new FileReader();\n            const csvDataUrl = await new Promise((resolve)=>{\n                csvReader.onloadend = ()=>resolve(csvReader.result);\n                csvReader.readAsDataURL(csvBlob);\n            });\n            // Save CSV using the API\n            const response = await fetch('/api/save-capture', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    imageData: csvDataUrl,\n                    filename,\n                    type: 'parameters',\n                    folder: this.captureFolder\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`Server responded with ${response.status}`);\n            }\n            const result = await response.json();\n            console.log(`Saved parameter CSV: ${filename}`);\n            return result;\n        } catch (error) {\n            console.error(\"Error saving parameter CSV:\", error);\n            throw error;\n        }\n    }\n    // Show preview of captured images - made identical to WhiteScreenMain implementation\n    showCapturePreview(screenImage, webcamImage, point) {\n        if (!screenImage && !webcamImage) {\n            console.warn(\"No images available to preview\");\n            return;\n        }\n        // Remove any existing preview containers first (in case of overlapping)\n        try {\n            const existingPreviews = document.querySelectorAll('.capture-preview-container');\n            existingPreviews.forEach((preview)=>{\n                if (preview.parentNode) {\n                    console.log(\"Removing existing preview container\");\n                    preview.parentNode.removeChild(preview);\n                }\n            });\n        } catch (cleanupError) {\n            console.error(\"Error cleaning up existing previews:\", cleanupError);\n        }\n        // Create a new preview container with z-index higher than everything else\n        const previewContainer = document.createElement('div');\n        previewContainer.className = 'capture-preview-container';\n        previewContainer.style.cssText = `\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      display: flex;\n      gap: 20px;\n      background-color: rgba(0, 0, 0, 0.85);\n      padding: 20px;\n      border-radius: 12px;\n      z-index: 999999;\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.6);\n    `;\n        console.log(\"Preview container created\");\n        // Add debug info div\n        const debugInfo = document.createElement('div');\n        debugInfo.style.cssText = `\n      position: absolute;\n      top: -30px;\n      left: 0;\n      width: 100%;\n      color: white;\n      font-size: 12px;\n      text-align: center;\n    `;\n        debugInfo.textContent = `Screen: ${screenImage ? 'YES' : 'NO'}, Webcam: ${webcamImage ? 'YES' : 'NO'}`;\n        previewContainer.appendChild(debugInfo);\n        // Function to add an image to the preview\n        const addImagePreview = (image, label)=>{\n            try {\n                console.log(`Adding ${label} preview, image data length: ${image ? image.length : 'N/A'}`);\n                const preview = document.createElement('div');\n                preview.style.cssText = `\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        `;\n                const img = document.createElement('img');\n                img.src = image;\n                img.alt = label;\n                img.style.cssText = `\n          max-width: 320px;\n          max-height: 240px;\n          border: 3px solid white;\n          border-radius: 8px;\n          background-color: #333;\n        `;\n                // Event listeners for image loading\n                img.onload = ()=>console.log(`${label} image loaded successfully`);\n                img.onerror = (e)=>console.error(`Error loading ${label} image:`, e);\n                const labelElement = document.createElement('div');\n                labelElement.textContent = label;\n                labelElement.style.cssText = `\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n          font-weight: bold;\n        `;\n                preview.appendChild(img);\n                preview.appendChild(labelElement);\n                previewContainer.appendChild(preview);\n                console.log(`${label} preview element added to container`);\n                return true;\n            } catch (error) {\n                console.error(`Error adding ${label} preview:`, error);\n                return false;\n            }\n        };\n        // Add both images to preview if available\n        if (screenImage) {\n            addImagePreview(screenImage, 'Screen Capture');\n        }\n        if (webcamImage) {\n            addImagePreview(webcamImage, 'Webcam Capture');\n        }\n        // Add dot position info if available\n        if (point) {\n            const positionInfo = document.createElement('div');\n            positionInfo.textContent = point.label ? `${point.label}: x=${Math.round(point.x)}, y=${Math.round(point.y)}` : `Dot position: x=${Math.round(point.x)}, y=${Math.round(point.y)}`;\n            positionInfo.style.cssText = `\n        color: #ffcc00;\n        font-size: 14px;\n        position: absolute;\n        top: -50px;\n        left: 0;\n        width: 100%;\n        text-align: center;\n      `;\n            previewContainer.appendChild(positionInfo);\n            console.log(\"Dot position info added\");\n        }\n        // Add countdown timer\n        const timerElement = document.createElement('div');\n        timerElement.textContent = '2.0s';\n        timerElement.style.cssText = `\n      position: absolute;\n      bottom: -25px;\n      right: 20px;\n      color: white;\n      font-size: 12px;\n      background-color: rgba(0, 0, 0, 0.7);\n      padding: 3px 8px;\n      border-radius: 4px;\n    `;\n        previewContainer.appendChild(timerElement);\n        // Add to document body\n        try {\n            document.body.appendChild(previewContainer);\n            console.log(\"Preview container added to DOM\");\n        } catch (appendError) {\n            console.error(\"Error adding preview container to DOM:\", appendError);\n        }\n        // Countdown and remove the preview after 2 seconds\n        let timeLeft = 2.0;\n        const interval = setInterval(()=>{\n            timeLeft -= 0.1;\n            if (timeLeft <= 0) {\n                clearInterval(interval);\n                // Fade out\n                previewContainer.style.transition = 'opacity 0.3s ease';\n                previewContainer.style.opacity = '0';\n                // Remove after fade\n                setTimeout(()=>{\n                    if (previewContainer.parentNode) {\n                        console.log(\"Removing preview container from DOM\");\n                        previewContainer.parentNode.removeChild(previewContainer);\n                    }\n                }, 300);\n            } else {\n                timerElement.textContent = `${timeLeft.toFixed(1)}s`;\n            }\n        }, 100);\n        // Safety cleanup after 5 seconds in case anything goes wrong\n        setTimeout(()=>{\n            if (previewContainer.parentNode) {\n                console.log(\"Safety cleanup of preview container\");\n                previewContainer.parentNode.removeChild(previewContainer);\n            }\n        }, 5000);\n    }\n    // Run the countdown animation for a point - simplified to only show countdown above dot\n    async runCountdown(point, index, total) {\n        // Create countdown element\n        const countdownElements = this.createCountdownElement(point);\n        if (!countdownElements) return false;\n        const { dot: countdownElement } = countdownElements;\n        // Run 3-2-1 countdown\n        for(let count = 3; count > 0; count--){\n            // Update countdown display\n            countdownElement.textContent = count;\n            // Update status indicator\n            if (this.statusIndicator) {\n                this.statusIndicator.textContent = `Calibrate Set Active: countdown ${count} (${index + 1}/${total})`;\n            }\n            // Update output text if available\n            if (this.setOutputText) {\n                this.setOutputText(`Calibration point ${index + 1}/${total} - countdown ${count}`);\n            }\n            // Wait for the next countdown step\n            await new Promise((resolve)=>setTimeout(resolve, 800));\n        }\n        // Show capturing indicator briefly\n        countdownElement.textContent = \"✓\";\n        if (this.statusIndicator) {\n            this.statusIndicator.textContent = `Capturing point ${index + 1}/${total}`;\n        }\n        // Remove countdown element immediately after capture to only show the dot\n        // This ensures we see ONLY the red dot after capture, not the countdown indicators\n        setTimeout(()=>{\n            if (countdownElement.parentNode) {\n                countdownElement.parentNode.removeChild(countdownElement);\n            }\n        }, 300);\n        return true;\n    }\n    // Process a single calibration point\n    async processCalibrationPoint(point, index, total) {\n        try {\n            // Draw the calibration point\n            this.drawCalibrationPoint(point);\n            // Run countdown animation - same as RandomDot\n            await this.runCountdown(point, index, total);\n            // Capture screen image\n            const screenResult = await this.captureScreenImage();\n            // Capture webcam image\n            const webcamResult = await this.captureWebcamImage();\n            // Save parameter CSV\n            await this.saveParameterCSV(point, index);\n            // Increment capture counter for next capture\n            if (this.setCaptureCounter) {\n                // If the server returned a new capture number, use it\n                if (screenResult.response && screenResult.response.captureNumber !== undefined) {\n                    this.captureCounter = screenResult.response.captureNumber + 1;\n                    this.setCaptureCounter(this.captureCounter);\n                } else {\n                    this.captureCounter++;\n                    this.setCaptureCounter(this.captureCounter);\n                }\n            }\n            // Show preview\n            this.showCapturePreview(screenResult.data, webcamResult ? webcamResult.data : null, point);\n            // Wait for preview to complete\n            await new Promise((resolve)=>setTimeout(resolve, 2300));\n            return true;\n        } catch (error) {\n            console.error(`Error processing calibration point ${index + 1}:`, error);\n            if (this.statusIndicator) {\n                this.statusIndicator.textContent = `Error: ${error.message}`;\n            }\n            if (this.setOutputText) {\n                this.setOutputText(`Error: ${error.message}`);\n            }\n            return false;\n        }\n    }\n    // Start the full calibration sequence\n    async startCalibration() {\n        if (this.isProcessing) return false;\n        this.isProcessing = true;\n        // Hide the TopBar IMMEDIATELY (first action)\n        if (typeof this.toggleTopBar === 'function') {\n            this.toggleTopBar(false);\n        }\n        // Small delay to ensure UI updates\n        await new Promise((resolve)=>setTimeout(resolve, 50));\n        // Create status indicator\n        const statusIndicator = this.createStatusIndicator();\n        statusIndicator.textContent = 'Calibrate Set Active: Initializing...';\n        try {\n            // Generate calibration points\n            const canvas = this.canvasRef.current;\n            if (!canvas || canvas.width === 0 || canvas.height === 0) {\n                throw new Error('Canvas is not ready');\n            }\n            this.calibrationPoints = (0,_CalibratePoints__WEBPACK_IMPORTED_MODULE_0__.generateCalibrationPoints)(canvas.width, canvas.height);\n            if (!this.calibrationPoints.length) {\n                throw new Error('Failed to generate calibration points');\n            }\n            // Update status\n            if (this.setOutputText) {\n                this.setOutputText(`Starting calibration with ${this.calibrationPoints.length} points`);\n            }\n            // Process each calibration point in sequence\n            for(let i = 0; i < this.calibrationPoints.length; i++){\n                statusIndicator.textContent = `Processing point ${i + 1}/${this.calibrationPoints.length}`;\n                // Process current point\n                const success = await this.processCalibrationPoint(this.calibrationPoints[i], i, this.calibrationPoints.length);\n                // If processing failed, stop the sequence\n                if (!success) {\n                    throw new Error(`Failed to process point ${i + 1}`);\n                }\n            }\n            // Calibration complete\n            statusIndicator.textContent = 'Calibration completed';\n            if (this.setOutputText) {\n                this.setOutputText('Calibration completed successfully');\n            }\n            return true;\n        } catch (error) {\n            console.error('Calibration error:', error);\n            if (statusIndicator) {\n                statusIndicator.textContent = `Error: ${error.message}`;\n            }\n            if (this.setOutputText) {\n                this.setOutputText(`Calibration error: ${error.message}`);\n            }\n            return false;\n        } finally{\n            this.isProcessing = false;\n            // Show TopBar again\n            if (typeof this.toggleTopBar === 'function') {\n                this.toggleTopBar(true);\n            }\n            // Remove status indicator after a delay\n            setTimeout(()=>{\n                if (statusIndicator && statusIndicator.parentNode) {\n                    statusIndicator.parentNode.removeChild(statusIndicator);\n                }\n            }, 3000);\n            // Call onComplete callback if provided\n            if (typeof this.onComplete === 'function') {\n                this.onComplete();\n            }\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CalibrateHandler);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./pages/collected-dataset/components-gui/Action/CalibrateHandler.js\n");

/***/ })

};
;
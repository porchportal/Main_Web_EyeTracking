"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_pages-dir-node_pages_collected-dataset_components-gui_Action_CalibrateHandler_js";
exports.ids = ["_pages-dir-node_pages_collected-dataset_components-gui_Action_CalibrateHandler_js"];
exports.modules = {

/***/ "(pages-dir-node)/./pages/collected-dataset/components-gui/Action/CalibrateHandler.js":
/*!***************************************************************************!*\
  !*** ./pages/collected-dataset/components-gui/Action/CalibrateHandler.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _CalibratePoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CalibratePoints */ \"(pages-dir-node)/./pages/collected-dataset/components-gui/Action/CalibratePoints.js\");\n/* harmony import */ var _CaptureHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CaptureHandler */ \"(pages-dir-node)/./pages/collected-dataset/components-gui/Action/CaptureHandler.js\");\n/* harmony import */ var _DotCaptureUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DotCaptureUtil */ \"(pages-dir-node)/./pages/collected-dataset/components-gui/Action/DotCaptureUtil.js\");\n// CalibrateHandler.js - Using the existing CaptureHandler class\n\n\n\nclass CalibrateHandler {\n    constructor(config){\n        this.canvasRef = config.canvasRef;\n        this.toggleTopBar = config.toggleTopBar;\n        this.setOutputText = config.setOutputText;\n        this.captureCounter = config.captureCounter || 1;\n        this.setCaptureCounter = config.setCaptureCounter;\n        this.captureFolder = config.captureFolder || 'eye_tracking_captures';\n        this.onComplete = config.onComplete;\n        // Accept passed-in calibration points (from SetCalibrateAction.js)\n        this.calibrationPoints = config.calibrationPoints || [];\n        // Create a CaptureHandler instance for handling the captures\n        this.captureHandler = new _CaptureHandler__WEBPACK_IMPORTED_MODULE_1__[\"default\"](// Pass saveImageToServer function\n        async (imageData, filename, type, folder)=>{\n            try {\n                const response = await fetch('/api/save-capture', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        imageData,\n                        filename,\n                        type,\n                        folder: this.captureFolder\n                    })\n                });\n                if (!response.ok) {\n                    console.warn(`Server responded with ${response.status}`);\n                    return {};\n                }\n                return await response.json();\n            } catch (err) {\n                console.error(`Error saving ${type}:`, err);\n                return {};\n            }\n        }, // Pass setCaptureCounter function\n        (newCounter)=>{\n            if (typeof newCounter === 'function') {\n                this.captureCounter = newCounter(this.captureCounter);\n            } else {\n                this.captureCounter = newCounter;\n            }\n            if (this.setCaptureCounter) {\n                this.setCaptureCounter(this.captureCounter);\n            }\n        }, // Pass setProcessStatus function\n        (status)=>{\n            if (this.setOutputText) {\n                this.setOutputText(status);\n            }\n        }, // Pass toggleTopBar function\n        this.toggleTopBar);\n        // Internals\n        this.isProcessing = false;\n        this.currentPointIndex = 0;\n        this.statusIndicator = null;\n    }\n    createStatusIndicator() {\n        const existingIndicators = document.querySelectorAll('.calibrate-status-indicator');\n        existingIndicators.forEach((indicator)=>indicator.remove());\n        const indicator = document.createElement('div');\n        indicator.className = 'calibrate-status-indicator';\n        indicator.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      background-color: rgba(0, 102, 204, 0.9);\n      color: white;\n      font-size: 14px;\n      font-weight: bold;\n      padding: 8px 12px;\n      border-radius: 6px;\n      z-index: 9999;\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n    `;\n        document.body.appendChild(indicator);\n        this.statusIndicator = indicator;\n        return indicator;\n    }\n    async processCalibrationPoint(point, index, total) {\n        try {\n            if (!point || typeof point.x !== 'number' || typeof point.y !== 'number') {\n                throw new Error(\"Invalid calibration point\");\n            }\n            if (this.statusIndicator) {\n                this.statusIndicator.textContent = `Processing point ${index + 1}/${total}`;\n            }\n            // Draw the dot\n            const canvas = this.canvasRef.current;\n            if (!canvas) {\n                throw new Error(\"Canvas not available\");\n            }\n            const ctx = canvas.getContext('2d');\n            (0,_DotCaptureUtil__WEBPACK_IMPORTED_MODULE_2__.drawRedDot)(ctx, point.x, point.y);\n            // Create countdown element\n            const canvasRect = canvas.getBoundingClientRect();\n            const countdownElement = document.createElement('div');\n            countdownElement.className = 'calibrate-countdown';\n            countdownElement.style.cssText = `\n        position: fixed;\n        left: ${canvasRect.left + point.x}px;\n        top: ${canvasRect.top + point.y - 60}px;\n        transform: translateX(-50%);\n        color: red;\n        font-size: 36px;\n        font-weight: bold;\n        text-shadow: 0 0 10px white, 0 0 20px white;\n        z-index: 9999;\n        background-color: rgba(255, 255, 255, 0.8);\n        border: 2px solid red;\n        border-radius: 50%;\n        width: 50px;\n        height: 50px;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n      `;\n            document.body.appendChild(countdownElement);\n            // Run countdown\n            for(let count = 3; count > 0; count--){\n                countdownElement.textContent = count;\n                this.setOutputText?.(`Point ${index + 1}/${total} - countdown ${count}`);\n                // Make sure dot remains visible during countdown\n                (0,_DotCaptureUtil__WEBPACK_IMPORTED_MODULE_2__.drawRedDot)(ctx, point.x, point.y);\n                // Wait for next countdown step\n                await new Promise((resolve)=>setTimeout(resolve, 800));\n            }\n            // Show capturing indicator\n            countdownElement.textContent = \"âœ“\";\n            this.setOutputText?.(`Capturing point ${index + 1}/${total}`);\n            // Remove countdown element\n            setTimeout(()=>{\n                if (countdownElement.parentNode) {\n                    countdownElement.parentNode.removeChild(countdownElement);\n                }\n            }, 300);\n            // Use CaptureHandler to handle the capture process\n            const captureResult = await this.captureHandler.captureAndShowPreview(this.captureCounter, this.canvasRef, point);\n            // Add null check before using the result\n            if (!captureResult) {\n                console.warn(`No capture result for point ${index + 1}`);\n            // You might want to set a default or retry logic here\n            }\n            // Wait for the preview to complete\n            await new Promise((resolve)=>setTimeout(resolve, 2500));\n            return true;\n        } catch (err) {\n            console.error(`Error processing point ${index + 1}:`, err);\n            if (this.statusIndicator) {\n                this.statusIndicator.textContent = `Error: ${err.message}`;\n            }\n            this.setOutputText?.(`Error: ${err.message}`);\n            return false;\n        }\n    }\n    async startCalibration() {\n        if (this.isProcessing) return false;\n        this.isProcessing = true;\n        if (this.toggleTopBar) {\n            this.toggleTopBar(false);\n        }\n        const indicator = this.createStatusIndicator();\n        indicator.textContent = 'Initializing calibration...';\n        try {\n            const canvas = this.canvasRef.current;\n            if (!canvas || canvas.width === 0 || canvas.height === 0) {\n                throw new Error('Canvas is not ready');\n            }\n            // Only generate if none were passed in\n            if (!this.calibrationPoints || this.calibrationPoints.length === 0) {\n                this.calibrationPoints = (0,_CalibratePoints__WEBPACK_IMPORTED_MODULE_0__.generateCalibrationPoints)(canvas.width, canvas.height);\n                if (!this.calibrationPoints || this.calibrationPoints.length === 0) {\n                    throw new Error('Failed to generate calibration points');\n                }\n            }\n            this.setOutputText?.(`Starting calibration with ${this.calibrationPoints.length} points`);\n            let successCount = 0;\n            for(let i = 0; i < this.calibrationPoints.length; i++){\n                const success = await this.processCalibrationPoint(this.calibrationPoints[i], i, this.calibrationPoints.length);\n                if (success) {\n                    successCount++;\n                }\n                // Small delay between points\n                await new Promise((resolve)=>setTimeout(resolve, 800));\n            }\n            this.setOutputText?.(`Calibration completed: ${successCount}/${this.calibrationPoints.length} points captured`);\n            if (this.statusIndicator) {\n                this.statusIndicator.textContent = `Calibration complete: ${successCount}/${this.calibrationPoints.length} points`;\n            }\n            // Turn TopBar back on\n            if (this.toggleTopBar) {\n                this.toggleTopBar(true);\n            }\n            if (this.onComplete) {\n                this.onComplete();\n            }\n        } catch (error) {\n            // console.error('Calibration error:', error);\n            // this.setOutputText?.(`Calibration error: ${error.message}`);\n            // if (this.statusIndicator) {\n            //   this.statusIndicator.textContent = `Error: ${error.message}`;\n            // }\n            // // Make sure we turn TopBar back on even on error\n            // if (this.toggleTopBar) {\n            //   this.toggleTopBar(true);\n            // }\n            console.error('Error during capture and preview:', error);\n            // Show error message\n            if (this.setProcessStatus) {\n                this.setProcessStatus('Error: ' + error.message);\n            }\n            // Show TopBar again even if there was an error\n            setTimeout(()=>{\n                if (typeof this.toggleTopBar === 'function') {\n                    this.toggleTopBar(true);\n                } else if (false) {}\n            }, 1500);\n            // Return a default object to prevent null reference errors\n            return {\n                screenImage: '',\n                webcamImage: '',\n                success: false\n            };\n        } finally{\n            this.isProcessing = false;\n            // Remove the status indicator after a delay\n            setTimeout(()=>{\n                if (this.statusIndicator && this.statusIndicator.parentNode) {\n                    this.statusIndicator.parentNode.removeChild(this.statusIndicator);\n                }\n            }, 3000);\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CalibrateHandler);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL3BhZ2VzL2NvbGxlY3RlZC1kYXRhc2V0L2NvbXBvbmVudHMtZ3VpL0FjdGlvbi9DYWxpYnJhdGVIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxnRUFBZ0U7QUFDRjtBQUNoQjtBQUNBO0FBRTlDLE1BQU1HO0lBQ0pDLFlBQVlDLE1BQU0sQ0FBRTtRQUNsQixJQUFJLENBQUNDLFNBQVMsR0FBR0QsT0FBT0MsU0FBUztRQUNqQyxJQUFJLENBQUNDLFlBQVksR0FBR0YsT0FBT0UsWUFBWTtRQUN2QyxJQUFJLENBQUNDLGFBQWEsR0FBR0gsT0FBT0csYUFBYTtRQUN6QyxJQUFJLENBQUNDLGNBQWMsR0FBR0osT0FBT0ksY0FBYyxJQUFJO1FBQy9DLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUdMLE9BQU9LLGlCQUFpQjtRQUNqRCxJQUFJLENBQUNDLGFBQWEsR0FBR04sT0FBT00sYUFBYSxJQUFJO1FBQzdDLElBQUksQ0FBQ0MsVUFBVSxHQUFHUCxPQUFPTyxVQUFVO1FBRW5DLG1FQUFtRTtRQUNuRSxJQUFJLENBQUNDLGlCQUFpQixHQUFHUixPQUFPUSxpQkFBaUIsSUFBSSxFQUFFO1FBRXZELDZEQUE2RDtRQUM3RCxJQUFJLENBQUNDLGNBQWMsR0FBRyxJQUFJYix1REFBY0EsQ0FDdEMsa0NBQWtDO1FBQ2xDLE9BQU9jLFdBQVdDLFVBQVVDLE1BQU1DO1lBQ2hDLElBQUk7Z0JBQ0YsTUFBTUMsV0FBVyxNQUFNQyxNQUFNLHFCQUFxQjtvQkFDaERDLFFBQVE7b0JBQ1JDLFNBQVM7d0JBQ1AsZ0JBQWdCO29CQUNsQjtvQkFDQUMsTUFBTUMsS0FBS0MsU0FBUyxDQUFDO3dCQUNuQlY7d0JBQ0FDO3dCQUNBQzt3QkFDQUMsUUFBUSxJQUFJLENBQUNQLGFBQWE7b0JBQzVCO2dCQUNGO2dCQUVBLElBQUksQ0FBQ1EsU0FBU08sRUFBRSxFQUFFO29CQUNoQkMsUUFBUUMsSUFBSSxDQUFDLENBQUMsc0JBQXNCLEVBQUVULFNBQVNV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RCxnQkFBZ0IsRUFBRTtnQkFDekIsSUFBSSxDQUFDQSxnQkFBZ0IsQ0FBQyxZQUFZbEQsTUFBTTBDLE9BQU87WUFDakQ7WUFFQSwrQ0FBK0M7WUFDL0NMLFdBQVc7Z0JBQ1QsSUFBSSxPQUFPLElBQUksQ0FBQzlELFlBQVksS0FBSyxZQUFZO29CQUMzQyxJQUFJLENBQUNBLFlBQVksQ0FBQztnQkFDcEIsT0FBTyxJQUFJLEtBQW9ELEVBQUUsRUFFaEU7WUFDSCxHQUFHO1lBRUgsMkRBQTJEO1lBQzNELE9BQU87Z0JBQ0w2RSxhQUFhO2dCQUNiQyxhQUFhO2dCQUNiSixTQUFTO1lBQ1g7UUFDRixTQUFVO1lBQ1IsSUFBSSxDQUFDL0MsWUFBWSxHQUFHO1lBRXBCLDRDQUE0QztZQUM1Q21DLFdBQVc7Z0JBQ1QsSUFBSSxJQUFJLENBQUNqQyxlQUFlLElBQUksSUFBSSxDQUFDQSxlQUFlLENBQUNrQyxVQUFVLEVBQUU7b0JBQzNELElBQUksQ0FBQ2xDLGVBQWUsQ0FBQ2tDLFVBQVUsQ0FBQ0MsV0FBVyxDQUFDLElBQUksQ0FBQ25DLGVBQWU7Z0JBQ2xFO1lBQ0YsR0FBRztRQUNMO0lBQ0Y7QUFDRjtBQUVBLGlFQUFlakMsZ0JBQWdCQSxFQUFDIiwic291cmNlcyI6WyIvVXNlcnMvcG9yY2hwb3J0YWwyL0Rlc2t0b3Av8J+UpWV2ZXJ5dGhpbmcvTWFpbl9XZWJfRXllVHJhY2tpbmcvbWFpbi13ZWIvZnJvbnRlbmQvcGFnZXMvY29sbGVjdGVkLWRhdGFzZXQvY29tcG9uZW50cy1ndWkvQWN0aW9uL0NhbGlicmF0ZUhhbmRsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ2FsaWJyYXRlSGFuZGxlci5qcyAtIFVzaW5nIHRoZSBleGlzdGluZyBDYXB0dXJlSGFuZGxlciBjbGFzc1xuaW1wb3J0IHsgZ2VuZXJhdGVDYWxpYnJhdGlvblBvaW50cyB9IGZyb20gJy4vQ2FsaWJyYXRlUG9pbnRzJztcbmltcG9ydCBDYXB0dXJlSGFuZGxlciBmcm9tICcuL0NhcHR1cmVIYW5kbGVyJztcbmltcG9ydCB7IGRyYXdSZWREb3QgfSBmcm9tICcuL0RvdENhcHR1cmVVdGlsJztcblxuY2xhc3MgQ2FsaWJyYXRlSGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuY2FudmFzUmVmID0gY29uZmlnLmNhbnZhc1JlZjtcbiAgICB0aGlzLnRvZ2dsZVRvcEJhciA9IGNvbmZpZy50b2dnbGVUb3BCYXI7XG4gICAgdGhpcy5zZXRPdXRwdXRUZXh0ID0gY29uZmlnLnNldE91dHB1dFRleHQ7XG4gICAgdGhpcy5jYXB0dXJlQ291bnRlciA9IGNvbmZpZy5jYXB0dXJlQ291bnRlciB8fCAxO1xuICAgIHRoaXMuc2V0Q2FwdHVyZUNvdW50ZXIgPSBjb25maWcuc2V0Q2FwdHVyZUNvdW50ZXI7XG4gICAgdGhpcy5jYXB0dXJlRm9sZGVyID0gY29uZmlnLmNhcHR1cmVGb2xkZXIgfHwgJ2V5ZV90cmFja2luZ19jYXB0dXJlcyc7XG4gICAgdGhpcy5vbkNvbXBsZXRlID0gY29uZmlnLm9uQ29tcGxldGU7XG5cbiAgICAvLyBBY2NlcHQgcGFzc2VkLWluIGNhbGlicmF0aW9uIHBvaW50cyAoZnJvbSBTZXRDYWxpYnJhdGVBY3Rpb24uanMpXG4gICAgdGhpcy5jYWxpYnJhdGlvblBvaW50cyA9IGNvbmZpZy5jYWxpYnJhdGlvblBvaW50cyB8fCBbXTtcblxuICAgIC8vIENyZWF0ZSBhIENhcHR1cmVIYW5kbGVyIGluc3RhbmNlIGZvciBoYW5kbGluZyB0aGUgY2FwdHVyZXNcbiAgICB0aGlzLmNhcHR1cmVIYW5kbGVyID0gbmV3IENhcHR1cmVIYW5kbGVyKFxuICAgICAgLy8gUGFzcyBzYXZlSW1hZ2VUb1NlcnZlciBmdW5jdGlvblxuICAgICAgYXN5bmMgKGltYWdlRGF0YSwgZmlsZW5hbWUsIHR5cGUsIGZvbGRlcikgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvc2F2ZS1jYXB0dXJlJywge1xuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIGltYWdlRGF0YSxcbiAgICAgICAgICAgICAgZmlsZW5hbWUsXG4gICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgIGZvbGRlcjogdGhpcy5jYXB0dXJlRm9sZGVyXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgU2VydmVyIHJlc3BvbmRlZCB3aXRoICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBzYXZpbmcgJHt0eXBlfTpgLCBlcnIpO1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIFBhc3Mgc2V0Q2FwdHVyZUNvdW50ZXIgZnVuY3Rpb25cbiAgICAgIChuZXdDb3VudGVyKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgbmV3Q291bnRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRoaXMuY2FwdHVyZUNvdW50ZXIgPSBuZXdDb3VudGVyKHRoaXMuY2FwdHVyZUNvdW50ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY2FwdHVyZUNvdW50ZXIgPSBuZXdDb3VudGVyO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAodGhpcy5zZXRDYXB0dXJlQ291bnRlcikge1xuICAgICAgICAgIHRoaXMuc2V0Q2FwdHVyZUNvdW50ZXIodGhpcy5jYXB0dXJlQ291bnRlcik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBQYXNzIHNldFByb2Nlc3NTdGF0dXMgZnVuY3Rpb25cbiAgICAgIChzdGF0dXMpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc2V0T3V0cHV0VGV4dCkge1xuICAgICAgICAgIHRoaXMuc2V0T3V0cHV0VGV4dChzdGF0dXMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gUGFzcyB0b2dnbGVUb3BCYXIgZnVuY3Rpb25cbiAgICAgIHRoaXMudG9nZ2xlVG9wQmFyXG4gICAgKTtcblxuICAgIC8vIEludGVybmFsc1xuICAgIHRoaXMuaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgdGhpcy5jdXJyZW50UG9pbnRJbmRleCA9IDA7XG4gICAgdGhpcy5zdGF0dXNJbmRpY2F0b3IgPSBudWxsO1xuICB9XG5cbiAgY3JlYXRlU3RhdHVzSW5kaWNhdG9yKCkge1xuICAgIGNvbnN0IGV4aXN0aW5nSW5kaWNhdG9ycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jYWxpYnJhdGUtc3RhdHVzLWluZGljYXRvcicpO1xuICAgIGV4aXN0aW5nSW5kaWNhdG9ycy5mb3JFYWNoKGluZGljYXRvciA9PiBpbmRpY2F0b3IucmVtb3ZlKCkpO1xuXG4gICAgY29uc3QgaW5kaWNhdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgaW5kaWNhdG9yLmNsYXNzTmFtZSA9ICdjYWxpYnJhdGUtc3RhdHVzLWluZGljYXRvcic7XG4gICAgaW5kaWNhdG9yLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICB0b3A6IDEwcHg7XG4gICAgICByaWdodDogMTBweDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMTAyLCAyMDQsIDAuOSk7XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgIHBhZGRpbmc6IDhweCAxMnB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgei1pbmRleDogOTk5OTtcbiAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMyk7XG4gICAgYDtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGluZGljYXRvcik7XG4gICAgdGhpcy5zdGF0dXNJbmRpY2F0b3IgPSBpbmRpY2F0b3I7XG4gICAgcmV0dXJuIGluZGljYXRvcjtcbiAgfVxuXG4gIGFzeW5jIHByb2Nlc3NDYWxpYnJhdGlvblBvaW50KHBvaW50LCBpbmRleCwgdG90YWwpIHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFwb2ludCB8fCB0eXBlb2YgcG9pbnQueCAhPT0gJ251bWJlcicgfHwgdHlwZW9mIHBvaW50LnkgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2FsaWJyYXRpb24gcG9pbnRcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnN0YXR1c0luZGljYXRvcikge1xuICAgICAgICB0aGlzLnN0YXR1c0luZGljYXRvci50ZXh0Q29udGVudCA9IGBQcm9jZXNzaW5nIHBvaW50ICR7aW5kZXggKyAxfS8ke3RvdGFsfWA7XG4gICAgICB9XG5cbiAgICAgIC8vIERyYXcgdGhlIGRvdFxuICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5jYW52YXNSZWYuY3VycmVudDtcbiAgICAgIGlmICghY2FudmFzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbnZhcyBub3QgYXZhaWxhYmxlXCIpO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGRyYXdSZWREb3QoY3R4LCBwb2ludC54LCBwb2ludC55KTtcbiAgICAgIFxuICAgICAgLy8gQ3JlYXRlIGNvdW50ZG93biBlbGVtZW50XG4gICAgICBjb25zdCBjYW52YXNSZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3QgY291bnRkb3duRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgY291bnRkb3duRWxlbWVudC5jbGFzc05hbWUgPSAnY2FsaWJyYXRlLWNvdW50ZG93bic7XG4gICAgICBjb3VudGRvd25FbGVtZW50LnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgbGVmdDogJHtjYW52YXNSZWN0LmxlZnQgKyBwb2ludC54fXB4O1xuICAgICAgICB0b3A6ICR7Y2FudmFzUmVjdC50b3AgKyBwb2ludC55IC0gNjB9cHg7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICAgZm9udC1zaXplOiAzNnB4O1xuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgdGV4dC1zaGFkb3c6IDAgMCAxMHB4IHdoaXRlLCAwIDAgMjBweCB3aGl0ZTtcbiAgICAgICAgei1pbmRleDogOTk5OTtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpO1xuICAgICAgICBib3JkZXI6IDJweCBzb2xpZCByZWQ7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgd2lkdGg6IDUwcHg7XG4gICAgICAgIGhlaWdodDogNTBweDtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcbiAgICAgIGA7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvdW50ZG93bkVsZW1lbnQpO1xuICAgICAgXG4gICAgICAvLyBSdW4gY291bnRkb3duXG4gICAgICBmb3IgKGxldCBjb3VudCA9IDM7IGNvdW50ID4gMDsgY291bnQtLSkge1xuICAgICAgICBjb3VudGRvd25FbGVtZW50LnRleHRDb250ZW50ID0gY291bnQ7XG4gICAgICAgIHRoaXMuc2V0T3V0cHV0VGV4dD8uKGBQb2ludCAke2luZGV4ICsgMX0vJHt0b3RhbH0gLSBjb3VudGRvd24gJHtjb3VudH1gKTtcbiAgICAgICAgXG4gICAgICAgIC8vIE1ha2Ugc3VyZSBkb3QgcmVtYWlucyB2aXNpYmxlIGR1cmluZyBjb3VudGRvd25cbiAgICAgICAgZHJhd1JlZERvdChjdHgsIHBvaW50LngsIHBvaW50LnkpO1xuICAgICAgICBcbiAgICAgICAgLy8gV2FpdCBmb3IgbmV4dCBjb3VudGRvd24gc3RlcFxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgODAwKSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFNob3cgY2FwdHVyaW5nIGluZGljYXRvclxuICAgICAgY291bnRkb3duRWxlbWVudC50ZXh0Q29udGVudCA9IFwi4pyTXCI7XG4gICAgICB0aGlzLnNldE91dHB1dFRleHQ/LihgQ2FwdHVyaW5nIHBvaW50ICR7aW5kZXggKyAxfS8ke3RvdGFsfWApO1xuICAgICAgXG4gICAgICAvLyBSZW1vdmUgY291bnRkb3duIGVsZW1lbnRcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAoY291bnRkb3duRWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgY291bnRkb3duRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvdW50ZG93bkVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9LCAzMDApO1xuICAgICAgXG4gICAgICAvLyBVc2UgQ2FwdHVyZUhhbmRsZXIgdG8gaGFuZGxlIHRoZSBjYXB0dXJlIHByb2Nlc3NcbiAgICAgIGNvbnN0IGNhcHR1cmVSZXN1bHQgPSBhd2FpdCB0aGlzLmNhcHR1cmVIYW5kbGVyLmNhcHR1cmVBbmRTaG93UHJldmlldyhcbiAgICAgICAgdGhpcy5jYXB0dXJlQ291bnRlcixcbiAgICAgICAgdGhpcy5jYW52YXNSZWYsXG4gICAgICAgIHBvaW50XG4gICAgICApO1xuICAgICAgXG4gICAgICAvLyBBZGQgbnVsbCBjaGVjayBiZWZvcmUgdXNpbmcgdGhlIHJlc3VsdFxuICAgICAgaWYgKCFjYXB0dXJlUmVzdWx0KSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgTm8gY2FwdHVyZSByZXN1bHQgZm9yIHBvaW50ICR7aW5kZXggKyAxfWApO1xuICAgICAgICAvLyBZb3UgbWlnaHQgd2FudCB0byBzZXQgYSBkZWZhdWx0IG9yIHJldHJ5IGxvZ2ljIGhlcmVcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gV2FpdCBmb3IgdGhlIHByZXZpZXcgdG8gY29tcGxldGVcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAyNTAwKSk7XG4gICAgICBcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgcHJvY2Vzc2luZyBwb2ludCAke2luZGV4ICsgMX06YCwgZXJyKTtcbiAgICAgIGlmICh0aGlzLnN0YXR1c0luZGljYXRvcikge1xuICAgICAgICB0aGlzLnN0YXR1c0luZGljYXRvci50ZXh0Q29udGVudCA9IGBFcnJvcjogJHtlcnIubWVzc2FnZX1gO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRPdXRwdXRUZXh0Py4oYEVycm9yOiAke2Vyci5tZXNzYWdlfWApO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHN0YXJ0Q2FsaWJyYXRpb24oKSB7XG4gICAgaWYgKHRoaXMuaXNQcm9jZXNzaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgdGhpcy5pc1Byb2Nlc3NpbmcgPSB0cnVlO1xuXG5cblxuICAgIGlmICh0aGlzLnRvZ2dsZVRvcEJhcikge1xuICAgICAgdGhpcy50b2dnbGVUb3BCYXIoZmFsc2UpO1xuICAgIH1cblxuICAgIGNvbnN0IGluZGljYXRvciA9IHRoaXMuY3JlYXRlU3RhdHVzSW5kaWNhdG9yKCk7XG4gICAgaW5kaWNhdG9yLnRleHRDb250ZW50ID0gJ0luaXRpYWxpemluZyBjYWxpYnJhdGlvbi4uLic7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5jYW52YXNSZWYuY3VycmVudDtcbiAgICAgIGlmICghY2FudmFzIHx8IGNhbnZhcy53aWR0aCA9PT0gMCB8fCBjYW52YXMuaGVpZ2h0ID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FudmFzIGlzIG5vdCByZWFkeScpO1xuICAgICAgfVxuXG4gICAgICAvLyBPbmx5IGdlbmVyYXRlIGlmIG5vbmUgd2VyZSBwYXNzZWQgaW5cbiAgICAgIGlmICghdGhpcy5jYWxpYnJhdGlvblBvaW50cyB8fCB0aGlzLmNhbGlicmF0aW9uUG9pbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aGlzLmNhbGlicmF0aW9uUG9pbnRzID0gZ2VuZXJhdGVDYWxpYnJhdGlvblBvaW50cyhjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuXG4gICAgICAgIGlmICghdGhpcy5jYWxpYnJhdGlvblBvaW50cyB8fCB0aGlzLmNhbGlicmF0aW9uUG9pbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGdlbmVyYXRlIGNhbGlicmF0aW9uIHBvaW50cycpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0T3V0cHV0VGV4dD8uKGBTdGFydGluZyBjYWxpYnJhdGlvbiB3aXRoICR7dGhpcy5jYWxpYnJhdGlvblBvaW50cy5sZW5ndGh9IHBvaW50c2ApO1xuICAgICAgXG4gICAgICBsZXQgc3VjY2Vzc0NvdW50ID0gMDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jYWxpYnJhdGlvblBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gYXdhaXQgdGhpcy5wcm9jZXNzQ2FsaWJyYXRpb25Qb2ludChcbiAgICAgICAgICB0aGlzLmNhbGlicmF0aW9uUG9pbnRzW2ldLCBcbiAgICAgICAgICBpLCBcbiAgICAgICAgICB0aGlzLmNhbGlicmF0aW9uUG9pbnRzLmxlbmd0aFxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICBzdWNjZXNzQ291bnQrKztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gU21hbGwgZGVsYXkgYmV0d2VlbiBwb2ludHNcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDgwMCkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldE91dHB1dFRleHQ/LihgQ2FsaWJyYXRpb24gY29tcGxldGVkOiAke3N1Y2Nlc3NDb3VudH0vJHt0aGlzLmNhbGlicmF0aW9uUG9pbnRzLmxlbmd0aH0gcG9pbnRzIGNhcHR1cmVkYCk7XG4gICAgICBpZiAodGhpcy5zdGF0dXNJbmRpY2F0b3IpIHtcbiAgICAgICAgdGhpcy5zdGF0dXNJbmRpY2F0b3IudGV4dENvbnRlbnQgPSBgQ2FsaWJyYXRpb24gY29tcGxldGU6ICR7c3VjY2Vzc0NvdW50fS8ke3RoaXMuY2FsaWJyYXRpb25Qb2ludHMubGVuZ3RofSBwb2ludHNgO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBUdXJuIFRvcEJhciBiYWNrIG9uXG4gICAgICBpZiAodGhpcy50b2dnbGVUb3BCYXIpIHtcbiAgICAgICAgdGhpcy50b2dnbGVUb3BCYXIodHJ1ZSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmICh0aGlzLm9uQ29tcGxldGUpIHtcbiAgICAgICAgdGhpcy5vbkNvbXBsZXRlKCk7XG4gICAgICB9XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gY29uc29sZS5lcnJvcignQ2FsaWJyYXRpb24gZXJyb3I6JywgZXJyb3IpO1xuICAgICAgLy8gdGhpcy5zZXRPdXRwdXRUZXh0Py4oYENhbGlicmF0aW9uIGVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICAvLyBpZiAodGhpcy5zdGF0dXNJbmRpY2F0b3IpIHtcbiAgICAgIC8vICAgdGhpcy5zdGF0dXNJbmRpY2F0b3IudGV4dENvbnRlbnQgPSBgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gO1xuICAgICAgLy8gfVxuICAgICAgXG4gICAgICAvLyAvLyBNYWtlIHN1cmUgd2UgdHVybiBUb3BCYXIgYmFjayBvbiBldmVuIG9uIGVycm9yXG4gICAgICAvLyBpZiAodGhpcy50b2dnbGVUb3BCYXIpIHtcbiAgICAgIC8vICAgdGhpcy50b2dnbGVUb3BCYXIodHJ1ZSk7XG4gICAgICAvLyB9XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkdXJpbmcgY2FwdHVyZSBhbmQgcHJldmlldzonLCBlcnJvcik7XG4gIFxuICAgICAgLy8gU2hvdyBlcnJvciBtZXNzYWdlXG4gICAgICBpZiAodGhpcy5zZXRQcm9jZXNzU3RhdHVzKSB7XG4gICAgICAgIHRoaXMuc2V0UHJvY2Vzc1N0YXR1cygnRXJyb3I6ICcgKyBlcnJvci5tZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gU2hvdyBUb3BCYXIgYWdhaW4gZXZlbiBpZiB0aGVyZSB3YXMgYW4gZXJyb3JcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMudG9nZ2xlVG9wQmFyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhpcy50b2dnbGVUb3BCYXIodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnRvZ2dsZVRvcEJhcikge1xuICAgICAgICAgIHdpbmRvdy50b2dnbGVUb3BCYXIodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIDE1MDApO1xuICAgICAgXG4gICAgICAvLyBSZXR1cm4gYSBkZWZhdWx0IG9iamVjdCB0byBwcmV2ZW50IG51bGwgcmVmZXJlbmNlIGVycm9yc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2NyZWVuSW1hZ2U6ICcnLFxuICAgICAgICB3ZWJjYW1JbWFnZTogJycsXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlXG4gICAgICB9O1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLmlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICAgXG4gICAgICAvLyBSZW1vdmUgdGhlIHN0YXR1cyBpbmRpY2F0b3IgYWZ0ZXIgYSBkZWxheVxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXR1c0luZGljYXRvciAmJiB0aGlzLnN0YXR1c0luZGljYXRvci5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgdGhpcy5zdGF0dXNJbmRpY2F0b3IucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnN0YXR1c0luZGljYXRvcik7XG4gICAgICAgIH1cbiAgICAgIH0sIDMwMDApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDYWxpYnJhdGVIYW5kbGVyOyJdLCJuYW1lcyI6WyJnZW5lcmF0ZUNhbGlicmF0aW9uUG9pbnRzIiwiQ2FwdHVyZUhhbmRsZXIiLCJkcmF3UmVkRG90IiwiQ2FsaWJyYXRlSGFuZGxlciIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwiY2FudmFzUmVmIiwidG9nZ2xlVG9wQmFyIiwic2V0T3V0cHV0VGV4dCIsImNhcHR1cmVDb3VudGVyIiwic2V0Q2FwdHVyZUNvdW50ZXIiLCJjYXB0dXJlRm9sZGVyIiwib25Db21wbGV0ZSIsImNhbGlicmF0aW9uUG9pbnRzIiwiY2FwdHVyZUhhbmRsZXIiLCJpbWFnZURhdGEiLCJmaWxlbmFtZSIsInR5cGUiLCJmb2xkZXIiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5Iiwib2siLCJjb25zb2xlIiwid2FybiIsInN0YXR1cyIsImpzb24iLCJlcnIiLCJlcnJvciIsIm5ld0NvdW50ZXIiLCJpc1Byb2Nlc3NpbmciLCJjdXJyZW50UG9pbnRJbmRleCIsInN0YXR1c0luZGljYXRvciIsImNyZWF0ZVN0YXR1c0luZGljYXRvciIsImV4aXN0aW5nSW5kaWNhdG9ycyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJpbmRpY2F0b3IiLCJyZW1vdmUiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwic3R5bGUiLCJjc3NUZXh0IiwiYXBwZW5kQ2hpbGQiLCJwcm9jZXNzQ2FsaWJyYXRpb25Qb2ludCIsInBvaW50IiwiaW5kZXgiLCJ0b3RhbCIsIngiLCJ5IiwiRXJyb3IiLCJ0ZXh0Q29udGVudCIsImNhbnZhcyIsImN1cnJlbnQiLCJjdHgiLCJnZXRDb250ZXh0IiwiY2FudmFzUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNvdW50ZG93bkVsZW1lbnQiLCJsZWZ0IiwidG9wIiwiY291bnQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJjYXB0dXJlUmVzdWx0IiwiY2FwdHVyZUFuZFNob3dQcmV2aWV3IiwibWVzc2FnZSIsInN0YXJ0Q2FsaWJyYXRpb24iLCJ3aWR0aCIsImhlaWdodCIsImxlbmd0aCIsInN1Y2Nlc3NDb3VudCIsImkiLCJzdWNjZXNzIiwic2V0UHJvY2Vzc1N0YXR1cyIsIndpbmRvdyIsInNjcmVlbkltYWdlIiwid2ViY2FtSW1hZ2UiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-node)/./pages/collected-dataset/components-gui/Action/CalibrateHandler.js\n");

/***/ }),

/***/ "(pages-dir-node)/./pages/collected-dataset/components-gui/Action/CaptureHandler.js":
/*!*************************************************************************!*\
  !*** ./pages/collected-dataset/components-gui/Action/CaptureHandler.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// CaptureHandler.js - With fixed capture numbering\nclass CaptureHandler {\n    constructor(saveFunction, counterSetter, statusSetter, toggleTopBarFunction){\n        this.saveImageToServer = saveFunction;\n        this.setCaptureCounter = counterSetter;\n        this.setProcessStatus = statusSetter;\n        this.toggleTopBar = toggleTopBarFunction;\n        this.captureFolder = 'eye_tracking_captures'; // Use fixed folder name\n    }\n    // Show preview of the SAVED images for exactly 2 seconds\n    showCapturePreview(screenImage, webcamImage, dotPosition) {\n        // Create a centered preview container\n        const previewContainer = document.createElement('div');\n        previewContainer.style.cssText = `\n        position: fixed;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        display: flex;\n        gap: 20px;\n        background-color: rgba(0, 0, 0, 0.85);\n        padding: 20px;\n        border-radius: 12px;\n        z-index: 999999;\n        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.6);\n        opacity: 1;\n        transition: opacity 0.3s ease;\n      `;\n        // Function to create an image preview element\n        const createImagePreview = (imageData, label)=>{\n            if (!imageData) return null;\n            const preview = document.createElement('div');\n            preview.style.cssText = `\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        `;\n            const img = document.createElement('img');\n            img.src = imageData;\n            img.style.cssText = `\n          max-width: 320px;\n          max-height: 240px;\n          border: 3px solid white;\n          border-radius: 8px;\n          background-color: #333;\n        `;\n            // Event listeners for image loading\n            img.onload = ()=>console.log(`${label} image loaded successfully`);\n            img.onerror = (e)=>console.error(`Error loading ${label} image:`, e);\n            const textLabel = document.createElement('div');\n            textLabel.textContent = label;\n            textLabel.style.cssText = `\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n          font-weight: bold;\n        `;\n            preview.appendChild(img);\n            preview.appendChild(textLabel);\n            return preview;\n        };\n        // Add debug info\n        const debugInfo = document.createElement('div');\n        debugInfo.style.cssText = `\n        position: absolute;\n        top: -30px;\n        left: 0;\n        width: 100%;\n        color: white;\n        font-size: 12px;\n        text-align: center;\n      `;\n        debugInfo.textContent = `Screen: ${screenImage ? 'YES' : 'NO'}, Webcam: ${webcamImage ? 'YES' : 'NO'}`;\n        previewContainer.appendChild(debugInfo);\n        // Add screen capture preview\n        const screenPreview = createImagePreview(screenImage, 'Screen Capture');\n        if (screenPreview) {\n            previewContainer.appendChild(screenPreview);\n        }\n        // Add webcam capture preview\n        const webcamPreview = createImagePreview(webcamImage, 'Webcam Capture');\n        if (webcamPreview) {\n            previewContainer.appendChild(webcamPreview);\n        }\n        // Add dot position info if available\n        if (dotPosition) {\n            const positionInfo = document.createElement('div');\n            positionInfo.textContent = `Dot position: x=${Math.round(dotPosition.x)}, y=${Math.round(dotPosition.y)}`;\n            positionInfo.style.cssText = `\n          color: #ffcc00;\n          font-size: 14px;\n          position: absolute;\n          top: -50px;\n          left: 0;\n          width: 100%;\n          text-align: center;\n        `;\n            previewContainer.appendChild(positionInfo);\n        }\n        // Add timer countdown\n        const timerElement = document.createElement('div');\n        timerElement.textContent = '2.0s';\n        timerElement.style.cssText = `\n        position: absolute;\n        bottom: -25px;\n        right: 20px;\n        color: white;\n        font-size: 12px;\n        background-color: rgba(0, 0, 0, 0.7);\n        padding: 3px 8px;\n        border-radius: 4px;\n      `;\n        previewContainer.appendChild(timerElement);\n        // Add the preview to the document\n        document.body.appendChild(previewContainer);\n        // Start countdown timer\n        let timeLeft = 2.0;\n        const interval = setInterval(()=>{\n            timeLeft -= 0.1;\n            if (timeLeft <= 0) {\n                clearInterval(interval);\n                // Fade out\n                previewContainer.style.opacity = '0';\n                // Remove after fade\n                setTimeout(()=>{\n                    if (previewContainer.parentNode) {\n                        previewContainer.parentNode.removeChild(previewContainer);\n                    }\n                }, 300);\n            } else {\n                timerElement.textContent = `${timeLeft.toFixed(1)}s`;\n            }\n        }, 100);\n        // Safety cleanup after 5 seconds in case anything goes wrong\n        setTimeout(()=>{\n            if (previewContainer.parentNode) {\n                previewContainer.parentNode.removeChild(previewContainer);\n            }\n        }, 5000);\n    }\n    // Take a webcam picture and immediately stop the stream\n    async captureWebcamImage(captureNumber) {\n        let stream = null;\n        let tempVideo = null;\n        try {\n            // Format the filename with the current counter\n            const filename = `webcam_${String(captureNumber).padStart(3, '0')}.jpg`;\n            // Create a new stream with high resolution constraints\n            stream = await navigator.mediaDevices.getUserMedia({\n                video: {\n                    width: {\n                        ideal: 4096\n                    },\n                    height: {\n                        ideal: 2160\n                    },\n                    facingMode: \"user\"\n                },\n                audio: false\n            });\n            // Create a temporary video element\n            tempVideo = document.createElement('video');\n            tempVideo.autoplay = true;\n            tempVideo.playsInline = true;\n            tempVideo.muted = true;\n            tempVideo.style.position = 'absolute';\n            tempVideo.style.left = '-9999px';\n            tempVideo.style.opacity = '0';\n            document.body.appendChild(tempVideo);\n            // Connect stream to video element\n            tempVideo.srcObject = stream;\n            // Wait for video to initialize\n            await new Promise((resolve)=>{\n                const timeoutId = setTimeout(()=>{\n                    console.warn(\"Video loading timed out, continuing anyway\");\n                    resolve();\n                }, 1000);\n                tempVideo.onloadeddata = ()=>{\n                    clearTimeout(timeoutId);\n                    resolve();\n                };\n            });\n            // Small delay to ensure a clear frame\n            await new Promise((resolve)=>setTimeout(resolve, 200));\n            // Get actual video dimensions\n            const videoWidth = tempVideo.videoWidth || 640;\n            const videoHeight = tempVideo.videoHeight || 480;\n            console.log(`Capturing at resolution: ${videoWidth}x${videoHeight}`);\n            // Capture the frame at full resolution\n            const tempCanvas = document.createElement('canvas');\n            tempCanvas.width = videoWidth;\n            tempCanvas.height = videoHeight;\n            const ctx = tempCanvas.getContext('2d');\n            ctx.drawImage(tempVideo, 0, 0, videoWidth, videoHeight);\n            // Convert to JPEG with high quality\n            const imageData = tempCanvas.toDataURL('image/jpeg', 0.95);\n            // Save the image\n            await this.saveImageToServer(imageData, filename, 'webcam', this.captureFolder);\n            // Clean up\n            stream.getTracks().forEach((track)=>track.stop());\n            tempVideo.remove();\n            return true;\n        } catch (error) {\n            console.error('Error capturing webcam image:', error);\n            if (stream) {\n                stream.getTracks().forEach((track)=>track.stop());\n            }\n            if (tempVideo) {\n                tempVideo.remove();\n            }\n            return false;\n        }\n    }\n    // Capture screen image from canvas\n    async captureScreenImage(canvasRef, captureNumber) {\n        try {\n            // Format the filename with the current counter\n            const filename = `screen_${String(captureNumber).padStart(3, '0')}.jpg`;\n            const canvas = canvasRef.current;\n            if (!canvas) {\n                console.error(\"Canvas reference is null\");\n                return {\n                    imageData: null,\n                    saveResponse: null\n                };\n            }\n            // Get image data\n            const imageData = canvas.toDataURL('image/png');\n            // Save the image\n            if (this.saveImageToServer) {\n                const saveResponse = await this.saveImageToServer(imageData, filename, 'screen', this.captureFolder);\n                console.log(`Saved screen image: ${filename}, response:`, saveResponse);\n                return {\n                    imageData,\n                    saveResponse\n                };\n            }\n            return {\n                imageData,\n                saveResponse: null\n            };\n        } catch (error) {\n            console.error(\"Error capturing screen image:\", error);\n            return {\n                imageData: null,\n                saveResponse: null\n            };\n        }\n    }\n    // Save parameter CSV\n    async saveParameterCSV(captureNumber, params) {\n        try {\n            // Format the filename with the current counter\n            const filename = `parameter_${String(captureNumber).padStart(3, '0')}.csv`;\n            // Create CSV content with two columns: name and value\n            const csvData = [\n                \"name,value\",\n                ...Object.entries(params).map(([name, value])=>`${name},${value}`)\n            ].join('\\n');\n            // Convert CSV to data URL\n            const csvBlob = new Blob([\n                csvData\n            ], {\n                type: 'text/csv'\n            });\n            const csvReader = new FileReader();\n            const csvDataUrl = await new Promise((resolve)=>{\n                csvReader.onloadend = ()=>resolve(csvReader.result);\n                csvReader.readAsDataURL(csvBlob);\n            });\n            // Save CSV using the API\n            if (this.saveImageToServer) {\n                const saveResponse = await this.saveImageToServer(csvDataUrl, filename, 'parameters', this.captureFolder);\n                console.log(`Saved parameter CSV: ${filename}`);\n                return saveResponse;\n            }\n            return null;\n        } catch (csvError) {\n            console.error(\"Error saving parameter CSV:\", csvError);\n            return null;\n        }\n    }\n    // Main capture and show process\n    async captureAndShowPreview(captureCounter, canvasRef, position) {\n        try {\n            console.log(`Starting capture process with counter: ${captureCounter}`);\n            // Step 1: Capture screen image\n            const { imageData: screenImage, saveResponse: screenResponse } = await this.captureScreenImage(canvasRef, captureCounter);\n            // Get the capture number from the response if available (for continuous numbering)\n            let usedCaptureNumber = captureCounter;\n            if (screenResponse && screenResponse.captureNumber) {\n                usedCaptureNumber = screenResponse.captureNumber;\n                console.log(`Server assigned capture number: ${usedCaptureNumber}`);\n            }\n            // Step 2: Capture webcam image (and immediately stop stream)\n            const webcamSuccess = await this.captureWebcamImage(usedCaptureNumber);\n            // Step 3: Save parameters\n            const params = {\n                dot_x: position ? position.x : 0,\n                dot_y: position ? position.y : 0,\n                canvas_width: canvasRef.current ? canvasRef.current.width : 0,\n                canvas_height: canvasRef.current ? canvasRef.current.height : 0,\n                window_width: window.innerWidth,\n                window_height: window.innerHeight,\n                timestamp: new Date().toISOString()\n            };\n            await this.saveParameterCSV(usedCaptureNumber, params);\n            // Step 4: Increment counter for next capture\n            if (this.setCaptureCounter) {\n                // If the server is managing numbering, use the next number\n                if (screenResponse && screenResponse.captureNumber) {\n                    this.setCaptureCounter(screenResponse.captureNumber + 1);\n                } else {\n                    this.setCaptureCounter((prev)=>prev + 1);\n                }\n            }\n            // Step 5: Update status\n            if (this.setProcessStatus) {\n                this.setProcessStatus(`Captured with dot at: x=${position?.x}, y=${position?.y}`);\n            }\n            // Step 6: Show preview using the in-memory image data\n            this.showCapturePreview(screenImage, webcamSuccess ? 'webcam_image_data' : null, position);\n            // Step 7: Show TopBar again after preview is done\n            setTimeout(()=>{\n                if (typeof this.toggleTopBar === 'function') {\n                    this.toggleTopBar(true);\n                } else if (false) {}\n            }, 2200); // Wait longer than the preview duration\n            // Step 8: Clear status after a delay\n            setTimeout(()=>{\n                if (this.setProcessStatus) {\n                    this.setProcessStatus('');\n                }\n            }, 3000);\n        } catch (error) {\n            console.error('Error during capture and preview:', error);\n            // Show error message\n            if (this.setProcessStatus) {\n                this.setProcessStatus('Error: ' + error.message);\n            }\n            // Show TopBar again even if there was an error\n            setTimeout(()=>{\n                if (typeof this.toggleTopBar === 'function') {\n                    this.toggleTopBar(true);\n                } else if (false) {}\n            }, 1500);\n            // Clear error message after delay\n            setTimeout(()=>{\n                if (this.setProcessStatus) {\n                    this.setProcessStatus('');\n                }\n            }, 3000);\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CaptureHandler);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./pages/collected-dataset/components-gui/Action/CaptureHandler.js\n");

/***/ }),

/***/ "(pages-dir-node)/./pages/collected-dataset/components-gui/Action/DotCaptureUtil.js":
/*!*************************************************************************!*\
  !*** ./pages/collected-dataset/components-gui/Action/DotCaptureUtil.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDotCountdown: () => (/* binding */ createDotCountdown),\n/* harmony export */   drawRedDot: () => (/* binding */ drawRedDot),\n/* harmony export */   getRandomPosition: () => (/* binding */ getRandomPosition),\n/* harmony export */   initializeCanvas: () => (/* binding */ initializeCanvas),\n/* harmony export */   showImagePreview: () => (/* binding */ showImagePreview)\n/* harmony export */ });\n// DotCaptureUtil.js\n// Utility functions for dot capture and preview display\n// Show preview of captured images for exactly 2 seconds\n// DotCaptureUtil.js\n// Utility functions for dot capture and preview display\n// Improved function to show preview of captured images for exactly 2 seconds\nconst showImagePreview = (screenImage, webcamImage, dotPosition)=>{\n    // Create a preview container that centers in the screen\n    const previewContainer = document.createElement('div');\n    previewContainer.className = 'capture-preview-container';\n    previewContainer.style.cssText = `\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      display: flex;\n      gap: 20px;\n      background-color: rgba(0, 0, 0, 0.85);\n      padding: 20px;\n      border-radius: 12px;\n      z-index: 9999;\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.6);\n      opacity: 1;\n      transition: opacity 0.2s ease-in-out;\n    `;\n    // Add screen capture preview if available\n    if (screenImage) {\n        const screenPreview = document.createElement('div');\n        screenPreview.style.cssText = `\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      `;\n        const screenImg = document.createElement('img');\n        screenImg.src = screenImage;\n        screenImg.style.cssText = `\n        max-width: 350px;\n        max-height: 250px;\n        border: 3px solid white;\n        border-radius: 8px;\n      `;\n        const screenLabel = document.createElement('div');\n        screenLabel.textContent = 'Screen Capture';\n        screenLabel.style.cssText = `\n        color: white;\n        font-size: 14px;\n        margin-top: 10px;\n        font-weight: bold;\n      `;\n        screenPreview.appendChild(screenImg);\n        screenPreview.appendChild(screenLabel);\n        previewContainer.appendChild(screenPreview);\n    }\n    // Add webcam capture preview if available\n    if (webcamImage) {\n        const webcamPreview = document.createElement('div');\n        webcamPreview.style.cssText = `\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      `;\n        const webcamImg = document.createElement('img');\n        webcamImg.src = webcamImage;\n        webcamImg.style.cssText = `\n        max-width: 350px;\n        max-height: 250px;\n        border: 3px solid white;\n        border-radius: 8px;\n      `;\n        const webcamLabel = document.createElement('div');\n        webcamLabel.textContent = 'Webcam Capture';\n        webcamLabel.style.cssText = `\n        color: white;\n        font-size: 14px;\n        margin-top: 10px;\n        font-weight: bold;\n      `;\n        webcamPreview.appendChild(webcamImg);\n        webcamPreview.appendChild(webcamLabel);\n        previewContainer.appendChild(webcamPreview);\n    }\n    // Add dot position info if available\n    if (dotPosition) {\n        const positionInfo = document.createElement('div');\n        positionInfo.textContent = `Dot position: x=${Math.round(dotPosition.x)}, y=${Math.round(dotPosition.y)}`;\n        positionInfo.style.cssText = `\n        color: #ffcc00;\n        font-size: 14px;\n        position: absolute;\n        top: -25px;\n        left: 0;\n        width: 100%;\n        text-align: center;\n      `;\n        previewContainer.appendChild(positionInfo);\n    }\n    // Add timer countdown\n    const timerElement = document.createElement('div');\n    timerElement.textContent = '2.0s';\n    timerElement.style.cssText = `\n      position: absolute;\n      bottom: -25px;\n      right: 20px;\n      color: white;\n      font-size: 12px;\n      background-color: rgba(0, 0, 0, 0.7);\n      padding: 3px 8px;\n      border-radius: 4px;\n    `;\n    previewContainer.appendChild(timerElement);\n    // Add the preview to the document\n    document.body.appendChild(previewContainer);\n    // Start countdown timer\n    let timeLeft = 2.0;\n    const interval = setInterval(()=>{\n        timeLeft -= 0.1;\n        if (timeLeft <= 0) {\n            clearInterval(interval);\n            timerElement.textContent = 'Closing...';\n            // Fade out the preview\n            previewContainer.style.opacity = '0';\n            // Remove after fade animation\n            setTimeout(()=>{\n                if (previewContainer && previewContainer.parentNode) {\n                    previewContainer.parentNode.removeChild(previewContainer);\n                }\n            }, 200);\n        } else {\n            timerElement.textContent = `${timeLeft.toFixed(1)}s`;\n        }\n    }, 100);\n    return previewContainer;\n};\n// Other utility functions remain the same...\n// Create and append a countdown element above a dot\nconst createDotCountdown = (position, canvasRect)=>{\n    // Create the countdown element directly above the dot\n    const countdownElement = document.createElement('div');\n    countdownElement.className = 'forced-countdown';\n    // Position it above the dot (calculate absolute position considering the canvas position)\n    const absoluteX = canvasRect.left + position.x;\n    const absoluteY = canvasRect.top + position.y;\n    countdownElement.style.cssText = `\n      position: fixed;\n      left: ${absoluteX}px;\n      top: ${absoluteY - 60}px;\n      transform: translateX(-50%);\n      color: red;\n      font-size: 36px;\n      font-weight: bold;\n      text-shadow: 0 0 10px white, 0 0 20px white;\n      z-index: 9999;\n      background-color: rgba(255, 255, 255, 0.8);\n      border: 2px solid red;\n      border-radius: 50%;\n      width: 50px;\n      height: 50px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n    `;\n    document.body.appendChild(countdownElement);\n    return countdownElement;\n};\n// Draw a red dot on the canvas\nconst drawRedDot = (ctx, x, y, radius = 12)=>{\n    // Draw the dot with a glow effect\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = 'red';\n    ctx.fill();\n    // Add glow effect to the dot\n    ctx.beginPath();\n    ctx.arc(x, y, radius + 3, 0, Math.PI * 2);\n    ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)';\n    ctx.lineWidth = 3;\n    ctx.stroke();\n    return {\n        x,\n        y\n    };\n};\n// Initialize the canvas for drawing\nconst initializeCanvas = (canvas, parent)=>{\n    if (!canvas || !parent) return false;\n    // Set canvas dimensions to match parent\n    canvas.width = parent.clientWidth;\n    canvas.height = parent.clientHeight;\n    // Clear canvas and set white background\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    return true;\n};\n// Generate a random position on the canvas\nconst getRandomPosition = (canvas, padding = 40)=>{\n    if (!canvas) return {\n        x: 100,\n        y: 100\n    }; // Fallback position\n    const width = canvas.width || 400; // Fallback if width is 0\n    const height = canvas.height || 300; // Fallback if height is 0\n    return {\n        x: Math.floor(Math.random() * (width - 2 * padding)) + padding,\n        y: Math.floor(Math.random() * (height - 2 * padding)) + padding\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./pages/collected-dataset/components-gui/Action/DotCaptureUtil.js\n");

/***/ })

};
;
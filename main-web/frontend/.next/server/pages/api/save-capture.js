"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/save-capture";
exports.ids = ["pages/api/save-capture"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsave-capture&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fsave-capture.js&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsave-capture&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fsave-capture.js&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_save_capture_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/save-capture.js */ \"(api-node)/./pages/api/save-capture.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_save_capture_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_save_capture_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/save-capture\",\n        pathname: \"/api/save-capture\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_save_capture_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGc2F2ZS1jYXB0dXJlJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZzYXZlLWNhcHR1cmUuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDd0Q7QUFDeEQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHVEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyx1REFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS9zYXZlLWNhcHR1cmUuanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgJ2RlZmF1bHQnKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsICdjb25maWcnKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3NhdmUtY2FwdHVyZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3NhdmUtY2FwdHVyZVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsave-capture&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fsave-capture.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/save-capture.js":
/*!***********************************!*\
  !*** ./pages/api/save-capture.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n// pages/api/save-capture.js\n\n\n// Store default folder name - use a fixed name instead of timestamp-based folder\nconst DEFAULT_FOLDER = 'eye_tracking_captures';\n// Track the current capture number\nlet currentCaptureNumber = 1;\n// Function to get the next available number for naming files\nconst getNextCaptureNumber = (capturesDir)=>{\n    try {\n        // If the captures directory doesn't exist yet, start from 1\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(capturesDir)) {\n            return 1;\n        }\n        // Look for existing screen capture files to determine the next number\n        const files = fs__WEBPACK_IMPORTED_MODULE_0___default().readdirSync(capturesDir);\n        const screenFiles = files.filter((file)=>file.startsWith('screen_') && file.endsWith('.jpg'));\n        if (screenFiles.length === 0) {\n            return 1;\n        }\n        // Extract numbers from filenames and find the highest\n        const numbers = screenFiles.map((file)=>{\n            const match = file.match(/screen_(\\d+)\\.jpg/);\n            return match ? parseInt(match[1], 10) : 0;\n        });\n        const maxNumber = Math.max(...numbers);\n        return maxNumber + 1;\n    } catch (error) {\n        console.error('Error determining next capture number:', error);\n        return 1; // Fallback to 1 if there's an error\n    }\n};\nasync function handler(req, res) {\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            message: 'Method not allowed'\n        });\n    }\n    try {\n        const { imageData, filename, type, folder } = req.body;\n        if (!imageData || !filename || !type) {\n            return res.status(400).json({\n                success: false,\n                message: 'Missing required fields: imageData, filename, or type'\n            });\n        }\n        // Use the provided folder, or use the default folder\n        const captureFolder = folder || DEFAULT_FOLDER;\n        // Ensure the base captures directory exists\n        const capturesDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures');\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(capturesDir)) {\n            fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(capturesDir, {\n                recursive: true\n            });\n        }\n        // Ensure the capture folder exists\n        const sessionDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(capturesDir, captureFolder);\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(sessionDir)) {\n            fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(sessionDir, {\n                recursive: true\n            });\n            // Initialize the capture number if this is a new folder\n            currentCaptureNumber = 1;\n        } else if (currentCaptureNumber === 1) {\n            // If the folder exists and we haven't determined the next number yet\n            currentCaptureNumber = getNextCaptureNumber(sessionDir);\n        }\n        // Check if we need to use continuous numbering\n        let finalFilename = filename;\n        // If the filename includes a counter pattern (like screen_001.jpg), replace it with the continuous number\n        if (filename.match(/_(0+\\d+)\\./)) {\n            const paddedNumber = String(currentCaptureNumber).padStart(3, '0');\n            const prefix = filename.split('_')[0]; // Get 'screen', 'webcam', etc.\n            finalFilename = `${prefix}_${paddedNumber}.jpg`;\n            // Only increment the counter after a screen image (to avoid incrementing multiple times for one capture)\n            if (type === 'screen') {\n                currentCaptureNumber++;\n            }\n        }\n        let buffer;\n        // Handle different file types\n        if (type === 'parameters' && filename.endsWith('.csv')) {\n            // Handle CSV data\n            if (!imageData.startsWith('data:')) {\n                return res.status(400).json({\n                    success: false,\n                    message: 'Invalid CSV data format. Expected data URL.'\n                });\n            }\n            // Extract the base64 part\n            const base64Data = imageData.split(',')[1];\n            buffer = Buffer.from(base64Data, 'base64');\n        } else {\n            // Handle image data (screen or webcam captures)\n            if (!imageData.startsWith('data:image/')) {\n                return res.status(400).json({\n                    success: false,\n                    message: 'Invalid image data format. Expected base64 data URL.'\n                });\n            }\n            // Extract the base64 part\n            const base64Data = imageData.replace(/^data:image\\/\\w+;base64,/, '');\n            buffer = Buffer.from(base64Data, 'base64');\n        }\n        // Save the file\n        const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(sessionDir, finalFilename);\n        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(filePath, buffer);\n        // Log success and return response\n        console.log(`Successfully saved ${type} file: ${finalFilename} in folder ${captureFolder}`);\n        res.status(200).json({\n            success: true,\n            message: `Successfully saved ${type} file: ${finalFilename}`,\n            path: `/captures/${captureFolder}/${finalFilename}`,\n            folder: captureFolder,\n            captureNumber: currentCaptureNumber - 1 // Return the number that was just used\n        });\n    } catch (error) {\n        console.error('Error saving file:', error);\n        res.status(500).json({\n            success: false,\n            message: error.message,\n            stack:  true ? error.stack : 0\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/save-capture.js\n");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsave-capture&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fsave-capture.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();
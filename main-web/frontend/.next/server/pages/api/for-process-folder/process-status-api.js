"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/for-process-folder/process-status-api";
exports.ids = ["pages/api/for-process-folder/process-status-api"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ffor-process-folder%2Fprocess-status-api&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ffor-process-folder%2Fprocess-status-api.js&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ffor-process-folder%2Fprocess-status-api&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ffor-process-folder%2Fprocess-status-api.js&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_for_process_folder_process_status_api_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/for-process-folder/process-status-api.js */ \"(api-node)/./pages/api/for-process-folder/process-status-api.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_for_process_folder_process_status_api_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_for_process_folder_process_status_api_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/for-process-folder/process-status-api\",\n        pathname: \"/api/for-process-folder/process-status-api\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_for_process_folder_process_status_api_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGZm9yLXByb2Nlc3MtZm9sZGVyJTJGcHJvY2Vzcy1zdGF0dXMtYXBpJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZmb3ItcHJvY2Vzcy1mb2xkZXIlMkZwcm9jZXNzLXN0YXR1cy1hcGkuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDaUY7QUFDakY7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGdGQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxnRkFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS9mb3ItcHJvY2Vzcy1mb2xkZXIvcHJvY2Vzcy1zdGF0dXMtYXBpLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9mb3ItcHJvY2Vzcy1mb2xkZXIvcHJvY2Vzcy1zdGF0dXMtYXBpXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZm9yLXByb2Nlc3MtZm9sZGVyL3Byb2Nlc3Mtc3RhdHVzLWFwaVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ffor-process-folder%2Fprocess-status-api&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ffor-process-folder%2Fprocess-status-api.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/for-process-folder/process-status-api.js":
/*!************************************************************!*\
  !*** ./pages/api/for-process-folder/process-status-api.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node-fetch */ \"node-fetch\");\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(node_fetch__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! form-data */ \"form-data\");\n/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(form_data__WEBPACK_IMPORTED_MODULE_5__);\n// pages/api/process-status-api.js - API to handle process status checks and triggers\n\n\n\n\n\n\n// Convert exec to Promise-based\nconst execPromise = util__WEBPACK_IMPORTED_MODULE_3___default().promisify(child_process__WEBPACK_IMPORTED_MODULE_2__.exec);\n// Updated function to properly handle image processing with proper dimension retention\n// Function to send a single image to the Python backend for processing\n// Modified function to preserve original parameter data and add new metrics\n// Fixed function to properly process webcam images through the Python backend\nasync function processImageWithPython(inputPath, outputPath, setNumber, captureDir, enhancePath) {\n    try {\n        console.log(`Starting to process image: ${inputPath}`);\n        // Check if input file exists\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(inputPath)) {\n            console.error(`Input file does not exist: ${inputPath}`);\n            return null;\n        }\n        // Get the backend URL\n        const backendUrl = process.env.BACKEND_URL || 'http://localhost:8000';\n        const apiKey = process.env.API_KEY || 'A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV';\n        // Create form data\n        const formData = new (form_data__WEBPACK_IMPORTED_MODULE_5___default())();\n        // Open the file as a stream\n        const fileStream = fs__WEBPACK_IMPORTED_MODULE_0___default().createReadStream(inputPath);\n        // Log the file size\n        const stats = fs__WEBPACK_IMPORTED_MODULE_0___default().statSync(inputPath);\n        console.log(`File size: ${stats.size} bytes`);\n        // Add file to form data\n        formData.append('file', fileStream, {\n            filename: path__WEBPACK_IMPORTED_MODULE_1___default().basename(inputPath),\n            contentType: 'image/jpeg'\n        });\n        // Add processing parameters - these must match the FastAPI backend expectations\n        // formData.append('showHeadPose', 'false');\n        // formData.append('showBoundingBox', 'true');\n        // formData.append('showMask', 'false');\n        // formData.append('showParameters', 'true');\n        formData.append('showHeadPose', 'false');\n        formData.append('showBoundingBox', 'false');\n        formData.append('showMask', 'false');\n        formData.append('showParameters', 'false');\n        console.log(`Sending ${inputPath} to Python backend at ${backendUrl}/process-image`);\n        // Log request details for debugging\n        console.log('API Key being used:', apiKey);\n        console.log('Form data parameters:', 'showHeadPose=true', 'showBoundingBox=true', 'showMask=false', 'showParameters=true');\n        // Call the Python backend\n        const response = await node_fetch__WEBPACK_IMPORTED_MODULE_4___default()(`${backendUrl}/process-image`, {\n            method: 'POST',\n            headers: {\n                'X-API-Key': apiKey\n            },\n            body: formData,\n            timeout: 30000 // 30 second timeout for processing large images\n        });\n        // Log the response status\n        console.log(`Backend response status: ${response.status}`);\n        if (!response.ok) {\n            let errorText = '';\n            try {\n                errorText = await response.text();\n            } catch (e) {\n                errorText = 'Could not read error details';\n            }\n            console.error(`Backend error: ${response.status} ${response.statusText}`);\n            console.error(`Response body: ${errorText}`);\n            throw new Error(`Backend returned ${response.status}: ${response.statusText}`);\n        }\n        // Parse the response as JSON\n        let result;\n        try {\n            const responseText = await response.text();\n            console.log(`Response text (first 200 chars): ${responseText.substring(0, 200)}...`);\n            result = JSON.parse(responseText);\n        } catch (error) {\n            console.error('Error parsing response JSON:', error);\n            throw new Error(`Failed to parse backend response: ${error.message}`);\n        }\n        // Log result status\n        console.log('Backend processing result:', result.success ? 'Success' : 'Failed');\n        if (result.success) {\n            // Check if a face was detected\n            if (result.face_detected === false) {\n                console.log('No face detected in the image - saving original image');\n                fs__WEBPACK_IMPORTED_MODULE_0___default().copyFileSync(inputPath, outputPath);\n                // Still update parameter file with this information\n                await updateParameterFile(setNumber, {\n                    face_detected: false\n                }, captureDir, enhancePath);\n                return null;\n            }\n            // Verify we have the processed image data\n            if (!result.image || !result.image.data) {\n                console.error('Backend response missing image data');\n                // Fall back to copying the original image\n                fs__WEBPACK_IMPORTED_MODULE_0___default().copyFileSync(inputPath, outputPath);\n                console.log(`Copied original image as fallback to: ${outputPath}`);\n                // Update parameter file with minimal info\n                await updateParameterFile(setNumber, {\n                    face_detected: false\n                }, captureDir, enhancePath);\n                return null;\n            }\n            // Save the processed image\n            try {\n                const imageBuffer = Buffer.from(result.image.data, 'base64');\n                fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(outputPath, imageBuffer);\n                console.log(`Saved processed image to ${outputPath}, size: ${imageBuffer.length} bytes`);\n            } catch (error) {\n                console.error(`Error saving processed image: ${error.message}`);\n                // Fall back to copying the original image\n                fs__WEBPACK_IMPORTED_MODULE_0___default().copyFileSync(inputPath, outputPath);\n                console.log(`Copied original image as fallback to: ${outputPath}`);\n            }\n            // Check for metrics in the response\n            if (result.metrics) {\n                console.log('Metrics received from backend:', JSON.stringify(result.metrics));\n                // Update parameter file with the metrics\n                await updateParameterFile(setNumber, result.metrics, captureDir, enhancePath);\n                return result.metrics;\n            } else {\n                console.log('No metrics received from backend, using face_detected status only');\n                // Update parameter file with just the face detection status\n                await updateParameterFile(setNumber, {\n                    face_detected: true\n                }, captureDir, enhancePath);\n                return {\n                    face_detected: true\n                };\n            }\n        } else {\n            console.error(`Backend processing failed: ${result.error || 'Unknown error'}`);\n            // Fall back to copying the original image\n            fs__WEBPACK_IMPORTED_MODULE_0___default().copyFileSync(inputPath, outputPath);\n            console.log(`Copied original image as fallback to: ${outputPath}`);\n            // Update parameter file with error information\n            await updateParameterFile(setNumber, null, captureDir, enhancePath);\n            return null;\n        }\n    } catch (error) {\n        console.error(`Error processing image with Python backend: ${error.message}`);\n        console.error(error.stack);\n        // Fall back to copying the original image\n        try {\n            fs__WEBPACK_IMPORTED_MODULE_0___default().copyFileSync(inputPath, outputPath);\n            console.log(`Copied original image as fallback after error: ${outputPath}`);\n        } catch (copyError) {\n            console.error(`Error copying original image: ${copyError.message}`);\n        }\n        // Update parameter file with error information\n        await updateParameterFile(setNumber, null, captureDir, enhancePath);\n        return null;\n    }\n}\n// New function to update parameter file with new metrics while preserving original data\n// Updated function to properly handle parameter file updates\nasync function updateParameterFile(setNumber, metrics, captureDir, enhancePath) {\n    console.log(`Updating parameter file for set ${setNumber} with new metrics`);\n    // Determine parameter file paths\n    const originalParamPaths = [\n        path__WEBPACK_IMPORTED_MODULE_1___default().join(captureDir, `parameters_${setNumber}.csv`),\n        path__WEBPACK_IMPORTED_MODULE_1___default().join(captureDir, `parameter_${setNumber}.csv`)\n    ];\n    // Output parameter file path\n    const paramDestPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(enhancePath, `parameter_enhance_${setNumber}.csv`);\n    // Load original parameter data if available\n    let originalParams = new Map();\n    let originalParamFound = false;\n    let originalFirstLineIsHeader = false;\n    for (const originalPath of originalParamPaths){\n        if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(originalPath)) {\n            console.log(`Found original parameter file: ${originalPath}`);\n            originalParamFound = true;\n            try {\n                const content = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(originalPath, 'utf8');\n                console.log(`Original parameter file content: ${content.substring(0, 100)}...`);\n                const lines = content.split('\\n');\n                // Check if the first line is a header\n                const firstLine = lines[0].trim();\n                originalFirstLineIsHeader = firstLine.toLowerCase().includes('parameter') || firstLine.toLowerCase().includes('name');\n                // Skip header line if it exists\n                const startLine = originalFirstLineIsHeader ? 1 : 0;\n                // Parse the original parameters\n                for(let i = startLine; i < lines.length; i++){\n                    const line = lines[i].trim();\n                    if (line) {\n                        const parts = line.split(',');\n                        if (parts.length >= 2) {\n                            const paramName = parts[0].trim();\n                            const paramValue = parts[1].trim();\n                            originalParams.set(paramName, paramValue);\n                            console.log(`Loaded parameter: ${paramName}=${paramValue}`);\n                        }\n                    }\n                }\n                console.log(`Loaded ${originalParams.size} parameters from original file`);\n                break; // Found and loaded one parameter file, no need to check the other\n            } catch (err) {\n                console.error(`Error reading original parameter file: ${err.message}`);\n            }\n        }\n    }\n    // Prepare CSV content with header\n    let csvContent = 'Parameter,Value\\n';\n    // Add original parameters first (except those we'll update with new values)\n    const excludeParams = [\n        'pitch',\n        'yaw',\n        'roll',\n        'face_width',\n        'face_height',\n        'left_eye_x',\n        'left_eye_y',\n        'right_eye_x',\n        'right_eye_y',\n        'face_box_min_x',\n        'face_box_min_y',\n        'face_box_max_x',\n        'face_box_max_y'\n    ];\n    // Log all original parameters for debugging\n    console.log(\"Original parameters:\");\n    originalParams.forEach((value, key)=>{\n        console.log(`  ${key}: ${value}`);\n    });\n    // Add existing parameters (except those we'll update)\n    originalParams.forEach((value, key)=>{\n        if (!excludeParams.includes(key.toLowerCase())) {\n            csvContent += `${key},${value}\\n`;\n        }\n    });\n    // Now add the new metrics\n    if (metrics && metrics.face_detected !== false) {\n        console.log(\"Adding new metrics from face detection\");\n        // Add head pose data\n        if (metrics.head_pose) {\n            console.log(`Adding head pose: pitch=${metrics.head_pose.pitch}, yaw=${metrics.head_pose.yaw}, roll=${metrics.head_pose.roll}`);\n            csvContent += `pitch,${metrics.head_pose.pitch}\\n`;\n            csvContent += `yaw,${metrics.head_pose.yaw}\\n`;\n            csvContent += `roll,${metrics.head_pose.roll}\\n`;\n        }\n        // Add eye centers if available\n        if (metrics.eye_centers) {\n            if (metrics.eye_centers.left) {\n                console.log(`Adding left eye: ${metrics.eye_centers.left.join(',')}`);\n                csvContent += `left_eye_x,${metrics.eye_centers.left[0]}\\n`;\n                csvContent += `left_eye_y,${metrics.eye_centers.left[1]}\\n`;\n            }\n            if (metrics.eye_centers.right) {\n                console.log(`Adding right eye: ${metrics.eye_centers.right.join(',')}`);\n                csvContent += `right_eye_x,${metrics.eye_centers.right[0]}\\n`;\n                csvContent += `right_eye_y,${metrics.eye_centers.right[1]}\\n`;\n            }\n        }\n        // Add face box information if available\n        if (metrics.face_box) {\n            if (metrics.face_box.min) {\n                console.log(`Adding face box min: ${metrics.face_box.min.join(',')}`);\n                csvContent += `face_box_min_x,${metrics.face_box.min[0]}\\n`;\n                csvContent += `face_box_min_y,${metrics.face_box.min[1]}\\n`;\n            }\n            if (metrics.face_box.max) {\n                console.log(`Adding face box max: ${metrics.face_box.max.join(',')}`);\n                csvContent += `face_box_max_x,${metrics.face_box.max[0]}\\n`;\n                csvContent += `face_box_max_y,${metrics.face_box.max[1]}\\n`;\n                // Calculate and add face width and height\n                if (metrics.face_box.min) {\n                    const faceWidth = Math.round(metrics.face_box.max[0] - metrics.face_box.min[0]);\n                    const faceHeight = Math.round(metrics.face_box.max[1] - metrics.face_box.min[1]);\n                    console.log(`Adding face dimensions: width=${faceWidth}, height=${faceHeight}`);\n                    csvContent += `face_width,${faceWidth}\\n`;\n                    csvContent += `face_height,${faceHeight}\\n`;\n                }\n            }\n        }\n    } else if (originalParamFound) {\n        // If no new metrics but we had original data for these fields, preserve them\n        console.log(\"No new metrics, preserving original face tracking data if available\");\n        const fieldsToPreserve = [\n            'pitch',\n            'yaw',\n            'roll',\n            'face_width',\n            'face_height',\n            'left_eye_x',\n            'left_eye_y',\n            'right_eye_x',\n            'right_eye_y',\n            'face_box_min_x',\n            'face_box_min_y',\n            'face_box_max_x',\n            'face_box_max_y'\n        ];\n        fieldsToPreserve.forEach((field)=>{\n            if (originalParams.has(field)) {\n                console.log(`Preserving original ${field}=${originalParams.get(field)}`);\n                csvContent += `${field},${originalParams.get(field)}\\n`;\n            }\n        });\n    } else {\n        // No metrics and no original data, add placeholder information\n        console.log(\"No metrics and no original data, adding placeholder\");\n        csvContent += 'info,No face detected or processing failed\\n';\n    }\n    // Log the final CSV content for debugging\n    console.log(`Final parameter file content:\\n${csvContent}`);\n    // Write the updated CSV file\n    fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(paramDestPath, csvContent);\n    console.log(`Wrote updated parameter file to: ${paramDestPath}`);\n    // Verify the file was written\n    if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(paramDestPath)) {\n        console.log(`Parameter file successfully updated: ${paramDestPath}`);\n        return true;\n    } else {\n        console.error(`Failed to create parameter file: ${paramDestPath}`);\n        return false;\n    }\n}\n// Function to process files via the FastAPI backend\nasync function processFilesViaBackend(setNumbers) {\n    try {\n        // Get the backend URL from environment variable or use default\n        const backendUrl = process.env.BACKEND_URL || 'http://localhost:8000';\n        const apiKey = process.env.API_KEY || 'A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV';\n        // Call the FastAPI backend to process the files\n        const response = await node_fetch__WEBPACK_IMPORTED_MODULE_4___default()(`${backendUrl}/process-batch`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-API-Key': apiKey\n            },\n            body: JSON.stringify({\n                set_numbers: setNumbers,\n                show_head_pose: true,\n                show_bounding_box: true,\n                show_mask: false,\n                show_parameters: false\n            })\n        });\n        // Check if the request was successful\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error('Backend processing error:', errorText);\n            return {\n                success: false,\n                error: `Backend error: ${response.status} ${response.statusText}`\n            };\n        }\n        // Parse the response\n        const result = await response.json();\n        return result;\n    } catch (error) {\n        console.error('Error calling backend for processing:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n}\n// Function to process files directly in Node.js\n// Function to process files directly in Node.js\nasync function processFilesDirectly(setNumbers, captureDir, enhancePath, progressFilePath) {\n    try {\n        console.log(\"=== STARTING DIRECT PROCESSING ===\");\n        console.log(`Processing sets: ${setNumbers.join(', ')}`);\n        console.log(`Capture directory: ${captureDir}`);\n        console.log(`Enhance directory: ${enhancePath}`);\n        // Get current progress or initialize\n        let progress = {\n            currentSet: 0,\n            totalSets: setNumbers.length,\n            processedSets: [],\n            startTime: new Date().toISOString(),\n            lastUpdateTime: new Date().toISOString()\n        };\n        // Process each set\n        for (const setNumber of setNumbers){\n            try {\n                console.log(`\\n--- Processing set ${setNumber} ---`);\n                progress.currentSet = setNumber;\n                fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(progressFilePath, JSON.stringify(progress, null, 2));\n                console.log(`Updated progress file for set ${setNumber}`);\n                // Process webcam image\n                const webcamSrcPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(captureDir, `webcam_${setNumber}.jpg`);\n                const webcamDestPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(enhancePath, `webcam_enhance_${setNumber}.jpg`);\n                console.log(`Looking for webcam image at: ${webcamSrcPath}`);\n                if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(webcamSrcPath)) {\n                    console.log(`Found webcam image: ${webcamSrcPath}`);\n                    try {\n                        // Process the image through the Python backend\n                        console.log(`Sending webcam image for set ${setNumber} to process_image_handler`);\n                        // We're passing the capture directory and enhance path to help with parameter file handling\n                        const metrics = await processImageWithPython(webcamSrcPath, webcamDestPath, setNumber, captureDir, enhancePath);\n                        if (metrics) {\n                            console.log(`✅ Successfully processed webcam image and extracted metrics for set ${setNumber}`);\n                        } else {\n                            console.warn(`⚠️ Process completed but no metrics returned for set ${setNumber}`);\n                            // Ensure the image is copied even if no metrics were returned\n                            if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(webcamDestPath)) {\n                                fs__WEBPACK_IMPORTED_MODULE_0___default().copyFileSync(webcamSrcPath, webcamDestPath);\n                                console.log(`Copied original webcam image as fallback for set ${setNumber}`);\n                            }\n                        }\n                    } catch (err) {\n                        console.error(`❌ Error processing webcam image for set ${setNumber}: ${err.message}`);\n                        console.error(err.stack);\n                        // Fallback to copying the original file\n                        console.log(`Copying original webcam image as fallback for set ${setNumber}`);\n                        fs__WEBPACK_IMPORTED_MODULE_0___default().copyFileSync(webcamSrcPath, webcamDestPath);\n                    }\n                } else {\n                    console.warn(`⚠️ Webcam image not found for set ${setNumber}: ${webcamSrcPath}`);\n                }\n                // Process screen image if it exists\n                const screenSrcPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(captureDir, `screen_${setNumber}.jpg`);\n                const screenDestPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(enhancePath, `screen_enhance_${setNumber}.jpg`);\n                console.log(`Looking for screen image at: ${screenSrcPath}`);\n                if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(screenSrcPath)) {\n                    console.log(`Screen image found: ${screenSrcPath}`);\n                    fs__WEBPACK_IMPORTED_MODULE_0___default().copyFileSync(screenSrcPath, screenDestPath);\n                    console.log(`Copied screen image to: ${screenDestPath}`);\n                } else {\n                    console.warn(`⚠️ Screen image not found for set ${setNumber}`);\n                }\n                // Verify that we have a parameter file for this set in the enhance directory\n                const enhanceParamPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(enhancePath, `parameter_enhance_${setNumber}.csv`);\n                if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(enhanceParamPath)) {\n                    console.log(`Parameter file not created during processing for set ${setNumber}, checking for original...`);\n                    await updateParameterFile(setNumber, null, captureDir, enhancePath);\n                }\n                // Update progress\n                progress.processedSets.push(setNumber);\n                progress.lastUpdateTime = new Date().toISOString();\n                fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(progressFilePath, JSON.stringify(progress, null, 2));\n                console.log(`Updated progress - set ${setNumber} completed`);\n                // Add a small delay to prevent overwhelming the system\n                console.log(`Waiting 500ms before processing next set...`);\n                await new Promise((resolve)=>setTimeout(resolve, 500));\n            } catch (err) {\n                console.error(`❌ Error processing set ${setNumber}:`, err);\n            }\n        }\n        console.log(\"\\n=== PROCESSING COMPLETED ===\");\n        console.log(`Total sets processed: ${progress.processedSets.length}/${progress.totalSets}`);\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error('❌ Error in direct processing:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n}\n// Helper function to copy parameter files\nasync function copyParameterFile(captureDir, enhancePath, setNumber) {\n    // Try both parameter and parameters naming\n    const paramFileNames = [\n        `parameters_${setNumber}.csv`,\n        `parameter_${setNumber}.csv`\n    ];\n    let paramFound = false;\n    for (const paramFileName of paramFileNames){\n        const paramSrcPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(captureDir, paramFileName);\n        console.log(`Looking for parameter file at: ${paramSrcPath}`);\n        if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(paramSrcPath)) {\n            console.log(`Parameter file found: ${paramSrcPath}`);\n            paramFound = true;\n            // Determine destination name (change parameter to parameter_enhance)\n            const destFileName = 'parameter_enhance_' + setNumber + '.csv';\n            const paramDestPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(enhancePath, destFileName);\n            console.log(`Copying parameter file to: ${paramDestPath}`);\n            fs__WEBPACK_IMPORTED_MODULE_0___default().copyFileSync(paramSrcPath, paramDestPath);\n            // Verify parameter file copy\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(paramDestPath)) {\n                console.log(`✅ Parameter file copied successfully`);\n                // Read content to verify\n                try {\n                    const content = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(paramDestPath, 'utf8');\n                    const firstLine = content.split('\\n')[0];\n                    console.log(`Parameter file content starts with: ${firstLine}`);\n                } catch (readErr) {\n                    console.error(`Error reading parameter file: ${readErr.message}`);\n                }\n            } else {\n                console.error(`❌ Error: Parameter destination file doesn't exist after copy!`);\n            }\n            break; // Found and copied one parameter file, no need to check the other\n        }\n    }\n    if (!paramFound) {\n        console.log(`⚠️ No parameter files found for set ${setNumber}`);\n        // Create an empty parameter file if none exists\n        const paramDestPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(enhancePath, `parameter_enhance_${setNumber}.csv`);\n        const emptyContent = 'Parameter,Value\\ninfo,No face detected or processing failed\\n';\n        fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(paramDestPath, emptyContent);\n        console.log(`⚠️ Created empty parameter file: ${paramDestPath}`);\n    }\n}\n// Main handler for API requests\nasync function handler(req, res) {\n    // Handle GET request to check processing status\n    if (req.method === 'GET') {\n        try {\n            const capturesPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures', 'eye_tracking_captures');\n            const enhancePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures', 'enhance');\n            // Create captures directory if it doesn't exist\n            if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures'))) {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures'), {\n                    recursive: true\n                });\n            }\n            // Create capture directory if it doesn't exist\n            if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(capturesPath)) {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(capturesPath, {\n                    recursive: true\n                });\n            }\n            // Create enhance directory if it doesn't exist\n            if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(enhancePath)) {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(enhancePath, {\n                    recursive: true\n                });\n            }\n            // Check if there's a processing.lock file (indicating processing is in progress)\n            const lockFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures', 'processing.lock');\n            const isProcessing = fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(lockFilePath);\n            // Check for progress information file\n            const progressFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures', 'processing_progress.json');\n            let progressInfo = {\n                currentSet: 0,\n                totalSets: 0,\n                processedSets: [],\n                startTime: null,\n                lastUpdateTime: null\n            };\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(progressFilePath)) {\n                try {\n                    const progressData = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(progressFilePath, 'utf8');\n                    progressInfo = JSON.parse(progressData);\n                } catch (err) {\n                    console.error(\"Error reading progress file:\", err);\n                }\n            }\n            // Count files in each directory\n            const captureFiles = fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(capturesPath) ? fs__WEBPACK_IMPORTED_MODULE_0___default().readdirSync(capturesPath).filter((file)=>file.startsWith('webcam_') && file.endsWith('.jpg')).length : 0;\n            const enhanceFiles = fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(enhancePath) ? fs__WEBPACK_IMPORTED_MODULE_0___default().readdirSync(enhancePath).filter((file)=>file.startsWith('webcam_enhance_') && file.endsWith('.jpg')).length : 0;\n            return res.status(200).json({\n                success: true,\n                isProcessing,\n                captureCount: captureFiles,\n                enhanceCount: enhanceFiles,\n                needsProcessing: captureFiles > enhanceFiles,\n                progress: progressInfo\n            });\n        } catch (error) {\n            console.error('Error checking process status:', error);\n            return res.status(500).json({\n                success: false,\n                error: error.message\n            });\n        }\n    } else if (req.method === 'POST') {\n        try {\n            // Get list of files to process from request body\n            const { setNumbers } = req.body;\n            if (!setNumbers || !Array.isArray(setNumbers) || setNumbers.length === 0) {\n                return res.status(400).json({\n                    success: false,\n                    error: 'No set numbers provided for processing'\n                });\n            }\n            // Make sure the directory exists before creating the lock file\n            const capturesDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures');\n            if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(capturesDir)) {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(capturesDir, {\n                    recursive: true\n                });\n            }\n            // Create enhance directory if it doesn't exist\n            const enhancePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures', 'enhance');\n            if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(enhancePath)) {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(enhancePath, {\n                    recursive: true\n                });\n            }\n            // Check if there's already a lock file\n            const lockFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(capturesDir, 'processing.lock');\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(lockFilePath)) {\n                return res.status(409).json({\n                    success: false,\n                    error: 'Processing is already in progress'\n                });\n            }\n            // Create lock file to indicate processing is in progress\n            try {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(lockFilePath, new Date().toISOString());\n                console.log(`Created lock file at ${lockFilePath}`);\n            } catch (err) {\n                console.error(`Error creating lock file: ${err.message}`);\n                return res.status(500).json({\n                    success: false,\n                    error: `Failed to create lock file: ${err.message}`\n                });\n            }\n            // Create initial progress file\n            const progressFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(capturesDir, 'processing_progress.json');\n            const progressInfo = {\n                currentSet: 0,\n                totalSets: setNumbers.length,\n                processedSets: [],\n                startTime: new Date().toISOString(),\n                lastUpdateTime: new Date().toISOString()\n            };\n            try {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(progressFilePath, JSON.stringify(progressInfo, null, 2));\n            } catch (err) {\n                console.error(`Error creating progress file: ${err.message}`);\n            }\n            // Define paths for processing\n            const captureDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures', 'eye_tracking_captures');\n            // Determine which processing method to use\n            const useBackend = process.env.USE_PYTHON_BACKEND === 'true';\n            if (useBackend) {\n                console.log(`Starting backend processing of ${setNumbers.length} sets...`);\n                // Start processing with the Python backend\n                processFilesViaBackend(setNumbers).then((result)=>{\n                    console.log('Backend processing completed with result:', result);\n                    // Clean up the lock file when done\n                    if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(lockFilePath)) {\n                        fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(lockFilePath);\n                    }\n                }).catch((err)=>{\n                    console.error('Backend processing failed:', err);\n                    // Clean up the lock file on error\n                    if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(lockFilePath)) {\n                        fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(lockFilePath);\n                    }\n                });\n                return res.status(200).json({\n                    success: true,\n                    message: 'Processing started',\n                    setsToProcess: setNumbers.length,\n                    processingMethod: 'python-backend'\n                });\n            } else {\n                console.log(`Starting direct processing of ${setNumbers.length} sets...`);\n                // Start processing in the background using direct Node.js processing\n                processFilesDirectly(setNumbers, captureDir, enhancePath, progressFilePath).then((result)=>{\n                    console.log('Processing completed with result:', result);\n                    // Clean up the lock file when done\n                    if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(lockFilePath)) {\n                        fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(lockFilePath);\n                    }\n                }).catch((err)=>{\n                    console.error('Processing failed:', err);\n                    // Clean up the lock file on error\n                    if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(lockFilePath)) {\n                        fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(lockFilePath);\n                    }\n                });\n                return res.status(200).json({\n                    success: true,\n                    message: 'Processing started',\n                    setsToProcess: setNumbers.length,\n                    processingMethod: 'direct'\n                });\n            }\n        } catch (error) {\n            console.error('Error triggering processing:', error);\n            // If there's an error, make sure to delete the lock file\n            const lockFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures', 'processing.lock');\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(lockFilePath)) {\n                try {\n                    fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(lockFilePath);\n                } catch (e) {\n                    console.error('Error removing lock file:', e);\n                }\n            }\n            return res.status(500).json({\n                success: false,\n                error: error.message\n            });\n        }\n    } else {\n        return res.status(405).json({\n            success: false,\n            error: 'Method not allowed'\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/for-process-folder/process-status-api.js\n");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "form-data":
/*!****************************!*\
  !*** external "form-data" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("form-data");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "node-fetch":
/*!*****************************!*\
  !*** external "node-fetch" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node-fetch");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ffor-process-folder%2Fprocess-status-api&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ffor-process-folder%2Fprocess-status-api.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();
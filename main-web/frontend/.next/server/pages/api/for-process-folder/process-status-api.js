"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/for-process-folder/process-status-api";
exports.ids = ["pages/api/for-process-folder/process-status-api"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ffor-process-folder%2Fprocess-status-api&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ffor-process-folder%2Fprocess-status-api.js&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ffor-process-folder%2Fprocess-status-api&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ffor-process-folder%2Fprocess-status-api.js&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_for_process_folder_process_status_api_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/for-process-folder/process-status-api.js */ \"(api-node)/./pages/api/for-process-folder/process-status-api.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_for_process_folder_process_status_api_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_for_process_folder_process_status_api_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/for-process-folder/process-status-api\",\n        pathname: \"/api/for-process-folder/process-status-api\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_for_process_folder_process_status_api_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGZm9yLXByb2Nlc3MtZm9sZGVyJTJGcHJvY2Vzcy1zdGF0dXMtYXBpJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZmb3ItcHJvY2Vzcy1mb2xkZXIlMkZwcm9jZXNzLXN0YXR1cy1hcGkuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDaUY7QUFDakY7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGdGQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxnRkFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS9mb3ItcHJvY2Vzcy1mb2xkZXIvcHJvY2Vzcy1zdGF0dXMtYXBpLmpzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9mb3ItcHJvY2Vzcy1mb2xkZXIvcHJvY2Vzcy1zdGF0dXMtYXBpXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZm9yLXByb2Nlc3MtZm9sZGVyL3Byb2Nlc3Mtc3RhdHVzLWFwaVwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ffor-process-folder%2Fprocess-status-api&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ffor-process-folder%2Fprocess-status-api.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/for-process-folder/process-status-api.js":
/*!************************************************************!*\
  !*** ./pages/api/for-process-folder/process-status-api.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! child_process */ \"child_process\");\n/* harmony import */ var child_process__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(child_process__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node-fetch */ \"node-fetch\");\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(node_fetch__WEBPACK_IMPORTED_MODULE_4__);\n// pages/api/process-status-api.js - API to handle process status checks and triggers\n\n\n\n\n\n// Convert exec to Promise-based\nconst execPromise = util__WEBPACK_IMPORTED_MODULE_3___default().promisify(child_process__WEBPACK_IMPORTED_MODULE_2__.exec);\n// Function to process files via the FastAPI backend\nasync function processFilesViaBackend(setNumbers) {\n    try {\n        // Get the backend URL from environment variable or use default\n        const backendUrl = process.env.BACKEND_URL || 'http://localhost:8000';\n        const apiKey = process.env.API_KEY || 'A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV';\n        // Call the FastAPI backend to process the files\n        const response = await node_fetch__WEBPACK_IMPORTED_MODULE_4___default()(`${backendUrl}/process-batch`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-API-Key': apiKey\n            },\n            body: JSON.stringify({\n                set_numbers: setNumbers,\n                show_head_pose: true,\n                show_bounding_box: true,\n                show_mask: false,\n                show_parameters: false\n            })\n        });\n        // Check if the request was successful\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error('Backend processing error:', errorText);\n            return {\n                success: false,\n                error: `Backend error: ${response.status} ${response.statusText}`\n            };\n        }\n        // Parse the response\n        const result = await response.json();\n        return result;\n    } catch (error) {\n        console.error('Error calling backend for processing:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n}\n// Function to process files directly in Node.js\nasync function processFilesDirectly(setNumbers, captureDir, enhancePath, progressFilePath) {\n    try {\n        // Get current progress or initialize\n        let progress = {\n            currentSet: 0,\n            totalSets: setNumbers.length,\n            processedSets: [],\n            startTime: new Date().toISOString(),\n            lastUpdateTime: new Date().toISOString()\n        };\n        // Process each set\n        for (const setNumber of setNumbers){\n            try {\n                progress.currentSet = setNumber;\n                fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(progressFilePath, JSON.stringify(progress, null, 2));\n                // Process webcam image\n                const webcamSrcPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(captureDir, `webcam_${setNumber}.jpg`);\n                const webcamDestPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(enhancePath, `webcam_enhance_${setNumber}.jpg`);\n                if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(webcamSrcPath)) {\n                    // Simple copy for the enhancement demonstration\n                    fs__WEBPACK_IMPORTED_MODULE_0___default().copyFileSync(webcamSrcPath, webcamDestPath);\n                }\n                // Process screen image if it exists\n                const screenSrcPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(captureDir, `screen_${setNumber}.jpg`);\n                const screenDestPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(enhancePath, `screen_enhance_${setNumber}.jpg`);\n                if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(screenSrcPath)) {\n                    fs__WEBPACK_IMPORTED_MODULE_0___default().copyFileSync(screenSrcPath, screenDestPath);\n                }\n                // Process parameters file if it exists (try both parameter and parameters naming)\n                const paramFileNames = [\n                    `parameters_${setNumber}.csv`,\n                    `parameter_${setNumber}.csv`\n                ];\n                for (const paramFileName of paramFileNames){\n                    const paramSrcPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(captureDir, paramFileName);\n                    if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(paramSrcPath)) {\n                        const paramDestPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(enhancePath, paramFileName.replace('parameter', 'parameter_enhance'));\n                        fs__WEBPACK_IMPORTED_MODULE_0___default().copyFileSync(paramSrcPath, paramDestPath);\n                        break; // Found and copied one parameter file, no need to check the other\n                    }\n                }\n                // Update progress\n                progress.processedSets.push(setNumber);\n                progress.lastUpdateTime = new Date().toISOString();\n                fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(progressFilePath, JSON.stringify(progress, null, 2));\n                // Add a small delay to prevent overwhelming the system\n                await new Promise((resolve)=>setTimeout(resolve, 500));\n            } catch (err) {\n                console.error(`Error processing set ${setNumber}:`, err);\n            }\n        }\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error('Error in direct processing:', error);\n        return {\n            success: false,\n            error: error.message\n        };\n    }\n}\nasync function handler(req, res) {\n    // Handle GET request to check processing status\n    if (req.method === 'GET') {\n        try {\n            const capturesPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures', 'eye_tracking_captures');\n            const enhancePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures', 'enhance');\n            // Create captures directory if it doesn't exist\n            if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures'))) {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures'), {\n                    recursive: true\n                });\n            }\n            // Create capture directory if it doesn't exist\n            if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(capturesPath)) {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(capturesPath, {\n                    recursive: true\n                });\n            }\n            // Create enhance directory if it doesn't exist\n            if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(enhancePath)) {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(enhancePath, {\n                    recursive: true\n                });\n            }\n            // Check if there's a processing.lock file (indicating processing is in progress)\n            const lockFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures', 'processing.lock');\n            const isProcessing = fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(lockFilePath);\n            // Check for progress information file\n            const progressFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures', 'processing_progress.json');\n            let progressInfo = {\n                currentSet: 0,\n                totalSets: 0,\n                processedSets: [],\n                startTime: null,\n                lastUpdateTime: null\n            };\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(progressFilePath)) {\n                try {\n                    const progressData = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(progressFilePath, 'utf8');\n                    progressInfo = JSON.parse(progressData);\n                } catch (err) {\n                    console.error(\"Error reading progress file:\", err);\n                }\n            }\n            // Count files in each directory\n            const captureFiles = fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(capturesPath) ? fs__WEBPACK_IMPORTED_MODULE_0___default().readdirSync(capturesPath).filter((file)=>file.startsWith('webcam_') && file.endsWith('.jpg')).length : 0;\n            const enhanceFiles = fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(enhancePath) ? fs__WEBPACK_IMPORTED_MODULE_0___default().readdirSync(enhancePath).filter((file)=>file.startsWith('webcam_enhance_') && file.endsWith('.jpg')).length : 0;\n            return res.status(200).json({\n                success: true,\n                isProcessing,\n                captureCount: captureFiles,\n                enhanceCount: enhanceFiles,\n                needsProcessing: captureFiles > enhanceFiles,\n                progress: progressInfo\n            });\n        } catch (error) {\n            console.error('Error checking process status:', error);\n            return res.status(500).json({\n                success: false,\n                error: error.message\n            });\n        }\n    } else if (req.method === 'POST') {\n        try {\n            // Get list of files to process from request body\n            const { setNumbers } = req.body;\n            if (!setNumbers || !Array.isArray(setNumbers) || setNumbers.length === 0) {\n                return res.status(400).json({\n                    success: false,\n                    error: 'No set numbers provided for processing'\n                });\n            }\n            // Make sure the directory exists before creating the lock file\n            const capturesDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures');\n            if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(capturesDir)) {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(capturesDir, {\n                    recursive: true\n                });\n            }\n            // Create enhance directory if it doesn't exist\n            const enhancePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures', 'enhance');\n            if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(enhancePath)) {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().mkdirSync(enhancePath, {\n                    recursive: true\n                });\n            }\n            // Create lock file to indicate processing is in progress\n            const lockFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(capturesDir, 'processing.lock');\n            try {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(lockFilePath, new Date().toISOString());\n                console.log(`Created lock file at ${lockFilePath}`);\n            } catch (err) {\n                console.error(`Error creating lock file: ${err.message}`);\n                return res.status(500).json({\n                    success: false,\n                    error: `Failed to create lock file: ${err.message}`\n                });\n            }\n            // Create initial progress file\n            const progressFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(capturesDir, 'processing_progress.json');\n            const progressInfo = {\n                currentSet: 0,\n                totalSets: setNumbers.length,\n                processedSets: [],\n                startTime: new Date().toISOString(),\n                lastUpdateTime: new Date().toISOString()\n            };\n            try {\n                fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(progressFilePath, JSON.stringify(progressInfo, null, 2));\n            } catch (err) {\n                console.error(`Error creating progress file: ${err.message}`);\n            }\n            // Define paths for processing\n            const captureDir = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures', 'eye_tracking_captures');\n            // Determine which processing method to use\n            const useBackend = process.env.USE_PYTHON_BACKEND === 'true';\n            if (useBackend) {\n                console.log(`Starting backend processing of ${setNumbers.length} sets...`);\n                // Start processing with the Python backend\n                processFilesViaBackend(setNumbers).then((result)=>{\n                    console.log('Backend processing completed with result:', result);\n                    // Clean up the lock file when done\n                    if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(lockFilePath)) {\n                        fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(lockFilePath);\n                    }\n                }).catch((err)=>{\n                    console.error('Backend processing failed:', err);\n                    // Clean up the lock file on error\n                    if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(lockFilePath)) {\n                        fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(lockFilePath);\n                    }\n                });\n                return res.status(200).json({\n                    success: true,\n                    message: 'Processing started',\n                    setsToProcess: setNumbers.length,\n                    processingMethod: 'python-backend'\n                });\n            } else {\n                console.log(`Starting direct processing of ${setNumbers.length} sets...`);\n                // Start processing in the background using direct Node.js processing\n                processFilesDirectly(setNumbers, captureDir, enhancePath, progressFilePath).then((result)=>{\n                    console.log('Processing completed with result:', result);\n                    // Clean up the lock file when done\n                    if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(lockFilePath)) {\n                        fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(lockFilePath);\n                    }\n                }).catch((err)=>{\n                    console.error('Processing failed:', err);\n                    // Clean up the lock file on error\n                    if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(lockFilePath)) {\n                        fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(lockFilePath);\n                    }\n                });\n                return res.status(200).json({\n                    success: true,\n                    message: 'Processing started',\n                    setsToProcess: setNumbers.length,\n                    processingMethod: 'direct'\n                });\n            }\n        } catch (error) {\n            console.error('Error triggering processing:', error);\n            // If there's an error, make sure to delete the lock file\n            const lockFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), 'public', 'captures', 'processing.lock');\n            if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(lockFilePath)) {\n                try {\n                    fs__WEBPACK_IMPORTED_MODULE_0___default().unlinkSync(lockFilePath);\n                } catch (e) {\n                    console.error('Error removing lock file:', e);\n                }\n            }\n            return res.status(500).json({\n                success: false,\n                error: error.message\n            });\n        }\n    } else {\n        return res.status(405).json({\n            success: false,\n            error: 'Method not allowed'\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/for-process-folder/process-status-api.js\n");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "node-fetch":
/*!*****************************!*\
  !*** external "node-fetch" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node-fetch");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ffor-process-folder%2Fprocess-status-api&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ffor-process-folder%2Fprocess-status-api.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();
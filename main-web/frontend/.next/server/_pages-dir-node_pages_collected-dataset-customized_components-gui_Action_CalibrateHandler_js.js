"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_pages-dir-node_pages_collected-dataset-customized_components-gui_Action_CalibrateHandler_js";
exports.ids = ["_pages-dir-node_pages_collected-dataset-customized_components-gui_Action_CalibrateHandler_js"];
exports.modules = {

/***/ "(pages-dir-node)/./pages/collected-dataset-customized/components-gui/Action/CalibrateHandler.js":
/*!**************************************************************************************!*\
  !*** ./pages/collected-dataset-customized/components-gui/Action/CalibrateHandler.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _CalibratePoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CalibratePoints */ \"(pages-dir-node)/./pages/collected-dataset-customized/components-gui/Action/CalibratePoints.js\");\n/* harmony import */ var _CaptureHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CaptureHandler */ \"(pages-dir-node)/./pages/collected-dataset-customized/components-gui/Action/CaptureHandler.js\");\n/* harmony import */ var _DotCaptureUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DotCaptureUtil */ \"(pages-dir-node)/./pages/collected-dataset-customized/components-gui/Action/DotCaptureUtil.js\");\n// CalibrateHandler.js - Using the existing CaptureHandler class\n\n\n\nclass CalibrateHandler {\n    constructor(config){\n        this.canvasRef = config.canvasRef;\n        this.toggleTopBar = config.toggleTopBar;\n        this.setOutputText = config.setOutputText;\n        this.captureCounter = config.captureCounter || 1;\n        this.setCaptureCounter = config.setCaptureCounter;\n        this.captureFolder = config.captureFolder || 'eye_tracking_captures';\n        this.onComplete = config.onComplete;\n        // Accept passed-in calibration points (from SetCalibrateAction.js)\n        this.calibrationPoints = config.calibrationPoints || [];\n        // Create a CaptureHandler instance for handling the captures\n        this.captureHandler = new _CaptureHandler__WEBPACK_IMPORTED_MODULE_1__[\"default\"](// Pass saveImageToServer function\n        async (imageData, filename, type, folder)=>{\n            try {\n                const response = await fetch('/api/save-capture', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        imageData,\n                        filename,\n                        type,\n                        folder: this.captureFolder\n                    })\n                });\n                if (!response.ok) {\n                    console.warn(`Server responded with ${response.status}`);\n                    return {};\n                }\n                return await response.json();\n            } catch (err) {\n                console.error(`Error saving ${type}:`, err);\n                return {};\n            }\n        }, // Pass setCaptureCounter function\n        (newCounter)=>{\n            if (typeof newCounter === 'function') {\n                this.captureCounter = newCounter(this.captureCounter);\n            } else {\n                this.captureCounter = newCounter;\n            }\n            if (this.setCaptureCounter) {\n                this.setCaptureCounter(this.captureCounter);\n            }\n        }, // Pass setProcessStatus function\n        (status)=>{\n            if (this.setOutputText) {\n                this.setOutputText(status);\n            }\n        }, // Pass toggleTopBar function\n        this.toggleTopBar);\n        // Internals\n        this.isProcessing = false;\n        this.currentPointIndex = 0;\n        this.statusIndicator = null;\n    }\n    createStatusIndicator() {\n        const existingIndicators = document.querySelectorAll('.calibrate-status-indicator');\n        existingIndicators.forEach((indicator)=>indicator.remove());\n        const indicator = document.createElement('div');\n        indicator.className = 'calibrate-status-indicator';\n        indicator.style.cssText = `\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      background-color: rgba(0, 102, 204, 0.9);\n      color: white;\n      font-size: 14px;\n      font-weight: bold;\n      padding: 8px 12px;\n      border-radius: 6px;\n      z-index: 9999;\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n    `;\n        document.body.appendChild(indicator);\n        this.statusIndicator = indicator;\n        return indicator;\n    }\n    async processCalibrationPoint(point, index, total) {\n        try {\n            if (!point || typeof point.x !== 'number' || typeof point.y !== 'number') {\n                throw new Error(\"Invalid calibration point\");\n            }\n            if (this.statusIndicator) {\n                this.statusIndicator.textContent = `Processing point ${index + 1}/${total}`;\n            }\n            // Draw the dot\n            const canvas = this.canvasRef.current;\n            if (!canvas) {\n                throw new Error(\"Canvas not available\");\n            }\n            const ctx = canvas.getContext('2d');\n            (0,_DotCaptureUtil__WEBPACK_IMPORTED_MODULE_2__.drawRedDot)(ctx, point.x, point.y);\n            // Create countdown element\n            const canvasRect = canvas.getBoundingClientRect();\n            const countdownElement = document.createElement('div');\n            countdownElement.className = 'calibrate-countdown';\n            countdownElement.style.cssText = `\n        position: fixed;\n        left: ${canvasRect.left + point.x}px;\n        top: ${canvasRect.top + point.y - 60}px;\n        transform: translateX(-50%);\n        color: red;\n        font-size: 36px;\n        font-weight: bold;\n        text-shadow: 0 0 10px white, 0 0 20px white;\n        z-index: 9999;\n        background-color: rgba(255, 255, 255, 0.8);\n        border: 2px solid red;\n        border-radius: 50%;\n        width: 50px;\n        height: 50px;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n      `;\n            document.body.appendChild(countdownElement);\n            // Run countdown\n            for(let count = 3; count > 0; count--){\n                countdownElement.textContent = count;\n                this.setOutputText?.(`Point ${index + 1}/${total} - countdown ${count}`);\n                // Make sure dot remains visible during countdown\n                (0,_DotCaptureUtil__WEBPACK_IMPORTED_MODULE_2__.drawRedDot)(ctx, point.x, point.y);\n                // Wait for next countdown step\n                await new Promise((resolve)=>setTimeout(resolve, 800));\n            }\n            // Show capturing indicator\n            countdownElement.textContent = \"âœ“\";\n            this.setOutputText?.(`Capturing point ${index + 1}/${total}`);\n            // Remove countdown element\n            setTimeout(()=>{\n                if (countdownElement.parentNode) {\n                    countdownElement.parentNode.removeChild(countdownElement);\n                }\n            }, 300);\n            // Use CaptureHandler to handle the capture process\n            const captureResult = await this.captureHandler.captureAndShowPreview(this.captureCounter, this.canvasRef, point);\n            // Add null check before using the result\n            if (!captureResult) {\n                console.warn(`No capture result for point ${index + 1}`);\n            // You might want to set a default or retry logic here\n            }\n            // Wait for the preview to complete\n            await new Promise((resolve)=>setTimeout(resolve, 2500));\n            return true;\n        } catch (err) {\n            console.error(`Error processing point ${index + 1}:`, err);\n            if (this.statusIndicator) {\n                this.statusIndicator.textContent = `Error: ${err.message}`;\n            }\n            this.setOutputText?.(`Error: ${err.message}`);\n            return false;\n        }\n    }\n    async startCalibration() {\n        if (this.isProcessing) return false;\n        this.isProcessing = true;\n        if (this.toggleTopBar) {\n            this.toggleTopBar(false);\n        }\n        const indicator = this.createStatusIndicator();\n        indicator.textContent = 'Initializing calibration...';\n        try {\n            const canvas = this.canvasRef.current;\n            if (!canvas || canvas.width === 0 || canvas.height === 0) {\n                throw new Error('Canvas is not ready');\n            }\n            // Only generate if none were passed in\n            if (!this.calibrationPoints || this.calibrationPoints.length === 0) {\n                this.calibrationPoints = (0,_CalibratePoints__WEBPACK_IMPORTED_MODULE_0__.generateCalibrationPoints)(canvas.width, canvas.height);\n                if (!this.calibrationPoints || this.calibrationPoints.length === 0) {\n                    throw new Error('Failed to generate calibration points');\n                }\n            }\n            this.setOutputText?.(`Starting calibration with ${this.calibrationPoints.length} points`);\n            let successCount = 0;\n            for(let i = 0; i < this.calibrationPoints.length; i++){\n                const success = await this.processCalibrationPoint(this.calibrationPoints[i], i, this.calibrationPoints.length);\n                if (success) {\n                    successCount++;\n                }\n                // Small delay between points\n                await new Promise((resolve)=>setTimeout(resolve, 800));\n            }\n            this.setOutputText?.(`Calibration completed: ${successCount}/${this.calibrationPoints.length} points captured`);\n            if (this.statusIndicator) {\n                this.statusIndicator.textContent = `Calibration complete: ${successCount}/${this.calibrationPoints.length} points`;\n            }\n            // Turn TopBar back on\n            if (this.toggleTopBar) {\n                this.toggleTopBar(true);\n            }\n            if (this.onComplete) {\n                this.onComplete();\n            }\n        } catch (error) {\n            // console.error('Calibration error:', error);\n            // this.setOutputText?.(`Calibration error: ${error.message}`);\n            // if (this.statusIndicator) {\n            //   this.statusIndicator.textContent = `Error: ${error.message}`;\n            // }\n            // // Make sure we turn TopBar back on even on error\n            // if (this.toggleTopBar) {\n            //   this.toggleTopBar(true);\n            // }\n            console.error('Error during capture and preview:', error);\n            // Show error message\n            if (this.setProcessStatus) {\n                this.setProcessStatus('Error: ' + error.message);\n            }\n            // Show TopBar again even if there was an error\n            setTimeout(()=>{\n                if (typeof this.toggleTopBar === 'function') {\n                    this.toggleTopBar(true);\n                } else if (false) {}\n            }, 1500);\n            // Return a default object to prevent null reference errors\n            return {\n                screenImage: '',\n                webcamImage: '',\n                success: false\n            };\n        } finally{\n            this.isProcessing = false;\n            // Remove the status indicator after a delay\n            setTimeout(()=>{\n                if (this.statusIndicator && this.statusIndicator.parentNode) {\n                    this.statusIndicator.parentNode.removeChild(this.statusIndicator);\n                }\n            }, 3000);\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CalibrateHandler);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./pages/collected-dataset-customized/components-gui/Action/CalibrateHandler.js\n");

/***/ }),

/***/ "(pages-dir-node)/./pages/collected-dataset-customized/components-gui/Action/CaptureHandler.js":
/*!************************************************************************************!*\
  !*** ./pages/collected-dataset-customized/components-gui/Action/CaptureHandler.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// CaptureHandler.js - With fixed capture numbering\nclass CaptureHandler {\n    constructor(saveFunction, counterSetter, statusSetter, toggleTopBarFunction){\n        this.saveImageToServer = saveFunction;\n        this.setCaptureCounter = counterSetter;\n        this.setProcessStatus = statusSetter;\n        this.toggleTopBar = toggleTopBarFunction;\n        this.captureFolder = 'eye_tracking_captures'; // Use fixed folder name\n    }\n    // Show preview of the SAVED images for exactly 2 seconds\n    showCapturePreview(screenImage, webcamImage, dotPosition) {\n        // Create a centered preview container\n        const previewContainer = document.createElement('div');\n        previewContainer.style.cssText = `\n        position: fixed;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        display: flex;\n        gap: 20px;\n        background-color: rgba(0, 0, 0, 0.85);\n        padding: 20px;\n        border-radius: 12px;\n        z-index: 999999;\n        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.6);\n        opacity: 1;\n        transition: opacity 0.3s ease;\n      `;\n        // Function to create an image preview element\n        const createImagePreview = (imageData, label)=>{\n            if (!imageData) return null;\n            const preview = document.createElement('div');\n            preview.style.cssText = `\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        `;\n            const img = document.createElement('img');\n            img.src = imageData;\n            img.style.cssText = `\n          max-width: 320px;\n          max-height: 240px;\n          border: 3px solid white;\n          border-radius: 8px;\n          background-color: #333;\n        `;\n            // Event listeners for image loading\n            img.onload = ()=>console.log(`${label} image loaded successfully`);\n            img.onerror = (e)=>console.error(`Error loading ${label} image:`, e);\n            const textLabel = document.createElement('div');\n            textLabel.textContent = label;\n            textLabel.style.cssText = `\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n          font-weight: bold;\n        `;\n            preview.appendChild(img);\n            preview.appendChild(textLabel);\n            return preview;\n        };\n        // Add debug info\n        const debugInfo = document.createElement('div');\n        debugInfo.style.cssText = `\n        position: absolute;\n        top: -30px;\n        left: 0;\n        width: 100%;\n        color: white;\n        font-size: 12px;\n        text-align: center;\n      `;\n        debugInfo.textContent = `Screen: ${screenImage ? 'YES' : 'NO'}, Webcam: ${webcamImage ? 'YES' : 'NO'}`;\n        previewContainer.appendChild(debugInfo);\n        // Add screen capture preview\n        const screenPreview = createImagePreview(screenImage, 'Screen Capture');\n        if (screenPreview) {\n            previewContainer.appendChild(screenPreview);\n        }\n        // Add webcam capture preview\n        const webcamPreview = createImagePreview(webcamImage, 'Webcam Capture');\n        if (webcamPreview) {\n            previewContainer.appendChild(webcamPreview);\n        }\n        // Add dot position info if available\n        if (dotPosition) {\n            const positionInfo = document.createElement('div');\n            positionInfo.textContent = `Dot position: x=${Math.round(dotPosition.x)}, y=${Math.round(dotPosition.y)}`;\n            positionInfo.style.cssText = `\n          color: #ffcc00;\n          font-size: 14px;\n          position: absolute;\n          top: -50px;\n          left: 0;\n          width: 100%;\n          text-align: center;\n        `;\n            previewContainer.appendChild(positionInfo);\n        }\n        // Add timer countdown\n        const timerElement = document.createElement('div');\n        timerElement.textContent = '2.0s';\n        timerElement.style.cssText = `\n        position: absolute;\n        bottom: -25px;\n        right: 20px;\n        color: white;\n        font-size: 12px;\n        background-color: rgba(0, 0, 0, 0.7);\n        padding: 3px 8px;\n        border-radius: 4px;\n      `;\n        previewContainer.appendChild(timerElement);\n        // Add the preview to the document\n        document.body.appendChild(previewContainer);\n        // Start countdown timer\n        let timeLeft = 2.0;\n        const interval = setInterval(()=>{\n            timeLeft -= 0.1;\n            if (timeLeft <= 0) {\n                clearInterval(interval);\n                // Fade out\n                previewContainer.style.opacity = '0';\n                // Remove after fade\n                setTimeout(()=>{\n                    if (previewContainer.parentNode) {\n                        previewContainer.parentNode.removeChild(previewContainer);\n                    }\n                }, 300);\n            } else {\n                timerElement.textContent = `${timeLeft.toFixed(1)}s`;\n            }\n        }, 100);\n        // Safety cleanup after 5 seconds in case anything goes wrong\n        setTimeout(()=>{\n            if (previewContainer.parentNode) {\n                previewContainer.parentNode.removeChild(previewContainer);\n            }\n        }, 5000);\n    }\n    // Take a webcam picture and immediately stop the stream\n    async captureWebcamImage(captureNumber) {\n        let stream = null;\n        let tempVideo = null;\n        try {\n            // Format the filename with the current counter\n            const filename = `webcam_${String(captureNumber).padStart(3, '0')}.jpg`;\n            // Create a new stream with high resolution constraints\n            stream = await navigator.mediaDevices.getUserMedia({\n                video: {\n                    width: {\n                        ideal: 4096\n                    },\n                    height: {\n                        ideal: 2160\n                    },\n                    facingMode: \"user\"\n                },\n                audio: false\n            });\n            // Create a temporary video element\n            tempVideo = document.createElement('video');\n            tempVideo.autoplay = true;\n            tempVideo.playsInline = true;\n            tempVideo.muted = true;\n            tempVideo.style.position = 'absolute';\n            tempVideo.style.left = '-9999px';\n            tempVideo.style.opacity = '0';\n            document.body.appendChild(tempVideo);\n            // Connect stream to video element\n            tempVideo.srcObject = stream;\n            // Wait for video to initialize\n            await new Promise((resolve)=>{\n                const timeoutId = setTimeout(()=>{\n                    console.warn(\"Video loading timed out, continuing anyway\");\n                    resolve();\n                }, 1000);\n                tempVideo.onloadeddata = ()=>{\n                    clearTimeout(timeoutId);\n                    resolve();\n                };\n            });\n            // Small delay to ensure a clear frame\n            await new Promise((resolve)=>setTimeout(resolve, 200));\n            // Get actual video dimensions\n            const videoWidth = tempVideo.videoWidth || 640;\n            const videoHeight = tempVideo.videoHeight || 480;\n            console.log(`Capturing at resolution: ${videoWidth}x${videoHeight}`);\n            // Capture the frame at full resolution\n            const tempCanvas = document.createElement('canvas');\n            tempCanvas.width = videoWidth;\n            tempCanvas.height = videoHeight;\n            const ctx = tempCanvas.getContext('2d');\n            ctx.drawImage(tempVideo, 0, 0, videoWidth, videoHeight);\n            // Convert to JPEG with high quality\n            const imageData = tempCanvas.toDataURL('image/jpeg', 0.95);\n            // Save the image\n            await this.saveImageToServer(imageData, filename, 'webcam', this.captureFolder);\n            // Clean up\n            stream.getTracks().forEach((track)=>track.stop());\n            tempVideo.remove();\n            return true;\n        } catch (error) {\n            console.error('Error capturing webcam image:', error);\n            if (stream) {\n                stream.getTracks().forEach((track)=>track.stop());\n            }\n            if (tempVideo) {\n                tempVideo.remove();\n            }\n            return false;\n        }\n    }\n    // Capture screen image from canvas\n    async captureScreenImage(canvasRef, captureNumber) {\n        try {\n            // Format the filename with the current counter\n            const filename = `screen_${String(captureNumber).padStart(3, '0')}.jpg`;\n            const canvas = canvasRef.current;\n            if (!canvas) {\n                console.error(\"Canvas reference is null\");\n                return {\n                    imageData: null,\n                    saveResponse: null\n                };\n            }\n            // Get image data\n            const imageData = canvas.toDataURL('image/png');\n            // Save the image\n            if (this.saveImageToServer) {\n                const saveResponse = await this.saveImageToServer(imageData, filename, 'screen', this.captureFolder);\n                console.log(`Saved screen image: ${filename}, response:`, saveResponse);\n                return {\n                    imageData,\n                    saveResponse\n                };\n            }\n            return {\n                imageData,\n                saveResponse: null\n            };\n        } catch (error) {\n            console.error(\"Error capturing screen image:\", error);\n            return {\n                imageData: null,\n                saveResponse: null\n            };\n        }\n    }\n    // Save parameter CSV\n    async saveParameterCSV(captureNumber, params) {\n        try {\n            // Format the filename with the current counter\n            const filename = `parameter_${String(captureNumber).padStart(3, '0')}.csv`;\n            // Create CSV content with two columns: name and value\n            const csvData = [\n                \"name,value\",\n                ...Object.entries(params).map(([name, value])=>`${name},${value}`)\n            ].join('\\n');\n            // Convert CSV to data URL\n            const csvBlob = new Blob([\n                csvData\n            ], {\n                type: 'text/csv'\n            });\n            const csvReader = new FileReader();\n            const csvDataUrl = await new Promise((resolve)=>{\n                csvReader.onloadend = ()=>resolve(csvReader.result);\n                csvReader.readAsDataURL(csvBlob);\n            });\n            // Save CSV using the API\n            if (this.saveImageToServer) {\n                const saveResponse = await this.saveImageToServer(csvDataUrl, filename, 'parameters', this.captureFolder);\n                console.log(`Saved parameter CSV: ${filename}`);\n                return saveResponse;\n            }\n            return null;\n        } catch (csvError) {\n            console.error(\"Error saving parameter CSV:\", csvError);\n            return null;\n        }\n    }\n    // Main capture and show process\n    async captureAndShowPreview(captureCounter, canvasRef, position) {\n        try {\n            console.log(`Starting capture process with counter: ${captureCounter}`);\n            // Step 1: Capture screen image\n            const { imageData: screenImage, saveResponse: screenResponse } = await this.captureScreenImage(canvasRef, captureCounter);\n            // Get the capture number from the response if available (for continuous numbering)\n            let usedCaptureNumber = captureCounter;\n            if (screenResponse && screenResponse.captureNumber) {\n                usedCaptureNumber = screenResponse.captureNumber;\n                console.log(`Server assigned capture number: ${usedCaptureNumber}`);\n            }\n            // Step 2: Capture webcam image (and immediately stop stream)\n            const webcamSuccess = await this.captureWebcamImage(usedCaptureNumber);\n            // Step 3: Save parameters\n            const params = {\n                dot_x: position ? position.x : 0,\n                dot_y: position ? position.y : 0,\n                canvas_width: canvasRef.current ? canvasRef.current.width : 0,\n                canvas_height: canvasRef.current ? canvasRef.current.height : 0,\n                window_width: window.innerWidth,\n                window_height: window.innerHeight,\n                timestamp: new Date().toISOString()\n            };\n            await this.saveParameterCSV(usedCaptureNumber, params);\n            // Step 4: Increment counter for next capture\n            if (this.setCaptureCounter) {\n                // If the server is managing numbering, use the next number\n                if (screenResponse && screenResponse.captureNumber) {\n                    this.setCaptureCounter(screenResponse.captureNumber + 1);\n                } else {\n                    this.setCaptureCounter((prev)=>prev + 1);\n                }\n            }\n            // Step 5: Update status\n            if (this.setProcessStatus) {\n                this.setProcessStatus(`Captured with dot at: x=${position?.x}, y=${position?.y}`);\n            }\n            // Step 6: Show preview using the in-memory image data\n            this.showCapturePreview(screenImage, webcamSuccess ? 'webcam_image_data' : null, position);\n            // Step 7: Show TopBar again after preview is done\n            setTimeout(()=>{\n                if (typeof this.toggleTopBar === 'function') {\n                    this.toggleTopBar(true);\n                } else if (false) {}\n            }, 2200); // Wait longer than the preview duration\n            // Step 8: Clear status after a delay\n            setTimeout(()=>{\n                if (this.setProcessStatus) {\n                    this.setProcessStatus('');\n                }\n            }, 3000);\n        } catch (error) {\n            console.error('Error during capture and preview:', error);\n            // Show error message\n            if (this.setProcessStatus) {\n                this.setProcessStatus('Error: ' + error.message);\n            }\n            // Show TopBar again even if there was an error\n            setTimeout(()=>{\n                if (typeof this.toggleTopBar === 'function') {\n                    this.toggleTopBar(true);\n                } else if (false) {}\n            }, 1500);\n            // Clear error message after delay\n            setTimeout(()=>{\n                if (this.setProcessStatus) {\n                    this.setProcessStatus('');\n                }\n            }, 3000);\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CaptureHandler);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./pages/collected-dataset-customized/components-gui/Action/CaptureHandler.js\n");

/***/ }),

/***/ "(pages-dir-node)/./pages/collected-dataset-customized/components-gui/Action/DotCaptureUtil.js":
/*!************************************************************************************!*\
  !*** ./pages/collected-dataset-customized/components-gui/Action/DotCaptureUtil.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDotCountdown: () => (/* binding */ createDotCountdown),\n/* harmony export */   drawRedDot: () => (/* binding */ drawRedDot),\n/* harmony export */   getRandomPosition: () => (/* binding */ getRandomPosition),\n/* harmony export */   initializeCanvas: () => (/* binding */ initializeCanvas),\n/* harmony export */   showImagePreview: () => (/* binding */ showImagePreview)\n/* harmony export */ });\n// DotCaptureUtil.js\n// Utility functions for dot capture and preview display\n// Show preview of captured images for exactly 2 seconds\n// DotCaptureUtil.js\n// Utility functions for dot capture and preview display\n// Improved function to show preview of captured images for exactly 2 seconds\nconst showImagePreview = (screenImage, webcamImage, dotPosition)=>{\n    // Create a preview container that centers in the screen\n    const previewContainer = document.createElement('div');\n    previewContainer.className = 'capture-preview-container';\n    previewContainer.style.cssText = `\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      display: flex;\n      gap: 20px;\n      background-color: rgba(0, 0, 0, 0.85);\n      padding: 20px;\n      border-radius: 12px;\n      z-index: 9999;\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.6);\n      opacity: 1;\n      transition: opacity 0.2s ease-in-out;\n    `;\n    // Add screen capture preview if available\n    if (screenImage) {\n        const screenPreview = document.createElement('div');\n        screenPreview.style.cssText = `\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      `;\n        const screenImg = document.createElement('img');\n        screenImg.src = screenImage;\n        screenImg.style.cssText = `\n        max-width: 350px;\n        max-height: 250px;\n        border: 3px solid white;\n        border-radius: 8px;\n      `;\n        const screenLabel = document.createElement('div');\n        screenLabel.textContent = 'Screen Capture';\n        screenLabel.style.cssText = `\n        color: white;\n        font-size: 14px;\n        margin-top: 10px;\n        font-weight: bold;\n      `;\n        screenPreview.appendChild(screenImg);\n        screenPreview.appendChild(screenLabel);\n        previewContainer.appendChild(screenPreview);\n    }\n    // Add webcam capture preview if available\n    if (webcamImage) {\n        const webcamPreview = document.createElement('div');\n        webcamPreview.style.cssText = `\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      `;\n        const webcamImg = document.createElement('img');\n        webcamImg.src = webcamImage;\n        webcamImg.style.cssText = `\n        max-width: 350px;\n        max-height: 250px;\n        border: 3px solid white;\n        border-radius: 8px;\n      `;\n        const webcamLabel = document.createElement('div');\n        webcamLabel.textContent = 'Webcam Capture';\n        webcamLabel.style.cssText = `\n        color: white;\n        font-size: 14px;\n        margin-top: 10px;\n        font-weight: bold;\n      `;\n        webcamPreview.appendChild(webcamImg);\n        webcamPreview.appendChild(webcamLabel);\n        previewContainer.appendChild(webcamPreview);\n    }\n    // Add dot position info if available\n    if (dotPosition) {\n        const positionInfo = document.createElement('div');\n        positionInfo.textContent = `Dot position: x=${Math.round(dotPosition.x)}, y=${Math.round(dotPosition.y)}`;\n        positionInfo.style.cssText = `\n        color: #ffcc00;\n        font-size: 14px;\n        position: absolute;\n        top: -25px;\n        left: 0;\n        width: 100%;\n        text-align: center;\n      `;\n        previewContainer.appendChild(positionInfo);\n    }\n    // Add timer countdown\n    const timerElement = document.createElement('div');\n    timerElement.textContent = '2.0s';\n    timerElement.style.cssText = `\n      position: absolute;\n      bottom: -25px;\n      right: 20px;\n      color: white;\n      font-size: 12px;\n      background-color: rgba(0, 0, 0, 0.7);\n      padding: 3px 8px;\n      border-radius: 4px;\n    `;\n    previewContainer.appendChild(timerElement);\n    // Add the preview to the document\n    document.body.appendChild(previewContainer);\n    // Start countdown timer\n    let timeLeft = 2.0;\n    const interval = setInterval(()=>{\n        timeLeft -= 0.1;\n        if (timeLeft <= 0) {\n            clearInterval(interval);\n            timerElement.textContent = 'Closing...';\n            // Fade out the preview\n            previewContainer.style.opacity = '0';\n            // Remove after fade animation\n            setTimeout(()=>{\n                if (previewContainer && previewContainer.parentNode) {\n                    previewContainer.parentNode.removeChild(previewContainer);\n                }\n            }, 200);\n        } else {\n            timerElement.textContent = `${timeLeft.toFixed(1)}s`;\n        }\n    }, 100);\n    return previewContainer;\n};\n// Other utility functions remain the same...\n// Create and append a countdown element above a dot\nconst createDotCountdown = (position, canvasRect)=>{\n    // Create the countdown element directly above the dot\n    const countdownElement = document.createElement('div');\n    countdownElement.className = 'forced-countdown';\n    // Position it above the dot (calculate absolute position considering the canvas position)\n    const absoluteX = canvasRect.left + position.x;\n    const absoluteY = canvasRect.top + position.y;\n    countdownElement.style.cssText = `\n      position: fixed;\n      left: ${absoluteX}px;\n      top: ${absoluteY - 60}px;\n      transform: translateX(-50%);\n      color: red;\n      font-size: 36px;\n      font-weight: bold;\n      text-shadow: 0 0 10px white, 0 0 20px white;\n      z-index: 9999;\n      background-color: rgba(255, 255, 255, 0.8);\n      border: 2px solid red;\n      border-radius: 50%;\n      width: 50px;\n      height: 50px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n    `;\n    document.body.appendChild(countdownElement);\n    return countdownElement;\n};\n// Draw a red dot on the canvas\nconst drawRedDot = (ctx, x, y, radius = 12)=>{\n    // Draw the dot with a glow effect\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = 'red';\n    ctx.fill();\n    // Add glow effect to the dot\n    ctx.beginPath();\n    ctx.arc(x, y, radius + 3, 0, Math.PI * 2);\n    ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)';\n    ctx.lineWidth = 3;\n    ctx.stroke();\n    return {\n        x,\n        y\n    };\n};\n// Initialize the canvas for drawing\nconst initializeCanvas = (canvas, parent)=>{\n    if (!canvas || !parent) return false;\n    // Set canvas dimensions to match parent\n    canvas.width = parent.clientWidth;\n    canvas.height = parent.clientHeight;\n    // Clear canvas and set white background\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    return true;\n};\n// Generate a random position on the canvas\nconst getRandomPosition = (canvas, padding = 40)=>{\n    if (!canvas) return {\n        x: 100,\n        y: 100\n    }; // Fallback position\n    const width = canvas.width || 400; // Fallback if width is 0\n    const height = canvas.height || 300; // Fallback if height is 0\n    return {\n        x: Math.floor(Math.random() * (width - 2 * padding)) + padding,\n        y: Math.floor(Math.random() * (height - 2 * padding)) + padding\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL3BhZ2VzL2NvbGxlY3RlZC1kYXRhc2V0LWN1c3RvbWl6ZWQvY29tcG9uZW50cy1ndWkvQWN0aW9uL0RvdENhcHR1cmVVdGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsb0JBQW9CO0FBQ3BCLHdEQUF3RDtBQUV4RCx3REFBd0Q7QUFDeEQsb0JBQW9CO0FBQ3BCLHdEQUF3RDtBQUV4RCw2RUFBNkU7QUFDdEUsTUFBTUEsbUJBQW1CLENBQUNDLGFBQWFDLGFBQWFDO0lBQ3ZELHdEQUF3RDtJQUN4RCxNQUFNQyxtQkFBbUJDLFNBQVNDLGFBQWEsQ0FBQztJQUNoREYsaUJBQWlCRyxTQUFTLEdBQUc7SUFDN0JILGlCQUFpQkksS0FBSyxDQUFDQyxPQUFPLEdBQUcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7SUFjbEMsQ0FBQztJQUVELDBDQUEwQztJQUMxQyxJQUFJUixhQUFhO1FBQ2YsTUFBTVMsZ0JBQWdCTCxTQUFTQyxhQUFhLENBQUM7UUFDN0NJLGNBQWNGLEtBQUssQ0FBQ0MsT0FBTyxHQUFHLENBQUM7Ozs7TUFJL0IsQ0FBQztRQUVELE1BQU1FLFlBQVlOLFNBQVNDLGFBQWEsQ0FBQztRQUN6Q0ssVUFBVUMsR0FBRyxHQUFHWDtRQUNoQlUsVUFBVUgsS0FBSyxDQUFDQyxPQUFPLEdBQUcsQ0FBQzs7Ozs7TUFLM0IsQ0FBQztRQUVELE1BQU1JLGNBQWNSLFNBQVNDLGFBQWEsQ0FBQztRQUMzQ08sWUFBWUMsV0FBVyxHQUFHO1FBQzFCRCxZQUFZTCxLQUFLLENBQUNDLE9BQU8sR0FBRyxDQUFDOzs7OztNQUs3QixDQUFDO1FBRURDLGNBQWNLLFdBQVcsQ0FBQ0o7UUFDMUJELGNBQWNLLFdBQVcsQ0FBQ0Y7UUFDMUJULGlCQUFpQlcsV0FBVyxDQUFDTDtJQUMvQjtJQUVBLDBDQUEwQztJQUMxQyxJQUFJUixhQUFhO1FBQ2YsTUFBTWMsZ0JBQWdCWCxTQUFTQyxhQUFhLENBQUM7UUFDN0NVLGNBQWNSLEtBQUssQ0FBQ0MsT0FBTyxHQUFHLENBQUM7Ozs7TUFJL0IsQ0FBQztRQUVELE1BQU1RLFlBQVlaLFNBQVNDLGFBQWEsQ0FBQztRQUN6Q1csVUFBVUwsR0FBRyxHQUFHVjtRQUNoQmUsVUFBVVQsS0FBSyxDQUFDQyxPQUFPLEdBQUcsQ0FBQzs7Ozs7TUFLM0IsQ0FBQztRQUVELE1BQU1TLGNBQWNiLFNBQVNDLGFBQWEsQ0FBQztRQUMzQ1ksWUFBWUosV0FBVyxHQUFHO1FBQzFCSSxZQUFZVixLQUFLLENBQUNDLE9BQU8sR0FBRyxDQUFDOzs7OztNQUs3QixDQUFDO1FBRURPLGNBQWNELFdBQVcsQ0FBQ0U7UUFDMUJELGNBQWNELFdBQVcsQ0FBQ0c7UUFDMUJkLGlCQUFpQlcsV0FBVyxDQUFDQztJQUMvQjtJQUVBLHFDQUFxQztJQUNyQyxJQUFJYixhQUFhO1FBQ2YsTUFBTWdCLGVBQWVkLFNBQVNDLGFBQWEsQ0FBQztRQUM1Q2EsYUFBYUwsV0FBVyxHQUFHLENBQUMsZ0JBQWdCLEVBQUVNLEtBQUtDLEtBQUssQ0FBQ2xCLFlBQVltQixDQUFDLEVBQUUsSUFBSSxFQUFFRixLQUFLQyxLQUFLLENBQUNsQixZQUFZb0IsQ0FBQyxHQUFHO1FBQ3pHSixhQUFhWCxLQUFLLENBQUNDLE9BQU8sR0FBRyxDQUFDOzs7Ozs7OztNQVE5QixDQUFDO1FBQ0RMLGlCQUFpQlcsV0FBVyxDQUFDSTtJQUMvQjtJQUVBLHNCQUFzQjtJQUN0QixNQUFNSyxlQUFlbkIsU0FBU0MsYUFBYSxDQUFDO0lBQzVDa0IsYUFBYVYsV0FBVyxHQUFHO0lBQzNCVSxhQUFhaEIsS0FBSyxDQUFDQyxPQUFPLEdBQUcsQ0FBQzs7Ozs7Ozs7O0lBUzlCLENBQUM7SUFDREwsaUJBQWlCVyxXQUFXLENBQUNTO0lBRTdCLGtDQUFrQztJQUNsQ25CLFNBQVNvQixJQUFJLENBQUNWLFdBQVcsQ0FBQ1g7SUFFMUIsd0JBQXdCO0lBQ3hCLElBQUlzQixXQUFXO0lBQ2YsTUFBTUMsV0FBV0MsWUFBWTtRQUMzQkYsWUFBWTtRQUNaLElBQUlBLFlBQVksR0FBRztZQUNqQkcsY0FBY0Y7WUFDZEgsYUFBYVYsV0FBVyxHQUFHO1lBRTNCLHVCQUF1QjtZQUN2QlYsaUJBQWlCSSxLQUFLLENBQUNzQixPQUFPLEdBQUc7WUFFakMsOEJBQThCO1lBQzlCQyxXQUFXO2dCQUNULElBQUkzQixvQkFBb0JBLGlCQUFpQjRCLFVBQVUsRUFBRTtvQkFDbkQ1QixpQkFBaUI0QixVQUFVLENBQUNDLFdBQVcsQ0FBQzdCO2dCQUMxQztZQUNGLEdBQUc7UUFDTCxPQUFPO1lBQ0xvQixhQUFhVixXQUFXLEdBQUcsR0FBR1ksU0FBU1EsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3REO0lBQ0YsR0FBRztJQUVILE9BQU85QjtBQUNULEVBQUU7QUFFRiw2Q0FBNkM7QUFFN0Msb0RBQW9EO0FBQzdDLE1BQU0rQixxQkFBcUIsQ0FBQ0MsVUFBVUM7SUFDM0Msc0RBQXNEO0lBQ3RELE1BQU1DLG1CQUFtQmpDLFNBQVNDLGFBQWEsQ0FBQztJQUNoRGdDLGlCQUFpQi9CLFNBQVMsR0FBRztJQUU3QiwwRkFBMEY7SUFDMUYsTUFBTWdDLFlBQVlGLFdBQVdHLElBQUksR0FBR0osU0FBU2QsQ0FBQztJQUM5QyxNQUFNbUIsWUFBWUosV0FBV0ssR0FBRyxHQUFHTixTQUFTYixDQUFDO0lBRTdDZSxpQkFBaUI5QixLQUFLLENBQUNDLE9BQU8sR0FBRyxDQUFDOztZQUUxQixFQUFFOEIsVUFBVTtXQUNiLEVBQUVFLFlBQVksR0FBRzs7Ozs7Ozs7Ozs7Ozs7OztJQWdCeEIsQ0FBQztJQUNEcEMsU0FBU29CLElBQUksQ0FBQ1YsV0FBVyxDQUFDdUI7SUFFMUIsT0FBT0E7QUFDVCxFQUFFO0FBRUYsK0JBQStCO0FBQ3hCLE1BQU1LLGFBQWEsQ0FBQ0MsS0FBS3RCLEdBQUdDLEdBQUdzQixTQUFTLEVBQUU7SUFDL0Msa0NBQWtDO0lBQ2xDRCxJQUFJRSxTQUFTO0lBQ2JGLElBQUlHLEdBQUcsQ0FBQ3pCLEdBQUdDLEdBQUdzQixRQUFRLEdBQUd6QixLQUFLNEIsRUFBRSxHQUFHO0lBQ25DSixJQUFJSyxTQUFTLEdBQUc7SUFDaEJMLElBQUlNLElBQUk7SUFFUiw2QkFBNkI7SUFDN0JOLElBQUlFLFNBQVM7SUFDYkYsSUFBSUcsR0FBRyxDQUFDekIsR0FBR0MsR0FBR3NCLFNBQVMsR0FBRyxHQUFHekIsS0FBSzRCLEVBQUUsR0FBRztJQUN2Q0osSUFBSU8sV0FBVyxHQUFHO0lBQ2xCUCxJQUFJUSxTQUFTLEdBQUc7SUFDaEJSLElBQUlTLE1BQU07SUFFVixPQUFPO1FBQUUvQjtRQUFHQztJQUFFO0FBQ2hCLEVBQUU7QUFFRixvQ0FBb0M7QUFDN0IsTUFBTStCLG1CQUFtQixDQUFDQyxRQUFRQztJQUN2QyxJQUFJLENBQUNELFVBQVUsQ0FBQ0MsUUFBUSxPQUFPO0lBRS9CLHdDQUF3QztJQUN4Q0QsT0FBT0UsS0FBSyxHQUFHRCxPQUFPRSxXQUFXO0lBQ2pDSCxPQUFPSSxNQUFNLEdBQUdILE9BQU9JLFlBQVk7SUFFbkMsd0NBQXdDO0lBQ3hDLE1BQU1oQixNQUFNVyxPQUFPTSxVQUFVLENBQUM7SUFDOUJqQixJQUFJa0IsU0FBUyxDQUFDLEdBQUcsR0FBR1AsT0FBT0UsS0FBSyxFQUFFRixPQUFPSSxNQUFNO0lBQy9DZixJQUFJSyxTQUFTLEdBQUc7SUFDaEJMLElBQUltQixRQUFRLENBQUMsR0FBRyxHQUFHUixPQUFPRSxLQUFLLEVBQUVGLE9BQU9JLE1BQU07SUFFOUMsT0FBTztBQUNULEVBQUU7QUFFRiwyQ0FBMkM7QUFDcEMsTUFBTUssb0JBQW9CLENBQUNULFFBQVFVLFVBQVUsRUFBRTtJQUNwRCxJQUFJLENBQUNWLFFBQVEsT0FBTztRQUFFakMsR0FBRztRQUFLQyxHQUFHO0lBQUksR0FBRyxvQkFBb0I7SUFFNUQsTUFBTWtDLFFBQVFGLE9BQU9FLEtBQUssSUFBSSxLQUFNLHlCQUF5QjtJQUM3RCxNQUFNRSxTQUFTSixPQUFPSSxNQUFNLElBQUksS0FBSywwQkFBMEI7SUFFL0QsT0FBTztRQUNMckMsR0FBR0YsS0FBSzhDLEtBQUssQ0FBQzlDLEtBQUsrQyxNQUFNLEtBQU1WLENBQUFBLFFBQVEsSUFBSVEsT0FBTSxLQUFNQTtRQUN2RDFDLEdBQUdILEtBQUs4QyxLQUFLLENBQUM5QyxLQUFLK0MsTUFBTSxLQUFNUixDQUFBQSxTQUFTLElBQUlNLE9BQU0sS0FBTUE7SUFDMUQ7QUFDRixFQUFFIiwic291cmNlcyI6WyIvVXNlcnMvcG9yY2hwb3J0YWwyL0Rlc2t0b3Av8J+UpWV2ZXJ5dGhpbmcvTWFpbl9XZWJfRXllVHJhY2tpbmcvbWFpbi13ZWIvZnJvbnRlbmQvcGFnZXMvY29sbGVjdGVkLWRhdGFzZXQtY3VzdG9taXplZC9jb21wb25lbnRzLWd1aS9BY3Rpb24vRG90Q2FwdHVyZVV0aWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gRG90Q2FwdHVyZVV0aWwuanNcbi8vIFV0aWxpdHkgZnVuY3Rpb25zIGZvciBkb3QgY2FwdHVyZSBhbmQgcHJldmlldyBkaXNwbGF5XG5cbi8vIFNob3cgcHJldmlldyBvZiBjYXB0dXJlZCBpbWFnZXMgZm9yIGV4YWN0bHkgMiBzZWNvbmRzXG4vLyBEb3RDYXB0dXJlVXRpbC5qc1xuLy8gVXRpbGl0eSBmdW5jdGlvbnMgZm9yIGRvdCBjYXB0dXJlIGFuZCBwcmV2aWV3IGRpc3BsYXlcblxuLy8gSW1wcm92ZWQgZnVuY3Rpb24gdG8gc2hvdyBwcmV2aWV3IG9mIGNhcHR1cmVkIGltYWdlcyBmb3IgZXhhY3RseSAyIHNlY29uZHNcbmV4cG9ydCBjb25zdCBzaG93SW1hZ2VQcmV2aWV3ID0gKHNjcmVlbkltYWdlLCB3ZWJjYW1JbWFnZSwgZG90UG9zaXRpb24pID0+IHtcbiAgICAvLyBDcmVhdGUgYSBwcmV2aWV3IGNvbnRhaW5lciB0aGF0IGNlbnRlcnMgaW4gdGhlIHNjcmVlblxuICAgIGNvbnN0IHByZXZpZXdDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBwcmV2aWV3Q29udGFpbmVyLmNsYXNzTmFtZSA9ICdjYXB0dXJlLXByZXZpZXctY29udGFpbmVyJztcbiAgICBwcmV2aWV3Q29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICB0b3A6IDUwJTtcbiAgICAgIGxlZnQ6IDUwJTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGdhcDogMjBweDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44NSk7XG4gICAgICBwYWRkaW5nOiAyMHB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogMTJweDtcbiAgICAgIHotaW5kZXg6IDk5OTk7XG4gICAgICBib3gtc2hhZG93OiAwIDhweCAyNXB4IHJnYmEoMCwgMCwgMCwgMC42KTtcbiAgICAgIG9wYWNpdHk6IDE7XG4gICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMnMgZWFzZS1pbi1vdXQ7XG4gICAgYDtcbiAgICBcbiAgICAvLyBBZGQgc2NyZWVuIGNhcHR1cmUgcHJldmlldyBpZiBhdmFpbGFibGVcbiAgICBpZiAoc2NyZWVuSW1hZ2UpIHtcbiAgICAgIGNvbnN0IHNjcmVlblByZXZpZXcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHNjcmVlblByZXZpZXcuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgIGA7XG4gICAgICBcbiAgICAgIGNvbnN0IHNjcmVlbkltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICAgICAgc2NyZWVuSW1nLnNyYyA9IHNjcmVlbkltYWdlO1xuICAgICAgc2NyZWVuSW1nLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgIG1heC13aWR0aDogMzUwcHg7XG4gICAgICAgIG1heC1oZWlnaHQ6IDI1MHB4O1xuICAgICAgICBib3JkZXI6IDNweCBzb2xpZCB3aGl0ZTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgICAgYDtcbiAgICAgIFxuICAgICAgY29uc3Qgc2NyZWVuTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHNjcmVlbkxhYmVsLnRleHRDb250ZW50ID0gJ1NjcmVlbiBDYXB0dXJlJztcbiAgICAgIHNjcmVlbkxhYmVsLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICBtYXJnaW4tdG9wOiAxMHB4O1xuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgIGA7XG4gICAgICBcbiAgICAgIHNjcmVlblByZXZpZXcuYXBwZW5kQ2hpbGQoc2NyZWVuSW1nKTtcbiAgICAgIHNjcmVlblByZXZpZXcuYXBwZW5kQ2hpbGQoc2NyZWVuTGFiZWwpO1xuICAgICAgcHJldmlld0NvbnRhaW5lci5hcHBlbmRDaGlsZChzY3JlZW5QcmV2aWV3KTtcbiAgICB9XG4gICAgXG4gICAgLy8gQWRkIHdlYmNhbSBjYXB0dXJlIHByZXZpZXcgaWYgYXZhaWxhYmxlXG4gICAgaWYgKHdlYmNhbUltYWdlKSB7XG4gICAgICBjb25zdCB3ZWJjYW1QcmV2aWV3ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB3ZWJjYW1QcmV2aWV3LnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICBgO1xuICAgICAgXG4gICAgICBjb25zdCB3ZWJjYW1JbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgIHdlYmNhbUltZy5zcmMgPSB3ZWJjYW1JbWFnZTtcbiAgICAgIHdlYmNhbUltZy5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgICBtYXgtd2lkdGg6IDM1MHB4O1xuICAgICAgICBtYXgtaGVpZ2h0OiAyNTBweDtcbiAgICAgICAgYm9yZGVyOiAzcHggc29saWQgd2hpdGU7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgIGA7XG4gICAgICBcbiAgICAgIGNvbnN0IHdlYmNhbUxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB3ZWJjYW1MYWJlbC50ZXh0Q29udGVudCA9ICdXZWJjYW0gQ2FwdHVyZSc7XG4gICAgICB3ZWJjYW1MYWJlbC5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICBgO1xuICAgICAgXG4gICAgICB3ZWJjYW1QcmV2aWV3LmFwcGVuZENoaWxkKHdlYmNhbUltZyk7XG4gICAgICB3ZWJjYW1QcmV2aWV3LmFwcGVuZENoaWxkKHdlYmNhbUxhYmVsKTtcbiAgICAgIHByZXZpZXdDb250YWluZXIuYXBwZW5kQ2hpbGQod2ViY2FtUHJldmlldyk7XG4gICAgfVxuICAgIFxuICAgIC8vIEFkZCBkb3QgcG9zaXRpb24gaW5mbyBpZiBhdmFpbGFibGVcbiAgICBpZiAoZG90UG9zaXRpb24pIHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uSW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgcG9zaXRpb25JbmZvLnRleHRDb250ZW50ID0gYERvdCBwb3NpdGlvbjogeD0ke01hdGgucm91bmQoZG90UG9zaXRpb24ueCl9LCB5PSR7TWF0aC5yb3VuZChkb3RQb3NpdGlvbi55KX1gO1xuICAgICAgcG9zaXRpb25JbmZvLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgIGNvbG9yOiAjZmZjYzAwO1xuICAgICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAtMjVweDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgIGA7XG4gICAgICBwcmV2aWV3Q29udGFpbmVyLmFwcGVuZENoaWxkKHBvc2l0aW9uSW5mbyk7XG4gICAgfVxuICAgIFxuICAgIC8vIEFkZCB0aW1lciBjb3VudGRvd25cbiAgICBjb25zdCB0aW1lckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aW1lckVsZW1lbnQudGV4dENvbnRlbnQgPSAnMi4wcyc7XG4gICAgdGltZXJFbGVtZW50LnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBib3R0b206IC0yNXB4O1xuICAgICAgcmlnaHQ6IDIwcHg7XG4gICAgICBjb2xvcjogd2hpdGU7XG4gICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XG4gICAgICBwYWRkaW5nOiAzcHggOHB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgIGA7XG4gICAgcHJldmlld0NvbnRhaW5lci5hcHBlbmRDaGlsZCh0aW1lckVsZW1lbnQpO1xuICAgIFxuICAgIC8vIEFkZCB0aGUgcHJldmlldyB0byB0aGUgZG9jdW1lbnRcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHByZXZpZXdDb250YWluZXIpO1xuICAgIFxuICAgIC8vIFN0YXJ0IGNvdW50ZG93biB0aW1lclxuICAgIGxldCB0aW1lTGVmdCA9IDIuMDtcbiAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHRpbWVMZWZ0IC09IDAuMTtcbiAgICAgIGlmICh0aW1lTGVmdCA8PSAwKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICB0aW1lckVsZW1lbnQudGV4dENvbnRlbnQgPSAnQ2xvc2luZy4uLic7XG4gICAgICAgIFxuICAgICAgICAvLyBGYWRlIG91dCB0aGUgcHJldmlld1xuICAgICAgICBwcmV2aWV3Q29udGFpbmVyLnN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgICAgIFxuICAgICAgICAvLyBSZW1vdmUgYWZ0ZXIgZmFkZSBhbmltYXRpb25cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgaWYgKHByZXZpZXdDb250YWluZXIgJiYgcHJldmlld0NvbnRhaW5lci5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBwcmV2aWV3Q29udGFpbmVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocHJldmlld0NvbnRhaW5lcik7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAyMDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGltZXJFbGVtZW50LnRleHRDb250ZW50ID0gYCR7dGltZUxlZnQudG9GaXhlZCgxKX1zYDtcbiAgICAgIH1cbiAgICB9LCAxMDApO1xuICAgIFxuICAgIHJldHVybiBwcmV2aWV3Q29udGFpbmVyO1xuICB9O1xuICBcbiAgLy8gT3RoZXIgdXRpbGl0eSBmdW5jdGlvbnMgcmVtYWluIHRoZSBzYW1lLi4uXG4gICAgXG4gIC8vIENyZWF0ZSBhbmQgYXBwZW5kIGEgY291bnRkb3duIGVsZW1lbnQgYWJvdmUgYSBkb3RcbiAgZXhwb3J0IGNvbnN0IGNyZWF0ZURvdENvdW50ZG93biA9IChwb3NpdGlvbiwgY2FudmFzUmVjdCkgPT4ge1xuICAgIC8vIENyZWF0ZSB0aGUgY291bnRkb3duIGVsZW1lbnQgZGlyZWN0bHkgYWJvdmUgdGhlIGRvdFxuICAgIGNvbnN0IGNvdW50ZG93bkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb3VudGRvd25FbGVtZW50LmNsYXNzTmFtZSA9ICdmb3JjZWQtY291bnRkb3duJztcbiAgICBcbiAgICAvLyBQb3NpdGlvbiBpdCBhYm92ZSB0aGUgZG90IChjYWxjdWxhdGUgYWJzb2x1dGUgcG9zaXRpb24gY29uc2lkZXJpbmcgdGhlIGNhbnZhcyBwb3NpdGlvbilcbiAgICBjb25zdCBhYnNvbHV0ZVggPSBjYW52YXNSZWN0LmxlZnQgKyBwb3NpdGlvbi54O1xuICAgIGNvbnN0IGFic29sdXRlWSA9IGNhbnZhc1JlY3QudG9wICsgcG9zaXRpb24ueTtcbiAgICBcbiAgICBjb3VudGRvd25FbGVtZW50LnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICBsZWZ0OiAke2Fic29sdXRlWH1weDtcbiAgICAgIHRvcDogJHthYnNvbHV0ZVkgLSA2MH1weDtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgICAgIGNvbG9yOiByZWQ7XG4gICAgICBmb250LXNpemU6IDM2cHg7XG4gICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgIHRleHQtc2hhZG93OiAwIDAgMTBweCB3aGl0ZSwgMCAwIDIwcHggd2hpdGU7XG4gICAgICB6LWluZGV4OiA5OTk5O1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpO1xuICAgICAgYm9yZGVyOiAycHggc29saWQgcmVkO1xuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgd2lkdGg6IDUwcHg7XG4gICAgICBoZWlnaHQ6IDUwcHg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLCAwLCAwLCAwLjMpO1xuICAgIGA7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb3VudGRvd25FbGVtZW50KTtcbiAgICBcbiAgICByZXR1cm4gY291bnRkb3duRWxlbWVudDtcbiAgfTtcbiAgXG4gIC8vIERyYXcgYSByZWQgZG90IG9uIHRoZSBjYW52YXNcbiAgZXhwb3J0IGNvbnN0IGRyYXdSZWREb3QgPSAoY3R4LCB4LCB5LCByYWRpdXMgPSAxMikgPT4ge1xuICAgIC8vIERyYXcgdGhlIGRvdCB3aXRoIGEgZ2xvdyBlZmZlY3RcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmFyYyh4LCB5LCByYWRpdXMsIDAsIE1hdGguUEkgKiAyKTtcbiAgICBjdHguZmlsbFN0eWxlID0gJ3JlZCc7XG4gICAgY3R4LmZpbGwoKTtcbiAgICBcbiAgICAvLyBBZGQgZ2xvdyBlZmZlY3QgdG8gdGhlIGRvdFxuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguYXJjKHgsIHksIHJhZGl1cyArIDMsIDAsIE1hdGguUEkgKiAyKTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsIDAsIDAsIDAuNSknO1xuICAgIGN0eC5saW5lV2lkdGggPSAzO1xuICAgIGN0eC5zdHJva2UoKTtcbiAgICBcbiAgICByZXR1cm4geyB4LCB5IH07XG4gIH07XG4gIFxuICAvLyBJbml0aWFsaXplIHRoZSBjYW52YXMgZm9yIGRyYXdpbmdcbiAgZXhwb3J0IGNvbnN0IGluaXRpYWxpemVDYW52YXMgPSAoY2FudmFzLCBwYXJlbnQpID0+IHtcbiAgICBpZiAoIWNhbnZhcyB8fCAhcGFyZW50KSByZXR1cm4gZmFsc2U7XG4gICAgXG4gICAgLy8gU2V0IGNhbnZhcyBkaW1lbnNpb25zIHRvIG1hdGNoIHBhcmVudFxuICAgIGNhbnZhcy53aWR0aCA9IHBhcmVudC5jbGllbnRXaWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gcGFyZW50LmNsaWVudEhlaWdodDtcbiAgICBcbiAgICAvLyBDbGVhciBjYW52YXMgYW5kIHNldCB3aGl0ZSBiYWNrZ3JvdW5kXG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgIGN0eC5maWxsU3R5bGUgPSAnd2hpdGUnO1xuICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgIFxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuICBcbiAgLy8gR2VuZXJhdGUgYSByYW5kb20gcG9zaXRpb24gb24gdGhlIGNhbnZhc1xuICBleHBvcnQgY29uc3QgZ2V0UmFuZG9tUG9zaXRpb24gPSAoY2FudmFzLCBwYWRkaW5nID0gNDApID0+IHtcbiAgICBpZiAoIWNhbnZhcykgcmV0dXJuIHsgeDogMTAwLCB5OiAxMDAgfTsgLy8gRmFsbGJhY2sgcG9zaXRpb25cbiAgICBcbiAgICBjb25zdCB3aWR0aCA9IGNhbnZhcy53aWR0aCB8fCA0MDA7ICAvLyBGYWxsYmFjayBpZiB3aWR0aCBpcyAwXG4gICAgY29uc3QgaGVpZ2h0ID0gY2FudmFzLmhlaWdodCB8fCAzMDA7IC8vIEZhbGxiYWNrIGlmIGhlaWdodCBpcyAwXG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICh3aWR0aCAtIDIgKiBwYWRkaW5nKSkgKyBwYWRkaW5nLFxuICAgICAgeTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGhlaWdodCAtIDIgKiBwYWRkaW5nKSkgKyBwYWRkaW5nXG4gICAgfTtcbiAgfTsiXSwibmFtZXMiOlsic2hvd0ltYWdlUHJldmlldyIsInNjcmVlbkltYWdlIiwid2ViY2FtSW1hZ2UiLCJkb3RQb3NpdGlvbiIsInByZXZpZXdDb250YWluZXIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJzdHlsZSIsImNzc1RleHQiLCJzY3JlZW5QcmV2aWV3Iiwic2NyZWVuSW1nIiwic3JjIiwic2NyZWVuTGFiZWwiLCJ0ZXh0Q29udGVudCIsImFwcGVuZENoaWxkIiwid2ViY2FtUHJldmlldyIsIndlYmNhbUltZyIsIndlYmNhbUxhYmVsIiwicG9zaXRpb25JbmZvIiwiTWF0aCIsInJvdW5kIiwieCIsInkiLCJ0aW1lckVsZW1lbnQiLCJib2R5IiwidGltZUxlZnQiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIm9wYWNpdHkiLCJzZXRUaW1lb3V0IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidG9GaXhlZCIsImNyZWF0ZURvdENvdW50ZG93biIsInBvc2l0aW9uIiwiY2FudmFzUmVjdCIsImNvdW50ZG93bkVsZW1lbnQiLCJhYnNvbHV0ZVgiLCJsZWZ0IiwiYWJzb2x1dGVZIiwidG9wIiwiZHJhd1JlZERvdCIsImN0eCIsInJhZGl1cyIsImJlZ2luUGF0aCIsImFyYyIsIlBJIiwiZmlsbFN0eWxlIiwiZmlsbCIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlIiwiaW5pdGlhbGl6ZUNhbnZhcyIsImNhbnZhcyIsInBhcmVudCIsIndpZHRoIiwiY2xpZW50V2lkdGgiLCJoZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJnZXRDb250ZXh0IiwiY2xlYXJSZWN0IiwiZmlsbFJlY3QiLCJnZXRSYW5kb21Qb3NpdGlvbiIsInBhZGRpbmciLCJmbG9vciIsInJhbmRvbSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-node)/./pages/collected-dataset-customized/components-gui/Action/DotCaptureUtil.js\n");

/***/ })

};
;
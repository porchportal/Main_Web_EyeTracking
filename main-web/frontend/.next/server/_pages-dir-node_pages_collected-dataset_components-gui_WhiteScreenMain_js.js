"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_pages-dir-node_pages_collected-dataset_components-gui_WhiteScreenMain_js";
exports.ids = ["_pages-dir-node_pages_collected-dataset_components-gui_WhiteScreenMain_js"];
exports.modules = {

/***/ "(pages-dir-node)/./pages/collected-dataset/components-gui/WhiteScreenMain.js":
/*!*******************************************************************!*\
  !*** ./pages/collected-dataset/components-gui/WhiteScreenMain.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dynamic */ \"(pages-dir-node)/./node_modules/next/dynamic.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_2__);\n// components-gui/WhiteScreenMain.js\n\n\n\n// Create a client-only version of the component\nconst WhiteScreenMain = ({ onStatusUpdate, triggerCameraAccess, onButtonClick, canvasRef = null, toggleTopBar })=>{\n    // Use provided canvasRef or create a new one\n    const internalCanvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const activeCanvasRef = canvasRef || internalCanvasRef;\n    // Current dot state\n    const [currentDot, setCurrentDot] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isCapturing, setIsCapturing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [countdownValue, setCountdownValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [remainingCaptures, setRemainingCaptures] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [processStatus, setProcessStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    // Track capture session\n    const [captureCounter, setCaptureCounter] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [captureFolder, setCaptureFolder] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    // Configuration state\n    const [randomTimes, setRandomTimes] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [delaySeconds, setDelaySeconds] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(3);\n    const [calibrationPoints, setCalibrationPoints] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentCalibrationIndex, setCurrentCalibrationIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Debug state to make visibility easier to track\n    const [canvasVisible, setCanvasVisible] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [forceShowCountdown, setForceShowCountdown] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Create a capture folder on first render\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            if (!captureFolder) {\n                const timestamp = new Date().toISOString().replace(/[:\\.]/g, '-');\n                setCaptureFolder(`session_${timestamp}`);\n                console.log(`Created capture folder: session_${timestamp}`);\n            }\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        captureFolder\n    ]);\n    // Set up canvas when component mounts\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            // Skip if this runs during SSR\n            if (true) return;\n            const canvas = activeCanvasRef.current;\n            if (!canvas) {\n                console.error(\"Canvas ref is null in setup effect\");\n                return;\n            }\n            console.log(\"Canvas setup effect running\", {\n                hasCanvas: !!canvas,\n                canvasHeight: canvas.height,\n                canvasWidth: canvas.width\n            });\n            // Function to update canvas dimensions\n            const updateDimensions = {\n                \"WhiteScreenMain.useEffect.updateDimensions\": ()=>{\n                    const parent = canvas.parentElement;\n                    if (!parent) {\n                        console.error(\"Canvas parent is null\");\n                        return;\n                    }\n                    // Get the parent container dimensions\n                    const parentWidth = parent.clientWidth;\n                    const parentHeight = parent.clientHeight;\n                    console.log(\"Resizing canvas to:\", {\n                        parentWidth,\n                        parentHeight\n                    });\n                    canvas.width = parentWidth;\n                    canvas.height = parentHeight;\n                    // Clear the canvas and set background\n                    const ctx = canvas.getContext('2d');\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(0, 0, canvas.width, canvas.height);\n                    // Redraw current dot if exists\n                    if (currentDot) {\n                        console.log(\"Redrawing dot after resize:\", currentDot);\n                        drawDot(currentDot.x, currentDot.y, 'red', 8);\n                    }\n                    setCanvasVisible(true);\n                }\n            }[\"WhiteScreenMain.useEffect.updateDimensions\"];\n            // Initial sizing\n            updateDimensions();\n            // Listen for window resize\n            window.addEventListener('resize', updateDimensions);\n            // Clean up\n            return ({\n                \"WhiteScreenMain.useEffect\": ()=>{\n                    window.removeEventListener('resize', updateDimensions);\n                }\n            })[\"WhiteScreenMain.useEffect\"];\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        activeCanvasRef,\n        currentDot\n    ]);\n    // Generate a random position on the canvas\n    const getRandomPosition = ()=>{\n        const canvas = activeCanvasRef.current;\n        if (!canvas) {\n            console.error(\"Canvas ref is null in getRandomPosition\");\n            return {\n                x: 100,\n                y: 100\n            }; // Fallback position\n        }\n        const width = canvas.width || 400; // Fallback if width is 0\n        const height = canvas.height || 300; // Fallback if height is 0\n        console.log(\"Canvas dimensions for random position:\", {\n            width,\n            height\n        });\n        // Ensure we're not too close to the edges\n        const padding = 40; // Increased padding\n        return {\n            x: Math.floor(Math.random() * (width - 2 * padding)) + padding,\n            y: Math.floor(Math.random() * (height - 2 * padding)) + padding\n        };\n    };\n    // Draw a dot on the canvas\n    const drawDot = (x, y, color = 'red', radius = 12)=>{\n        console.log(\"Drawing dot at:\", {\n            x,\n            y,\n            color,\n            radius\n        });\n        const canvas = activeCanvasRef.current;\n        if (!canvas) {\n            console.error(\"Canvas ref is null in drawDot\");\n            return null;\n        }\n        const ctx = canvas.getContext('2d');\n        // Clear canvas\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        // Draw dot with glow effect\n        ctx.beginPath();\n        ctx.arc(x, y, radius, 0, Math.PI * 2);\n        ctx.fillStyle = color;\n        ctx.fill();\n        // Add glow effect\n        ctx.beginPath();\n        ctx.arc(x, y, radius + 5, 0, Math.PI * 2); // Increased glow\n        ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)'; // More visible glow\n        ctx.lineWidth = 3; // Thicker line\n        ctx.stroke();\n        // Store current dot position - using callback form to ensure it updates\n        setCurrentDot((prev)=>{\n            console.log(\"Updating currentDot state from:\", prev, \"to:\", {\n                x,\n                y\n            });\n            return {\n                x,\n                y\n            };\n        });\n        return {\n            x,\n            y\n        };\n    };\n    // Debugging log for currentDot state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            console.log(\"currentDot state changed:\", currentDot);\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        currentDot\n    ]);\n    // Debugging log for countdownValue state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            console.log(\"countdownValue state changed:\", countdownValue);\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        countdownValue\n    ]);\n    // Clear the canvas\n    const clearCanvas = ()=>{\n        console.log(\"Clearing canvas\");\n        const canvas = activeCanvasRef.current;\n        if (!canvas) {\n            console.error(\"Canvas ref is null in clearCanvas\");\n            return;\n        }\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        setCurrentDot(null);\n        setCountdownValue(null);\n        setForceShowCountdown(false);\n        setProcessStatus('Canvas cleared');\n        // Clear the message after a delay\n        setTimeout(()=>{\n            setProcessStatus('');\n        }, 1500);\n    };\n    // Start countdown timer\n    const startCountdown = (count, onComplete)=>{\n        console.log(\"Starting countdown from:\", count);\n        // Set countdown value in state\n        setCountdownValue(count);\n        setForceShowCountdown(true);\n        setIsCapturing(true);\n        // Update status for parent component\n        if (onStatusUpdate) {\n            onStatusUpdate({\n                countdownValue: count,\n                processStatus: `Countdown: ${count}`,\n                isCapturing: true\n            });\n        }\n        const timer = setTimeout(()=>{\n            if (count > 1) {\n                startCountdown(count - 1, onComplete);\n            } else {\n                // Final countdown step\n                console.log(\"Countdown finished, clearing countdown display\");\n                setCountdownValue(null);\n                setForceShowCountdown(false);\n                // Update status for parent component\n                if (onStatusUpdate) {\n                    onStatusUpdate({\n                        countdownValue: null,\n                        processStatus: 'Capturing...',\n                        isCapturing: true\n                    });\n                }\n                // Execute completion callback immediately\n                if (onComplete) {\n                    console.log(\"Executing completion callback\");\n                    onComplete();\n                }\n            }\n        }, 800);\n        return ()=>clearTimeout(timer);\n    };\n    // Save an image to the server\n    const saveImageToServer = async (imageData, filename, type)=>{\n        try {\n            console.log(`Attempting to save ${type} image: ${filename}`);\n            const response = await fetch('/api/save-capture', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    imageData,\n                    filename,\n                    type,\n                    folder: captureFolder\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`Server responded with ${response.status}`);\n            }\n            const result = await response.json();\n            console.log(`Saved ${type} image:`, result);\n            return result;\n        } catch (error) {\n            console.error(`Error saving ${type} image:`, error);\n            throw error;\n        }\n    };\n    // Capture images function\n    const captureImage = async ()=>{\n        console.log(\"Capturing images...\");\n        setIsCapturing(true);\n        try {\n            // Enable camera if function provided\n            if (triggerCameraAccess) {\n                console.log(\"Triggering camera access\");\n                triggerCameraAccess(true); // Force enable camera\n            }\n            // Wait briefly for camera to initialize\n            await new Promise((resolve)=>setTimeout(resolve, 500));\n            // Generate filenames with counter\n            const screenFilename = `screen_${String(captureCounter).padStart(3, '0')}.jpg`;\n            const webcamFilename = `webcam_${String(captureCounter).padStart(3, '0')}.jpg`;\n            // Capture screen image (canvas with dot)\n            const canvas = activeCanvasRef.current;\n            if (canvas) {\n                console.log(\"Capturing screen from canvas\");\n                const screenImage = canvas.toDataURL('image/png');\n                await saveImageToServer(screenImage, screenFilename, 'screen');\n                console.log(`Saved screen image: ${screenFilename}`);\n            } else {\n                console.error(\"Cannot capture screen - canvas ref is null\");\n            }\n            // Capture webcam image if available\n            if (window.videoElement) {\n                console.log(\"Capturing from webcam\");\n                const tempCanvas = document.createElement('canvas');\n                const ctx = tempCanvas.getContext('2d');\n                tempCanvas.width = window.videoElement.videoWidth;\n                tempCanvas.height = window.videoElement.videoHeight;\n                ctx.drawImage(window.videoElement, 0, 0, tempCanvas.width, tempCanvas.height);\n                const webcamImage = tempCanvas.toDataURL('image/png');\n                await saveImageToServer(webcamImage, webcamFilename, 'webcam');\n                console.log(`Saved webcam image: ${webcamFilename}`);\n            } else {\n                console.log(\"Webcam element not available\");\n            }\n            // Increment the counter for next capture\n            setCaptureCounter((prev)=>prev + 1);\n            // Update status\n            setIsCapturing(false);\n            setProcessStatus(`Captured coordinates: x=${currentDot?.x}, y=${currentDot?.y}`);\n            // Update parent component\n            if (onStatusUpdate) {\n                onStatusUpdate(`Images saved: ${screenFilename} and ${webcamFilename}`);\n            }\n            // Show TopBar again after capture\n            setTimeout(()=>{\n                console.log(\"Showing TopBar after capture\");\n                if (typeof toggleTopBar === 'function') {\n                    toggleTopBar(true);\n                } else if (false) {}\n            }, 1500);\n        } catch (error) {\n            console.error('Error during capture:', error);\n            setIsCapturing(false);\n            setProcessStatus('Error capturing images: ' + error.message);\n        }\n        // Clear status after a delay\n        setTimeout(()=>{\n            setProcessStatus('');\n        }, 3000);\n    };\n    // Random Dot action\n    const handleRandomDot = ()=>{\n        // Hide the TopBar before showing dot\n        if (typeof toggleTopBar === 'function') {\n            toggleTopBar(false);\n        } else if (false) {}\n        setIsCapturing(true);\n        setProcessStatus('Generating random dot...');\n        // Give the component time to update\n        setTimeout(()=>{\n            const canvas = activeCanvasRef.current;\n            if (canvas) {\n                // Make sure canvas dimensions are properly set\n                const parent = canvas.parentElement;\n                if (parent) {\n                    canvas.width = parent.clientWidth;\n                    canvas.height = parent.clientHeight;\n                }\n                // Clear any previous content\n                const ctx = canvas.getContext('2d');\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                ctx.fillStyle = 'white';\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n                // Generate random position\n                const position = getRandomPosition();\n                // Draw the dot with a larger radius for visibility\n                ctx.beginPath();\n                ctx.arc(position.x, position.y, 12, 0, Math.PI * 2);\n                ctx.fillStyle = 'red';\n                ctx.fill();\n                // Add glow effect to the dot\n                ctx.beginPath();\n                ctx.arc(position.x, position.y, 15, 0, Math.PI * 2);\n                ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)';\n                ctx.lineWidth = 3;\n                ctx.stroke();\n                // Store current dot position directly\n                setCurrentDot(position);\n                // Get the canvas position relative to the viewport\n                const canvasRect = canvas.getBoundingClientRect();\n                // IMPORTANT: Create the countdown element directly above the dot\n                const countdownElement = document.createElement('div');\n                countdownElement.className = 'forced-countdown';\n                // Position it above the dot (calculate absolute position considering the canvas position)\n                const absoluteX = canvasRect.left + position.x;\n                const absoluteY = canvasRect.top + position.y;\n                countdownElement.style.cssText = `\n          position: fixed;\n          left: ${absoluteX}px;\n          top: ${absoluteY - 60}px;\n          transform: translateX(-50%);\n          color: red;\n          font-size: 36px;\n          font-weight: bold;\n          text-shadow: 0 0 10px white, 0 0 20px white;\n          z-index: 9999;\n          background-color: rgba(255, 255, 255, 0.8);\n          border: 2px solid red;\n          border-radius: 50%;\n          width: 50px;\n          height: 50px;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n        `;\n                document.body.appendChild(countdownElement);\n                // Manual countdown implementation\n                let count = 3;\n                countdownElement.textContent = count;\n                const countdownInterval = setInterval(()=>{\n                    count--;\n                    if (count <= 0) {\n                        clearInterval(countdownInterval);\n                        countdownElement.remove();\n                        captureImage(); // Proceed with capture\n                    } else {\n                        countdownElement.textContent = count;\n                    }\n                }, 800);\n            }\n        }, 200);\n    };\n    // Multiple random dots sequence\n    const handleSetRandom = ()=>{\n        if (isCapturing) return;\n        // Parse input values (use defaults if invalid)\n        const times = parseInt(randomTimes) || 1;\n        const delay = parseInt(delaySeconds) || 3;\n        if (times <= 0 || delay <= 0) {\n            setProcessStatus('Please use positive values for times and delay');\n            return;\n        }\n        setIsCapturing(true);\n        setRemainingCaptures(times);\n        setProcessStatus(`Starting ${times} random captures...`);\n        // Start sequence\n        scheduleRandomCaptures(times, times, delay);\n    };\n    // Schedule sequence of random captures\n    const scheduleRandomCaptures = (remaining, total, delay)=>{\n        if (remaining <= 0) {\n            setIsCapturing(false);\n            setRemainingCaptures(0);\n            setProcessStatus('Random capture sequence completed');\n            // Clear status after a delay\n            setTimeout(()=>{\n                setProcessStatus('');\n            }, 2000);\n            return;\n        }\n        setRemainingCaptures(remaining);\n        setProcessStatus(`Capture ${total - remaining + 1} of ${total}`);\n        // Generate random position and draw\n        const position = getRandomPosition();\n        drawDot(position.x, position.y);\n        // Start countdown and capture\n        startCountdown(3, ()=>{\n            captureImage();\n            // Schedule next capture\n            setTimeout(()=>{\n                scheduleRandomCaptures(remaining - 1, total, delay);\n            }, delay * 1000);\n        });\n    };\n    // Generate calibration points\n    const generateCalibrationPoints = ()=>{\n        const canvas = activeCanvasRef.current;\n        if (!canvas) return [];\n        const width = canvas.width;\n        const height = canvas.height;\n        // Helper function for rounding\n        const conditionalRound = (dimension, percentage)=>{\n            return Math.round(dimension * percentage);\n        };\n        const firstFramePercentage = 0.12;\n        const secondFramePercentage = 0.26;\n        // Calculate points (outer and inner frame)\n        const xLeftFirst = conditionalRound(width, firstFramePercentage);\n        const xRightFirst = width - conditionalRound(width, firstFramePercentage);\n        const yTopFirst = conditionalRound(height, firstFramePercentage);\n        const yBottomFirst = height - conditionalRound(height, firstFramePercentage);\n        const xLeftSecond = conditionalRound(width, secondFramePercentage);\n        const xRightSecond = width - conditionalRound(width, secondFramePercentage);\n        const yTopSecond = conditionalRound(height, secondFramePercentage);\n        const yBottomSecond = height - conditionalRound(height, secondFramePercentage);\n        // Return array of points in sequence\n        return [\n            // First frame - outer points\n            {\n                x: xLeftFirst,\n                y: yTopFirst\n            },\n            {\n                x: Math.floor(width / 2),\n                y: yTopFirst\n            },\n            {\n                x: xRightFirst,\n                y: yTopFirst\n            },\n            {\n                x: xLeftFirst,\n                y: Math.floor(height / 2)\n            },\n            {\n                x: xRightFirst,\n                y: Math.floor(height / 2)\n            },\n            {\n                x: xLeftFirst,\n                y: yBottomFirst\n            },\n            {\n                x: Math.floor(width / 2),\n                y: yBottomFirst\n            },\n            {\n                x: xRightFirst,\n                y: yBottomFirst\n            },\n            // Second frame - inner points\n            {\n                x: xLeftSecond,\n                y: yTopSecond\n            },\n            {\n                x: Math.floor(width / 2),\n                y: yTopSecond\n            },\n            {\n                x: xRightSecond,\n                y: yTopSecond\n            },\n            {\n                x: xLeftSecond,\n                y: Math.floor(height / 2)\n            },\n            {\n                x: xRightSecond,\n                y: Math.floor(height / 2)\n            },\n            {\n                x: xLeftSecond,\n                y: yBottomSecond\n            },\n            {\n                x: Math.floor(width / 2),\n                y: yBottomSecond\n            },\n            {\n                x: xRightSecond,\n                y: yBottomSecond\n            }\n        ];\n    };\n    // Handle calibration sequence\n    const handleSetCalibrate = ()=>{\n        if (isCapturing) return;\n        // Generate calibration points\n        const points = generateCalibrationPoints();\n        if (points.length === 0) {\n            setProcessStatus('Failed to generate calibration points');\n            return;\n        }\n        setCalibrationPoints(points);\n        setCurrentCalibrationIndex(0);\n        setIsCapturing(true);\n        setRemainingCaptures(points.length);\n        setProcessStatus(`Calibration 1/${points.length}`);\n        // Draw first point and start\n        const firstPoint = points[0];\n        drawDot(firstPoint.x, firstPoint.y);\n        // Start countdown for first point\n        startCountdown(3, ()=>{\n            captureImage();\n            setTimeout(()=>moveToNextCalibrationPoint(), 1000);\n        });\n    };\n    // Move to next calibration point\n    const moveToNextCalibrationPoint = ()=>{\n        const nextIndex = currentCalibrationIndex + 1;\n        // Check if we're done\n        if (nextIndex >= calibrationPoints.length) {\n            setIsCapturing(false);\n            setRemainingCaptures(0);\n            setProcessStatus('Calibration completed');\n            // Clear status after a delay\n            setTimeout(()=>{\n                setProcessStatus('');\n            }, 2000);\n            return;\n        }\n        // Update state and progress\n        setCurrentCalibrationIndex(nextIndex);\n        setRemainingCaptures(calibrationPoints.length - nextIndex);\n        setProcessStatus(`Calibration ${nextIndex + 1}/${calibrationPoints.length}`);\n        // Draw next point\n        const nextPoint = calibrationPoints[nextIndex];\n        drawDot(nextPoint.x, nextPoint.y);\n        // Start countdown for this point\n        startCountdown(3, ()=>{\n            captureImage();\n            setTimeout(()=>moveToNextCalibrationPoint(), 1000);\n        });\n    };\n    // Map button clicks to appropriate handlers\n    const handleScreenAction = (actionType)=>{\n        console.log(`Screen action received: ${actionType}`);\n        switch(actionType){\n            case 'randomDot':\n                handleRandomDot();\n                break;\n            case 'setRandom':\n                handleSetRandom();\n                break;\n            case 'calibrate':\n                handleSetCalibrate();\n                break;\n            case 'clearAll':\n                clearCanvas();\n                break;\n            default:\n                // Forward to parent if not handled here\n                if (onButtonClick) {\n                    onButtonClick(actionType);\n                }\n        }\n    };\n    // Pass actions up to parent component\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            // Skip during SSR\n            if (true) return;\n            console.log(\"Registering action handlers with parent\");\n            if (onButtonClick) {\n                // Create action handlers\n                const actionHandlers = {\n                    randomDot: handleRandomDot,\n                    setRandom: handleSetRandom,\n                    calibrate: handleSetCalibrate,\n                    clearAll: clearCanvas\n                };\n                // Store in parent component context\n                onButtonClick('registerActions', actionHandlers);\n            }\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        onButtonClick\n    ]);\n    // Update parent with status changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            if (onStatusUpdate && processStatus) {\n                onStatusUpdate(processStatus);\n            }\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        processStatus,\n        onStatusUpdate\n    ]);\n    // Log when component mounts to verify it's being rendered\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            console.log(\"WhiteScreenMain component mounted\");\n            console.log(\"Props:\", {\n                hasStatusUpdate: !!onStatusUpdate,\n                hasCameraAccess: !!triggerCameraAccess,\n                hasButtonClick: !!onButtonClick,\n                hasCanvasRef: !!canvasRef,\n                hasToggleTopBar: !!toggleTopBar\n            });\n            return ({\n                \"WhiteScreenMain.useEffect\": ()=>{\n                    console.log(\"WhiteScreenMain component unmounting\");\n                }\n            })[\"WhiteScreenMain.useEffect\"];\n        }\n    }[\"WhiteScreenMain.useEffect\"], []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"white-screen-container\",\n        style: {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            zIndex: 50,\n            backgroundColor: 'rgba(255, 255, 255, 0.5)' // Slight transparency to see if it's rendered\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"white-screen-canvas-container\",\n                style: {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%',\n                    backgroundColor: 'white',\n                    overflow: 'hidden',\n                    border: '1px solid #ccc',\n                    zIndex: 51\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n                        ref: canvasRef ? canvasRef : internalCanvasRef,\n                        className: \"white-screen-canvas\",\n                        style: {\n                            width: '100%',\n                            height: '100%',\n                            display: 'block'\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                        lineNumber: 721,\n                        columnNumber: 9\n                    }, undefined),\n                    (countdownValue !== null || forceShowCountdown) && currentDot && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"dot-countdown\",\n                        style: {\n                            position: 'absolute',\n                            left: `${currentDot.x - 30}px`,\n                            top: `${currentDot.y - 70}px`,\n                            color: 'red',\n                            fontSize: '48px',\n                            fontWeight: 'bold',\n                            textShadow: '0 0 10px white, 0 0 20px white',\n                            zIndex: 999,\n                            backgroundColor: 'rgba(255, 255, 255, 0.8)',\n                            padding: '10px 20px',\n                            borderRadius: '50%',\n                            boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n                            width: '60px',\n                            height: '60px',\n                            display: 'flex',\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                            border: '2px solid red' // Border to make it stand out\n                        },\n                        children: countdownValue || 3\n                    }, void 0, false, {\n                        fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                        lineNumber: 733,\n                        columnNumber: 11\n                    }, undefined),\n                    (countdownValue !== null || forceShowCountdown) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"center-countdown-backup\",\n                        style: {\n                            position: 'fixed',\n                            top: '50%',\n                            left: '50%',\n                            transform: 'translate(-50%, -50%)',\n                            color: 'white',\n                            fontSize: '120px',\n                            fontWeight: 'bold',\n                            textShadow: '0 0 20px black',\n                            zIndex: 1000,\n                            backgroundColor: 'rgba(255, 0, 0, 0.7)',\n                            width: '200px',\n                            height: '200px',\n                            borderRadius: '50%',\n                            display: 'flex',\n                            justifyContent: 'center',\n                            alignItems: 'center',\n                            boxShadow: '0 0 30px rgba(0, 0, 0, 0.5)'\n                        },\n                        children: countdownValue || 3\n                    }, void 0, false, {\n                        fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                        lineNumber: 762,\n                        columnNumber: 11\n                    }, undefined),\n                    currentDot && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"dot-indicator\",\n                        style: {\n                            position: 'absolute',\n                            top: '10px',\n                            right: '10px',\n                            backgroundColor: 'rgba(0, 255, 0, 0.7)',\n                            color: 'black',\n                            padding: '5px 10px',\n                            borderRadius: '4px',\n                            fontSize: '12px',\n                            zIndex: 52\n                        },\n                        children: [\n                            \"Dot at x:\",\n                            currentDot.x,\n                            \", y:\",\n                            currentDot.y\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                        lineNumber: 790,\n                        columnNumber: 11\n                    }, undefined),\n                    (processStatus || remainingCaptures > 0) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"status-overlay\",\n                        style: {\n                            position: 'absolute',\n                            bottom: '10px',\n                            left: '10px',\n                            backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                            color: 'white',\n                            padding: '10px 15px',\n                            borderRadius: '4px',\n                            fontSize: '16px',\n                            fontWeight: 'bold',\n                            boxShadow: '0 4px 8px rgba(0,0,0,0.3)',\n                            zIndex: 53\n                        },\n                        children: [\n                            processStatus && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: processStatus\n                            }, void 0, false, {\n                                fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                                lineNumber: 826,\n                                columnNumber: 31\n                            }, undefined),\n                            remainingCaptures > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                style: {\n                                    color: '#ffcc00'\n                                },\n                                children: [\n                                    \"Remaining: \",\n                                    remainingCaptures\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                                lineNumber: 828,\n                                columnNumber: 15\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                        lineNumber: 810,\n                        columnNumber: 11\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"canvas-indicator\",\n                        style: {\n                            position: 'absolute',\n                            top: '10px',\n                            left: '10px',\n                            backgroundColor: canvasVisible ? 'rgba(0, 255, 0, 0.7)' : 'rgba(255, 0, 0, 0.7)',\n                            color: 'black',\n                            padding: '5px 10px',\n                            borderRadius: '4px',\n                            fontSize: '12px',\n                            zIndex: 52\n                        },\n                        children: [\n                            \"Canvas: \",\n                            canvasVisible ? 'Visible' : 'Hidden'\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                        lineNumber: 836,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                lineNumber: 706,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                onClick: handleRandomDot,\n                style: {\n                    position: 'absolute',\n                    bottom: '70px',\n                    right: '20px',\n                    padding: '10px 20px',\n                    backgroundColor: 'blue',\n                    color: 'white',\n                    fontWeight: 'bold',\n                    borderRadius: '8px',\n                    border: 'none',\n                    boxShadow: '0 4px 10px rgba(0,0,0,0.3)',\n                    cursor: 'pointer',\n                    zIndex: 1000\n                },\n                children: \"TEST DOT NOW\"\n            }, void 0, false, {\n                fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                lineNumber: 855,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n        lineNumber: 696,\n        columnNumber: 5\n    }, undefined);\n};\n// Export a dynamic version with SSR disabled to avoid useLayoutEffect warnings\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (next_dynamic__WEBPACK_IMPORTED_MODULE_2___default()(()=>Promise.resolve(WhiteScreenMain), {\n    ssr: false\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL3BhZ2VzL2NvbGxlY3RlZC1kYXRhc2V0L2NvbXBvbmVudHMtZ3VpL1doaXRlU2NyZWVuTWFpbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsb0NBQW9DOztBQUN1QjtBQUN4QjtBQUVuQyxnREFBZ0Q7QUFDaEQsTUFBTUssa0JBQWtCLENBQUMsRUFDdkJDLGNBQWMsRUFDZEMsbUJBQW1CLEVBQ25CQyxhQUFhLEVBQ2JDLFlBQVksSUFBSSxFQUNoQkMsWUFBWSxFQUNiO0lBQ0MsNkNBQTZDO0lBQzdDLE1BQU1DLG9CQUFvQlIsNkNBQU1BLENBQUM7SUFDakMsTUFBTVMsa0JBQWtCSCxhQUFhRTtJQUVyQyxvQkFBb0I7SUFDcEIsTUFBTSxDQUFDRSxZQUFZQyxjQUFjLEdBQUdiLCtDQUFRQSxDQUFDO0lBQzdDLE1BQU0sQ0FBQ2MsYUFBYUMsZUFBZSxHQUFHZiwrQ0FBUUEsQ0FBQztJQUMvQyxNQUFNLENBQUNnQixnQkFBZ0JDLGtCQUFrQixHQUFHakIsK0NBQVFBLENBQUM7SUFDckQsTUFBTSxDQUFDa0IsbUJBQW1CQyxxQkFBcUIsR0FBR25CLCtDQUFRQSxDQUFDO0lBQzNELE1BQU0sQ0FBQ29CLGVBQWVDLGlCQUFpQixHQUFHckIsK0NBQVFBLENBQUM7SUFFbkQsd0JBQXdCO0lBQ3hCLE1BQU0sQ0FBQ3NCLGdCQUFnQkMsa0JBQWtCLEdBQUd2QiwrQ0FBUUEsQ0FBQztJQUNyRCxNQUFNLENBQUN3QixlQUFlQyxpQkFBaUIsR0FBR3pCLCtDQUFRQSxDQUFDO0lBRW5ELHNCQUFzQjtJQUN0QixNQUFNLENBQUMwQixhQUFhQyxlQUFlLEdBQUczQiwrQ0FBUUEsQ0FBQztJQUMvQyxNQUFNLENBQUM0QixjQUFjQyxnQkFBZ0IsR0FBRzdCLCtDQUFRQSxDQUFDO0lBQ2pELE1BQU0sQ0FBQzhCLG1CQUFtQkMscUJBQXFCLEdBQUcvQiwrQ0FBUUEsQ0FBQyxFQUFFO0lBQzdELE1BQU0sQ0FBQ2dDLHlCQUF5QkMsMkJBQTJCLEdB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SyxPQUFPOzRCQUNMVCxVQUFVOzRCQUNWMEUsUUFBUTs0QkFDUnBFLE1BQU07NEJBQ05zRCxpQkFBaUI7NEJBQ2pCbEgsT0FBTzs0QkFDUEosU0FBUzs0QkFDVDhILGNBQWM7NEJBQ2RILFVBQVU7NEJBQ1ZDLFlBQVk7NEJBQ1pHLFdBQVc7NEJBQ1hWLFFBQVE7d0JBQ1Y7OzRCQUVDdkssK0JBQWlCLDhEQUFDc0s7MENBQUt0Szs7Ozs7OzRCQUN2QkYsb0JBQW9CLG1CQUNuQiw4REFBQ3dLO2dDQUFJakQsT0FBTztvQ0FBRS9ELE9BQU87Z0NBQVU7O29DQUFHO29DQUNwQnhEOzs7Ozs7Ozs7Ozs7O2tDQU9wQiw4REFBQ3dLO3dCQUNDdEQsV0FBVTt3QkFDVkssT0FBTzs0QkFDTFQsVUFBVTs0QkFDVlEsS0FBSzs0QkFDTEYsTUFBTTs0QkFDTnNELGlCQUFpQjFKLGdCQUFnQix5QkFBeUI7NEJBQzFEd0MsT0FBTzs0QkFDUEosU0FBUzs0QkFDVDhILGNBQWM7NEJBQ2RILFVBQVU7NEJBQ1ZOLFFBQVE7d0JBQ1Y7OzRCQUNEOzRCQUNVekosZ0JBQWdCLFlBQVk7Ozs7Ozs7Ozs7Ozs7MEJBS3pDLDhEQUFDeUs7Z0JBQ0NDLFNBQVM3RTtnQkFDVFUsT0FBTztvQkFDTFQsVUFBVTtvQkFDVjBFLFFBQVE7b0JBQ1JELE9BQU87b0JBQ1BuSSxTQUFTO29CQUNUc0gsaUJBQWlCO29CQUNqQmxILE9BQU87b0JBQ1B3SCxZQUFZO29CQUNaRSxjQUFjO29CQUNkTixRQUFRO29CQUNSTyxXQUFXO29CQUNYUSxRQUFRO29CQUNSbEIsUUFBUTtnQkFDVjswQkFDRDs7Ozs7Ozs7Ozs7O0FBS1A7QUFFQSwrRUFBK0U7QUFDL0UsaUVBQWV4TCxtREFBT0EsQ0FBQyxJQUFNMkcsUUFBUUMsT0FBTyxDQUFDM0csa0JBQWtCO0lBQUUwTSxLQUFLO0FBQU0sRUFBRSxFQUFDIiwic291cmNlcyI6WyIvVXNlcnMvcG9yY2hwb3J0YWwyL0Rlc2t0b3Av8J+UpWV2ZXJ5dGhpbmcvTWFpbl9XZWJfRXllVHJhY2tpbmcvbWFpbi13ZWIvZnJvbnRlbmQvcGFnZXMvY29sbGVjdGVkLWRhdGFzZXQvY29tcG9uZW50cy1ndWkvV2hpdGVTY3JlZW5NYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGNvbXBvbmVudHMtZ3VpL1doaXRlU2NyZWVuTWFpbi5qc1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBkeW5hbWljIGZyb20gJ25leHQvZHluYW1pYyc7XG5cbi8vIENyZWF0ZSBhIGNsaWVudC1vbmx5IHZlcnNpb24gb2YgdGhlIGNvbXBvbmVudFxuY29uc3QgV2hpdGVTY3JlZW5NYWluID0gKHsgXG4gIG9uU3RhdHVzVXBkYXRlLCBcbiAgdHJpZ2dlckNhbWVyYUFjY2VzcyxcbiAgb25CdXR0b25DbGljayxcbiAgY2FudmFzUmVmID0gbnVsbCxcbiAgdG9nZ2xlVG9wQmFyXG59KSA9PiB7XG4gIC8vIFVzZSBwcm92aWRlZCBjYW52YXNSZWYgb3IgY3JlYXRlIGEgbmV3IG9uZVxuICBjb25zdCBpbnRlcm5hbENhbnZhc1JlZiA9IHVzZVJlZihudWxsKTtcbiAgY29uc3QgYWN0aXZlQ2FudmFzUmVmID0gY2FudmFzUmVmIHx8IGludGVybmFsQ2FudmFzUmVmO1xuICBcbiAgLy8gQ3VycmVudCBkb3Qgc3RhdGVcbiAgY29uc3QgW2N1cnJlbnREb3QsIHNldEN1cnJlbnREb3RdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFtpc0NhcHR1cmluZywgc2V0SXNDYXB0dXJpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbY291bnRkb3duVmFsdWUsIHNldENvdW50ZG93blZhbHVlXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbcmVtYWluaW5nQ2FwdHVyZXMsIHNldFJlbWFpbmluZ0NhcHR1cmVzXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbcHJvY2Vzc1N0YXR1cywgc2V0UHJvY2Vzc1N0YXR1c10gPSB1c2VTdGF0ZSgnJyk7XG4gIFxuICAvLyBUcmFjayBjYXB0dXJlIHNlc3Npb25cbiAgY29uc3QgW2NhcHR1cmVDb3VudGVyLCBzZXRDYXB0dXJlQ291bnRlcl0gPSB1c2VTdGF0ZSgxKTtcbiAgY29uc3QgW2NhcHR1cmVGb2xkZXIsIHNldENhcHR1cmVGb2xkZXJdID0gdXNlU3RhdGUoJycpO1xuICBcbiAgLy8gQ29uZmlndXJhdGlvbiBzdGF0ZVxuICBjb25zdCBbcmFuZG9tVGltZXMsIHNldFJhbmRvbVRpbWVzXSA9IHVzZVN0YXRlKDEpO1xuICBjb25zdCBbZGVsYXlTZWNvbmRzLCBzZXREZWxheVNlY29uZHNdID0gdXNlU3RhdGUoMyk7XG4gIGNvbnN0IFtjYWxpYnJhdGlvblBvaW50cywgc2V0Q2FsaWJyYXRpb25Qb2ludHNdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBbY3VycmVudENhbGlicmF0aW9uSW5kZXgsIHNldEN1cnJlbnRDYWxpYnJhdGlvbkluZGV4XSA9IHVzZVN0YXRlKDApO1xuICBcbiAgLy8gRGVidWcgc3RhdGUgdG8gbWFrZSB2aXNpYmlsaXR5IGVhc2llciB0byB0cmFja1xuICBjb25zdCBbY2FudmFzVmlzaWJsZSwgc2V0Q2FudmFzVmlzaWJsZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtmb3JjZVNob3dDb3VudGRvd24sIHNldEZvcmNlU2hvd0NvdW50ZG93bl0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIFxuICAvLyBDcmVhdGUgYSBjYXB0dXJlIGZvbGRlciBvbiBmaXJzdCByZW5kZXJcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWNhcHR1cmVGb2xkZXIpIHtcbiAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5yZXBsYWNlKC9bOlxcLl0vZywgJy0nKTtcbiAgICAgIHNldENhcHR1cmVGb2xkZXIoYHNlc3Npb25fJHt0aW1lc3RhbXB9YCk7XG4gICAgICBjb25zb2xlLmxvZyhgQ3JlYXRlZCBjYXB0dXJlIGZvbGRlcjogc2Vzc2lvbl8ke3RpbWVzdGFtcH1gKTtcbiAgICB9XG4gIH0sIFtjYXB0dXJlRm9sZGVyXSk7XG4gIFxuICAvLyBTZXQgdXAgY2FudmFzIHdoZW4gY29tcG9uZW50IG1vdW50c1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFNraXAgaWYgdGhpcyBydW5zIGR1cmluZyBTU1JcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICBcbiAgICBjb25zdCBjYW52YXMgPSBhY3RpdmVDYW52YXNSZWYuY3VycmVudDtcbiAgICBpZiAoIWNhbnZhcykge1xuICAgICAgY29uc29sZS5lcnJvcihcIkNhbnZhcyByZWYgaXMgbnVsbCBpbiBzZXR1cCBlZmZlY3RcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGNvbnNvbGUubG9nKFwiQ2FudmFzIHNldHVwIGVmZmVjdCBydW5uaW5nXCIsIHsgXG4gICAgICBoYXNDYW52YXM6ICEhY2FudmFzLCBcbiAgICAgIGNhbnZhc0hlaWdodDogY2FudmFzLmhlaWdodCxcbiAgICAgIGNhbnZhc1dpZHRoOiBjYW52YXMud2lkdGhcbiAgICB9KTtcbiAgICBcbiAgICAvLyBGdW5jdGlvbiB0byB1cGRhdGUgY2FudmFzIGRpbWVuc2lvbnNcbiAgICBjb25zdCB1cGRhdGVEaW1lbnNpb25zID0gKCkgPT4ge1xuICAgICAgY29uc3QgcGFyZW50ID0gY2FudmFzLnBhcmVudEVsZW1lbnQ7XG4gICAgICBpZiAoIXBhcmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ2FudmFzIHBhcmVudCBpcyBudWxsXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEdldCB0aGUgcGFyZW50IGNvbnRhaW5lciBkaW1lbnNpb25zXG4gICAgICBjb25zdCBwYXJlbnRXaWR0aCA9IHBhcmVudC5jbGllbnRXaWR0aDtcbiAgICAgIGNvbnN0IHBhcmVudEhlaWdodCA9IHBhcmVudC5jbGllbnRIZWlnaHQ7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKFwiUmVzaXppbmcgY2FudmFzIHRvOlwiLCB7IHBhcmVudFdpZHRoLCBwYXJlbnRIZWlnaHQgfSk7XG4gICAgICBcbiAgICAgIGNhbnZhcy53aWR0aCA9IHBhcmVudFdpZHRoO1xuICAgICAgY2FudmFzLmhlaWdodCA9IHBhcmVudEhlaWdodDtcbiAgICAgIFxuICAgICAgLy8gQ2xlYXIgdGhlIGNhbnZhcyBhbmQgc2V0IGJhY2tncm91bmRcbiAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgIFxuICAgICAgLy8gUmVkcmF3IGN1cnJlbnQgZG90IGlmIGV4aXN0c1xuICAgICAgaWYgKGN1cnJlbnREb3QpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJSZWRyYXdpbmcgZG90IGFmdGVyIHJlc2l6ZTpcIiwgY3VycmVudERvdCk7XG4gICAgICAgIGRyYXdEb3QoY3VycmVudERvdC54LCBjdXJyZW50RG90LnksICdyZWQnLCA4KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgc2V0Q2FudmFzVmlzaWJsZSh0cnVlKTtcbiAgICB9O1xuICAgIFxuICAgIC8vIEluaXRpYWwgc2l6aW5nXG4gICAgdXBkYXRlRGltZW5zaW9ucygpO1xuICAgIFxuICAgIC8vIExpc3RlbiBmb3Igd2luZG93IHJlc2l6ZVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB1cGRhdGVEaW1lbnNpb25zKTtcbiAgICBcbiAgICAvLyBDbGVhbiB1cFxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdXBkYXRlRGltZW5zaW9ucyk7XG4gICAgfTtcbiAgfSwgW2FjdGl2ZUNhbnZhc1JlZiwgY3VycmVudERvdF0pO1xuICBcbiAgLy8gR2VuZXJhdGUgYSByYW5kb20gcG9zaXRpb24gb24gdGhlIGNhbnZhc1xuICBjb25zdCBnZXRSYW5kb21Qb3NpdGlvbiA9ICgpID0+IHtcbiAgICBjb25zdCBjYW52YXMgPSBhY3RpdmVDYW52YXNSZWYuY3VycmVudDtcbiAgICBpZiAoIWNhbnZhcykge1xuICAgICAgY29uc29sZS5lcnJvcihcIkNhbnZhcyByZWYgaXMgbnVsbCBpbiBnZXRSYW5kb21Qb3NpdGlvblwiKTtcbiAgICAgIHJldHVybiB7IHg6IDEwMCwgeTogMTAwIH07IC8vIEZhbGxiYWNrIHBvc2l0aW9uXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHdpZHRoID0gY2FudmFzLndpZHRoIHx8IDQwMDsgIC8vIEZhbGxiYWNrIGlmIHdpZHRoIGlzIDBcbiAgICBjb25zdCBoZWlnaHQgPSBjYW52YXMuaGVpZ2h0IHx8IDMwMDsgLy8gRmFsbGJhY2sgaWYgaGVpZ2h0IGlzIDBcbiAgICBcbiAgICBjb25zb2xlLmxvZyhcIkNhbnZhcyBkaW1lbnNpb25zIGZvciByYW5kb20gcG9zaXRpb246XCIsIHsgd2lkdGgsIGhlaWdodCB9KTtcbiAgICBcbiAgICAvLyBFbnN1cmUgd2UncmUgbm90IHRvbyBjbG9zZSB0byB0aGUgZWRnZXNcbiAgICBjb25zdCBwYWRkaW5nID0gNDA7IC8vIEluY3JlYXNlZCBwYWRkaW5nXG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICh3aWR0aCAtIDIgKiBwYWRkaW5nKSkgKyBwYWRkaW5nLFxuICAgICAgeTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGhlaWdodCAtIDIgKiBwYWRkaW5nKSkgKyBwYWRkaW5nXG4gICAgfTtcbiAgfTtcbiAgXG4gIC8vIERyYXcgYSBkb3Qgb24gdGhlIGNhbnZhc1xuICBjb25zdCBkcmF3RG90ID0gKHgsIHksIGNvbG9yID0gJ3JlZCcsIHJhZGl1cyA9IDEyKSA9PiB7IC8vIEluY3JlYXNlZCByYWRpdXNcbiAgICBjb25zb2xlLmxvZyhcIkRyYXdpbmcgZG90IGF0OlwiLCB7IHgsIHksIGNvbG9yLCByYWRpdXMgfSk7XG4gICAgXG4gICAgY29uc3QgY2FudmFzID0gYWN0aXZlQ2FudmFzUmVmLmN1cnJlbnQ7XG4gICAgaWYgKCFjYW52YXMpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJDYW52YXMgcmVmIGlzIG51bGwgaW4gZHJhd0RvdFwiKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBcbiAgICAvLyBDbGVhciBjYW52YXNcbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgXG4gICAgLy8gRHJhdyBkb3Qgd2l0aCBnbG93IGVmZmVjdFxuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguYXJjKHgsIHksIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICBjdHguZmlsbCgpO1xuICAgIFxuICAgIC8vIEFkZCBnbG93IGVmZmVjdFxuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguYXJjKHgsIHksIHJhZGl1cyArIDUsIDAsIE1hdGguUEkgKiAyKTsgLy8gSW5jcmVhc2VkIGdsb3dcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsIDAsIDAsIDAuNSknOyAvLyBNb3JlIHZpc2libGUgZ2xvd1xuICAgIGN0eC5saW5lV2lkdGggPSAzOyAvLyBUaGlja2VyIGxpbmVcbiAgICBjdHguc3Ryb2tlKCk7XG4gICAgXG4gICAgLy8gU3RvcmUgY3VycmVudCBkb3QgcG9zaXRpb24gLSB1c2luZyBjYWxsYmFjayBmb3JtIHRvIGVuc3VyZSBpdCB1cGRhdGVzXG4gICAgc2V0Q3VycmVudERvdChwcmV2ID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiVXBkYXRpbmcgY3VycmVudERvdCBzdGF0ZSBmcm9tOlwiLCBwcmV2LCBcInRvOlwiLCB7IHgsIHkgfSk7XG4gICAgICByZXR1cm4geyB4LCB5IH07XG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIHsgeCwgeSB9O1xuICB9O1xuICBcbiAgLy8gRGVidWdnaW5nIGxvZyBmb3IgY3VycmVudERvdCBzdGF0ZSBjaGFuZ2VzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJjdXJyZW50RG90IHN0YXRlIGNoYW5nZWQ6XCIsIGN1cnJlbnREb3QpO1xuICB9LCBbY3VycmVudERvdF0pO1xuICBcbiAgLy8gRGVidWdnaW5nIGxvZyBmb3IgY291bnRkb3duVmFsdWUgc3RhdGUgY2hhbmdlc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiY291bnRkb3duVmFsdWUgc3RhdGUgY2hhbmdlZDpcIiwgY291bnRkb3duVmFsdWUpO1xuICB9LCBbY291bnRkb3duVmFsdWVdKTtcbiAgXG4gIC8vIENsZWFyIHRoZSBjYW52YXNcbiAgY29uc3QgY2xlYXJDYW52YXMgPSAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJDbGVhcmluZyBjYW52YXNcIik7XG4gICAgXG4gICAgY29uc3QgY2FudmFzID0gYWN0aXZlQ2FudmFzUmVmLmN1cnJlbnQ7XG4gICAgaWYgKCFjYW52YXMpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJDYW52YXMgcmVmIGlzIG51bGwgaW4gY2xlYXJDYW52YXNcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICBcbiAgICBzZXRDdXJyZW50RG90KG51bGwpO1xuICAgIHNldENvdW50ZG93blZhbHVlKG51bGwpO1xuICAgIHNldEZvcmNlU2hvd0NvdW50ZG93bihmYWxzZSk7XG4gICAgc2V0UHJvY2Vzc1N0YXR1cygnQ2FudmFzIGNsZWFyZWQnKTtcbiAgICBcbiAgICAvLyBDbGVhciB0aGUgbWVzc2FnZSBhZnRlciBhIGRlbGF5XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBzZXRQcm9jZXNzU3RhdHVzKCcnKTtcbiAgICB9LCAxNTAwKTtcbiAgfTtcbiAgXG4gIC8vIFN0YXJ0IGNvdW50ZG93biB0aW1lclxuICBjb25zdCBzdGFydENvdW50ZG93biA9IChjb3VudCwgb25Db21wbGV0ZSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiU3RhcnRpbmcgY291bnRkb3duIGZyb206XCIsIGNvdW50KTtcbiAgICBcbiAgICAvLyBTZXQgY291bnRkb3duIHZhbHVlIGluIHN0YXRlXG4gICAgc2V0Q291bnRkb3duVmFsdWUoY291bnQpO1xuICAgIHNldEZvcmNlU2hvd0NvdW50ZG93bih0cnVlKTtcbiAgICBzZXRJc0NhcHR1cmluZyh0cnVlKTtcbiAgICBcbiAgICAvLyBVcGRhdGUgc3RhdHVzIGZvciBwYXJlbnQgY29tcG9uZW50XG4gICAgaWYgKG9uU3RhdHVzVXBkYXRlKSB7XG4gICAgICBvblN0YXR1c1VwZGF0ZSh7XG4gICAgICAgIGNvdW50ZG93blZhbHVlOiBjb3VudCxcbiAgICAgICAgcHJvY2Vzc1N0YXR1czogYENvdW50ZG93bjogJHtjb3VudH1gLFxuICAgICAgICBpc0NhcHR1cmluZzogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoY291bnQgPiAxKSB7XG4gICAgICAgIHN0YXJ0Q291bnRkb3duKGNvdW50IC0gMSwgb25Db21wbGV0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGaW5hbCBjb3VudGRvd24gc3RlcFxuICAgICAgICBjb25zb2xlLmxvZyhcIkNvdW50ZG93biBmaW5pc2hlZCwgY2xlYXJpbmcgY291bnRkb3duIGRpc3BsYXlcIik7XG4gICAgICAgIHNldENvdW50ZG93blZhbHVlKG51bGwpO1xuICAgICAgICBzZXRGb3JjZVNob3dDb3VudGRvd24oZmFsc2UpO1xuICAgICAgICBcbiAgICAgICAgLy8gVXBkYXRlIHN0YXR1cyBmb3IgcGFyZW50IGNvbXBvbmVudFxuICAgICAgICBpZiAob25TdGF0dXNVcGRhdGUpIHtcbiAgICAgICAgICBvblN0YXR1c1VwZGF0ZSh7XG4gICAgICAgICAgICBjb3VudGRvd25WYWx1ZTogbnVsbCxcbiAgICAgICAgICAgIHByb2Nlc3NTdGF0dXM6ICdDYXB0dXJpbmcuLi4nLFxuICAgICAgICAgICAgaXNDYXB0dXJpbmc6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gRXhlY3V0ZSBjb21wbGV0aW9uIGNhbGxiYWNrIGltbWVkaWF0ZWx5XG4gICAgICAgIGlmIChvbkNvbXBsZXRlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJFeGVjdXRpbmcgY29tcGxldGlvbiBjYWxsYmFja1wiKTtcbiAgICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCA4MDApO1xuICAgIFxuICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQodGltZXIpO1xuICB9O1xuICBcbiAgLy8gU2F2ZSBhbiBpbWFnZSB0byB0aGUgc2VydmVyXG4gIGNvbnN0IHNhdmVJbWFnZVRvU2VydmVyID0gYXN5bmMgKGltYWdlRGF0YSwgZmlsZW5hbWUsIHR5cGUpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coYEF0dGVtcHRpbmcgdG8gc2F2ZSAke3R5cGV9IGltYWdlOiAke2ZpbGVuYW1lfWApO1xuICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL3NhdmUtY2FwdHVyZScsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBpbWFnZURhdGEsXG4gICAgICAgICAgZmlsZW5hbWUsXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBmb2xkZXI6IGNhcHR1cmVGb2xkZXJcbiAgICAgICAgfSlcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgU2VydmVyIHJlc3BvbmRlZCB3aXRoICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBjb25zb2xlLmxvZyhgU2F2ZWQgJHt0eXBlfSBpbWFnZTpgLCByZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3Igc2F2aW5nICR7dHlwZX0gaW1hZ2U6YCwgZXJyb3IpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9O1xuICBcbiAgLy8gQ2FwdHVyZSBpbWFnZXMgZnVuY3Rpb25cbiAgY29uc3QgY2FwdHVyZUltYWdlID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiQ2FwdHVyaW5nIGltYWdlcy4uLlwiKTtcbiAgICBzZXRJc0NhcHR1cmluZyh0cnVlKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgLy8gRW5hYmxlIGNhbWVyYSBpZiBmdW5jdGlvbiBwcm92aWRlZFxuICAgICAgaWYgKHRyaWdnZXJDYW1lcmFBY2Nlc3MpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJUcmlnZ2VyaW5nIGNhbWVyYSBhY2Nlc3NcIik7XG4gICAgICAgIHRyaWdnZXJDYW1lcmFBY2Nlc3ModHJ1ZSk7IC8vIEZvcmNlIGVuYWJsZSBjYW1lcmFcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gV2FpdCBicmllZmx5IGZvciBjYW1lcmEgdG8gaW5pdGlhbGl6ZVxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDUwMCkpO1xuICAgICAgXG4gICAgICAvLyBHZW5lcmF0ZSBmaWxlbmFtZXMgd2l0aCBjb3VudGVyXG4gICAgICBjb25zdCBzY3JlZW5GaWxlbmFtZSA9IGBzY3JlZW5fJHtTdHJpbmcoY2FwdHVyZUNvdW50ZXIpLnBhZFN0YXJ0KDMsICcwJyl9LmpwZ2A7XG4gICAgICBjb25zdCB3ZWJjYW1GaWxlbmFtZSA9IGB3ZWJjYW1fJHtTdHJpbmcoY2FwdHVyZUNvdW50ZXIpLnBhZFN0YXJ0KDMsICcwJyl9LmpwZ2A7XG4gICAgICBcbiAgICAgIC8vIENhcHR1cmUgc2NyZWVuIGltYWdlIChjYW52YXMgd2l0aCBkb3QpXG4gICAgICBjb25zdCBjYW52YXMgPSBhY3RpdmVDYW52YXNSZWYuY3VycmVudDtcbiAgICAgIGlmIChjYW52YXMpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJDYXB0dXJpbmcgc2NyZWVuIGZyb20gY2FudmFzXCIpO1xuICAgICAgICBjb25zdCBzY3JlZW5JbWFnZSA9IGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL3BuZycpO1xuICAgICAgICBhd2FpdCBzYXZlSW1hZ2VUb1NlcnZlcihzY3JlZW5JbWFnZSwgc2NyZWVuRmlsZW5hbWUsICdzY3JlZW4nKTtcbiAgICAgICAgY29uc29sZS5sb2coYFNhdmVkIHNjcmVlbiBpbWFnZTogJHtzY3JlZW5GaWxlbmFtZX1gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDYW5ub3QgY2FwdHVyZSBzY3JlZW4gLSBjYW52YXMgcmVmIGlzIG51bGxcIik7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIENhcHR1cmUgd2ViY2FtIGltYWdlIGlmIGF2YWlsYWJsZVxuICAgICAgaWYgKHdpbmRvdy52aWRlb0VsZW1lbnQpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJDYXB0dXJpbmcgZnJvbSB3ZWJjYW1cIik7XG4gICAgICAgIGNvbnN0IHRlbXBDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgY29uc3QgY3R4ID0gdGVtcENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICB0ZW1wQ2FudmFzLndpZHRoID0gd2luZG93LnZpZGVvRWxlbWVudC52aWRlb1dpZHRoO1xuICAgICAgICB0ZW1wQ2FudmFzLmhlaWdodCA9IHdpbmRvdy52aWRlb0VsZW1lbnQudmlkZW9IZWlnaHQ7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2Uod2luZG93LnZpZGVvRWxlbWVudCwgMCwgMCwgdGVtcENhbnZhcy53aWR0aCwgdGVtcENhbnZhcy5oZWlnaHQpO1xuICAgICAgICBjb25zdCB3ZWJjYW1JbWFnZSA9IHRlbXBDYW52YXMudG9EYXRhVVJMKCdpbWFnZS9wbmcnKTtcbiAgICAgICAgXG4gICAgICAgIGF3YWl0IHNhdmVJbWFnZVRvU2VydmVyKHdlYmNhbUltYWdlLCB3ZWJjYW1GaWxlbmFtZSwgJ3dlYmNhbScpO1xuICAgICAgICBjb25zb2xlLmxvZyhgU2F2ZWQgd2ViY2FtIGltYWdlOiAke3dlYmNhbUZpbGVuYW1lfWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJXZWJjYW0gZWxlbWVudCBub3QgYXZhaWxhYmxlXCIpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBJbmNyZW1lbnQgdGhlIGNvdW50ZXIgZm9yIG5leHQgY2FwdHVyZVxuICAgICAgc2V0Q2FwdHVyZUNvdW50ZXIocHJldiA9PiBwcmV2ICsgMSk7XG4gICAgICBcbiAgICAgIC8vIFVwZGF0ZSBzdGF0dXNcbiAgICAgIHNldElzQ2FwdHVyaW5nKGZhbHNlKTtcbiAgICAgIHNldFByb2Nlc3NTdGF0dXMoYENhcHR1cmVkIGNvb3JkaW5hdGVzOiB4PSR7Y3VycmVudERvdD8ueH0sIHk9JHtjdXJyZW50RG90Py55fWApO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgcGFyZW50IGNvbXBvbmVudFxuICAgICAgaWYgKG9uU3RhdHVzVXBkYXRlKSB7XG4gICAgICAgIG9uU3RhdHVzVXBkYXRlKGBJbWFnZXMgc2F2ZWQ6ICR7c2NyZWVuRmlsZW5hbWV9IGFuZCAke3dlYmNhbUZpbGVuYW1lfWApO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBTaG93IFRvcEJhciBhZ2FpbiBhZnRlciBjYXB0dXJlXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJTaG93aW5nIFRvcEJhciBhZnRlciBjYXB0dXJlXCIpO1xuICAgICAgICBpZiAodHlwZW9mIHRvZ2dsZVRvcEJhciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRvZ2dsZVRvcEJhcih0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cudG9nZ2xlVG9wQmFyKSB7XG4gICAgICAgICAgd2luZG93LnRvZ2dsZVRvcEJhcih0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSwgMTUwMCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGR1cmluZyBjYXB0dXJlOicsIGVycm9yKTtcbiAgICAgIHNldElzQ2FwdHVyaW5nKGZhbHNlKTtcbiAgICAgIHNldFByb2Nlc3NTdGF0dXMoJ0Vycm9yIGNhcHR1cmluZyBpbWFnZXM6ICcgKyBlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gICAgXG4gICAgLy8gQ2xlYXIgc3RhdHVzIGFmdGVyIGEgZGVsYXlcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHNldFByb2Nlc3NTdGF0dXMoJycpO1xuICAgIH0sIDMwMDApO1xuICB9O1xuICBcbiAgLy8gUmFuZG9tIERvdCBhY3Rpb25cbiAgY29uc3QgaGFuZGxlUmFuZG9tRG90ID0gKCkgPT4ge1xuICAgIC8vIEhpZGUgdGhlIFRvcEJhciBiZWZvcmUgc2hvd2luZyBkb3RcbiAgICBpZiAodHlwZW9mIHRvZ2dsZVRvcEJhciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdG9nZ2xlVG9wQmFyKGZhbHNlKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy50b2dnbGVUb3BCYXIpIHtcbiAgICAgIHdpbmRvdy50b2dnbGVUb3BCYXIoZmFsc2UpO1xuICAgIH1cbiAgICBcbiAgICBzZXRJc0NhcHR1cmluZyh0cnVlKTtcbiAgICBzZXRQcm9jZXNzU3RhdHVzKCdHZW5lcmF0aW5nIHJhbmRvbSBkb3QuLi4nKTtcbiAgICBcbiAgICAvLyBHaXZlIHRoZSBjb21wb25lbnQgdGltZSB0byB1cGRhdGVcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGFjdGl2ZUNhbnZhc1JlZi5jdXJyZW50O1xuICAgICAgaWYgKGNhbnZhcykge1xuICAgICAgICAvLyBNYWtlIHN1cmUgY2FudmFzIGRpbWVuc2lvbnMgYXJlIHByb3Blcmx5IHNldFxuICAgICAgICBjb25zdCBwYXJlbnQgPSBjYW52YXMucGFyZW50RWxlbWVudDtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHBhcmVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gcGFyZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ2xlYXIgYW55IHByZXZpb3VzIGNvbnRlbnRcbiAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICBcbiAgICAgICAgLy8gR2VuZXJhdGUgcmFuZG9tIHBvc2l0aW9uXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmFuZG9tUG9zaXRpb24oKTtcbiAgICAgICAgXG4gICAgICAgIC8vIERyYXcgdGhlIGRvdCB3aXRoIGEgbGFyZ2VyIHJhZGl1cyBmb3IgdmlzaWJpbGl0eVxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5hcmMocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgMTIsIDAsIE1hdGguUEkgKiAyKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZWQnO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICBcbiAgICAgICAgLy8gQWRkIGdsb3cgZWZmZWN0IHRvIHRoZSBkb3RcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHguYXJjKHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIDE1LCAwLCBNYXRoLlBJICogMik7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdyZ2JhKDI1NSwgMCwgMCwgMC41KSc7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAzO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBTdG9yZSBjdXJyZW50IGRvdCBwb3NpdGlvbiBkaXJlY3RseVxuICAgICAgICBzZXRDdXJyZW50RG90KHBvc2l0aW9uKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEdldCB0aGUgY2FudmFzIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSB2aWV3cG9ydFxuICAgICAgICBjb25zdCBjYW52YXNSZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBcbiAgICAgICAgLy8gSU1QT1JUQU5UOiBDcmVhdGUgdGhlIGNvdW50ZG93biBlbGVtZW50IGRpcmVjdGx5IGFib3ZlIHRoZSBkb3RcbiAgICAgICAgY29uc3QgY291bnRkb3duRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb3VudGRvd25FbGVtZW50LmNsYXNzTmFtZSA9ICdmb3JjZWQtY291bnRkb3duJztcbiAgICAgICAgXG4gICAgICAgIC8vIFBvc2l0aW9uIGl0IGFib3ZlIHRoZSBkb3QgKGNhbGN1bGF0ZSBhYnNvbHV0ZSBwb3NpdGlvbiBjb25zaWRlcmluZyB0aGUgY2FudmFzIHBvc2l0aW9uKVxuICAgICAgICBjb25zdCBhYnNvbHV0ZVggPSBjYW52YXNSZWN0LmxlZnQgKyBwb3NpdGlvbi54O1xuICAgICAgICBjb25zdCBhYnNvbHV0ZVkgPSBjYW52YXNSZWN0LnRvcCArIHBvc2l0aW9uLnk7XG4gICAgICAgIFxuICAgICAgICBjb3VudGRvd25FbGVtZW50LnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICAgIGxlZnQ6ICR7YWJzb2x1dGVYfXB4O1xuICAgICAgICAgIHRvcDogJHthYnNvbHV0ZVkgLSA2MH1weDtcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG4gICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICAgICBmb250LXNpemU6IDM2cHg7XG4gICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgICAgdGV4dC1zaGFkb3c6IDAgMCAxMHB4IHdoaXRlLCAwIDAgMjBweCB3aGl0ZTtcbiAgICAgICAgICB6LWluZGV4OiA5OTk5O1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC44KTtcbiAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCByZWQ7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICAgIHdpZHRoOiA1MHB4O1xuICAgICAgICAgIGhlaWdodDogNTBweDtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgwLCAwLCAwLCAwLjMpO1xuICAgICAgICBgO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvdW50ZG93bkVsZW1lbnQpO1xuICAgICAgICBcbiAgICAgICAgLy8gTWFudWFsIGNvdW50ZG93biBpbXBsZW1lbnRhdGlvblxuICAgICAgICBsZXQgY291bnQgPSAzO1xuICAgICAgICBjb3VudGRvd25FbGVtZW50LnRleHRDb250ZW50ID0gY291bnQ7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBjb3VudGRvd25JbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICBjb3VudC0tO1xuICAgICAgICAgIGlmIChjb3VudCA8PSAwKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGNvdW50ZG93bkludGVydmFsKTtcbiAgICAgICAgICAgIGNvdW50ZG93bkVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICBjYXB0dXJlSW1hZ2UoKTsgLy8gUHJvY2VlZCB3aXRoIGNhcHR1cmVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY291bnRkb3duRWxlbWVudC50ZXh0Q29udGVudCA9IGNvdW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgODAwKTtcbiAgICAgIH1cbiAgICB9LCAyMDApO1xuICB9O1xuICBcbiAgLy8gTXVsdGlwbGUgcmFuZG9tIGRvdHMgc2VxdWVuY2VcbiAgY29uc3QgaGFuZGxlU2V0UmFuZG9tID0gKCkgPT4ge1xuICAgIGlmIChpc0NhcHR1cmluZykgcmV0dXJuO1xuICAgIFxuICAgIC8vIFBhcnNlIGlucHV0IHZhbHVlcyAodXNlIGRlZmF1bHRzIGlmIGludmFsaWQpXG4gICAgY29uc3QgdGltZXMgPSBwYXJzZUludChyYW5kb21UaW1lcykgfHwgMTtcbiAgICBjb25zdCBkZWxheSA9IHBhcnNlSW50KGRlbGF5U2Vjb25kcykgfHwgMztcbiAgICBcbiAgICBpZiAodGltZXMgPD0gMCB8fCBkZWxheSA8PSAwKSB7XG4gICAgICBzZXRQcm9jZXNzU3RhdHVzKCdQbGVhc2UgdXNlIHBvc2l0aXZlIHZhbHVlcyBmb3IgdGltZXMgYW5kIGRlbGF5Jyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIHNldElzQ2FwdHVyaW5nKHRydWUpO1xuICAgIHNldFJlbWFpbmluZ0NhcHR1cmVzKHRpbWVzKTtcbiAgICBzZXRQcm9jZXNzU3RhdHVzKGBTdGFydGluZyAke3RpbWVzfSByYW5kb20gY2FwdHVyZXMuLi5gKTtcbiAgICBcbiAgICAvLyBTdGFydCBzZXF1ZW5jZVxuICAgIHNjaGVkdWxlUmFuZG9tQ2FwdHVyZXModGltZXMsIHRpbWVzLCBkZWxheSk7XG4gIH07XG4gIFxuICAvLyBTY2hlZHVsZSBzZXF1ZW5jZSBvZiByYW5kb20gY2FwdHVyZXNcbiAgY29uc3Qgc2NoZWR1bGVSYW5kb21DYXB0dXJlcyA9IChyZW1haW5pbmcsIHRvdGFsLCBkZWxheSkgPT4ge1xuICAgIGlmIChyZW1haW5pbmcgPD0gMCkge1xuICAgICAgc2V0SXNDYXB0dXJpbmcoZmFsc2UpO1xuICAgICAgc2V0UmVtYWluaW5nQ2FwdHVyZXMoMCk7XG4gICAgICBzZXRQcm9jZXNzU3RhdHVzKCdSYW5kb20gY2FwdHVyZSBzZXF1ZW5jZSBjb21wbGV0ZWQnKTtcbiAgICAgIFxuICAgICAgLy8gQ2xlYXIgc3RhdHVzIGFmdGVyIGEgZGVsYXlcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzZXRQcm9jZXNzU3RhdHVzKCcnKTtcbiAgICAgIH0sIDIwMDApO1xuICAgICAgXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIHNldFJlbWFpbmluZ0NhcHR1cmVzKHJlbWFpbmluZyk7XG4gICAgc2V0UHJvY2Vzc1N0YXR1cyhgQ2FwdHVyZSAke3RvdGFsIC0gcmVtYWluaW5nICsgMX0gb2YgJHt0b3RhbH1gKTtcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSByYW5kb20gcG9zaXRpb24gYW5kIGRyYXdcbiAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJhbmRvbVBvc2l0aW9uKCk7XG4gICAgZHJhd0RvdChwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcbiAgICBcbiAgICAvLyBTdGFydCBjb3VudGRvd24gYW5kIGNhcHR1cmVcbiAgICBzdGFydENvdW50ZG93bigzLCAoKSA9PiB7XG4gICAgICBjYXB0dXJlSW1hZ2UoKTtcbiAgICAgIFxuICAgICAgLy8gU2NoZWR1bGUgbmV4dCBjYXB0dXJlXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc2NoZWR1bGVSYW5kb21DYXB0dXJlcyhyZW1haW5pbmcgLSAxLCB0b3RhbCwgZGVsYXkpO1xuICAgICAgfSwgZGVsYXkgKiAxMDAwKTtcbiAgICB9KTtcbiAgfTtcbiAgXG4gIC8vIEdlbmVyYXRlIGNhbGlicmF0aW9uIHBvaW50c1xuICBjb25zdCBnZW5lcmF0ZUNhbGlicmF0aW9uUG9pbnRzID0gKCkgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IGFjdGl2ZUNhbnZhc1JlZi5jdXJyZW50O1xuICAgIGlmICghY2FudmFzKSByZXR1cm4gW107XG4gICAgXG4gICAgY29uc3Qgd2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgY29uc3QgaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcbiAgICBcbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gZm9yIHJvdW5kaW5nXG4gICAgY29uc3QgY29uZGl0aW9uYWxSb3VuZCA9IChkaW1lbnNpb24sIHBlcmNlbnRhZ2UpID0+IHtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKGRpbWVuc2lvbiAqIHBlcmNlbnRhZ2UpO1xuICAgIH07XG4gICAgXG4gICAgY29uc3QgZmlyc3RGcmFtZVBlcmNlbnRhZ2UgPSAwLjEyO1xuICAgIGNvbnN0IHNlY29uZEZyYW1lUGVyY2VudGFnZSA9IDAuMjY7XG4gICAgXG4gICAgLy8gQ2FsY3VsYXRlIHBvaW50cyAob3V0ZXIgYW5kIGlubmVyIGZyYW1lKVxuICAgIGNvbnN0IHhMZWZ0Rmlyc3QgPSBjb25kaXRpb25hbFJvdW5kKHdpZHRoLCBmaXJzdEZyYW1lUGVyY2VudGFnZSk7XG4gICAgY29uc3QgeFJpZ2h0Rmlyc3QgPSB3aWR0aCAtIGNvbmRpdGlvbmFsUm91bmQod2lkdGgsIGZpcnN0RnJhbWVQZXJjZW50YWdlKTtcbiAgICBjb25zdCB5VG9wRmlyc3QgPSBjb25kaXRpb25hbFJvdW5kKGhlaWdodCwgZmlyc3RGcmFtZVBlcmNlbnRhZ2UpO1xuICAgIGNvbnN0IHlCb3R0b21GaXJzdCA9IGhlaWdodCAtIGNvbmRpdGlvbmFsUm91bmQoaGVpZ2h0LCBmaXJzdEZyYW1lUGVyY2VudGFnZSk7XG4gICAgXG4gICAgY29uc3QgeExlZnRTZWNvbmQgPSBjb25kaXRpb25hbFJvdW5kKHdpZHRoLCBzZWNvbmRGcmFtZVBlcmNlbnRhZ2UpO1xuICAgIGNvbnN0IHhSaWdodFNlY29uZCA9IHdpZHRoIC0gY29uZGl0aW9uYWxSb3VuZCh3aWR0aCwgc2Vjb25kRnJhbWVQZXJjZW50YWdlKTtcbiAgICBjb25zdCB5VG9wU2Vjb25kID0gY29uZGl0aW9uYWxSb3VuZChoZWlnaHQsIHNlY29uZEZyYW1lUGVyY2VudGFnZSk7XG4gICAgY29uc3QgeUJvdHRvbVNlY29uZCA9IGhlaWdodCAtIGNvbmRpdGlvbmFsUm91bmQoaGVpZ2h0LCBzZWNvbmRGcmFtZVBlcmNlbnRhZ2UpO1xuICAgIFxuICAgIC8vIFJldHVybiBhcnJheSBvZiBwb2ludHMgaW4gc2VxdWVuY2VcbiAgICByZXR1cm4gW1xuICAgICAgLy8gRmlyc3QgZnJhbWUgLSBvdXRlciBwb2ludHNcbiAgICAgIHsgeDogeExlZnRGaXJzdCwgeTogeVRvcEZpcnN0IH0sXG4gICAgICB7IHg6IE1hdGguZmxvb3Iod2lkdGggLyAyKSwgeTogeVRvcEZpcnN0IH0sXG4gICAgICB7IHg6IHhSaWdodEZpcnN0LCB5OiB5VG9wRmlyc3QgfSxcbiAgICAgIHsgeDogeExlZnRGaXJzdCwgeTogTWF0aC5mbG9vcihoZWlnaHQgLyAyKSB9LFxuICAgICAgeyB4OiB4UmlnaHRGaXJzdCwgeTogTWF0aC5mbG9vcihoZWlnaHQgLyAyKSB9LFxuICAgICAgeyB4OiB4TGVmdEZpcnN0LCB5OiB5Qm90dG9tRmlyc3QgfSxcbiAgICAgIHsgeDogTWF0aC5mbG9vcih3aWR0aCAvIDIpLCB5OiB5Qm90dG9tRmlyc3QgfSxcbiAgICAgIHsgeDogeFJpZ2h0Rmlyc3QsIHk6IHlCb3R0b21GaXJzdCB9LFxuICAgICAgXG4gICAgICAvLyBTZWNvbmQgZnJhbWUgLSBpbm5lciBwb2ludHNcbiAgICAgIHsgeDogeExlZnRTZWNvbmQsIHk6IHlUb3BTZWNvbmQgfSxcbiAgICAgIHsgeDogTWF0aC5mbG9vcih3aWR0aCAvIDIpLCB5OiB5VG9wU2Vjb25kIH0sXG4gICAgICB7IHg6IHhSaWdodFNlY29uZCwgeTogeVRvcFNlY29uZCB9LFxuICAgICAgeyB4OiB4TGVmdFNlY29uZCwgeTogTWF0aC5mbG9vcihoZWlnaHQgLyAyKSB9LFxuICAgICAgeyB4OiB4UmlnaHRTZWNvbmQsIHk6IE1hdGguZmxvb3IoaGVpZ2h0IC8gMikgfSxcbiAgICAgIHsgeDogeExlZnRTZWNvbmQsIHk6IHlCb3R0b21TZWNvbmQgfSxcbiAgICAgIHsgeDogTWF0aC5mbG9vcih3aWR0aCAvIDIpLCB5OiB5Qm90dG9tU2Vjb25kIH0sXG4gICAgICB7IHg6IHhSaWdodFNlY29uZCwgeTogeUJvdHRvbVNlY29uZCB9XG4gICAgXTtcbiAgfTtcbiAgXG4gIC8vIEhhbmRsZSBjYWxpYnJhdGlvbiBzZXF1ZW5jZVxuICBjb25zdCBoYW5kbGVTZXRDYWxpYnJhdGUgPSAoKSA9PiB7XG4gICAgaWYgKGlzQ2FwdHVyaW5nKSByZXR1cm47XG4gICAgXG4gICAgLy8gR2VuZXJhdGUgY2FsaWJyYXRpb24gcG9pbnRzXG4gICAgY29uc3QgcG9pbnRzID0gZ2VuZXJhdGVDYWxpYnJhdGlvblBvaW50cygpO1xuICAgIGlmIChwb2ludHMubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZXRQcm9jZXNzU3RhdHVzKCdGYWlsZWQgdG8gZ2VuZXJhdGUgY2FsaWJyYXRpb24gcG9pbnRzJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIHNldENhbGlicmF0aW9uUG9pbnRzKHBvaW50cyk7XG4gICAgc2V0Q3VycmVudENhbGlicmF0aW9uSW5kZXgoMCk7XG4gICAgc2V0SXNDYXB0dXJpbmcodHJ1ZSk7XG4gICAgc2V0UmVtYWluaW5nQ2FwdHVyZXMocG9pbnRzLmxlbmd0aCk7XG4gICAgc2V0UHJvY2Vzc1N0YXR1cyhgQ2FsaWJyYXRpb24gMS8ke3BvaW50cy5sZW5ndGh9YCk7XG4gICAgXG4gICAgLy8gRHJhdyBmaXJzdCBwb2ludCBhbmQgc3RhcnRcbiAgICBjb25zdCBmaXJzdFBvaW50ID0gcG9pbnRzWzBdO1xuICAgIGRyYXdEb3QoZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkpO1xuICAgIFxuICAgIC8vIFN0YXJ0IGNvdW50ZG93biBmb3IgZmlyc3QgcG9pbnRcbiAgICBzdGFydENvdW50ZG93bigzLCAoKSA9PiB7XG4gICAgICBjYXB0dXJlSW1hZ2UoKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gbW92ZVRvTmV4dENhbGlicmF0aW9uUG9pbnQoKSwgMTAwMCk7XG4gICAgfSk7XG4gIH07XG4gIFxuICAvLyBNb3ZlIHRvIG5leHQgY2FsaWJyYXRpb24gcG9pbnRcbiAgY29uc3QgbW92ZVRvTmV4dENhbGlicmF0aW9uUG9pbnQgPSAoKSA9PiB7XG4gICAgY29uc3QgbmV4dEluZGV4ID0gY3VycmVudENhbGlicmF0aW9uSW5kZXggKyAxO1xuICAgIFxuICAgIC8vIENoZWNrIGlmIHdlJ3JlIGRvbmVcbiAgICBpZiAobmV4dEluZGV4ID49IGNhbGlicmF0aW9uUG9pbnRzLmxlbmd0aCkge1xuICAgICAgc2V0SXNDYXB0dXJpbmcoZmFsc2UpO1xuICAgICAgc2V0UmVtYWluaW5nQ2FwdHVyZXMoMCk7XG4gICAgICBzZXRQcm9jZXNzU3RhdHVzKCdDYWxpYnJhdGlvbiBjb21wbGV0ZWQnKTtcbiAgICAgIFxuICAgICAgLy8gQ2xlYXIgc3RhdHVzIGFmdGVyIGEgZGVsYXlcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzZXRQcm9jZXNzU3RhdHVzKCcnKTtcbiAgICAgIH0sIDIwMDApO1xuICAgICAgXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIC8vIFVwZGF0ZSBzdGF0ZSBhbmQgcHJvZ3Jlc3NcbiAgICBzZXRDdXJyZW50Q2FsaWJyYXRpb25JbmRleChuZXh0SW5kZXgpO1xuICAgIHNldFJlbWFpbmluZ0NhcHR1cmVzKGNhbGlicmF0aW9uUG9pbnRzLmxlbmd0aCAtIG5leHRJbmRleCk7XG4gICAgc2V0UHJvY2Vzc1N0YXR1cyhgQ2FsaWJyYXRpb24gJHtuZXh0SW5kZXggKyAxfS8ke2NhbGlicmF0aW9uUG9pbnRzLmxlbmd0aH1gKTtcbiAgICBcbiAgICAvLyBEcmF3IG5leHQgcG9pbnRcbiAgICBjb25zdCBuZXh0UG9pbnQgPSBjYWxpYnJhdGlvblBvaW50c1tuZXh0SW5kZXhdO1xuICAgIGRyYXdEb3QobmV4dFBvaW50LngsIG5leHRQb2ludC55KTtcbiAgICBcbiAgICAvLyBTdGFydCBjb3VudGRvd24gZm9yIHRoaXMgcG9pbnRcbiAgICBzdGFydENvdW50ZG93bigzLCAoKSA9PiB7XG4gICAgICBjYXB0dXJlSW1hZ2UoKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gbW92ZVRvTmV4dENhbGlicmF0aW9uUG9pbnQoKSwgMTAwMCk7XG4gICAgfSk7XG4gIH07XG4gIFxuICAvLyBNYXAgYnV0dG9uIGNsaWNrcyB0byBhcHByb3ByaWF0ZSBoYW5kbGVyc1xuICBjb25zdCBoYW5kbGVTY3JlZW5BY3Rpb24gPSAoYWN0aW9uVHlwZSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGBTY3JlZW4gYWN0aW9uIHJlY2VpdmVkOiAke2FjdGlvblR5cGV9YCk7XG4gICAgXG4gICAgc3dpdGNoKGFjdGlvblR5cGUpIHtcbiAgICAgIGNhc2UgJ3JhbmRvbURvdCc6XG4gICAgICAgIGhhbmRsZVJhbmRvbURvdCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NldFJhbmRvbSc6XG4gICAgICAgIGhhbmRsZVNldFJhbmRvbSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2NhbGlicmF0ZSc6XG4gICAgICAgIGhhbmRsZVNldENhbGlicmF0ZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2NsZWFyQWxsJzpcbiAgICAgICAgY2xlYXJDYW52YXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBGb3J3YXJkIHRvIHBhcmVudCBpZiBub3QgaGFuZGxlZCBoZXJlXG4gICAgICAgIGlmIChvbkJ1dHRvbkNsaWNrKSB7XG4gICAgICAgICAgb25CdXR0b25DbGljayhhY3Rpb25UeXBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfTtcbiAgXG4gIC8vIFBhc3MgYWN0aW9ucyB1cCB0byBwYXJlbnQgY29tcG9uZW50XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gU2tpcCBkdXJpbmcgU1NSXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgXG4gICAgY29uc29sZS5sb2coXCJSZWdpc3RlcmluZyBhY3Rpb24gaGFuZGxlcnMgd2l0aCBwYXJlbnRcIik7XG4gICAgXG4gICAgaWYgKG9uQnV0dG9uQ2xpY2spIHtcbiAgICAgIC8vIENyZWF0ZSBhY3Rpb24gaGFuZGxlcnNcbiAgICAgIGNvbnN0IGFjdGlvbkhhbmRsZXJzID0ge1xuICAgICAgICByYW5kb21Eb3Q6IGhhbmRsZVJhbmRvbURvdCxcbiAgICAgICAgc2V0UmFuZG9tOiBoYW5kbGVTZXRSYW5kb20sXG4gICAgICAgIGNhbGlicmF0ZTogaGFuZGxlU2V0Q2FsaWJyYXRlLFxuICAgICAgICBjbGVhckFsbDogY2xlYXJDYW52YXNcbiAgICAgIH07XG4gICAgICBcbiAgICAgIC8vIFN0b3JlIGluIHBhcmVudCBjb21wb25lbnQgY29udGV4dFxuICAgICAgb25CdXR0b25DbGljaygncmVnaXN0ZXJBY3Rpb25zJywgYWN0aW9uSGFuZGxlcnMpO1xuICAgIH1cbiAgfSwgW29uQnV0dG9uQ2xpY2tdKTtcbiAgXG4gIC8vIFVwZGF0ZSBwYXJlbnQgd2l0aCBzdGF0dXMgY2hhbmdlc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChvblN0YXR1c1VwZGF0ZSAmJiBwcm9jZXNzU3RhdHVzKSB7XG4gICAgICBvblN0YXR1c1VwZGF0ZShwcm9jZXNzU3RhdHVzKTtcbiAgICB9XG4gIH0sIFtwcm9jZXNzU3RhdHVzLCBvblN0YXR1c1VwZGF0ZV0pO1xuICBcbiAgLy8gTG9nIHdoZW4gY29tcG9uZW50IG1vdW50cyB0byB2ZXJpZnkgaXQncyBiZWluZyByZW5kZXJlZFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiV2hpdGVTY3JlZW5NYWluIGNvbXBvbmVudCBtb3VudGVkXCIpO1xuICAgIGNvbnNvbGUubG9nKFwiUHJvcHM6XCIsIHsgXG4gICAgICBoYXNTdGF0dXNVcGRhdGU6ICEhb25TdGF0dXNVcGRhdGUsIFxuICAgICAgaGFzQ2FtZXJhQWNjZXNzOiAhIXRyaWdnZXJDYW1lcmFBY2Nlc3MsXG4gICAgICBoYXNCdXR0b25DbGljazogISFvbkJ1dHRvbkNsaWNrLFxuICAgICAgaGFzQ2FudmFzUmVmOiAhIWNhbnZhc1JlZixcbiAgICAgIGhhc1RvZ2dsZVRvcEJhcjogISF0b2dnbGVUb3BCYXIgXG4gICAgfSk7XG4gICAgXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiV2hpdGVTY3JlZW5NYWluIGNvbXBvbmVudCB1bm1vdW50aW5nXCIpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJ3aGl0ZS1zY3JlZW4tY29udGFpbmVyXCIgc3R5bGU9e3sgXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB6SW5kZXg6IDUwLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpJyAvLyBTbGlnaHQgdHJhbnNwYXJlbmN5IHRvIHNlZSBpZiBpdCdzIHJlbmRlcmVkXG4gICAgfX0+XG4gICAgICB7LyogV2hpdGUgc2NyZWVuIGNhbnZhcyAtIE1ha2UgaXQgY292ZXIgdGhlIGVudGlyZSBjb250YWluZXIgKi99XG4gICAgICA8ZGl2IFxuICAgICAgICBjbGFzc05hbWU9XCJ3aGl0ZS1zY3JlZW4tY2FudmFzLWNvbnRhaW5lclwiXG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAjY2NjJywgLy8gTW9yZSB2aXNpYmxlIGJvcmRlclxuICAgICAgICAgIHpJbmRleDogNTFcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgey8qIENhbnZhcyAtIEFsd2F5cyByZW5kZXIgaXQgKi99XG4gICAgICAgIDxjYW52YXNcbiAgICAgICAgICByZWY9e2NhbnZhc1JlZiA/IGNhbnZhc1JlZiA6IGludGVybmFsQ2FudmFzUmVmfVxuICAgICAgICAgIGNsYXNzTmFtZT1cIndoaXRlLXNjcmVlbi1jYW52YXNcIlxuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICAgXG4gICAgICAgIHsvKiBPdmVybGF5IGZvciBjb3VudGRvd24gbmVhciBkb3QgLSB3aXRoIGltcHJvdmVkIHZpc2liaWxpdHkgYW5kIGEgZmFsbGJhY2sgKi99XG4gICAgICAgIHsoY291bnRkb3duVmFsdWUgIT09IG51bGwgfHwgZm9yY2VTaG93Q291bnRkb3duKSAmJiBjdXJyZW50RG90ICYmIChcbiAgICAgICAgICA8ZGl2IFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiZG90LWNvdW50ZG93blwiXG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgbGVmdDogYCR7Y3VycmVudERvdC54IC0gMzB9cHhgLFxuICAgICAgICAgICAgICB0b3A6IGAke2N1cnJlbnREb3QueSAtIDcwfXB4YCxcbiAgICAgICAgICAgICAgY29sb3I6ICdyZWQnLFxuICAgICAgICAgICAgICBmb250U2l6ZTogJzQ4cHgnLCAvLyBNdWNoIGxhcmdlclxuICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgICAgICAgICAgIHRleHRTaGFkb3c6ICcwIDAgMTBweCB3aGl0ZSwgMCAwIDIwcHggd2hpdGUnLCAvLyBTdHJvbmdlciBzaGFkb3dcbiAgICAgICAgICAgICAgekluZGV4OiA5OTksXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC44KScsIC8vIEJhY2tncm91bmQgdG8gbWFrZSBpdCBtb3JlIHZpc2libGVcbiAgICAgICAgICAgICAgcGFkZGluZzogJzEwcHggMjBweCcsXG4gICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICAgICAgICAgIGJveFNoYWRvdzogJzAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4zKScsXG4gICAgICAgICAgICAgIHdpZHRoOiAnNjBweCcsXG4gICAgICAgICAgICAgIGhlaWdodDogJzYwcHgnLFxuICAgICAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGJvcmRlcjogJzJweCBzb2xpZCByZWQnIC8vIEJvcmRlciB0byBtYWtlIGl0IHN0YW5kIG91dFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7Y291bnRkb3duVmFsdWUgfHwgM31cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgICAgXG4gICAgICAgIHsvKiBCYWNrdXAgY2VudGVyZWQgY291bnRkb3duIGZvciBiZXR0ZXIgdmlzaWJpbGl0eSAqL31cbiAgICAgICAgeyhjb3VudGRvd25WYWx1ZSAhPT0gbnVsbCB8fCBmb3JjZVNob3dDb3VudGRvd24pICYmIChcbiAgICAgICAgICA8ZGl2IFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2VudGVyLWNvdW50ZG93bi1iYWNrdXBcIlxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgICAgICAgIHRvcDogJzUwJScsXG4gICAgICAgICAgICAgIGxlZnQ6ICc1MCUnLFxuICAgICAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoLTUwJSwgLTUwJSknLFxuICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgICAgICAgICAgZm9udFNpemU6ICcxMjBweCcsIC8vIFZlcnkgbGFyZ2VcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICAgICAgICB0ZXh0U2hhZG93OiAnMCAwIDIwcHggYmxhY2snLFxuICAgICAgICAgICAgICB6SW5kZXg6IDEwMDAsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMjU1LCAwLCAwLCAwLjcpJywgLy8gUmVkIGJhY2tncm91bmRcbiAgICAgICAgICAgICAgd2lkdGg6ICcyMDBweCcsXG4gICAgICAgICAgICAgIGhlaWdodDogJzIwMHB4JyxcbiAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgICBib3hTaGFkb3c6ICcwIDAgMzBweCByZ2JhKDAsIDAsIDAsIDAuNSknXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtjb3VudGRvd25WYWx1ZSB8fCAzfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgICBcbiAgICAgICAgey8qIEluZGljYXRvciB0aGF0IHRoZSBkb3QgaXMgcHJlc2VudCAtIGhlbHBzIHdpdGggZGVidWdnaW5nICovfVxuICAgICAgICB7Y3VycmVudERvdCAmJiAoXG4gICAgICAgICAgPGRpdiBcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImRvdC1pbmRpY2F0b3JcIlxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgIHRvcDogJzEwcHgnLFxuICAgICAgICAgICAgICByaWdodDogJzEwcHgnLFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDI1NSwgMCwgMC43KScsXG4gICAgICAgICAgICAgIGNvbG9yOiAnYmxhY2snLFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnNXB4IDEwcHgnLFxuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICB6SW5kZXg6IDUyXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIERvdCBhdCB4OntjdXJyZW50RG90Lnh9LCB5OntjdXJyZW50RG90Lnl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICAgIFxuICAgICAgICB7LyogU3RhdHVzIG92ZXJsYXkgKi99XG4gICAgICAgIHsocHJvY2Vzc1N0YXR1cyB8fCByZW1haW5pbmdDYXB0dXJlcyA+IDApICYmIChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJzdGF0dXMtb3ZlcmxheVwiXG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgYm90dG9tOiAnMTBweCcsXG4gICAgICAgICAgICAgIGxlZnQ6ICcxMHB4JyxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjgpJywgLy8gRGFya2VyIGZvciB2aXNpYmlsaXR5XG4gICAgICAgICAgICAgIGNvbG9yOiAnd2hpdGUnLCAvLyBXaGl0ZSB0ZXh0XG4gICAgICAgICAgICAgIHBhZGRpbmc6ICcxMHB4IDE1cHgnLFxuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgICAgICAgICAgICBmb250U2l6ZTogJzE2cHgnLCAvLyBMYXJnZXJcbiAgICAgICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICAgICAgICBib3hTaGFkb3c6ICcwIDRweCA4cHggcmdiYSgwLDAsMCwwLjMpJyxcbiAgICAgICAgICAgICAgekluZGV4OiA1M1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7cHJvY2Vzc1N0YXR1cyAmJiA8ZGl2Pntwcm9jZXNzU3RhdHVzfTwvZGl2Pn1cbiAgICAgICAgICAgIHtyZW1haW5pbmdDYXB0dXJlcyA+IDAgJiYgKFxuICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IGNvbG9yOiAnI2ZmY2MwMCcgfX0+XG4gICAgICAgICAgICAgICAgUmVtYWluaW5nOiB7cmVtYWluaW5nQ2FwdHVyZXN9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX1cbiAgICAgICAgXG4gICAgICAgIHsvKiBDYW52YXMgdmlzaWJpbGl0eSBpbmRpY2F0b3IgLSBkZWJ1Z2dpbmcgb25seSAqL31cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNsYXNzTmFtZT1cImNhbnZhcy1pbmRpY2F0b3JcIlxuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHRvcDogJzEwcHgnLFxuICAgICAgICAgICAgbGVmdDogJzEwcHgnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjYW52YXNWaXNpYmxlID8gJ3JnYmEoMCwgMjU1LCAwLCAwLjcpJyA6ICdyZ2JhKDI1NSwgMCwgMCwgMC43KScsXG4gICAgICAgICAgICBjb2xvcjogJ2JsYWNrJyxcbiAgICAgICAgICAgIHBhZGRpbmc6ICc1cHggMTBweCcsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4JyxcbiAgICAgICAgICAgIHpJbmRleDogNTJcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgQ2FudmFzOiB7Y2FudmFzVmlzaWJsZSA/ICdWaXNpYmxlJyA6ICdIaWRkZW4nfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgXG4gICAgICB7LyogTWFudWFsIHRlc3QgYnV0dG9uIGZvciBkaXJlY3QgdGVzdGluZyAqL31cbiAgICAgIDxidXR0b25cbiAgICAgICAgb25DbGljaz17aGFuZGxlUmFuZG9tRG90fVxuICAgICAgICBzdHlsZT17e1xuICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgIGJvdHRvbTogJzcwcHgnLFxuICAgICAgICAgIHJpZ2h0OiAnMjBweCcsXG4gICAgICAgICAgcGFkZGluZzogJzEwcHggMjBweCcsXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmx1ZScsXG4gICAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICAgIGJvcmRlclJhZGl1czogJzhweCcsXG4gICAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgICAgYm94U2hhZG93OiAnMCA0cHggMTBweCByZ2JhKDAsMCwwLDAuMyknLFxuICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgIHpJbmRleDogMTAwMFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICBURVNUIERPVCBOT1dcbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuLy8gRXhwb3J0IGEgZHluYW1pYyB2ZXJzaW9uIHdpdGggU1NSIGRpc2FibGVkIHRvIGF2b2lkIHVzZUxheW91dEVmZmVjdCB3YXJuaW5nc1xuZXhwb3J0IGRlZmF1bHQgZHluYW1pYygoKSA9PiBQcm9taXNlLnJlc29sdmUoV2hpdGVTY3JlZW5NYWluKSwgeyBzc3I6IGZhbHNlIH0pOyJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidXNlUmVmIiwiZHluYW1pYyIsIldoaXRlU2NyZWVuTWFpbiIsIm9uU3RhdHVzVXBkYXRlIiwidHJpZ2dlckNhbWVyYUFjY2VzcyIsIm9uQnV0dG9uQ2xpY2siLCJjYW52YXNSZWYiLCJ0b2dnbGVUb3BCYXIiLCJpbnRlcm5hbENhbnZhc1JlZiIsImFjdGl2ZUNhbnZhc1JlZiIsImN1cnJlbnREb3QiLCJzZXRDdXJyZW50RG90IiwiaXNDYXB0dXJpbmciLCJzZXRJc0NhcHR1cmluZyIsImNvdW50ZG93blZhbHVlIiwic2V0Q291bnRkb3duVmFsdWUiLCJyZW1haW5pbmdDYXB0dXJlcyIsInNldFJlbWFpbmluZ0NhcHR1cmVzIiwicHJvY2Vzc1N0YXR1cyIsInNldFByb2Nlc3NTdGF0dXMiLCJjYXB0dXJlQ291bnRlciIsInNldENhcHR1cmVDb3VudGVyIiwiY2FwdHVyZUZvbGRlciIsInNldENhcHR1cmVGb2xkZXIiLCJyYW5kb21UaW1lcyIsInNldFJhbmRvbVRpbWVzIiwiZGVsYXlTZWNvbmRzIiwic2V0RGVsYXlTZWNvbmRzIiwiY2FsaWJyYXRpb25Qb2ludHMiLCJzZXRDYWxpYnJhdGlvblBvaW50cyIsImN1cnJlbnRDYWxpYnJhdGlvbkluZGV4Iiwic2V0Q3VycmVudENhbGlicmF0aW9uSW5kZXgiLCJjYW52YXNWaXNpYmxlIiwic2V0Q2FudmFzVmlzaWJsZSIsImZvcmNlU2hvd0NvdW50ZG93biIsInNldEZvcmNlU2hvd0NvdW50ZG93biIsInRpbWVzdGFtcCIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsInJlcGxhY2UiLCJjb25zb2xlIiwibG9nIiwiY2FudmFzIiwiY3VycmVudCIsImVycm9yIiwiaGFzQ2FudmFzIiwiY2FudmFzSGVpZ2h0IiwiaGVpZ2h0IiwiY2FudmFzV2lkdGgiLCJ3aWR0aCIsInVwZGF0ZURpbWVuc2lvbnMiLCJwYXJlbnQiLCJwYXJlbnRFbGVtZW50IiwicGFyZW50V2lkdGgiLCJjbGllbnRXaWR0aCIsInBhcmVudEhlaWdodCIsImNsaWVudEhlaWdodCIsImN0eCIsImdldENvbnRleHQiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImRyYXdEb3QiLCJ4IiwieSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZ2V0UmFuZG9tUG9zaXRpb24iLCJwYWRkaW5nIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY29sb3IiLCJyYWRpdXMiLCJjbGVhclJlY3QiLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsImZpbGwiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsInN0cm9rZSIsInByZXYiLCJjbGVhckNhbnZhcyIsInNldFRpbWVvdXQiLCJzdGFydENvdW50ZG93biIsImNvdW50Iiwib25Db21wbGV0ZSIsInRpbWVyIiwiY2xlYXJUaW1lb3V0Iiwic2F2ZUltYWdlVG9TZXJ2ZXIiLCJpbWFnZURhdGEiLCJmaWxlbmFtZSIsInR5cGUiLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiZm9sZGVyIiwib2siLCJFcnJvciIsInN0YXR1cyIsInJlc3VsdCIsImpzb24iLCJjYXB0dXJlSW1hZ2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNjcmVlbkZpbGVuYW1lIiwiU3RyaW5nIiwicGFkU3RhcnQiLCJ3ZWJjYW1GaWxlbmFtZSIsInNjcmVlbkltYWdlIiwidG9EYXRhVVJMIiwidmlkZW9FbGVtZW50IiwidGVtcENhbnZhcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInZpZGVvV2lkdGgiLCJ2aWRlb0hlaWdodCIsImRyYXdJbWFnZSIsIndlYmNhbUltYWdlIiwibWVzc2FnZSIsImhhbmRsZVJhbmRvbURvdCIsInBvc2l0aW9uIiwiY2FudmFzUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNvdW50ZG93bkVsZW1lbnQiLCJjbGFzc05hbWUiLCJhYnNvbHV0ZVgiLCJsZWZ0IiwiYWJzb2x1dGVZIiwidG9wIiwic3R5bGUiLCJjc3NUZXh0IiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0Q29udGVudCIsImNvdW50ZG93bkludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwicmVtb3ZlIiwiaGFuZGxlU2V0UmFuZG9tIiwidGltZXMiLCJwYXJzZUludCIsImRlbGF5Iiwic2NoZWR1bGVSYW5kb21DYXB0dXJlcyIsInJlbWFpbmluZyIsInRvdGFsIiwiZ2VuZXJhdGVDYWxpYnJhdGlvblBvaW50cyIsImNvbmRpdGlvbmFsUm91bmQiLCJkaW1lbnNpb24iLCJwZXJjZW50YWdlIiwicm91bmQiLCJmaXJzdEZyYW1lUGVyY2VudGFnZSIsInNlY29uZEZyYW1lUGVyY2VudGFnZSIsInhMZWZ0Rmlyc3QiLCJ4UmlnaHRGaXJzdCIsInlUb3BGaXJzdCIsInlCb3R0b21GaXJzdCIsInhMZWZ0U2Vjb25kIiwieFJpZ2h0U2Vjb25kIiwieVRvcFNlY29uZCIsInlCb3R0b21TZWNvbmQiLCJoYW5kbGVTZXRDYWxpYnJhdGUiLCJwb2ludHMiLCJsZW5ndGgiLCJmaXJzdFBvaW50IiwibW92ZVRvTmV4dENhbGlicmF0aW9uUG9pbnQiLCJuZXh0SW5kZXgiLCJuZXh0UG9pbnQiLCJoYW5kbGVTY3JlZW5BY3Rpb24iLCJhY3Rpb25UeXBlIiwiYWN0aW9uSGFuZGxlcnMiLCJyYW5kb21Eb3QiLCJzZXRSYW5kb20iLCJjYWxpYnJhdGUiLCJjbGVhckFsbCIsImhhc1N0YXR1c1VwZGF0ZSIsImhhc0NhbWVyYUFjY2VzcyIsImhhc0J1dHRvbkNsaWNrIiwiaGFzQ2FudmFzUmVmIiwiaGFzVG9nZ2xlVG9wQmFyIiwiZGl2IiwiekluZGV4IiwiYmFja2dyb3VuZENvbG9yIiwib3ZlcmZsb3ciLCJib3JkZXIiLCJyZWYiLCJkaXNwbGF5IiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwidGV4dFNoYWRvdyIsImJvcmRlclJhZGl1cyIsImJveFNoYWRvdyIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsInRyYW5zZm9ybSIsInJpZ2h0IiwiYm90dG9tIiwiYnV0dG9uIiwib25DbGljayIsImN1cnNvciIsInNzciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-node)/./pages/collected-dataset/components-gui/WhiteScreenMain.js\n");

/***/ })

};
;
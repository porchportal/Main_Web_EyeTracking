"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_pages-dir-node_pages_collected-dataset_components-gui_WhiteScreenMain_js";
exports.ids = ["_pages-dir-node_pages_collected-dataset_components-gui_WhiteScreenMain_js"];
exports.modules = {

/***/ "(pages-dir-node)/./pages/collected-dataset/components-gui/WhiteScreenMain.js":
/*!*******************************************************************!*\
  !*** ./pages/collected-dataset/components-gui/WhiteScreenMain.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dynamic */ \"(pages-dir-node)/./node_modules/next/dynamic.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_2__);\n// components-gui/WhiteScreenMain.js\n\n\n\n// Create a client-only version of the component\nconst WhiteScreenMain = ({ onStatusUpdate, triggerCameraAccess, onButtonClick, canvasRef = null, toggleTopBar })=>{\n    // Use provided canvasRef or create a new one\n    const internalCanvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const activeCanvasRef = canvasRef || internalCanvasRef;\n    // Current dot state\n    const [currentDot, setCurrentDot] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isCapturing, setIsCapturing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [countdownValue, setCountdownValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [remainingCaptures, setRemainingCaptures] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [processStatus, setProcessStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    // Track capture session\n    const [captureCounter, setCaptureCounter] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [captureFolder] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('eye_tracking_captures'); // Fixed folder name\n    // Configuration state\n    const [randomTimes, setRandomTimes] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [delaySeconds, setDelaySeconds] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(3);\n    const [calibrationPoints, setCalibrationPoints] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [currentCalibrationIndex, setCurrentCalibrationIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    // Debug state to make visibility easier to track\n    const [canvasVisible, setCanvasVisible] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [forceShowCountdown, setForceShowCountdown] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Set up canvas when component mounts\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            // Skip if this runs during SSR\n            if (true) return;\n            const canvas = activeCanvasRef.current;\n            if (!canvas) {\n                console.error(\"Canvas ref is null in setup effect\");\n                return;\n            }\n            console.log(\"Canvas setup effect running\", {\n                hasCanvas: !!canvas,\n                canvasHeight: canvas.height,\n                canvasWidth: canvas.width\n            });\n            // Function to update canvas dimensions\n            const updateDimensions = {\n                \"WhiteScreenMain.useEffect.updateDimensions\": ()=>{\n                    const parent = canvas.parentElement;\n                    if (!parent) {\n                        console.error(\"Canvas parent is null\");\n                        return;\n                    }\n                    // Get the parent container dimensions\n                    const parentWidth = parent.clientWidth;\n                    const parentHeight = parent.clientHeight;\n                    console.log(\"Resizing canvas to:\", {\n                        parentWidth,\n                        parentHeight\n                    });\n                    canvas.width = parentWidth;\n                    canvas.height = parentHeight;\n                    // Clear the canvas and set background\n                    const ctx = canvas.getContext('2d');\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(0, 0, canvas.width, canvas.height);\n                    // Redraw current dot if exists\n                    if (currentDot) {\n                        console.log(\"Redrawing dot after resize:\", currentDot);\n                        drawDot(currentDot.x, currentDot.y, 'red', 8);\n                    }\n                    setCanvasVisible(true);\n                }\n            }[\"WhiteScreenMain.useEffect.updateDimensions\"];\n            // Add this helper function to show a preview of the captured images\n            const showCapturePreview = {\n                \"WhiteScreenMain.useEffect.showCapturePreview\": (screenImage, webcamImage, dotPosition)=>{\n                    if (!screenImage && !webcamImage) {\n                        console.warn(\"No images available to preview\");\n                        return;\n                    }\n                    // Remove any existing preview containers first (in case of overlapping)\n                    try {\n                        const existingPreviews = document.querySelectorAll('.capture-preview-container');\n                        existingPreviews.forEach({\n                            \"WhiteScreenMain.useEffect.showCapturePreview\": (preview)=>{\n                                if (preview.parentNode) {\n                                    console.log(\"Removing existing preview container\");\n                                    preview.parentNode.removeChild(preview);\n                                }\n                            }\n                        }[\"WhiteScreenMain.useEffect.showCapturePreview\"]);\n                    } catch (cleanupError) {\n                        console.error(\"Error cleaning up existing previews:\", cleanupError);\n                    }\n                    // Create a new preview container with z-index higher than everything else\n                    const previewContainer = document.createElement('div');\n                    previewContainer.className = 'capture-preview-container';\n                    previewContainer.style.cssText = `\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      display: flex;\n      gap: 20px;\n      background-color: rgba(0, 0, 0, 0.85);\n      padding: 20px;\n      border-radius: 12px;\n      z-index: 999999;\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.6);\n    `;\n                    console.log(\"Preview container created\");\n                    // Add debug info div\n                    const debugInfo = document.createElement('div');\n                    debugInfo.style.cssText = `\n      position: absolute;\n      top: -30px;\n      left: 0;\n      width: 100%;\n      color: white;\n      font-size: 12px;\n      text-align: center;\n    `;\n                    debugInfo.textContent = `Screen: ${screenImage ? 'YES' : 'NO'}, Webcam: ${webcamImage ? 'YES' : 'NO'}`;\n                    previewContainer.appendChild(debugInfo);\n                    // Function to add an image to the preview\n                    const addImagePreview = {\n                        \"WhiteScreenMain.useEffect.showCapturePreview.addImagePreview\": (image, label)=>{\n                            try {\n                                console.log(`Adding ${label} preview, image data length: ${image ? image.length : 'N/A'}`);\n                                const preview = document.createElement('div');\n                                preview.style.cssText = `\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        `;\n                                const img = document.createElement('img');\n                                img.src = image;\n                                img.alt = label;\n                                img.style.cssText = `\n          max-width: 320px;\n          max-height: 240px;\n          border: 3px solid white;\n          border-radius: 8px;\n          background-color: #333;\n        `;\n                                // Event listeners for image loading\n                                img.onload = ({\n                                    \"WhiteScreenMain.useEffect.showCapturePreview.addImagePreview\": ()=>console.log(`${label} image loaded successfully`)\n                                })[\"WhiteScreenMain.useEffect.showCapturePreview.addImagePreview\"];\n                                img.onerror = ({\n                                    \"WhiteScreenMain.useEffect.showCapturePreview.addImagePreview\": (e)=>console.error(`Error loading ${label} image:`, e)\n                                })[\"WhiteScreenMain.useEffect.showCapturePreview.addImagePreview\"];\n                                const labelElement = document.createElement('div');\n                                labelElement.textContent = label;\n                                labelElement.style.cssText = `\n          color: white;\n          font-size: 14px;\n          margin-top: 10px;\n          font-weight: bold;\n        `;\n                                preview.appendChild(img);\n                                preview.appendChild(labelElement);\n                                previewContainer.appendChild(preview);\n                                console.log(`${label} preview element added to container`);\n                                return true;\n                            } catch (error) {\n                                console.error(`Error adding ${label} preview:`, error);\n                                return false;\n                            }\n                        }\n                    }[\"WhiteScreenMain.useEffect.showCapturePreview.addImagePreview\"];\n                    // Add both images to preview if available\n                    if (screenImage) {\n                        addImagePreview(screenImage, 'Screen Capture');\n                    }\n                    if (webcamImage) {\n                        addImagePreview(webcamImage, 'Webcam Capture');\n                    }\n                    // Add dot position info if available\n                    if (dotPosition) {\n                        const positionInfo = document.createElement('div');\n                        positionInfo.textContent = `Dot position: x=${Math.round(dotPosition.x)}, y=${Math.round(dotPosition.y)}`;\n                        positionInfo.style.cssText = `\n        color: #ffcc00;\n        font-size: 14px;\n        position: absolute;\n        top: -50px;\n        left: 0;\n        width: 100%;\n        text-align: center;\n      `;\n                        previewContainer.appendChild(positionInfo);\n                        console.log(\"Dot position info added\");\n                    }\n                    // Add countdown timer\n                    const timerElement = document.createElement('div');\n                    timerElement.textContent = '2.0s';\n                    timerElement.style.cssText = `\n      position: absolute;\n      bottom: -25px;\n      right: 20px;\n      color: white;\n      font-size: 12px;\n      background-color: rgba(0, 0, 0, 0.7);\n      padding: 3px 8px;\n      border-radius: 4px;\n    `;\n                    previewContainer.appendChild(timerElement);\n                    // Add to document body\n                    try {\n                        document.body.appendChild(previewContainer);\n                        console.log(\"Preview container added to DOM\");\n                    } catch (appendError) {\n                        console.error(\"Error adding preview container to DOM:\", appendError);\n                    }\n                    // Countdown and remove the preview after 2 seconds\n                    let timeLeft = 2.0;\n                    const interval = setInterval({\n                        \"WhiteScreenMain.useEffect.showCapturePreview.interval\": ()=>{\n                            timeLeft -= 0.1;\n                            if (timeLeft <= 0) {\n                                clearInterval(interval);\n                                // Fade out\n                                previewContainer.style.transition = 'opacity 0.3s ease';\n                                previewContainer.style.opacity = '0';\n                                // Remove after fade\n                                setTimeout({\n                                    \"WhiteScreenMain.useEffect.showCapturePreview.interval\": ()=>{\n                                        if (previewContainer.parentNode) {\n                                            console.log(\"Removing preview container from DOM\");\n                                            previewContainer.parentNode.removeChild(previewContainer);\n                                        }\n                                    }\n                                }[\"WhiteScreenMain.useEffect.showCapturePreview.interval\"], 300);\n                            } else {\n                                timerElement.textContent = `${timeLeft.toFixed(1)}s`;\n                            }\n                        }\n                    }[\"WhiteScreenMain.useEffect.showCapturePreview.interval\"], 100);\n                    // Safety cleanup after 5 seconds in case anything goes wrong\n                    setTimeout({\n                        \"WhiteScreenMain.useEffect.showCapturePreview\": ()=>{\n                            if (previewContainer.parentNode) {\n                                console.log(\"Safety cleanup of preview container\");\n                                previewContainer.parentNode.removeChild(previewContainer);\n                            }\n                        }\n                    }[\"WhiteScreenMain.useEffect.showCapturePreview\"], 5000);\n                }\n            }[\"WhiteScreenMain.useEffect.showCapturePreview\"];\n            // Initial sizing\n            updateDimensions();\n            // Listen for window resize\n            window.addEventListener('resize', updateDimensions);\n            // Clean up\n            return ({\n                \"WhiteScreenMain.useEffect\": ()=>{\n                    window.removeEventListener('resize', updateDimensions);\n                }\n            })[\"WhiteScreenMain.useEffect\"];\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        activeCanvasRef,\n        currentDot\n    ]);\n    // Generate a random position on the canvas\n    const getRandomPosition = ()=>{\n        const canvas = activeCanvasRef.current;\n        if (!canvas) {\n            console.error(\"Canvas ref is null in getRandomPosition\");\n            return {\n                x: 100,\n                y: 100\n            }; // Fallback position\n        }\n        const width = canvas.width || 400; // Fallback if width is 0\n        const height = canvas.height || 300; // Fallback if height is 0\n        console.log(\"Canvas dimensions for random position:\", {\n            width,\n            height\n        });\n        // Ensure we're not too close to the edges\n        const padding = 40; // Increased padding\n        return {\n            x: Math.floor(Math.random() * (width - 2 * padding)) + padding,\n            y: Math.floor(Math.random() * (height - 2 * padding)) + padding\n        };\n    };\n    // Draw a dot on the canvas\n    const drawDot = (x, y, color = 'red', radius = 12)=>{\n        console.log(\"Drawing dot at:\", {\n            x,\n            y,\n            color,\n            radius\n        });\n        const canvas = activeCanvasRef.current;\n        if (!canvas) {\n            console.error(\"Canvas ref is null in drawDot\");\n            return null;\n        }\n        const ctx = canvas.getContext('2d');\n        // Clear canvas\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        // Draw dot with glow effect\n        ctx.beginPath();\n        ctx.arc(x, y, radius, 0, Math.PI * 2);\n        ctx.fillStyle = color;\n        ctx.fill();\n        // Add glow effect\n        ctx.beginPath();\n        ctx.arc(x, y, radius + 5, 0, Math.PI * 2); // Increased glow\n        ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)'; // More visible glow\n        ctx.lineWidth = 3; // Thicker line\n        ctx.stroke();\n        // Store current dot position - using callback form to ensure it updates\n        setCurrentDot((prev)=>{\n            console.log(\"Updating currentDot state from:\", prev, \"to:\", {\n                x,\n                y\n            });\n            return {\n                x,\n                y\n            };\n        });\n        return {\n            x,\n            y\n        };\n    };\n    // Clear the canvas\n    const clearCanvas = ()=>{\n        console.log(\"Clearing canvas\");\n        const canvas = activeCanvasRef.current;\n        if (!canvas) {\n            console.error(\"Canvas ref is null in clearCanvas\");\n            return;\n        }\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        setCurrentDot(null);\n        setCountdownValue(null);\n        setForceShowCountdown(false);\n        setProcessStatus('Canvas cleared');\n        // Clear the message after a delay\n        setTimeout(()=>{\n            setProcessStatus('');\n        }, 1500);\n    };\n    // Start countdown timer\n    const startCountdown = (count, onComplete)=>{\n        console.log(\"Starting countdown from:\", count);\n        // Set countdown value in state\n        setCountdownValue(count);\n        setForceShowCountdown(true);\n        setIsCapturing(true);\n        // Update status for parent component\n        if (onStatusUpdate) {\n            onStatusUpdate({\n                countdownValue: count,\n                processStatus: `Countdown: ${count}`,\n                isCapturing: true\n            });\n        }\n        const timer = setTimeout(()=>{\n            if (count > 1) {\n                startCountdown(count - 1, onComplete);\n            } else {\n                // Final countdown step\n                console.log(\"Countdown finished, clearing countdown display\");\n                setCountdownValue(null);\n                setForceShowCountdown(false);\n                // Update status for parent component\n                if (onStatusUpdate) {\n                    onStatusUpdate({\n                        countdownValue: null,\n                        processStatus: 'Capturing...',\n                        isCapturing: true\n                    });\n                }\n                // Execute completion callback immediately\n                if (onComplete) {\n                    console.log(\"Executing completion callback\");\n                    onComplete();\n                }\n            }\n        }, 800);\n        return ()=>clearTimeout(timer);\n    };\n    // Save an image to the server\n    const saveImageToServer = async (imageData, filename, type)=>{\n        try {\n            console.log(`Attempting to save ${type} image: ${filename}`);\n            const response = await fetch('/api/save-capture', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    imageData,\n                    filename,\n                    type,\n                    folder: captureFolder\n                })\n            });\n            if (!response.ok) {\n                throw new Error(`Server responded with ${response.status}`);\n            }\n            const result = await response.json();\n            console.log(`Saved ${type} image:`, result);\n            // If the server returns a new capture number, update our counter\n            if (result.captureNumber) {\n                setCaptureCounter(result.captureNumber + 1);\n            }\n            return result;\n        } catch (error) {\n            console.error(`Error saving ${type} image:`, error);\n            throw error;\n        }\n    };\n    // Modified captureImage function in WhiteScreenMain.js\n    // Modified captureImage function for WhiteScreenMain.js\n    // Fixed captureImage function for WhiteScreenMain.js\n    const captureImage = async ()=>{\n        console.log(\"Capturing images...\");\n        setIsCapturing(true);\n        try {\n            // Generate filenames with counter\n            const screenFilename = `screen_${String(captureCounter).padStart(3, '0')}.jpg`;\n            const webcamFilename = `webcam_${String(captureCounter).padStart(3, '0')}.jpg`;\n            const parameterFilename = `parameter_${String(captureCounter).padStart(3, '0')}.csv`;\n            // Capture screen image (canvas with dot)\n            const canvas = activeCanvasRef.current;\n            let screenImage = null;\n            if (canvas) {\n                console.log(\"Capturing screen from canvas\");\n                screenImage = canvas.toDataURL('image/png');\n                await saveImageToServer(screenImage, screenFilename, 'screen');\n                console.log(`Saved screen image: ${screenFilename}`);\n            } else {\n                console.error(\"Cannot capture screen - canvas ref is null\");\n            }\n            // Capture webcam image if available\n            let webcamImage = null;\n            if (window.videoElement) {\n                console.log(\"Capturing from webcam\");\n                const tempCanvas = document.createElement('canvas');\n                const ctx = tempCanvas.getContext('2d');\n                tempCanvas.width = window.videoElement.videoWidth;\n                tempCanvas.height = window.videoElement.videoHeight;\n                ctx.drawImage(window.videoElement, 0, 0, tempCanvas.width, tempCanvas.height);\n                webcamImage = tempCanvas.toDataURL('image/png');\n                await saveImageToServer(webcamImage, webcamFilename, 'webcam');\n                console.log(`Saved webcam image: ${webcamFilename}`);\n            } else {\n                // Try to silently capture from webcam\n                try {\n                    // Create a temporary stream for just this capture\n                    const stream = await navigator.mediaDevices.getUserMedia({\n                        video: true,\n                        audio: false\n                    });\n                    // Create a hidden video element to receive the stream\n                    const tempVideo = document.createElement('video');\n                    tempVideo.autoplay = true;\n                    tempVideo.playsInline = true;\n                    tempVideo.muted = true;\n                    tempVideo.style.position = 'absolute';\n                    tempVideo.style.left = '-9999px'; // Position off-screen\n                    tempVideo.style.opacity = '0';\n                    document.body.appendChild(tempVideo);\n                    // Set the stream to the video element\n                    tempVideo.srcObject = stream;\n                    // Wait for video to initialize\n                    await new Promise((resolve)=>{\n                        const timeoutId = setTimeout(()=>{\n                            console.warn(\"Video loading timed out, continuing anyway\");\n                            resolve();\n                        }, 1000);\n                        tempVideo.onloadeddata = ()=>{\n                            clearTimeout(timeoutId);\n                            resolve();\n                        };\n                    });\n                    // Small delay to ensure a clear frame\n                    await new Promise((resolve)=>setTimeout(resolve, 200));\n                    // Capture the frame to a canvas\n                    const tempCanvas = document.createElement('canvas');\n                    tempCanvas.width = tempVideo.videoWidth || 640;\n                    tempCanvas.height = tempVideo.videoHeight || 480;\n                    const ctx = tempCanvas.getContext('2d');\n                    ctx.drawImage(tempVideo, 0, 0, tempCanvas.width, tempCanvas.height);\n                    // Get image data\n                    webcamImage = tempCanvas.toDataURL('image/png');\n                    console.log(`Captured webcam silently: ${webcamFilename}`);\n                    await saveImageToServer(webcamImage, webcamFilename, 'webcam');\n                    // IMPORTANT: Clean up - stop stream and remove video element\n                    stream.getTracks().forEach((track)=>track.stop());\n                    tempVideo.srcObject = null;\n                    if (tempVideo.parentNode) {\n                        tempVideo.parentNode.removeChild(tempVideo);\n                    }\n                } catch (webcamError) {\n                    console.log(\"Webcam element not available and silent capture failed:\", webcamError);\n                }\n            }\n            // Save parameters to CSV\n            try {\n                // Create CSV content with two columns: name and value\n                const csvData = [\n                    \"name,value\",\n                    `dot_x,${currentDot ? currentDot.x : 0}`,\n                    `dot_y,${currentDot ? currentDot.y : 0}`,\n                    `canvas_width,${canvas ? canvas.width : 0}`,\n                    `canvas_height,${canvas ? canvas.height : 0}`,\n                    `window_width,${window.innerWidth}`,\n                    `window_height,${window.innerHeight}`,\n                    `timestamp,${new Date().toISOString()}`\n                ].join('\\n');\n                // Convert CSV to data URL\n                const csvBlob = new Blob([\n                    csvData\n                ], {\n                    type: 'text/csv'\n                });\n                const csvReader = new FileReader();\n                const csvDataUrl = await new Promise((resolve)=>{\n                    csvReader.onloadend = ()=>resolve(csvReader.result);\n                    csvReader.readAsDataURL(csvBlob);\n                });\n                // Save CSV using the same API\n                await saveImageToServer(csvDataUrl, parameterFilename, 'parameters');\n                console.log(`Saved parameters CSV: ${parameterFilename}`);\n            } catch (csvError) {\n                console.error(\"Error saving parameter CSV:\", csvError);\n            }\n            // THIS IS THE MISSING PIECE - Show preview after capturing\n            console.log(\"Showing image preview with:\", {\n                hasScreenImage: !!screenImage,\n                hasWebcamImage: !!webcamImage\n            });\n            showCapturePreview(screenImage, webcamImage, currentDot);\n            // Increment the counter for next capture\n            setCaptureCounter((prev)=>prev + 1);\n            // Update status\n            setIsCapturing(false);\n            setProcessStatus(`Captured with dot at: x=${currentDot?.x}, y=${currentDot?.y}`);\n            // Update parent component\n            if (onStatusUpdate) {\n                onStatusUpdate(`Images and parameters saved for capture #${captureCounter}`);\n            }\n            // Show TopBar again after capture with a delay to let preview finish\n            setTimeout(()=>{\n                console.log(\"Showing TopBar after capture\");\n                if (typeof toggleTopBar === 'function') {\n                    toggleTopBar(true);\n                } else if (false) {}\n            }, 2500); // Increased to wait for preview to finish\n        } catch (error) {\n            console.error('Error during capture:', error);\n            setIsCapturing(false);\n            setProcessStatus('Error capturing images: ' + error.message);\n        }\n        // Clear status after a delay\n        setTimeout(()=>{\n            setProcessStatus('');\n        }, 3000);\n    };\n    // Add this new function to show a preview of captured images\n    const showCapturePreview = (screenImage, webcamImage, dotPosition)=>{\n        if (!screenImage && !webcamImage) return;\n        // Create a container for the preview\n        const previewContainer = document.createElement('div');\n        previewContainer.style.cssText = `\n      position: fixed;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      display: flex;\n      gap: 20px;\n      background-color: rgba(0, 0, 0, 0.85);\n      padding: 20px;\n      border-radius: 12px;\n      z-index: 9999;\n      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.6);\n    `;\n        // Add screen image preview\n        if (screenImage) {\n            const screenPreview = document.createElement('div');\n            screenPreview.style.cssText = `\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      `;\n            const screenImg = document.createElement('img');\n            screenImg.src = screenImage;\n            screenImg.style.cssText = `\n        max-width: 300px;\n        max-height: 200px;\n        border: 3px solid white;\n        border-radius: 8px;\n      `;\n            const screenLabel = document.createElement('div');\n            screenLabel.textContent = 'Screen Capture';\n            screenLabel.style.cssText = `\n        color: white;\n        font-size: 14px;\n        margin-top: 10px;\n        font-weight: bold;\n      `;\n            screenPreview.appendChild(screenImg);\n            screenPreview.appendChild(screenLabel);\n            previewContainer.appendChild(screenPreview);\n        }\n        // Add webcam image preview\n        if (webcamImage) {\n            const webcamPreview = document.createElement('div');\n            webcamPreview.style.cssText = `\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      `;\n            const webcamImg = document.createElement('img');\n            webcamImg.src = webcamImage;\n            webcamImg.style.cssText = `\n        max-width: 300px;\n        max-height: 200px;\n        border: 3px solid white;\n        border-radius: 8px;\n      `;\n            const webcamLabel = document.createElement('div');\n            webcamLabel.textContent = 'Webcam Capture';\n            webcamLabel.style.cssText = `\n        color: white;\n        font-size: 14px;\n        margin-top: 10px;\n        font-weight: bold;\n      `;\n            webcamPreview.appendChild(webcamImg);\n            webcamPreview.appendChild(webcamLabel);\n            previewContainer.appendChild(webcamPreview);\n        }\n        // Add position indicator if available\n        if (dotPosition) {\n            const positionInfo = document.createElement('div');\n            positionInfo.textContent = `Dot position: x=${Math.round(dotPosition.x)}, y=${Math.round(dotPosition.y)}`;\n            positionInfo.style.cssText = `\n        color: #ffcc00;\n        font-size: 14px;\n        position: absolute;\n        top: -30px;\n        left: 0;\n        width: 100%;\n        text-align: center;\n      `;\n            previewContainer.appendChild(positionInfo);\n        }\n        // Add the preview to the document\n        document.body.appendChild(previewContainer);\n        // Remove preview after 2 seconds\n        setTimeout(()=>{\n            document.body.removeChild(previewContainer);\n        }, 2000);\n    };\n    // Random Dot action\n    const handleRandomDot = ()=>{\n        // Hide the TopBar before showing dot\n        if (typeof toggleTopBar === 'function') {\n            toggleTopBar(false);\n        } else if (false) {}\n        setIsCapturing(true);\n        setProcessStatus('Generating random dot...');\n        // Give the component time to update\n        setTimeout(()=>{\n            const canvas = activeCanvasRef.current;\n            if (canvas) {\n                // Make sure canvas dimensions are properly set\n                const parent = canvas.parentElement;\n                if (parent) {\n                    canvas.width = parent.clientWidth;\n                    canvas.height = parent.clientHeight;\n                }\n                // Clear any previous content\n                const ctx = canvas.getContext('2d');\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                ctx.fillStyle = 'white';\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n                // Generate random position\n                const position = getRandomPosition();\n                // Draw the dot with a larger radius for visibility\n                ctx.beginPath();\n                ctx.arc(position.x, position.y, 12, 0, Math.PI * 2);\n                ctx.fillStyle = 'red';\n                ctx.fill();\n                // Add glow effect to the dot\n                ctx.beginPath();\n                ctx.arc(position.x, position.y, 15, 0, Math.PI * 2);\n                ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)';\n                ctx.lineWidth = 3;\n                ctx.stroke();\n                // Store current dot position directly\n                setCurrentDot(position);\n                // Get the canvas position relative to the viewport\n                const canvasRect = canvas.getBoundingClientRect();\n                // IMPORTANT: Create the countdown element directly above the dot\n                const countdownElement = document.createElement('div');\n                countdownElement.className = 'forced-countdown';\n                // Position it above the dot (calculate absolute position considering the canvas position)\n                const absoluteX = canvasRect.left + position.x;\n                const absoluteY = canvasRect.top + position.y;\n                countdownElement.style.cssText = `\n          position: fixed;\n          left: ${absoluteX}px;\n          top: ${absoluteY - 60}px;\n          transform: translateX(-50%);\n          color: red;\n          font-size: 36px;\n          font-weight: bold;\n          text-shadow: 0 0 10px white, 0 0 20px white;\n          z-index: 9999;\n          background-color: rgba(255, 255, 255, 0.8);\n          border: 2px solid red;\n          border-radius: 50%;\n          width: 50px;\n          height: 50px;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n        `;\n                document.body.appendChild(countdownElement);\n                // Manual countdown implementation\n                let count = 3;\n                countdownElement.textContent = count;\n                const countdownInterval = setInterval(()=>{\n                    count--;\n                    if (count <= 0) {\n                        clearInterval(countdownInterval);\n                        countdownElement.remove();\n                        captureImage(); // Proceed with capture\n                    } else {\n                        countdownElement.textContent = count;\n                    }\n                }, 800);\n            }\n        }, 200);\n    };\n    // Multiple random dots sequence\n    const handleSetRandom = ()=>{\n        if (isCapturing) return;\n        // Parse input values (use defaults if invalid)\n        const times = parseInt(randomTimes) || 1;\n        const delay = parseInt(delaySeconds) || 3;\n        if (times <= 0 || delay <= 0) {\n            setProcessStatus('Please use positive values for times and delay');\n            return;\n        }\n        setIsCapturing(true);\n        setRemainingCaptures(times);\n        setProcessStatus(`Starting ${times} random captures...`);\n        // Start sequence\n        scheduleRandomCaptures(times, times, delay);\n    };\n    // Schedule sequence of random captures\n    const scheduleRandomCaptures = (remaining, total, delay)=>{\n        if (remaining <= 0) {\n            setIsCapturing(false);\n            setRemainingCaptures(0);\n            setProcessStatus('Random capture sequence completed');\n            // Clear status after a delay\n            setTimeout(()=>{\n                setProcessStatus('');\n            }, 2000);\n            return;\n        }\n        setRemainingCaptures(remaining);\n        setProcessStatus(`Capture ${total - remaining + 1} of ${total}`);\n        // Generate random position and draw\n        const position = getRandomPosition();\n        drawDot(position.x, position.y);\n        // Start countdown and capture\n        startCountdown(3, ()=>{\n            captureImage();\n            // Schedule next capture\n            setTimeout(()=>{\n                scheduleRandomCaptures(remaining - 1, total, delay);\n            }, delay * 1000);\n        });\n    };\n    // Generate calibration points\n    const generateCalibrationPoints = ()=>{\n        const canvas = activeCanvasRef.current;\n        if (!canvas) return [];\n        const width = canvas.width;\n        const height = canvas.height;\n        // Helper function for rounding\n        const conditionalRound = (dimension, percentage)=>{\n            return Math.round(dimension * percentage);\n        };\n        // Define percentage values for outer and inner frames\n        const firstFramePercentage = 0.12; // Outer frame at 12% from edges\n        const secondFramePercentage = 0.26; // Inner frame at 26% from edges\n        // Calculate points for outer frame (first frame)\n        const xLeftFirst = conditionalRound(width, firstFramePercentage);\n        const xRightFirst = width - conditionalRound(width, firstFramePercentage);\n        const yTopFirst = conditionalRound(height, firstFramePercentage);\n        const yBottomFirst = height - conditionalRound(height, firstFramePercentage);\n        // Calculate points for inner frame (second frame)\n        const xLeftSecond = conditionalRound(width, secondFramePercentage);\n        const xRightSecond = width - conditionalRound(width, secondFramePercentage);\n        const yTopSecond = conditionalRound(height, secondFramePercentage);\n        const yBottomSecond = height - conditionalRound(height, secondFramePercentage);\n        // Return array of points in specific order\n        return [\n            // First frame - outer points\n            {\n                x: xLeftFirst,\n                y: yTopFirst\n            },\n            {\n                x: Math.floor(width / 2),\n                y: yTopFirst\n            },\n            {\n                x: xRightFirst,\n                y: yTopFirst\n            },\n            {\n                x: xLeftFirst,\n                y: Math.floor(height / 2)\n            },\n            {\n                x: xRightFirst,\n                y: Math.floor(height / 2)\n            },\n            {\n                x: xLeftFirst,\n                y: yBottomFirst\n            },\n            {\n                x: Math.floor(width / 2),\n                y: yBottomFirst\n            },\n            {\n                x: xRightFirst,\n                y: yBottomFirst\n            },\n            // Second frame - inner points\n            {\n                x: xLeftSecond,\n                y: yTopSecond\n            },\n            {\n                x: Math.floor(width / 2),\n                y: yTopSecond\n            },\n            {\n                x: xRightSecond,\n                y: yTopSecond\n            },\n            {\n                x: xLeftSecond,\n                y: Math.floor(height / 2)\n            },\n            {\n                x: xRightSecond,\n                y: Math.floor(height / 2)\n            },\n            {\n                x: xLeftSecond,\n                y: yBottomSecond\n            },\n            {\n                x: Math.floor(width / 2),\n                y: yBottomSecond\n            },\n            {\n                x: xRightSecond,\n                y: yBottomSecond\n            }\n        ];\n    };\n    // In WhiteScreenMain.js - Update the useEffect for button click registration\n    // Make sure the calibrate action is properly registered\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            // Skip during SSR\n            if (true) return;\n            console.log(\"Registering action handlers with parent\");\n            if (onButtonClick) {\n                // Create action handlers with proper method references\n                const actionHandlers = {\n                    randomDot: handleRandomDot,\n                    setRandom: handleSetRandom,\n                    calibrate: handleSetCalibrate,\n                    clearAll: clearCanvas\n                };\n                // Store in parent component context\n                onButtonClick('registerActions', actionHandlers);\n                // Also make them globally available for direct access\n                window.whiteScreenActions = actionHandlers;\n            }\n            // Cleanup on unmount\n            return ({\n                \"WhiteScreenMain.useEffect\": ()=>{\n                    if (false) {}\n                }\n            })[\"WhiteScreenMain.useEffect\"];\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        onButtonClick\n    ]);\n    // Add this import at the top of WhiteScreenMain.js\n    // Replace the handleSetCalibrate function with this improved version\n    const handleSetCalibrate = async ()=>{\n        try {\n            // STEP 1: HIDE THE TOP BAR IMMEDIATELY (before anything else happens)\n            if (typeof toggleTopBar === 'function') {\n                toggleTopBar(false);\n            } else if (false) {}\n            // Add a small delay to ensure UI updates\n            await new Promise((resolve)=>setTimeout(resolve, 50));\n            // STEP 2: Initial setup\n            setIsCapturing(true);\n            setProcessStatus('Starting calibration sequence...');\n            if (onStatusUpdate) {\n                onStatusUpdate({\n                    processStatus: 'Starting calibration sequence',\n                    isCapturing: true\n                });\n            }\n            // Create a status indicator\n            const statusIndicator = document.createElement('div');\n            statusIndicator.className = 'calibrate-status-indicator';\n            statusIndicator.style.cssText = `\n        position: fixed;\n        top: 10px;\n        right: 10px;\n        background-color: rgba(0, 102, 204, 0.9);\n        color: white;\n        font-size: 14px;\n        font-weight: bold;\n        padding: 8px 12px;\n        border-radius: 6px;\n        z-index: 9999;\n        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n      `;\n            statusIndicator.textContent = 'Calibrate Set Active: Initializing...';\n            document.body.appendChild(statusIndicator);\n            // STEP 3: Setup canvas and generate points\n            const canvas = activeCanvasRef.current;\n            if (!canvas) {\n                throw new Error(\"Canvas reference is null\");\n            }\n            // Ensure canvas dimensions are set\n            const parent = canvas.parentElement;\n            if (parent) {\n                canvas.width = parent.clientWidth;\n                canvas.height = parent.clientHeight;\n            }\n            console.log(\"Canvas dimensions for calibration:\", {\n                width: canvas.width,\n                height: canvas.height\n            });\n            // Generate calibration points using the imported function\n            const points = generateCalibrationPoints(canvas.width, canvas.height);\n            setCalibrationPoints(points);\n            console.log(`Generated ${points.length} calibration points`);\n            if (!points || points.length === 0) {\n                throw new Error('Failed to generate calibration points');\n            }\n            setRemainingCaptures(points.length);\n            // STEP 4: Process each calibration point in sequence\n            for(let i = 0; i < points.length; i++){\n                // Update state\n                setCurrentCalibrationIndex(i);\n                setRemainingCaptures(points.length - i);\n                // Update status\n                const statusText = `Calibration ${i + 1}/${points.length}`;\n                setProcessStatus(statusText);\n                statusIndicator.textContent = `Calibrate Set Active: Processing point ${i + 1}/${points.length}`;\n                if (onStatusUpdate) {\n                    onStatusUpdate(statusText);\n                }\n                // STEP 5: Draw the red dot FIRST, before any countdown\n                const point = points[i];\n                drawDot(point.x, point.y);\n                // Wait a moment to ensure dot is visible\n                await new Promise((resolve)=>setTimeout(resolve, 50));\n                // STEP 6: Get canvas position for absolute positioning\n                const canvasRect = canvas.getBoundingClientRect();\n                // Create countdown element above the dot\n                const countdownElement = document.createElement('div');\n                countdownElement.className = 'calibrate-countdown';\n                // Position it above the dot\n                const absoluteX = canvasRect.left + point.x;\n                const absoluteY = canvasRect.top + point.y;\n                countdownElement.style.cssText = `\n          position: fixed;\n          left: ${absoluteX}px;\n          top: ${absoluteY - 60}px;\n          transform: translateX(-50%);\n          color: red;\n          font-size: 36px;\n          font-weight: bold;\n          text-shadow: 0 0 10px white, 0 0 20px white;\n          z-index: 9999;\n          background-color: rgba(255, 255, 255, 0.8);\n          border: 2px solid red;\n          border-radius: 50%;\n          width: 50px;\n          height: 50px;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n        `;\n                document.body.appendChild(countdownElement);\n                // STEP 7: Run 3-2-1 countdown (the dot stays visible during this time)\n                for(let count = 3; count > 0; count--){\n                    countdownElement.textContent = count;\n                    statusIndicator.textContent = `Calibrate Set Active: countdown ${count} (${i + 1}/${points.length})`;\n                    // Wait for next countdown step\n                    await new Promise((resolve)=>setTimeout(resolve, 800));\n                }\n                // STEP 8: Show capturing indicator\n                countdownElement.textContent = \"✓\";\n                statusIndicator.textContent = `Capturing point ${i + 1}/${points.length}`;\n                // STEP 9: Remove countdown element but KEEP the dot visible\n                setTimeout(()=>{\n                    if (countdownElement.parentNode) {\n                        countdownElement.parentNode.removeChild(countdownElement);\n                    }\n                }, 300);\n                // STEP 10: Capture images (the dot is still visible)\n                await captureImage();\n                // STEP 11: Wait for preview to complete before moving to next point\n                // During this time, the dot remains visible\n                await new Promise((resolve)=>setTimeout(resolve, 2300));\n            }\n            // STEP 12: Calibration complete\n            statusIndicator.textContent = 'Calibration completed';\n            setProcessStatus('Calibration completed');\n            if (onStatusUpdate) {\n                onStatusUpdate('Calibration completed successfully');\n            }\n            setRemainingCaptures(0);\n            // Remove status indicator after a delay\n            setTimeout(()=>{\n                if (statusIndicator.parentNode) {\n                    statusIndicator.parentNode.removeChild(statusIndicator);\n                }\n            }, 3000);\n        } catch (error) {\n            console.error('Calibration error:', error);\n            setProcessStatus(`Error: ${error.message}`);\n            if (onStatusUpdate) {\n                onStatusUpdate(`Calibration error: ${error.message}`);\n            }\n        } finally{\n            setIsCapturing(false);\n            // Show TopBar again\n            if (typeof toggleTopBar === 'function') {\n                toggleTopBar(true);\n            } else if (false) {}\n        }\n    };\n    // Fix for startCountdown function to hide TopBar immediately\n    // const startCountdown = (count, onComplete) => {\n    //   console.log(\"Starting countdown from:\", count);\n    //   // Hide TopBar immediately when countdown starts\n    //   if (typeof toggleTopBar === 'function') {\n    //     toggleTopBar(false);\n    //   } else if (typeof window !== 'undefined' && window.toggleTopBar) {\n    //     window.toggleTopBar(false);\n    //   }\n    //   // Set countdown value in state\n    //   setCountdownValue(count);\n    //   setForceShowCountdown(true);\n    //   setIsCapturing(true);\n    //   // Update status for parent component\n    //   if (onStatusUpdate) {\n    //     onStatusUpdate({\n    //       countdownValue: count,\n    //       processStatus: `Countdown: ${count}`,\n    //       isCapturing: true\n    //     });\n    //   }\n    //   const timer = setTimeout(() => {\n    //     if (count > 1) {\n    //       startCountdown(count - 1, onComplete);\n    //     } else {\n    //       // Final countdown step\n    //       console.log(\"Countdown finished, clearing countdown display\");\n    //       setCountdownValue(null);\n    //       setForceShowCountdown(false);\n    //       // Update status for parent component\n    //       if (onStatusUpdate) {\n    //         onStatusUpdate({\n    //           countdownValue: null,\n    //           processStatus: 'Capturing...',\n    //           isCapturing: true\n    //         });\n    //       }\n    //       // Execute completion callback immediately\n    //       if (onComplete) {\n    //         console.log(\"Executing completion callback\");\n    //         onComplete();\n    //       }\n    //     }\n    //   }, 800);\n    //   return () => clearTimeout(timer);\n    // };\n    // Move to next calibration point\n    const moveToNextCalibrationPoint = ()=>{\n        const nextIndex = currentCalibrationIndex + 1;\n        // Check if we're done\n        if (nextIndex >= calibrationPoints.length) {\n            setIsCapturing(false);\n            setRemainingCaptures(0);\n            setProcessStatus('Calibration completed');\n            // Clear status after a delay\n            setTimeout(()=>{\n                setProcessStatus('');\n            }, 2000);\n            return;\n        }\n        // Update state and progress\n        setCurrentCalibrationIndex(nextIndex);\n        setRemainingCaptures(calibrationPoints.length - nextIndex);\n        setProcessStatus(`Calibration ${nextIndex + 1}/${calibrationPoints.length}`);\n        // Draw next point\n        const nextPoint = calibrationPoints[nextIndex];\n        drawDot(nextPoint.x, nextPoint.y);\n        // Start countdown for this point\n        startCountdown(3, ()=>{\n            captureImage();\n            setTimeout(()=>moveToNextCalibrationPoint(), 1000);\n        });\n    };\n    // Map button clicks to appropriate handlers\n    const handleScreenAction = (actionType)=>{\n        console.log(`Screen action received: ${actionType}`);\n        switch(actionType){\n            case 'randomDot':\n                handleRandomDot();\n                break;\n            case 'setRandom':\n                handleSetRandom();\n                break;\n            case 'calibrate':\n                handleSetCalibrate();\n                break;\n            case 'clearAll':\n                clearCanvas();\n                break;\n            default:\n                // Forward to parent if not handled here\n                if (onButtonClick) {\n                    onButtonClick(actionType);\n                }\n        }\n    };\n    // // Pass actions up to parent component\n    // useEffect(() => {\n    //   // Skip during SSR\n    //   if (typeof window === 'undefined') return;\n    //   console.log(\"Registering action handlers with parent\");\n    //   if (onButtonClick) {\n    //     // Create action handlers\n    //     const actionHandlers = {\n    //       randomDot: handleRandomDot,\n    //       setRandom: handleSetRandom,\n    //       calibrate: handleSetCalibrate,\n    //       clearAll: clearCanvas\n    //     };\n    //     // Store in parent component context\n    //     onButtonClick('registerActions', actionHandlers);\n    //   }\n    // }, [onButtonClick]);\n    // Update parent with status changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            if (onStatusUpdate && processStatus) {\n                onStatusUpdate(processStatus);\n            }\n        }\n    }[\"WhiteScreenMain.useEffect\"], [\n        processStatus,\n        onStatusUpdate\n    ]);\n    // Log when component mounts to verify it's being rendered\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"WhiteScreenMain.useEffect\": ()=>{\n            console.log(\"WhiteScreenMain component mounted\");\n            console.log(\"Props:\", {\n                hasStatusUpdate: !!onStatusUpdate,\n                hasCameraAccess: !!triggerCameraAccess,\n                hasButtonClick: !!onButtonClick,\n                hasCanvasRef: !!canvasRef,\n                hasToggleTopBar: !!toggleTopBar\n            });\n            return ({\n                \"WhiteScreenMain.useEffect\": ()=>{\n                    console.log(\"WhiteScreenMain component unmounting\");\n                }\n            })[\"WhiteScreenMain.useEffect\"];\n        }\n    }[\"WhiteScreenMain.useEffect\"], []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"white-screen-container\",\n        style: {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            zIndex: 50,\n            backgroundColor: 'rgba(255, 255, 255, 0.5)' // Slight transparency to see if it's rendered\n        },\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"white-screen-canvas-container\",\n            style: {\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                width: '100%',\n                height: '100%',\n                backgroundColor: 'white',\n                overflow: 'hidden',\n                border: '1px solid #ccc',\n                zIndex: 51\n            },\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n                    ref: canvasRef ? canvasRef : internalCanvasRef,\n                    className: \"white-screen-canvas\",\n                    style: {\n                        width: '100%',\n                        height: '100%',\n                        display: 'block'\n                    }\n                }, void 0, false, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 1337,\n                    columnNumber: 9\n                }, undefined),\n                (countdownValue !== null || forceShowCountdown) && currentDot && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"dot-countdown\",\n                    style: {\n                        position: 'absolute',\n                        left: `${currentDot.x - 30}px`,\n                        top: `${currentDot.y - 70}px`,\n                        color: 'red',\n                        fontSize: '48px',\n                        fontWeight: 'bold',\n                        textShadow: '0 0 10px white, 0 0 20px white',\n                        zIndex: 999,\n                        backgroundColor: 'rgba(255, 255, 255, 0.8)',\n                        padding: '10px 20px',\n                        borderRadius: '50%',\n                        boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n                        width: '60px',\n                        height: '60px',\n                        display: 'flex',\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        border: '2px solid red' // Border to make it stand out\n                    },\n                    children: countdownValue || 3\n                }, void 0, false, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 1349,\n                    columnNumber: 11\n                }, undefined),\n                (countdownValue !== null || forceShowCountdown) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"center-countdown-backup\",\n                    style: {\n                        position: 'fixed',\n                        top: '50%',\n                        left: '50%',\n                        transform: 'translate(-50%, -50%)',\n                        color: 'white',\n                        fontSize: '120px',\n                        fontWeight: 'bold',\n                        textShadow: '0 0 20px black',\n                        zIndex: 1000,\n                        backgroundColor: 'rgba(255, 0, 0, 0.7)',\n                        width: '200px',\n                        height: '200px',\n                        borderRadius: '50%',\n                        display: 'flex',\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                        boxShadow: '0 0 30px rgba(0, 0, 0, 0.5)'\n                    },\n                    children: countdownValue || 3\n                }, void 0, false, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 1378,\n                    columnNumber: 11\n                }, undefined),\n                currentDot && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"dot-indicator\",\n                    style: {\n                        position: 'absolute',\n                        top: '10px',\n                        right: '10px',\n                        backgroundColor: 'rgba(0, 255, 0, 0.7)',\n                        color: 'black',\n                        padding: '5px 10px',\n                        borderRadius: '4px',\n                        fontSize: '12px',\n                        zIndex: 52\n                    },\n                    children: [\n                        \"Dot at x:\",\n                        currentDot.x,\n                        \", y:\",\n                        currentDot.y\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 1406,\n                    columnNumber: 11\n                }, undefined),\n                (processStatus || remainingCaptures > 0) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"status-overlay\",\n                    style: {\n                        position: 'absolute',\n                        bottom: '10px',\n                        left: '10px',\n                        backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                        color: 'white',\n                        padding: '10px 15px',\n                        borderRadius: '4px',\n                        fontSize: '16px',\n                        fontWeight: 'bold',\n                        boxShadow: '0 4px 8px rgba(0,0,0,0.3)',\n                        zIndex: 53\n                    },\n                    children: [\n                        processStatus && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: processStatus\n                        }, void 0, false, {\n                            fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                            lineNumber: 1442,\n                            columnNumber: 31\n                        }, undefined),\n                        remainingCaptures > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                color: '#ffcc00'\n                            },\n                            children: [\n                                \"Remaining: \",\n                                remainingCaptures\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                            lineNumber: 1444,\n                            columnNumber: 15\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 1426,\n                    columnNumber: 11\n                }, undefined),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"canvas-indicator\",\n                    style: {\n                        position: 'absolute',\n                        top: '10px',\n                        left: '10px',\n                        backgroundColor: canvasVisible ? 'rgba(0, 255, 0, 0.7)' : 'rgba(255, 0, 0, 0.7)',\n                        color: 'black',\n                        padding: '5px 10px',\n                        borderRadius: '4px',\n                        fontSize: '12px',\n                        zIndex: 52\n                    },\n                    children: [\n                        \"Canvas: \",\n                        canvasVisible ? 'Visible' : 'Hidden'\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n                    lineNumber: 1452,\n                    columnNumber: 9\n                }, undefined)\n            ]\n        }, void 0, true, {\n            fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n            lineNumber: 1322,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"/Users/porchportal2/Desktop/\\uD83D\\uDD25everything/Main_Web_EyeTracking/main-web/frontend/pages/collected-dataset/components-gui/WhiteScreenMain.js\",\n        lineNumber: 1312,\n        columnNumber: 5\n    }, undefined);\n};\n// Export a dynamic version with SSR disabled to avoid useLayoutEffect warnings\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (next_dynamic__WEBPACK_IMPORTED_MODULE_2___default()(()=>Promise.resolve(WhiteScreenMain), {\n    ssr: false\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./pages/collected-dataset/components-gui/WhiteScreenMain.js\n");

/***/ })

};
;
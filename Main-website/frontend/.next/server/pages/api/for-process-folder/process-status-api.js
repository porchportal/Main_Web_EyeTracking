"use strict";(()=>{var a={};a.id=6805,a.ids=[6805],a.modules={3873:a=>{a.exports=require("path")},4229:a=>{a.exports=require("node-fetch")},5600:a=>{a.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},7611:(a,b,c)=>{c.r(b),c.d(b,{config:()=>B,default:()=>A,handler:()=>D});var d={};c.r(d),c.d(d,{default:()=>x});var e=c(9046),f=c(8667),g=c(3480),h=c(6435),i=c(9021),j=c.n(i),k=c(3873),l=c.n(k),m=c(9646);let n=require("util");var o=c.n(n),p=c(4229),q=c.n(p);let r=require("form-data");var s=c.n(r);async function t(a,b,c,d,e){try{let f;if(console.log(`Starting to process image: ${a}`),!j().existsSync(a))return console.error(`Input file does not exist: ${a}`),null;let g=process.env.BACKEND_URL||"http://localhost:8010",h=process.env.API_KEY||"A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV",i=new(s()),k=j().createReadStream(a),m=j().statSync(a);console.log(`File size: ${m.size} bytes`),i.append("file",k,{filename:l().basename(a),contentType:"image/jpeg"}),i.append("showHeadPose","false"),i.append("showBoundingBox","false"),i.append("showMask","false"),i.append("showParameters","false"),console.log(`Sending ${a} to Python backend at ${g}/process-image`),console.log("API Key being used:",h),console.log("Form data parameters:","showHeadPose=false","showBoundingBox=false","showMask=false","showParameters=false");let n=await q()(`${g}/process-image`,{method:"POST",headers:{"X-API-Key":h},body:i,timeout:3e4});if(console.log(`Backend response status: ${n.status}`),!n.ok){let a="";try{a=await n.text()}catch(b){a="Could not read error details"}throw console.error(`Backend error: ${n.status} ${n.statusText}`),console.error(`Response body: ${a}`),Error(`Backend returned ${n.status}: ${n.statusText}`)}try{let a=await n.text();console.log(`Response text (first 200 chars): ${a.substring(0,200)}...`),f=JSON.parse(a)}catch(a){throw console.error("Error parsing response JSON:",a),Error(`Failed to parse backend response: ${a.message}`)}if(console.log("Backend processing result:",f.success?"Success":"Failed"),!f.success)return console.error(`Backend processing failed: ${f.error||"Unknown error"}`),j().copyFileSync(a,b),console.log(`Copied original image as fallback to: ${b}`),await u(c,null,d,e),null;if(!1===f.face_detected)return console.log("No face detected in the image - saving original image"),j().copyFileSync(a,b),await u(c,{face_detected:!1},d,e),null;if(!f.image||!f.image.data)return console.error("Backend response missing image data"),j().copyFileSync(a,b),console.log(`Copied original image as fallback to: ${b}`),await u(c,{face_detected:!1},d,e),null;try{let a=Buffer.from(f.image.data,"base64");j().writeFileSync(b,a),console.log(`Saved processed image to ${b}, size: ${a.length} bytes`)}catch(c){console.error(`Error saving processed image: ${c.message}`),j().copyFileSync(a,b),console.log(`Copied original image as fallback to: ${b}`)}if(f.metrics)return console.log("Metrics received from backend, saving..."),console.log("Number of metrics received:",Object.keys(f.metrics).length),f.metrics.head_pose&&console.log(`Head pose: pitch=${f.metrics.head_pose.pitch}, yaw=${f.metrics.head_pose.yaw}, roll=${f.metrics.head_pose.roll}`),f.metrics.face_min_position_x&&console.log(`Face position: (${f.metrics.face_min_position_x},${f.metrics.face_min_position_y}) to (${f.metrics.face_max_position_x},${f.metrics.face_max_position_y})`),f.metrics.left_eye_position_x&&console.log(`Left eye position: (${f.metrics.left_eye_position_x},${f.metrics.left_eye_position_y})`),f.metrics.right_eye_position_x&&console.log(`Right eye position: (${f.metrics.right_eye_position_x},${f.metrics.right_eye_position_y})`),void 0===f.metrics.face_detected&&(f.metrics.face_detected=!0),await u(c,f.metrics,d,e),f.metrics;return console.log("No metrics received from backend, using face_detected status only"),await u(c,{face_detected:!0},d,e),{face_detected:!0}}catch(f){console.error(`Error processing image with Python backend: ${f.message}`),console.error(f.stack);try{j().copyFileSync(a,b),console.log(`Copied original image as fallback after error: ${b}`)}catch(a){console.error(`Error copying original image: ${a.message}`)}return await u(c,null,d,e),null}}async function u(a,b,c,d){console.log(`Updating parameter file for set ${a} with new metrics`);let e=[l().join(c,`parameters_${a}.csv`),l().join(c,`parameter_${a}.csv`)],f=l().join(d,`parameter_enhance_${a}.csv`),g=new Map,h=!1,i=!1;for(let a of e)if(j().existsSync(a)){console.log(`Found original parameter file: ${a}`),h=!0;try{let b=j().readFileSync(a,"utf8");console.log(`Original parameter file content: ${b.substring(0,100)}...`);let c=b.split("\n"),d=c[0].trim(),e=+!!(i=d.toLowerCase().includes("parameter")||d.toLowerCase().includes("name"));for(let a=e;a<c.length;a++){let b=c[a].trim();if(b){let a=b.split(",");if(a.length>=2){let b=a[0].trim(),c=a[1].trim();g.set(b,c),console.log(`Loaded parameter: ${b}=${c}`)}}}console.log(`Loaded ${g.size} parameters from original file`);break}catch(a){console.error(`Error reading original parameter file: ${a.message}`)}}let k="Parameter,Value\n",m=["pitch","yaw","roll","face_width","face_height","face_min_position_x","face_min_position_y","face_max_position_x","face_max_position_y","face_center_position_x","face_center_position_y","left_eye_position_x","left_eye_position_y","right_eye_position_x","right_eye_position_y","eye_socket_left_center_x","eye_socket_left_center_y","eye_socket_right_center_x","eye_socket_right_center_y","center_between_eyes_x","center_between_eyes_y","left_eye_box_min_x","left_eye_box_min_y","left_eye_box_max_x","left_eye_box_max_y","right_eye_box_min_x","right_eye_box_min_y","right_eye_box_max_x","right_eye_box_max_y","left_iris_center_x","left_iris_center_y","right_iris_center_x","right_iris_center_y","left_iris_min_x","left_iris_min_y","left_iris_max_x","left_iris_max_y","right_iris_min_x","right_iris_min_y","right_iris_max_x","right_iris_max_y","nose_position_x","nose_position_y","chin_position_x","chin_position_y","cheek_left_position_x","cheek_left_position_y","cheek_right_position_x","cheek_right_position_y","mouth_left_position_x","mouth_left_position_y","mouth_right_position_x","mouth_right_position_y","left_eye_state","left_eye_ear","right_eye_state","right_eye_ear","distance_cm_from_face","distance_cm_from_eye","chin_depth","posture","gaze_direction"];if(console.log("Original parameters:"),g.forEach((a,b)=>{console.log(`  ${b}: ${a}`)}),g.forEach((a,b)=>{m.includes(b.toLowerCase())||(k+=`${b},${a}
`)}),b&&!1!==b.face_detected){console.log("Adding new metrics from face detection");let a=(a,c,d=a=>a)=>{if(void 0!==b[a]){let c=d(b[a]);k+=`${a},${c}
`,console.log(`Adding ${a}=${c}`)}};if(b.head_pose&&(console.log(`Adding head pose: pitch=${b.head_pose.pitch}, yaw=${b.head_pose.yaw}, roll=${b.head_pose.roll}`),k+=`pitch,${b.head_pose.pitch}
yaw,${b.head_pose.yaw}
roll,${b.head_pose.roll}
`),a("face_min_position_x",b.face_min_position_x),a("face_min_position_y",b.face_min_position_y),a("face_max_position_x",b.face_max_position_x),a("face_max_position_y",b.face_max_position_y),a("face_center_position_x",b.face_center_position_x),a("face_center_position_y",b.face_center_position_y),b.face_box&&!b.face_min_position_x&&(b.face_box.min&&(k+=`face_min_position_x,${b.face_box.min[0]}
face_min_position_y,${b.face_box.min[1]}
`),b.face_box.max)&&(k+=`face_max_position_x,${b.face_box.max[0]}
face_max_position_y,${b.face_box.max[1]}
`,b.face_box.min)){let a=Math.round(b.face_box.max[0]-b.face_box.min[0]),c=Math.round(b.face_box.max[1]-b.face_box.min[1]);k+=`face_width,${a}
face_height,${c}
`}a("left_eye_position_x",b.left_eye_position_x),a("left_eye_position_y",b.left_eye_position_y),a("right_eye_position_x",b.right_eye_position_x),a("right_eye_position_y",b.right_eye_position_y),a("center_between_eyes_x",b.center_between_eyes_x),a("center_between_eyes_y",b.center_between_eyes_y),a("eye_socket_left_center_x",b.eye_socket_left_center_x),a("eye_socket_left_center_y",b.eye_socket_left_center_y),a("eye_socket_right_center_x",b.eye_socket_right_center_x),a("eye_socket_right_center_y",b.eye_socket_right_center_y),a("left_eye_box_min_x",b.left_eye_box_min_x),a("left_eye_box_min_y",b.left_eye_box_min_y),a("left_eye_box_max_x",b.left_eye_box_max_x),a("left_eye_box_max_y",b.left_eye_box_max_y),a("right_eye_box_min_x",b.right_eye_box_min_x),a("right_eye_box_min_y",b.right_eye_box_min_y),a("right_eye_box_max_x",b.right_eye_box_max_x),a("right_eye_box_max_y",b.right_eye_box_max_y),b.eye_iris_center&&(b.eye_iris_center.left&&(k+=`left_iris_center_x,${b.eye_iris_center.left[0]}
left_iris_center_y,${b.eye_iris_center.left[1]}
`),b.eye_iris_center.right&&(k+=`right_iris_center_x,${b.eye_iris_center.right[0]}
right_iris_center_y,${b.eye_iris_center.right[1]}
`)),b.eye_iris_left_box&&(b.eye_iris_left_box.min&&(k+=`left_iris_min_x,${b.eye_iris_left_box.min[0]}
left_iris_min_y,${b.eye_iris_left_box.min[1]}
`),b.eye_iris_left_box.max&&(k+=`left_iris_max_x,${b.eye_iris_left_box.max[0]}
left_iris_max_y,${b.eye_iris_left_box.max[1]}
`)),b.eye_iris_right_box&&(b.eye_iris_right_box.min&&(k+=`right_iris_min_x,${b.eye_iris_right_box.min[0]}
right_iris_min_y,${b.eye_iris_right_box.min[1]}
`),b.eye_iris_right_box.max&&(k+=`right_iris_max_x,${b.eye_iris_right_box.max[0]}
right_iris_max_y,${b.eye_iris_right_box.max[1]}
`)),a("nose_position_x",b.nose_position_x),a("nose_position_y",b.nose_position_y),a("chin_position_x",b.chin_position_x),a("chin_position_y",b.chin_position_y),a("cheek_left_position_x",b.cheek_left_position_x),a("cheek_left_position_y",b.cheek_left_position_y),a("cheek_right_position_x",b.cheek_right_position_x),a("cheek_right_position_y",b.cheek_right_position_y),a("mouth_left_position_x",b.mouth_left_position_x),a("mouth_left_position_y",b.mouth_left_position_y),a("mouth_right_position_x",b.mouth_right_position_x),a("mouth_right_position_y",b.mouth_right_position_y),a("left_eye_state",b.left_eye_state),a("left_eye_ear",b.left_eye_ear),a("right_eye_state",b.right_eye_state),a("right_eye_ear",b.right_eye_ear),a("distance_cm_from_face",b.distance_cm_from_face),a("distance_cm_from_eye",b.distance_cm_from_eye),a("chin_depth",b.chin_depth),a("posture",b.posture),a("gaze_direction",b.gaze_direction)}else h?(console.log("No new metrics, preserving original face tracking data if available"),["pitch","yaw","roll","face_width","face_height","face_min_position_x","face_min_position_y","face_max_position_x","face_max_position_y","face_center_position_x","face_center_position_y","left_eye_position_x","left_eye_position_y","right_eye_position_x","right_eye_position_y","eye_socket_left_center_x","eye_socket_left_center_y","eye_socket_right_center_x","eye_socket_right_center_y","center_between_eyes_x","center_between_eyes_y","left_eye_box_min_x","left_eye_box_min_y","left_eye_box_max_x","left_eye_box_max_y","right_eye_box_min_x","right_eye_box_min_y","right_eye_box_max_x","right_eye_box_max_y","left_iris_center_x","left_iris_center_y","right_iris_center_x","right_iris_center_y","left_iris_min_x","left_iris_min_y","left_iris_max_x","left_iris_max_y","right_iris_min_x","right_iris_min_y","right_iris_max_x","right_iris_max_y","nose_position_x","nose_position_y","chin_position_x","chin_position_y","cheek_left_position_x","cheek_left_position_y","cheek_right_position_x","cheek_right_position_y","mouth_left_position_x","mouth_left_position_y","mouth_right_position_x","mouth_right_position_y","left_eye_state","left_eye_ear","right_eye_state","right_eye_ear","distance_cm_from_face","distance_cm_from_eye","chin_depth","posture","gaze_direction"].forEach(a=>{g.has(a)&&(console.log(`Preserving original ${a}=${g.get(a)}`),k+=`${a},${g.get(a)}
`)}),k+="processing_note,Face detection failed but preserved original values\n"):(console.log("No metrics and no original data, adding placeholder"),k+="info,No face detected or processing failed\nface_detected,false\nprocessing_time,"+new Date().toISOString()+"\n");return(console.log(`Final parameter file content:
${k}`),j().writeFileSync(f,k),console.log(`Wrote updated parameter file to: ${f}`),j().existsSync(f))?(console.log(`Parameter file successfully updated: ${f}`),!0):(console.error(`Failed to create parameter file: ${f}`),!1)}async function v(a){try{let b=process.env.BACKEND_URL||"http://localhost:8010",c=process.env.API_KEY||"A1B2C3D4-E5F6-7890-GHIJ-KLMNOPQRSTUV",d=await q()(`${b}/process-batch`,{method:"POST",headers:{"Content-Type":"application/json","X-API-Key":c},body:JSON.stringify({set_numbers:a,show_head_pose:!0,show_bounding_box:!0,show_mask:!1,show_parameters:!1})});if(!d.ok){let a=await d.text();return console.error("Backend processing error:",a),{success:!1,error:`Backend error: ${d.status} ${d.statusText}`}}return await d.json()}catch(a){return console.error("Error calling backend for processing:",a),{success:!1,error:a.message}}}async function w(a,b,c,d){try{console.log("=== STARTING DIRECT PROCESSING ==="),console.log(`Processing sets: ${a.join(", ")}`),console.log(`Capture directory: ${b}`),console.log(`Enhance directory: ${c}`);let e={currentSet:0,totalSets:a.length,processedSets:[],startTime:new Date().toISOString(),lastUpdateTime:new Date().toISOString()};for(let f of a)try{console.log(`
--- Processing set ${f} ---`),e.currentSet=f,j().writeFileSync(d,JSON.stringify(e,null,2)),console.log(`Updated progress file for set ${f}`);let a=l().join(b,`webcam_${f}.jpg`),g=l().join(c,`webcam_enhance_${f}.jpg`);if(console.log(`Looking for webcam image at: ${a}`),j().existsSync(a)){console.log(`Found webcam image: ${a}`);try{console.log(`Sending webcam image for set ${f} to process_image_handler`),await t(a,g,f,b,c)?console.log(`✅ Successfully processed webcam image and extracted metrics for set ${f}`):(console.warn(`⚠️ Process completed but no metrics returned for set ${f}`),j().existsSync(g)||(j().copyFileSync(a,g),console.log(`Copied original webcam image as fallback for set ${f}`)))}catch(b){console.error(`❌ Error processing webcam image for set ${f}: ${b.message}`),console.error(b.stack),console.log(`Copying original webcam image as fallback for set ${f}`),j().copyFileSync(a,g)}}else console.warn(`⚠️ Webcam image not found for set ${f}: ${a}`);let h=l().join(b,`screen_${f}.jpg`),i=l().join(c,`screen_enhance_${f}.jpg`);console.log(`Looking for screen image at: ${h}`),j().existsSync(h)?(console.log(`Screen image found: ${h}`),j().copyFileSync(h,i),console.log(`Copied screen image to: ${i}`)):console.warn(`⚠️ Screen image not found for set ${f}`);let k=l().join(c,`parameter_enhance_${f}.csv`);j().existsSync(k)||(console.log(`Parameter file not created during processing for set ${f}, checking for original...`),await u(f,null,b,c)),e.processedSets.push(f),e.lastUpdateTime=new Date().toISOString(),j().writeFileSync(d,JSON.stringify(e,null,2)),console.log(`Updated progress - set ${f} completed`),console.log("Waiting 500ms before processing next set..."),await new Promise(a=>setTimeout(a,500))}catch(a){console.error(`❌ Error processing set ${f}:`,a)}return console.log("\n=== PROCESSING COMPLETED ==="),console.log(`Total sets processed: ${e.processedSets.length}/${e.totalSets}`),{success:!0}}catch(a){return console.error("❌ Error in direct processing:",a),{success:!1,error:a.message}}}async function x(a,b){if(b.status(200).json({message:"API endpoint working!"}),"GET"===a.method)try{let a=l().join(process.cwd(),"public","captures","eye_tracking_captures"),c=l().join(process.cwd(),"public","captures","enhance");j().existsSync(l().join(process.cwd(),"public","captures"))||j().mkdirSync(l().join(process.cwd(),"public","captures"),{recursive:!0}),j().existsSync(a)||j().mkdirSync(a,{recursive:!0}),j().existsSync(c)||j().mkdirSync(c,{recursive:!0});let d=l().join(process.cwd(),"public","captures","processing.lock"),e=j().existsSync(d),f=l().join(process.cwd(),"public","captures","processing_progress.json"),g={currentSet:0,totalSets:0,processedSets:[],startTime:null,lastUpdateTime:null};if(j().existsSync(f))try{let a=j().readFileSync(f,"utf8");g=JSON.parse(a)}catch(a){console.error("Error reading progress file:",a)}let h=j().existsSync(a)?j().readdirSync(a).filter(a=>a.startsWith("webcam_")&&a.endsWith(".jpg")).length:0,i=j().existsSync(c)?j().readdirSync(c).filter(a=>a.startsWith("webcam_enhance_")&&a.endsWith(".jpg")).length:0;return b.status(200).json({success:!0,isProcessing:e,captureCount:h,enhanceCount:i,needsProcessing:h>i,progress:g})}catch(a){return console.error("Error checking process status:",a),b.status(500).json({success:!1,error:a.message})}if("POST"!==a.method)return b.status(405).json({success:!1,error:"Method not allowed"});try{let{setNumbers:c}=a.body;if(!c||!Array.isArray(c)||0===c.length)return b.status(400).json({success:!1,error:"No set numbers provided for processing"});let d=l().join(process.cwd(),"public","captures");j().existsSync(d)||j().mkdirSync(d,{recursive:!0});let e=l().join(process.cwd(),"public","captures","enhance");j().existsSync(e)||j().mkdirSync(e,{recursive:!0});let f=l().join(d,"processing.lock");if(j().existsSync(f))return b.status(409).json({success:!1,error:"Processing is already in progress"});try{j().writeFileSync(f,new Date().toISOString()),console.log(`Created lock file at ${f}`)}catch(a){return console.error(`Error creating lock file: ${a.message}`),b.status(500).json({success:!1,error:`Failed to create lock file: ${a.message}`})}let g=l().join(d,"processing_progress.json"),h={currentSet:0,totalSets:c.length,processedSets:[],startTime:new Date().toISOString(),lastUpdateTime:new Date().toISOString()};try{j().writeFileSync(g,JSON.stringify(h,null,2))}catch(a){console.error(`Error creating progress file: ${a.message}`)}let i=l().join(process.cwd(),"public","captures","eye_tracking_captures");if("true"===process.env.USE_PYTHON_BACKEND)return console.log(`Starting backend processing of ${c.length} sets...`),v(c).then(a=>{console.log("Backend processing completed with result:",a),j().existsSync(f)&&j().unlinkSync(f)}).catch(a=>{console.error("Backend processing failed:",a),j().existsSync(f)&&j().unlinkSync(f)}),b.status(200).json({success:!0,message:"Processing started",setsToProcess:c.length,processingMethod:"python-backend"});return console.log(`Starting direct processing of ${c.length} sets...`),w(c,i,e,g).then(a=>{console.log("Processing completed with result:",a),j().existsSync(f)&&j().unlinkSync(f)}).catch(a=>{console.error("Processing failed:",a),j().existsSync(f)&&j().unlinkSync(f)}),b.status(200).json({success:!0,message:"Processing started",setsToProcess:c.length,processingMethod:"direct"})}catch(c){console.error("Error triggering processing:",c);let a=l().join(process.cwd(),"public","captures","processing.lock");if(j().existsSync(a))try{j().unlinkSync(a)}catch(a){console.error("Error removing lock file:",a)}return b.status(500).json({success:!1,error:c.message})}}o().promisify(m.exec);var y=c(8112),z=c(8766);let A=(0,h.M)(d,"default"),B=(0,h.M)(d,"config"),C=new g.PagesAPIRouteModule({definition:{kind:f.A.PAGES_API,page:"/api/for-process-folder/process-status-api",pathname:"/api/for-process-folder/process-status-api",bundlePath:"",filename:""},userland:d,distDir:".next",projectDir:""});async function D(a,b,c){let d=await C.prepare(a,b,{srcPage:"/api/for-process-folder/process-status-api"});if(!d){b.statusCode=400,b.end("Bad Request"),null==c.waitUntil||c.waitUntil.call(c,Promise.resolve());return}let{query:f,params:g,prerenderManifest:h}=d;try{let c=a.method||"GET",d=(0,y.getTracer)(),e=d.getActiveScopeSpan(),i=C.instrumentationOnRequestError.bind(C),j=async e=>C.render(a,b,{query:{...f,...g},params:g,allowedRevalidateHeaderKeys:void 0,multiZoneDraftMode:!0,trustHostHeader:void 0,previewProps:h.preview,propagateError:!1,dev:C.isDev,page:"/api/for-process-folder/process-status-api",projectDir:"",onError:(...b)=>i(a,...b)}).finally(()=>{if(!e)return;e.setAttributes({"http.status_code":b.statusCode,"next.rsc":!1});let f=d.getRootSpanAttributes();if(!f)return;if(f.get("next.span_type")!==z.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${f.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let g=f.get("next.route");if(g){let a=`${c} ${g}`;e.setAttributes({"next.route":g,"http.route":g,"next.span_name":a}),e.updateName(a)}else e.updateName(`${c} ${a.url}`)});e?await j(e):await d.withPropagatedContext(a.headers,()=>d.trace(z.BaseServerSpan.handleRequest,{spanName:`${c} ${a.url}`,kind:y.SpanKind.SERVER,attributes:{"http.method":c,"http.target":a.url}},j))}catch(a){if(C.isDev)throw a;(0,e.sendError)(b,500,"Internal Server Error")}finally{null==c.waitUntil||c.waitUntil.call(c,Promise.resolve())}}},9021:a=>{a.exports=require("fs")},9646:a=>{a.exports=require("child_process")}};var b=require("../../../webpack-api-runtime.js");b.C(a);var c=b.X(0,[7169],()=>b(b.s=7611));module.exports=c})();
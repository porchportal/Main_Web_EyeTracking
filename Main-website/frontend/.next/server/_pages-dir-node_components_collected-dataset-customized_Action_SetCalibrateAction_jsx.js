"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_pages-dir-node_components_collected-dataset-customized_Action_SetCalibrateAction_jsx";
exports.ids = ["_pages-dir-node_components_collected-dataset-customized_Action_SetCalibrateAction_jsx"];
exports.modules = {

/***/ "(pages-dir-node)/./components/collected-dataset-customized/Action/SetCalibrateAction.jsx":
/*!*******************************************************************************!*\
  !*** ./components/collected-dataset-customized/Action/SetCalibrateAction.jsx ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _CalibratePoints_jsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CalibratePoints.jsx */ \"(pages-dir-node)/./components/collected-dataset-customized/Action/CalibratePoints.jsx\");\n/* harmony import */ var _countSave_jsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./countSave.jsx */ \"(pages-dir-node)/./components/collected-dataset-customized/Action/countSave.jsx\");\n/* harmony import */ var _Helper_savefile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Helper/savefile */ \"(pages-dir-node)/./components/collected-dataset-customized/Helper/savefile.js\");\n// SetCalibrateAction.jsx\n// Handles the calibration sequence functionality\n\n\n\n\nclass SetCalibrateAction {\n    constructor(config){\n        // Main function to handle calibration sequence\n        this.handleSetCalibrate = async ()=>{\n            // Hide the TopBar before starting calibration\n            if (typeof this.toggleTopBar === 'function') {\n                this.toggleTopBar(false);\n            } else if (false) {}\n            // Set capturing state if function exists\n            if (typeof this.setIsCapturing === 'function') {\n                this.setIsCapturing(true);\n            }\n            if (typeof this.setProcessStatus === 'function') {\n                this.setProcessStatus('Starting calibration sequence...');\n            }\n            // Update parent component if available\n            if (this.onStatusUpdate) {\n                this.onStatusUpdate({\n                    processStatus: 'Starting calibration sequence...',\n                    isCapturing: true\n                });\n            }\n            // Give the component time to update\n            setTimeout(async ()=>{\n                try {\n                    const canvas = await this.waitForCanvas();\n                    if (!canvas) {\n                        throw new Error(\"Canvas not available\");\n                    }\n                    // Store original canvas dimensions before going fullscreen\n                    this.originalCanvasDimensions = {\n                        width: canvas.width,\n                        height: canvas.height\n                    };\n                    // Use canvas management system to enter fullscreen\n                    this.enterFullscreen();\n                    // Ensure canvas is properly positioned and sized\n                    const isProperlyPositioned = this.ensureCanvasFullscreen(canvas);\n                    if (!isProperlyPositioned) {\n                        console.warn('Canvas not properly positioned for fullscreen, attempting to fix...');\n                        // Try one more time after a short delay\n                        setTimeout(()=>{\n                            this.ensureCanvasFullscreen(canvas);\n                        }, 100);\n                    }\n                    // Test coordinate transformation\n                    this.testCoordinateTransformation(canvas);\n                    // Generate calibration points based on ORIGINAL canvas size\n                    const points = (0,_CalibratePoints_jsx__WEBPACK_IMPORTED_MODULE_1__.generateCalibrationPoints)(this.originalCanvasDimensions.width, this.originalCanvasDimensions.height);\n                    if (!points || points.length === 0) {\n                        throw new Error(\"Failed to generate calibration points\");\n                    }\n                    // Create status indicator\n                    const statusIndicator = document.createElement('div');\n                    statusIndicator.className = 'calibrate-status-indicator';\n                    statusIndicator.style.cssText = `\n          position: fixed;\n          top: 20px;\n          right: 20px;\n          background-color: rgba(0, 102, 204, 0.9);\n          color: white;\n          font-size: 16px;\n          font-weight: bold;\n          padding: 10px 15px;\n          border-radius: 8px;\n          z-index: 10000;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n        `;\n                    statusIndicator.textContent = 'Calibration: Initializing...';\n                    document.body.appendChild(statusIndicator);\n                    // Process each calibration point\n                    let successCount = 0;\n                    for(let i = 0; i < points.length; i++){\n                        const originalPoint = points[i];\n                        // Transform coordinates for fullscreen display\n                        const transformedPoint = this.transformCoordinates(canvas, originalPoint);\n                        // Update status displays\n                        statusIndicator.textContent = `Calibration: Point ${i + 1}/${points.length}`;\n                        this.setProcessStatus(`Processing calibration point ${i + 1}/${points.length}`);\n                        // Clear canvas with white background using canvas management system\n                        this.clearCanvas();\n                        // Draw the calibration point using ORIGINAL coordinates (canvas coordinates)\n                        const radius = 12; // Standard size for consistency\n                        this.drawDot(originalPoint.x, originalPoint.y, radius);\n                        // Create redraw interval to ensure dot stays visible\n                        const redrawInterval = setInterval(()=>{\n                            this.drawDot(originalPoint.x, originalPoint.y, radius);\n                        }, 200);\n                        // Remove any existing countdown elements\n                        const existingCountdowns = document.querySelectorAll('.dot-countdown, .calibrate-countdown');\n                        existingCountdowns.forEach((el)=>{\n                            if (el.parentNode) el.parentNode.removeChild(el);\n                        });\n                        // Create custom countdown element positioned using TRANSFORMED coordinates (viewport coordinates)\n                        const countdownElement = document.createElement('div');\n                        countdownElement.className = 'dot-countdown';\n                        countdownElement.style.cssText = `\n            position: fixed;\n            left: ${transformedPoint.x}px;\n            top: ${transformedPoint.y}px;\n            transform: translate(-50%, -50%);\n            color: red;\n            font-size: 24px;\n            font-weight: bold;\n            text-shadow: 0 0 10px white, 0 0 20px white;\n            z-index: 10000;\n            background-color: rgba(255, 255, 255, 0.9);\n            border: 2px solid red;\n            border-radius: 50%;\n            width: 48px;\n            height: 48px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            box-shadow: 0 0 15px rgba(0, 0, 0, 0.4);\n          `;\n                        document.body.appendChild(countdownElement);\n                        // Debug: Log positioning information\n                        console.log(`Point ${i + 1} positioning:`, {\n                            originalPoint,\n                            transformedPoint,\n                            countdownPosition: {\n                                left: transformedPoint.x,\n                                top: transformedPoint.y\n                            },\n                            canvasInfo: {\n                                width: canvas.width,\n                                height: canvas.height,\n                                rect: canvas.getBoundingClientRect()\n                            }\n                        });\n                        try {\n                            // Manual countdown\n                            for(let count = 3; count > 0; count--){\n                                countdownElement.textContent = count;\n                                this.setProcessStatus(`Point ${i + 1}/${points.length}: Countdown ${count}`);\n                                // Force redraw to ensure dot stays visible (using original coordinates)\n                                this.drawDot(originalPoint.x, originalPoint.y, radius);\n                                await new Promise((resolve)=>setTimeout(resolve, 800));\n                                // Redraw again halfway through the wait\n                                this.drawDot(originalPoint.x, originalPoint.y, radius);\n                            }\n                            // Show checkmark\n                            countdownElement.textContent = \"✓\";\n                            this.drawDot(originalPoint.x, originalPoint.y, radius);\n                            // Remove countdown element immediately\n                            if (countdownElement.parentNode) {\n                                countdownElement.parentNode.removeChild(countdownElement);\n                            }\n                            // Make sure dot is still visible\n                            this.drawDot(originalPoint.x, originalPoint.y, radius);\n                            // Capture images at this point (use original coordinates for capture)\n                            console.log(`Capturing calibration point ${i + 1}/${points.length} at (${originalPoint.x}, ${originalPoint.y})`);\n                            const captureResult = await (0,_Helper_savefile__WEBPACK_IMPORTED_MODULE_3__.captureImagesAtPoint)({\n                                point: originalPoint,\n                                captureCount: this.captureCounter,\n                                canvasRef: {\n                                    current: canvas\n                                },\n                                setCaptureCount: this.setCaptureCounter,\n                                showCapturePreview: _countSave_jsx__WEBPACK_IMPORTED_MODULE_2__.showCapturePreview\n                            });\n                            if (captureResult && (captureResult.screenImage || captureResult.success)) {\n                                successCount++;\n                            }\n                            // Wait a moment before clearing to ensure capture is complete\n                            await new Promise((resolve)=>setTimeout(resolve, 500));\n                            // Clear the dot after capture using canvas management system\n                            this.clearCanvas();\n                            // Wait between points\n                            await new Promise((resolve)=>setTimeout(resolve, 1200));\n                        } catch (error) {\n                            console.error(`Error processing calibration point ${i + 1}:`, error);\n                        } finally{\n                            // Clean up countdown if it still exists\n                            if (countdownElement.parentNode) {\n                                countdownElement.parentNode.removeChild(countdownElement);\n                            }\n                            // Clear redraw interval\n                            clearInterval(redrawInterval);\n                        }\n                    }\n                    // Calibration complete\n                    if (statusIndicator) {\n                        statusIndicator.textContent = `Calibration complete: ${successCount}/${points.length} points`;\n                    }\n                    this.setProcessStatus(`Calibration completed: ${successCount}/${points.length} points captured`);\n                    // Remove status indicator after delay\n                    setTimeout(()=>{\n                        if (statusIndicator.parentNode) {\n                            statusIndicator.parentNode.removeChild(statusIndicator);\n                        }\n                    }, 3000);\n                } catch (error) {\n                    console.error(\"Calibration error:\", error);\n                    this.setProcessStatus(`Calibration error: ${error.message}`);\n                } finally{\n                    // Exit fullscreen and restore canvas using canvas management system\n                    this.exitFullscreen();\n                    // Restore hidden elements\n                    this.restoreHiddenElements();\n                    // Set capturing state to false if function exists\n                    if (typeof this.setIsCapturing === 'function') {\n                        this.setIsCapturing(false);\n                    }\n                    // Show TopBar again after a delay\n                    setTimeout(()=>{\n                        if (typeof this.toggleTopBar === 'function') {\n                            this.toggleTopBar(true);\n                        } else if (false) {}\n                    }, 1000);\n                }\n            }, 200);\n        };\n        // Required properties\n        this.canvasRef = config.canvasRef;\n        this.toggleTopBar = config.toggleTopBar;\n        this.setIsCapturing = config.setIsCapturing;\n        this.setProcessStatus = config.setProcessStatus;\n        this.setCurrentDot = config.setCurrentDot;\n        this.triggerCameraAccess = config.triggerCameraAccess;\n        this.onStatusUpdate = config.onStatusUpdate;\n        this.saveImageToServer = config.saveImageToServer;\n        this.setCaptureCounter = config.setCaptureCounter;\n        this.captureCounter = config.captureCounter;\n        // Get canvas manager and utilities from global scope (from actionButton.js)\n        this.canvasManager =  false ? 0 : null;\n        this.canvasUtils =  false ? 0 : null;\n        // Store original canvas dimensions for coordinate transformation\n        this.originalCanvasDimensions = null;\n    }\n    // Get or create canvas using the canvas management system from actionButton.js\n    getCanvas() {\n        // Use the global canvas manager\n        if (false) {}\n        // Fallback to canvasUtils from actionButton.js\n        if (this.canvasUtils && typeof this.canvasUtils.getCanvas === 'function') {\n            return this.canvasUtils.getCanvas();\n        }\n        // Fallback to canvasManager\n        if (this.canvasManager && typeof this.canvasManager.getCanvas === 'function') {\n            return this.canvasManager.getCanvas() || this.canvasManager.createCanvas();\n        }\n        // Fallback to canvasRef if canvasManager not available\n        return this.canvasRef?.current || document.querySelector('#tracking-canvas');\n    }\n    // Transform canvas coordinates to viewport coordinates when in fullscreen\n    transformCoordinates(canvas, point) {\n        if (!canvas || !point) return point;\n        // If canvas is in fullscreen mode, we need to transform coordinates\n        const isFullscreen = this.canvasManager?.isInFullscreen() || this.canvasUtils?.isFullscreen?.() || canvas.style.position === 'fixed' && canvas.style.width === '100vw';\n        console.log('Transform coordinates check:', {\n            canvasPosition: canvas.style.position,\n            canvasWidth: canvas.style.width,\n            canvasHeight: canvas.style.height,\n            isFullscreen,\n            originalPoint: point,\n            canvasRect: canvas.getBoundingClientRect()\n        });\n        if (isFullscreen) {\n            // Get the canvas's bounding rect to understand its position in the viewport\n            const canvasRect = canvas.getBoundingClientRect();\n            // Check if canvas is properly positioned\n            const isProperlyPositioned = canvasRect.left === 0 && canvasRect.top === 0 && canvasRect.width === window.innerWidth && canvasRect.height === window.innerHeight;\n            console.log('Canvas positioning check:', {\n                canvasRect,\n                windowSize: {\n                    width: window.innerWidth,\n                    height: window.innerHeight\n                },\n                isProperlyPositioned\n            });\n            // Calculate the scale factors\n            const scaleX = canvasRect.width / canvas.width;\n            const scaleY = canvasRect.height / canvas.height;\n            // Transform the coordinates\n            const transformedPoint = {\n                x: point.x * scaleX + canvasRect.left,\n                y: point.y * scaleY + canvasRect.top,\n                label: point.label\n            };\n            console.log('Coordinate transformation:', {\n                original: point,\n                transformed: transformedPoint,\n                canvasRect,\n                scale: {\n                    x: scaleX,\n                    y: scaleY\n                },\n                canvasDimensions: {\n                    width: canvas.width,\n                    height: canvas.height\n                }\n            });\n            return transformedPoint;\n        }\n        // If not fullscreen, return original coordinates\n        return point;\n    }\n    // Enter fullscreen using the canvas management system\n    enterFullscreen() {\n        // Use the global canvas manager\n        if (false) {}\n        if (this.canvasUtils && typeof this.canvasUtils.enterFullscreen === 'function') {\n            return this.canvasUtils.enterFullscreen();\n        }\n        if (this.canvasManager && typeof this.canvasManager.enterFullscreen === 'function') {\n            this.canvasManager.enterFullscreen();\n            return this.canvasManager.getCanvas();\n        }\n        // Fallback: manually enter fullscreen\n        const canvas = this.getCanvas();\n        if (canvas) {\n            // Store original dimensions before going fullscreen\n            this.originalCanvasDimensions = {\n                width: canvas.width,\n                height: canvas.height\n            };\n            // Remove canvas from its current parent\n            if (canvas.parentNode) {\n                canvas.parentNode.removeChild(canvas);\n            }\n            // Append to body and set fullscreen styles\n            document.body.appendChild(canvas);\n            // Set fullscreen styles with proper positioning\n            canvas.style.cssText = `\n        position: fixed !important;\n        top: 0 !important;\n        left: 0 !important;\n        width: 100vw !important;\n        height: 100vh !important;\n        z-index: 99999 !important;\n        background-color: yellow !important;\n        border: none !important;\n        display: block !important;\n        opacity: 1 !important;\n        pointer-events: auto !important;\n        margin: 0 !important;\n        padding: 0 !important;\n        box-sizing: border-box !important;\n        transform: none !important;\n      `;\n            // Set canvas dimensions to match viewport\n            canvas.width = window.innerWidth;\n            canvas.height = window.innerHeight;\n            // Clear with yellow background\n            const ctx = canvas.getContext('2d');\n            ctx.fillStyle = 'yellow';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            // Force a reflow to ensure styles are applied\n            canvas.offsetHeight;\n            console.log('Canvas fullscreen setup:', {\n                width: canvas.width,\n                height: canvas.height,\n                style: canvas.style.cssText,\n                rect: canvas.getBoundingClientRect()\n            });\n        }\n        return canvas;\n    }\n    // Exit fullscreen using the canvas management system\n    exitFullscreen() {\n        // Use the global canvas manager\n        if (false) {}\n        if (this.canvasUtils && typeof this.canvasUtils.exitFullscreen === 'function') {\n            return this.canvasUtils.exitFullscreen();\n        }\n        if (this.canvasManager && typeof this.canvasManager.exitFullscreen === 'function') {\n            this.canvasManager.exitFullscreen();\n            return this.canvasManager.getCanvas();\n        }\n        // Fallback: manually exit fullscreen\n        const canvas = this.getCanvas();\n        if (canvas) {\n            const container = document.querySelector('.canvas-container') || document.querySelector('.main-content') || document.body;\n            container.appendChild(canvas);\n            canvas.style.position = 'relative';\n            canvas.style.top = '';\n            canvas.style.left = '';\n            canvas.style.width = '100%';\n            canvas.style.height = '100%';\n            canvas.style.zIndex = '';\n            canvas.style.backgroundColor = 'yellow';\n            // Restore original dimensions if available\n            if (this.originalCanvasDimensions) {\n                canvas.width = this.originalCanvasDimensions.width;\n                canvas.height = this.originalCanvasDimensions.height;\n                this.originalCanvasDimensions = null;\n            }\n        }\n        return canvas;\n    }\n    // Restore elements that were hidden during fullscreen\n    restoreHiddenElements() {\n        const hiddenElements = document.querySelectorAll('[data-hidden-by-canvas=\"true\"]');\n        hiddenElements.forEach((el)=>{\n            el.style.display = '';\n            el.removeAttribute('data-hidden-by-canvas');\n        });\n    }\n    // Clear canvas using the canvas management system\n    clearCanvas() {\n        // Use the global canvas manager\n        if (false) {}\n        if (this.canvasUtils && typeof this.canvasUtils.clear === 'function') {\n            this.canvasUtils.clear();\n            return;\n        }\n        if (this.canvasManager && typeof this.canvasManager.clear === 'function') {\n            this.canvasManager.clear();\n            return;\n        }\n        // Fallback: manually clear canvas\n        const canvas = this.getCanvas();\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.fillStyle = 'yellow';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n    }\n    // Draw dot using the canvas management system\n    drawDot(x, y, radius = 12) {\n        // Use the global canvas manager\n        if (false) {}\n        if (this.canvasUtils && typeof this.canvasUtils.drawDot === 'function') {\n            return this.canvasUtils.drawDot(x, y, radius);\n        }\n        // Fallback: manually draw dot\n        const canvas = this.getCanvas();\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            (0,_countSave_jsx__WEBPACK_IMPORTED_MODULE_2__.drawRedDot)(ctx, x, y, radius, false);\n            return true;\n        }\n        return false;\n    }\n    // Wait until canvas is fully ready\n    async waitForCanvas(maxTries = 20, interval = 100) {\n        for(let i = 0; i < maxTries; i++){\n            const canvas = this.getCanvas();\n            if (canvas && canvas.width > 0 && canvas.height > 0) {\n                return canvas;\n            }\n            await new Promise((resolve)=>setTimeout(resolve, interval));\n        }\n        throw new Error(\"Canvas not ready after multiple attempts\");\n    }\n    // Test coordinate transformation\n    testCoordinateTransformation(canvas) {\n        console.log('Testing coordinate transformation...');\n        const testPoint = {\n            x: 100,\n            y: 100,\n            label: 'Test'\n        };\n        const transformed = this.transformCoordinates(canvas, testPoint);\n        console.log('Test transformation result:', {\n            original: testPoint,\n            transformed: transformed,\n            canvasInfo: {\n                width: canvas.width,\n                height: canvas.height,\n                style: {\n                    position: canvas.style.position,\n                    width: canvas.style.width,\n                    height: canvas.style.height\n                },\n                rect: canvas.getBoundingClientRect()\n            }\n        });\n        return transformed;\n    }\n    // Ensure canvas is properly positioned and sized for fullscreen\n    ensureCanvasFullscreen(canvas) {\n        if (!canvas) return false;\n        // Remove any conflicting elements that might interfere\n        this.removeConflictingElements();\n        // Ensure canvas is in body\n        if (canvas.parentNode !== document.body) {\n            if (canvas.parentNode) {\n                canvas.parentNode.removeChild(canvas);\n            }\n            document.body.appendChild(canvas);\n        }\n        // Force canvas to cover entire viewport\n        canvas.style.cssText = `\n      position: fixed !important;\n      top: 0 !important;\n      left: 0 !important;\n      width: 100vw !important;\n      height: 100vh !important;\n      z-index: 99999 !important;\n      background-color: white !important;\n      border: none !important;\n      display: block !important;\n      opacity: 1 !important;\n      pointer-events: auto !important;\n      margin: 0 !important;\n      padding: 0 !important;\n      box-sizing: border-box !important;\n      transform: none !important;\n    `;\n        // Set dimensions to match viewport\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        // Clear with white background\n        const ctx = canvas.getContext('2d');\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        // Force reflow\n        canvas.offsetHeight;\n        // Verify positioning\n        const rect = canvas.getBoundingClientRect();\n        const isProperlyPositioned = rect.left === 0 && rect.top === 0 && rect.width === window.innerWidth && rect.height === window.innerHeight;\n        console.log('Canvas fullscreen verification:', {\n            rect,\n            windowSize: {\n                width: window.innerWidth,\n                height: window.innerHeight\n            },\n            isProperlyPositioned,\n            canvasDimensions: {\n                width: canvas.width,\n                height: canvas.height\n            }\n        });\n        return isProperlyPositioned;\n    }\n    // Remove any conflicting elements that might interfere with fullscreen canvas\n    removeConflictingElements() {\n        // Hide any elements that might interfere with fullscreen display\n        const elementsToHide = [\n            '.topbar',\n            '.canvas-container',\n            '.main-content',\n            '.metrics-panel',\n            '.display-metrics',\n            'nav',\n            'header',\n            '.button-groups',\n            '.control-buttons'\n        ];\n        elementsToHide.forEach((selector)=>{\n            const elements = document.querySelectorAll(selector);\n            elements.forEach((el)=>{\n                if (el.style.display !== 'none') {\n                    el.style.display = 'none';\n                    el.setAttribute('data-hidden-by-canvas', 'true');\n                }\n            });\n        });\n        // Remove any existing countdown elements\n        const existingCountdowns = document.querySelectorAll('.dot-countdown, .calibrate-countdown');\n        existingCountdowns.forEach((el)=>{\n            if (el.parentNode) el.parentNode.removeChild(el);\n        });\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SetCalibrateAction);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./components/collected-dataset-customized/Action/SetCalibrateAction.jsx\n");

/***/ })

};
;
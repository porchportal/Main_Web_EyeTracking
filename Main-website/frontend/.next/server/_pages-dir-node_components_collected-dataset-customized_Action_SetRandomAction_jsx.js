"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_pages-dir-node_components_collected-dataset-customized_Action_SetRandomAction_jsx";
exports.ids = ["_pages-dir-node_components_collected-dataset-customized_Action_SetRandomAction_jsx"];
exports.modules = {

/***/ "(pages-dir-node)/./components/collected-dataset-customized/Action/SetRandomAction.jsx":
/*!****************************************************************************!*\
  !*** ./components/collected-dataset-customized/Action/SetRandomAction.jsx ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _countSave__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./countSave */ \"(pages-dir-node)/./components/collected-dataset-customized/Action/countSave.js\");\n/* harmony import */ var _Helper_savefile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Helper/savefile */ \"(pages-dir-node)/./components/collected-dataset-customized/Helper/savefile.js\");\n// SetRandomAction.jsx\n// Handles the set random sequence functionality\n\n\n\nclass SetRandomAction {\n    constructor(config){\n        // Main handler for Set Random button\n        this.handleAction = async ()=>{\n            try {\n                // Get control values from the TopBar\n                const timeInput = document.querySelector('.control-input-field[data-control=\"time\"]');\n                const delayInput = document.querySelector('.control-input-field[data-control=\"delay\"]');\n                // Default values if inputs can't be found\n                let times = 1;\n                let delay = 3;\n                // Parse input values if available\n                if (timeInput) {\n                    const parsedTime = parseInt(timeInput.value, 10);\n                    if (!isNaN(parsedTime) && parsedTime > 0) {\n                        times = parsedTime;\n                    }\n                }\n                if (delayInput) {\n                    const parsedDelay = parseInt(delayInput.value, 10);\n                    if (!isNaN(parsedDelay) && parsedDelay > 0) {\n                        delay = parsedDelay;\n                    }\n                }\n                // Hide UI during capture process\n                if (this.toggleTopBar) this.toggleTopBar(false);\n                this.onStatusUpdate?.({\n                    processStatus: `Starting ${times} random captures with ${delay}s delay...`,\n                    isCapturing: true,\n                    remainingCaptures: times\n                });\n                // Wait for canvas to be ready\n                const canvas = await this.waitForCanvas();\n                // Use canvas manager to enter fullscreen\n                if (this.canvasManager) {\n                    this.canvasManager.enterFullscreen();\n                }\n                // Process all captures sequentially\n                let successCount = 0;\n                let currentCapture = 1;\n                while(currentCapture <= times){\n                    // Update status for current capture\n                    this.onStatusUpdate?.({\n                        processStatus: `Capture ${currentCapture} of ${times}`,\n                        remainingCaptures: times - currentCapture + 1,\n                        isCapturing: true\n                    });\n                    // Clear canvas before each capture\n                    const ctx = canvas.getContext('2d');\n                    ctx.clearRect(0, 0, canvas.width, canvas.height);\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(0, 0, canvas.width, canvas.height);\n                    // Generate random position for this capture\n                    const position = (0,_countSave__WEBPACK_IMPORTED_MODULE_1__.getRandomPosition)(canvas, 20);\n                    // Draw the dot with consistent size\n                    (0,_countSave__WEBPACK_IMPORTED_MODULE_1__.drawRedDot)(ctx, position.x, position.y, 12, false);\n                    // Create a redrawInterval to ensure dot stays visible\n                    let redrawInterval = setInterval(()=>{\n                        (0,_countSave__WEBPACK_IMPORTED_MODULE_1__.drawRedDot)(ctx, position.x, position.y, 12, false);\n                    }, 200);\n                    // Run countdown and wait for it to complete\n                    await new Promise((resolve)=>{\n                        (0,_countSave__WEBPACK_IMPORTED_MODULE_1__.runCountdown)(position, canvas, (status)=>{\n                            // Update UI based on status\n                            if (status.processStatus) {\n                                this.onStatusUpdate?.({\n                                    processStatus: `Capture ${currentCapture}/${times}: ${status.processStatus}`,\n                                    remainingCaptures: times - currentCapture + 1,\n                                    isCapturing: true\n                                });\n                            }\n                        }, resolve // This will be called when countdown completes\n                        );\n                    });\n                    // Clear redrawInterval after countdown\n                    clearInterval(redrawInterval);\n                    // Trigger camera access before capture\n                    if (this.triggerCameraAccess) {\n                        try {\n                            const cameraResult = this.triggerCameraAccess(true);\n                            if (!cameraResult) {\n                                console.warn('Camera access failed, but continuing with capture');\n                            }\n                        } catch (error) {\n                            console.warn('Camera access error, but continuing with capture:', error);\n                        }\n                    }\n                    // Wait briefly for camera to initialize\n                    await new Promise((resolve)=>setTimeout(resolve, 500));\n                    // Capture images at this point\n                    try {\n                        const captureResult = await (0,_Helper_savefile__WEBPACK_IMPORTED_MODULE_2__.captureImagesAtPoint)({\n                            point: position,\n                            captureCount: this.captureCounter,\n                            canvasRef: {\n                                current: canvas\n                            },\n                            setCaptureCount: this.setCaptureCounter,\n                            showCapturePreview: _countSave__WEBPACK_IMPORTED_MODULE_1__.showCapturePreview\n                        });\n                        if (captureResult && (captureResult.screenImage || captureResult.success)) {\n                            successCount++;\n                        }\n                        // Increment counter\n                        if (this.setCaptureCounter) {\n                            this.setCaptureCounter((prev)=>prev + 1);\n                        }\n                    } catch (error) {\n                        console.error(`Error capturing point ${currentCapture}:`, error);\n                    }\n                    // Wait between captures for the specified delay time\n                    if (currentCapture < times) {\n                        this.onStatusUpdate?.({\n                            processStatus: `Waiting ${delay}s before next capture...`,\n                            remainingCaptures: times - currentCapture,\n                            isCapturing: true\n                        });\n                        await new Promise((resolve)=>setTimeout(resolve, delay * 1000));\n                    }\n                    // Move to next capture\n                    currentCapture++;\n                }\n                // Sequence complete\n                this.onStatusUpdate?.({\n                    processStatus: `Random capture sequence completed: ${successCount}/${times} captures successful`,\n                    remainingCaptures: 0,\n                    isCapturing: false\n                });\n                // Exit fullscreen and restore canvas\n                if (this.canvasManager) {\n                    this.canvasManager.exitFullscreen();\n                }\n                // Turn TopBar back on\n                if (this.toggleTopBar) {\n                    this.toggleTopBar(true);\n                }\n            } catch (err) {\n                console.error('Random sequence error:', err);\n                this.onStatusUpdate?.({\n                    processStatus: `Random sequence failed: ${err.message}`,\n                    isCapturing: false,\n                    remainingCaptures: 0\n                });\n                // Make sure to restore the UI\n                if (this.toggleTopBar) this.toggleTopBar(true);\n            }\n        };\n        // Required properties\n        this.canvasRef = config.canvasRef;\n        this.onStatusUpdate = config.onStatusUpdate;\n        this.setCaptureCounter = config.setCaptureCounter;\n        this.toggleTopBar = config.toggleTopBar;\n        this.captureCounter = config.captureCounter || 1;\n        this.triggerCameraAccess = config.triggerCameraAccess;\n        // Get canvas manager from global scope\n        this.canvasManager =  false ? 0 : null;\n    }\n    // Get or create canvas using the new CanvasManager\n    getCanvas() {\n        if (this.canvasManager) {\n            return this.canvasManager.getCanvas() || this.canvasManager.createCanvas();\n        }\n        // Fallback to canvasRef if canvasManager not available\n        return this.canvasRef?.current || document.querySelector('#tracking-canvas');\n    }\n    // Wait until canvas is fully ready\n    async waitForCanvas(maxTries = 20, interval = 100) {\n        for(let i = 0; i < maxTries; i++){\n            const canvas = this.getCanvas();\n            if (canvas && canvas.width > 0 && canvas.height > 0) {\n                return canvas;\n            }\n            await new Promise((resolve)=>setTimeout(resolve, interval));\n        }\n        throw new Error(\"Canvas not ready after multiple attempts\");\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SetRandomAction);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./components/collected-dataset-customized/Action/SetRandomAction.jsx\n");

/***/ })

};
;
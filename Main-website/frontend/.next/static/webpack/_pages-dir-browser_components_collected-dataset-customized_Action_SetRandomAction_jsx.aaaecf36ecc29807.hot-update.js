"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_pages-dir-browser_components_collected-dataset-customized_Action_SetRandomAction_jsx",{

/***/ "(pages-dir-browser)/./components/collected-dataset-customized/Action/SetRandomAction.jsx":
/*!****************************************************************************!*\
  !*** ./components/collected-dataset-customized/Action/SetRandomAction.jsx ***!
  \****************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _countSave__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./countSave */ \"(pages-dir-browser)/./components/collected-dataset-customized/Action/countSave.js\");\n/* harmony import */ var _Helper_savefile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Helper/savefile */ \"(pages-dir-browser)/./components/collected-dataset-customized/Helper/savefile.js\");\n// SetRandomAction.jsx\n// Handles the set random sequence functionality\n\n\n\nclass SetRandomAction {\n    // Get or create canvas using the new CanvasManager\n    getCanvas() {\n        var _this_canvasRef;\n        if (this.canvasManager) {\n            return this.canvasManager.getCanvas() || this.canvasManager.createCanvas();\n        }\n        // Fallback to canvasRef if canvasManager not available\n        return ((_this_canvasRef = this.canvasRef) === null || _this_canvasRef === void 0 ? void 0 : _this_canvasRef.current) || document.querySelector('#tracking-canvas');\n    }\n    // Wait until canvas is fully ready\n    async waitForCanvas() {\n        let maxTries = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 20, interval = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 100;\n        for(let i = 0; i < maxTries; i++){\n            const canvas = this.getCanvas();\n            if (canvas && canvas.width > 0 && canvas.height > 0) {\n                return canvas;\n            }\n            await new Promise((resolve)=>setTimeout(resolve, interval));\n        }\n        throw new Error(\"Canvas not ready after multiple attempts\");\n    }\n    constructor(config){\n        // Main handler for Set Random button\n        this.handleAction = async ()=>{\n            try {\n                var _this_onStatusUpdate, _this, // Sequence complete\n                _this_onStatusUpdate1, _this1;\n                // Get control values from the TopBar\n                const timeInput = document.querySelector('.control-input-field[data-control=\"time\"]');\n                const delayInput = document.querySelector('.control-input-field[data-control=\"delay\"]');\n                // Default values if inputs can't be found\n                let times = 1;\n                let delay = 3;\n                // Parse input values if available\n                if (timeInput) {\n                    const parsedTime = parseInt(timeInput.value, 10);\n                    if (!isNaN(parsedTime) && parsedTime > 0) {\n                        times = parsedTime;\n                    }\n                }\n                if (delayInput) {\n                    const parsedDelay = parseInt(delayInput.value, 10);\n                    if (!isNaN(parsedDelay) && parsedDelay > 0) {\n                        delay = parsedDelay;\n                    }\n                }\n                // Hide UI during capture process\n                if (this.toggleTopBar) this.toggleTopBar(false);\n                (_this_onStatusUpdate = (_this = this).onStatusUpdate) === null || _this_onStatusUpdate === void 0 ? void 0 : _this_onStatusUpdate.call(_this, {\n                    processStatus: \"Starting \".concat(times, \" random captures with \").concat(delay, \"s delay...\"),\n                    isCapturing: true,\n                    remainingCaptures: times\n                });\n                // Wait for canvas to be ready\n                const canvas = await this.waitForCanvas();\n                // Use canvas manager to enter fullscreen\n                if (this.canvasManager) {\n                    this.canvasManager.enterFullscreen();\n                }\n                // Process all captures sequentially\n                let successCount = 0;\n                let currentCapture = 1;\n                while(currentCapture <= times){\n                    var // Update status for current capture\n                    _this_onStatusUpdate2, _this2;\n                    (_this_onStatusUpdate2 = (_this2 = this).onStatusUpdate) === null || _this_onStatusUpdate2 === void 0 ? void 0 : _this_onStatusUpdate2.call(_this2, {\n                        processStatus: \"Capture \".concat(currentCapture, \" of \").concat(times),\n                        remainingCaptures: times - currentCapture + 1,\n                        isCapturing: true\n                    });\n                    // Clear canvas before each capture\n                    const ctx = canvas.getContext('2d');\n                    ctx.clearRect(0, 0, canvas.width, canvas.height);\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(0, 0, canvas.width, canvas.height);\n                    // Generate random position for this capture\n                    const position = (0,_countSave__WEBPACK_IMPORTED_MODULE_1__.getRandomPosition)(canvas, 20);\n                    // Draw the dot with consistent size\n                    (0,_countSave__WEBPACK_IMPORTED_MODULE_1__.drawRedDot)(ctx, position.x, position.y, 12, false);\n                    // Create a redrawInterval to ensure dot stays visible\n                    let redrawInterval = setInterval(()=>{\n                        (0,_countSave__WEBPACK_IMPORTED_MODULE_1__.drawRedDot)(ctx, position.x, position.y, 12, false);\n                    }, 200);\n                    // Run countdown and wait for it to complete\n                    await new Promise((resolve)=>{\n                        (0,_countSave__WEBPACK_IMPORTED_MODULE_1__.runCountdown)(position, canvas, (status)=>{\n                            // Update UI based on status\n                            if (status.processStatus) {\n                                var _this_onStatusUpdate, _this;\n                                (_this_onStatusUpdate = (_this = this).onStatusUpdate) === null || _this_onStatusUpdate === void 0 ? void 0 : _this_onStatusUpdate.call(_this, {\n                                    processStatus: \"Capture \".concat(currentCapture, \"/\").concat(times, \": \").concat(status.processStatus),\n                                    remainingCaptures: times - currentCapture + 1,\n                                    isCapturing: true\n                                });\n                            }\n                        }, resolve // This will be called when countdown completes\n                        );\n                    });\n                    // Clear redrawInterval after countdown\n                    clearInterval(redrawInterval);\n                    // Trigger camera access before capture\n                    if (this.triggerCameraAccess) {\n                        try {\n                            const cameraResult = this.triggerCameraAccess(true);\n                            if (!cameraResult) {\n                                console.warn('Camera access failed, but continuing with capture');\n                            }\n                        } catch (error) {\n                            console.warn('Camera access error, but continuing with capture:', error);\n                        }\n                    }\n                    // Wait briefly for camera to initialize\n                    await new Promise((resolve)=>setTimeout(resolve, 500));\n                    // Capture images at this point\n                    try {\n                        const captureResult = await (0,_Helper_savefile__WEBPACK_IMPORTED_MODULE_2__.captureImagesAtPoint)({\n                            point: position,\n                            captureCount: this.captureCounter,\n                            canvasRef: {\n                                current: canvas\n                            },\n                            setCaptureCount: this.setCaptureCounter,\n                            showCapturePreview: _countSave__WEBPACK_IMPORTED_MODULE_1__.showCapturePreview\n                        });\n                        if (captureResult && (captureResult.screenImage || captureResult.success)) {\n                            successCount++;\n                        }\n                        // Increment counter\n                        if (this.setCaptureCounter) {\n                            this.setCaptureCounter((prev)=>prev + 1);\n                        }\n                    } catch (error) {\n                        console.error(\"Error capturing point \".concat(currentCapture, \":\"), error);\n                    }\n                    // Wait between captures for the specified delay time\n                    if (currentCapture < times) {\n                        var _this_onStatusUpdate3, _this3;\n                        (_this_onStatusUpdate3 = (_this3 = this).onStatusUpdate) === null || _this_onStatusUpdate3 === void 0 ? void 0 : _this_onStatusUpdate3.call(_this3, {\n                            processStatus: \"Waiting \".concat(delay, \"s before next capture...\"),\n                            remainingCaptures: times - currentCapture,\n                            isCapturing: true\n                        });\n                        await new Promise((resolve)=>setTimeout(resolve, delay * 1000));\n                    }\n                    // Move to next capture\n                    currentCapture++;\n                }\n                (_this_onStatusUpdate1 = (_this1 = this).onStatusUpdate) === null || _this_onStatusUpdate1 === void 0 ? void 0 : _this_onStatusUpdate1.call(_this1, {\n                    processStatus: \"Random capture sequence completed: \".concat(successCount, \"/\").concat(times, \" captures successful\"),\n                    remainingCaptures: 0,\n                    isCapturing: false\n                });\n                // Clear the last dot\n                const ctx = canvas.getContext('2d');\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                ctx.fillStyle = 'white';\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n                // Exit fullscreen and restore canvas\n                if (this.canvasManager) {\n                    this.canvasManager.exitFullscreen();\n                }\n                // Turn TopBar back on\n                if (this.toggleTopBar) {\n                    this.toggleTopBar(true);\n                }\n            } catch (err) {\n                var _this_onStatusUpdate4, _this4;\n                console.error('Random sequence error:', err);\n                (_this_onStatusUpdate4 = (_this4 = this).onStatusUpdate) === null || _this_onStatusUpdate4 === void 0 ? void 0 : _this_onStatusUpdate4.call(_this4, {\n                    processStatus: \"Random sequence failed: \".concat(err.message),\n                    isCapturing: false,\n                    remainingCaptures: 0\n                });\n                // Make sure to restore the UI\n                if (this.toggleTopBar) this.toggleTopBar(true);\n            }\n        };\n        // Required properties\n        this.canvasRef = config.canvasRef;\n        this.onStatusUpdate = config.onStatusUpdate;\n        this.setCaptureCounter = config.setCaptureCounter;\n        this.toggleTopBar = config.toggleTopBar;\n        this.captureCounter = config.captureCounter || 1;\n        this.triggerCameraAccess = config.triggerCameraAccess;\n        // Get canvas manager from global scope\n        this.canvasManager =  true ? window.canvasManager : 0;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SetRandomAction);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL2NvbXBvbmVudHMvY29sbGVjdGVkLWRhdGFzZXQtY3VzdG9taXplZC9BY3Rpb24vU2V0UmFuZG9tQWN0aW9uLmpzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLHNCQUFzQjtBQUN0QixnREFBZ0Q7QUFFdEI7QUFDb0U7QUFDcEM7QUFFMUQsTUFBTU07SUFjSixtREFBbUQ7SUFDbkRDLFlBQVk7WUFNSDtRQUxQLElBQUksSUFBSSxDQUFDQyxhQUFhLEVBQUU7WUFDdEIsT0FBTyxJQUFJLENBQUNBLGFBQWEsQ0FBQ0QsU0FBUyxNQUFNLElBQUksQ0FBQ0MsYUFBYSxDQUFDQyxZQUFZO1FBQzFFO1FBRUEsdURBQXVEO1FBQ3ZELE9BQU8sd0JBQUksQ0FBQ0MsU0FBUyxjQUFkLHNEQUFnQkMsT0FBTyxLQUFJQyxTQUFTQyxhQUFhLENBQUM7SUFDM0Q7SUFFQSxtQ0FBbUM7SUFDbkMsTUFBTUMsZ0JBQTZDO1lBQS9CQyxXQUFBQSxpRUFBVyxJQUFJQyxXQUFBQSxpRUFBVztRQUM1QyxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsVUFBVUUsSUFBSztZQUNqQyxNQUFNQyxTQUFTLElBQUksQ0FBQ1gsU0FBUztZQUM3QixJQUFJVyxVQUFVQSxPQUFPQyxLQUFLLEdBQUcsS0FBS0QsT0FBT0UsTUFBTSxHQUFHLEdBQUc7Z0JBQ25ELE9BQU9GO1lBQ1Q7WUFDQSxNQUFNLElBQUlHLFFBQVFDLENBQUFBLFVBQVdDLFdBQVdELFNBQVNOO1FBQ25EO1FBQ0EsTUFBTSxJQUFJUSxNQUFNO0lBQ2xCO0lBakNBQyxZQUFZQyxNQUFNLENBQUU7UUFtQ3BCLHFDQUFxQzthQUNyQ0MsZUFBZTtZQUNiLElBQUk7b0JBMkJGLDZCQXFIQSxvQkFBb0I7Z0JBQ3BCO2dCQWhKQSxxQ0FBcUM7Z0JBQ3JDLE1BQU1DLFlBQVloQixTQUFTQyxhQUFhLENBQUM7Z0JBQ3pDLE1BQU1nQixhQUFhakIsU0FBU0MsYUFBYSxDQUFDO2dCQUUxQywwQ0FBMEM7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QixjQUFjLEdBQUd2QyxPQUFPdUMsY0FBYyxJQUFJO1FBQy9DLElBQUksQ0FBQ1IsbUJBQW1CLEdBQUcvQixPQUFPK0IsbUJBQW1CO1FBRXJELHVDQUF1QztRQUN2QyxJQUFJLENBQUNqRCxhQUFhLEdBQUcsS0FBNkIsR0FBR2tFLE9BQU9sRSxhQUFhLEdBQUcsQ0FBSTtJQUNsRjtBQTZNRjtBQUVBLGlFQUFlRixlQUFlQSxFQUFDIiwic291cmNlcyI6WyIvYXBwL2NvbXBvbmVudHMvY29sbGVjdGVkLWRhdGFzZXQtY3VzdG9taXplZC9BY3Rpb24vU2V0UmFuZG9tQWN0aW9uLmpzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTZXRSYW5kb21BY3Rpb24uanN4XG4vLyBIYW5kbGVzIHRoZSBzZXQgcmFuZG9tIHNlcXVlbmNlIGZ1bmN0aW9uYWxpdHlcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldFJhbmRvbVBvc2l0aW9uLCBkcmF3UmVkRG90LCBydW5Db3VudGRvd24sIHNob3dDYXB0dXJlUHJldmlldyB9IGZyb20gJy4vY291bnRTYXZlJztcbmltcG9ydCB7IGNhcHR1cmVJbWFnZXNBdFBvaW50IH0gZnJvbSAnLi4vSGVscGVyL3NhdmVmaWxlJztcblxuY2xhc3MgU2V0UmFuZG9tQWN0aW9uIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgLy8gUmVxdWlyZWQgcHJvcGVydGllc1xuICAgIHRoaXMuY2FudmFzUmVmID0gY29uZmlnLmNhbnZhc1JlZjtcbiAgICB0aGlzLm9uU3RhdHVzVXBkYXRlID0gY29uZmlnLm9uU3RhdHVzVXBkYXRlO1xuICAgIHRoaXMuc2V0Q2FwdHVyZUNvdW50ZXIgPSBjb25maWcuc2V0Q2FwdHVyZUNvdW50ZXI7XG4gICAgdGhpcy50b2dnbGVUb3BCYXIgPSBjb25maWcudG9nZ2xlVG9wQmFyO1xuICAgIHRoaXMuY2FwdHVyZUNvdW50ZXIgPSBjb25maWcuY2FwdHVyZUNvdW50ZXIgfHwgMTtcbiAgICB0aGlzLnRyaWdnZXJDYW1lcmFBY2Nlc3MgPSBjb25maWcudHJpZ2dlckNhbWVyYUFjY2VzcztcbiAgICBcbiAgICAvLyBHZXQgY2FudmFzIG1hbmFnZXIgZnJvbSBnbG9iYWwgc2NvcGVcbiAgICB0aGlzLmNhbnZhc01hbmFnZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5jYW52YXNNYW5hZ2VyIDogbnVsbDtcbiAgfVxuXG4gIC8vIEdldCBvciBjcmVhdGUgY2FudmFzIHVzaW5nIHRoZSBuZXcgQ2FudmFzTWFuYWdlclxuICBnZXRDYW52YXMoKSB7XG4gICAgaWYgKHRoaXMuY2FudmFzTWFuYWdlcikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FudmFzTWFuYWdlci5nZXRDYW52YXMoKSB8fCB0aGlzLmNhbnZhc01hbmFnZXIuY3JlYXRlQ2FudmFzKCk7XG4gICAgfVxuICAgIFxuICAgIC8vIEZhbGxiYWNrIHRvIGNhbnZhc1JlZiBpZiBjYW52YXNNYW5hZ2VyIG5vdCBhdmFpbGFibGVcbiAgICByZXR1cm4gdGhpcy5jYW52YXNSZWY/LmN1cnJlbnQgfHwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RyYWNraW5nLWNhbnZhcycpO1xuICB9XG5cbiAgLy8gV2FpdCB1bnRpbCBjYW52YXMgaXMgZnVsbHkgcmVhZHlcbiAgYXN5bmMgd2FpdEZvckNhbnZhcyhtYXhUcmllcyA9IDIwLCBpbnRlcnZhbCA9IDEwMCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4VHJpZXM7IGkrKykge1xuICAgICAgY29uc3QgY2FudmFzID0gdGhpcy5nZXRDYW52YXMoKTtcbiAgICAgIGlmIChjYW52YXMgJiYgY2FudmFzLndpZHRoID4gMCAmJiBjYW52YXMuaGVpZ2h0ID4gMCkge1xuICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgICAgfVxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGludGVydmFsKSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbnZhcyBub3QgcmVhZHkgYWZ0ZXIgbXVsdGlwbGUgYXR0ZW1wdHNcIik7XG4gIH1cblxuICAvLyBNYWluIGhhbmRsZXIgZm9yIFNldCBSYW5kb20gYnV0dG9uXG4gIGhhbmRsZUFjdGlvbiA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gR2V0IGNvbnRyb2wgdmFsdWVzIGZyb20gdGhlIFRvcEJhclxuICAgICAgY29uc3QgdGltZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRyb2wtaW5wdXQtZmllbGRbZGF0YS1jb250cm9sPVwidGltZVwiXScpO1xuICAgICAgY29uc3QgZGVsYXlJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250cm9sLWlucHV0LWZpZWxkW2RhdGEtY29udHJvbD1cImRlbGF5XCJdJyk7XG4gICAgICBcbiAgICAgIC8vIERlZmF1bHQgdmFsdWVzIGlmIGlucHV0cyBjYW4ndCBiZSBmb3VuZFxuICAgICAgbGV0IHRpbWVzID0gMTtcbiAgICAgIGxldCBkZWxheSA9IDM7XG4gICAgICBcbiAgICAgIC8vIFBhcnNlIGlucHV0IHZhbHVlcyBpZiBhdmFpbGFibGVcbiAgICAgIGlmICh0aW1lSW5wdXQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkVGltZSA9IHBhcnNlSW50KHRpbWVJbnB1dC52YWx1ZSwgMTApO1xuICAgICAgICBpZiAoIWlzTmFOKHBhcnNlZFRpbWUpICYmIHBhcnNlZFRpbWUgPiAwKSB7XG4gICAgICAgICAgdGltZXMgPSBwYXJzZWRUaW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChkZWxheUlucHV0KSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZERlbGF5ID0gcGFyc2VJbnQoZGVsYXlJbnB1dC52YWx1ZSwgMTApO1xuICAgICAgICBpZiAoIWlzTmFOKHBhcnNlZERlbGF5KSAmJiBwYXJzZWREZWxheSA+IDApIHtcbiAgICAgICAgICBkZWxheSA9IHBhcnNlZERlbGF5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEhpZGUgVUkgZHVyaW5nIGNhcHR1cmUgcHJvY2Vzc1xuICAgICAgaWYgKHRoaXMudG9nZ2xlVG9wQmFyKSB0aGlzLnRvZ2dsZVRvcEJhcihmYWxzZSk7XG4gICAgICBcbiAgICAgIHRoaXMub25TdGF0dXNVcGRhdGU/Lih7XG4gICAgICAgIHByb2Nlc3NTdGF0dXM6IGBTdGFydGluZyAke3RpbWVzfSByYW5kb20gY2FwdHVyZXMgd2l0aCAke2RlbGF5fXMgZGVsYXkuLi5gLFxuICAgICAgICBpc0NhcHR1cmluZzogdHJ1ZSxcbiAgICAgICAgcmVtYWluaW5nQ2FwdHVyZXM6IHRpbWVzXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gV2FpdCBmb3IgY2FudmFzIHRvIGJlIHJlYWR5XG4gICAgICBjb25zdCBjYW52YXMgPSBhd2FpdCB0aGlzLndhaXRGb3JDYW52YXMoKTtcbiAgICAgIFxuICAgICAgLy8gVXNlIGNhbnZhcyBtYW5hZ2VyIHRvIGVudGVyIGZ1bGxzY3JlZW5cbiAgICAgIGlmICh0aGlzLmNhbnZhc01hbmFnZXIpIHtcbiAgICAgICAgdGhpcy5jYW52YXNNYW5hZ2VyLmVudGVyRnVsbHNjcmVlbigpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBQcm9jZXNzIGFsbCBjYXB0dXJlcyBzZXF1ZW50aWFsbHlcbiAgICAgIGxldCBzdWNjZXNzQ291bnQgPSAwO1xuICAgICAgbGV0IGN1cnJlbnRDYXB0dXJlID0gMTtcbiAgICAgIFxuICAgICAgd2hpbGUgKGN1cnJlbnRDYXB0dXJlIDw9IHRpbWVzKSB7XG4gICAgICAgIC8vIFVwZGF0ZSBzdGF0dXMgZm9yIGN1cnJlbnQgY2FwdHVyZVxuICAgICAgICB0aGlzLm9uU3RhdHVzVXBkYXRlPy4oe1xuICAgICAgICAgIHByb2Nlc3NTdGF0dXM6IGBDYXB0dXJlICR7Y3VycmVudENhcHR1cmV9IG9mICR7dGltZXN9YCxcbiAgICAgICAgICByZW1haW5pbmdDYXB0dXJlczogdGltZXMgLSBjdXJyZW50Q2FwdHVyZSArIDEsXG4gICAgICAgICAgaXNDYXB0dXJpbmc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBDbGVhciBjYW52YXMgYmVmb3JlIGVhY2ggY2FwdHVyZVxuICAgICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgIFxuICAgICAgICAvLyBHZW5lcmF0ZSByYW5kb20gcG9zaXRpb24gZm9yIHRoaXMgY2FwdHVyZVxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJhbmRvbVBvc2l0aW9uKGNhbnZhcywgMjApO1xuICAgICAgICBcbiAgICAgICAgLy8gRHJhdyB0aGUgZG90IHdpdGggY29uc2lzdGVudCBzaXplXG4gICAgICAgIGRyYXdSZWREb3QoY3R4LCBwb3NpdGlvbi54LCBwb3NpdGlvbi55LCAxMiwgZmFsc2UpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXRlIGEgcmVkcmF3SW50ZXJ2YWwgdG8gZW5zdXJlIGRvdCBzdGF5cyB2aXNpYmxlXG4gICAgICAgIGxldCByZWRyYXdJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICBkcmF3UmVkRG90KGN0eCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgMTIsIGZhbHNlKTtcbiAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFJ1biBjb3VudGRvd24gYW5kIHdhaXQgZm9yIGl0IHRvIGNvbXBsZXRlXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICAgIHJ1bkNvdW50ZG93bihcbiAgICAgICAgICAgIHBvc2l0aW9uLFxuICAgICAgICAgICAgY2FudmFzLFxuICAgICAgICAgICAgKHN0YXR1cykgPT4ge1xuICAgICAgICAgICAgICAvLyBVcGRhdGUgVUkgYmFzZWQgb24gc3RhdHVzXG4gICAgICAgICAgICAgIGlmIChzdGF0dXMucHJvY2Vzc1N0YXR1cykge1xuICAgICAgICAgICAgICAgIHRoaXMub25TdGF0dXNVcGRhdGU/Lih7XG4gICAgICAgICAgICAgICAgICBwcm9jZXNzU3RhdHVzOiBgQ2FwdHVyZSAke2N1cnJlbnRDYXB0dXJlfS8ke3RpbWVzfTogJHtzdGF0dXMucHJvY2Vzc1N0YXR1c31gLFxuICAgICAgICAgICAgICAgICAgcmVtYWluaW5nQ2FwdHVyZXM6IHRpbWVzIC0gY3VycmVudENhcHR1cmUgKyAxLFxuICAgICAgICAgICAgICAgICAgaXNDYXB0dXJpbmc6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc29sdmUgLy8gVGhpcyB3aWxsIGJlIGNhbGxlZCB3aGVuIGNvdW50ZG93biBjb21wbGV0ZXNcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIENsZWFyIHJlZHJhd0ludGVydmFsIGFmdGVyIGNvdW50ZG93blxuICAgICAgICBjbGVhckludGVydmFsKHJlZHJhd0ludGVydmFsKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFRyaWdnZXIgY2FtZXJhIGFjY2VzcyBiZWZvcmUgY2FwdHVyZVxuICAgICAgICBpZiAodGhpcy50cmlnZ2VyQ2FtZXJhQWNjZXNzKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGNhbWVyYVJlc3VsdCA9IHRoaXMudHJpZ2dlckNhbWVyYUFjY2Vzcyh0cnVlKTtcbiAgICAgICAgICAgIGlmICghY2FtZXJhUmVzdWx0KSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybignQ2FtZXJhIGFjY2VzcyBmYWlsZWQsIGJ1dCBjb250aW51aW5nIHdpdGggY2FwdHVyZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NhbWVyYSBhY2Nlc3MgZXJyb3IsIGJ1dCBjb250aW51aW5nIHdpdGggY2FwdHVyZTonLCBlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBXYWl0IGJyaWVmbHkgZm9yIGNhbWVyYSB0byBpbml0aWFsaXplXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCA1MDApKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENhcHR1cmUgaW1hZ2VzIGF0IHRoaXMgcG9pbnRcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBjYXB0dXJlUmVzdWx0ID0gYXdhaXQgY2FwdHVyZUltYWdlc0F0UG9pbnQoe1xuICAgICAgICAgICAgcG9pbnQ6IHBvc2l0aW9uLFxuICAgICAgICAgICAgY2FwdHVyZUNvdW50OiB0aGlzLmNhcHR1cmVDb3VudGVyLFxuICAgICAgICAgICAgY2FudmFzUmVmOiB7IGN1cnJlbnQ6IGNhbnZhcyB9LFxuICAgICAgICAgICAgc2V0Q2FwdHVyZUNvdW50OiB0aGlzLnNldENhcHR1cmVDb3VudGVyLFxuICAgICAgICAgICAgc2hvd0NhcHR1cmVQcmV2aWV3XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKGNhcHR1cmVSZXN1bHQgJiYgKGNhcHR1cmVSZXN1bHQuc2NyZWVuSW1hZ2UgfHwgY2FwdHVyZVJlc3VsdC5zdWNjZXNzKSkge1xuICAgICAgICAgICAgc3VjY2Vzc0NvdW50Kys7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIEluY3JlbWVudCBjb3VudGVyXG4gICAgICAgICAgaWYgKHRoaXMuc2V0Q2FwdHVyZUNvdW50ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2FwdHVyZUNvdW50ZXIocHJldiA9PiBwcmV2ICsgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGNhcHR1cmluZyBwb2ludCAke2N1cnJlbnRDYXB0dXJlfTpgLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFdhaXQgYmV0d2VlbiBjYXB0dXJlcyBmb3IgdGhlIHNwZWNpZmllZCBkZWxheSB0aW1lXG4gICAgICAgIGlmIChjdXJyZW50Q2FwdHVyZSA8IHRpbWVzKSB7XG4gICAgICAgICAgdGhpcy5vblN0YXR1c1VwZGF0ZT8uKHtcbiAgICAgICAgICAgIHByb2Nlc3NTdGF0dXM6IGBXYWl0aW5nICR7ZGVsYXl9cyBiZWZvcmUgbmV4dCBjYXB0dXJlLi4uYCxcbiAgICAgICAgICAgIHJlbWFpbmluZ0NhcHR1cmVzOiB0aW1lcyAtIGN1cnJlbnRDYXB0dXJlLFxuICAgICAgICAgICAgaXNDYXB0dXJpbmc6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBcbiAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgZGVsYXkgKiAxMDAwKSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIE1vdmUgdG8gbmV4dCBjYXB0dXJlXG4gICAgICAgIGN1cnJlbnRDYXB0dXJlKys7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFNlcXVlbmNlIGNvbXBsZXRlXG4gICAgICB0aGlzLm9uU3RhdHVzVXBkYXRlPy4oe1xuICAgICAgICBwcm9jZXNzU3RhdHVzOiBgUmFuZG9tIGNhcHR1cmUgc2VxdWVuY2UgY29tcGxldGVkOiAke3N1Y2Nlc3NDb3VudH0vJHt0aW1lc30gY2FwdHVyZXMgc3VjY2Vzc2Z1bGAsXG4gICAgICAgIHJlbWFpbmluZ0NhcHR1cmVzOiAwLFxuICAgICAgICBpc0NhcHR1cmluZzogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBDbGVhciB0aGUgbGFzdCBkb3RcbiAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgIFxuICAgICAgLy8gRXhpdCBmdWxsc2NyZWVuIGFuZCByZXN0b3JlIGNhbnZhc1xuICAgICAgaWYgKHRoaXMuY2FudmFzTWFuYWdlcikge1xuICAgICAgICB0aGlzLmNhbnZhc01hbmFnZXIuZXhpdEZ1bGxzY3JlZW4oKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gVHVybiBUb3BCYXIgYmFjayBvblxuICAgICAgaWYgKHRoaXMudG9nZ2xlVG9wQmFyKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlVG9wQmFyKHRydWUpO1xuICAgICAgfVxuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdSYW5kb20gc2VxdWVuY2UgZXJyb3I6JywgZXJyKTtcbiAgICAgIHRoaXMub25TdGF0dXNVcGRhdGU/Lih7XG4gICAgICAgIHByb2Nlc3NTdGF0dXM6IGBSYW5kb20gc2VxdWVuY2UgZmFpbGVkOiAke2Vyci5tZXNzYWdlfWAsXG4gICAgICAgIGlzQ2FwdHVyaW5nOiBmYWxzZSxcbiAgICAgICAgcmVtYWluaW5nQ2FwdHVyZXM6IDBcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBNYWtlIHN1cmUgdG8gcmVzdG9yZSB0aGUgVUlcbiAgICAgIGlmICh0aGlzLnRvZ2dsZVRvcEJhcikgdGhpcy50b2dnbGVUb3BCYXIodHJ1ZSk7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBTZXRSYW5kb21BY3Rpb247ICJdLCJuYW1lcyI6WyJSZWFjdCIsImdldFJhbmRvbVBvc2l0aW9uIiwiZHJhd1JlZERvdCIsInJ1bkNvdW50ZG93biIsInNob3dDYXB0dXJlUHJldmlldyIsImNhcHR1cmVJbWFnZXNBdFBvaW50IiwiU2V0UmFuZG9tQWN0aW9uIiwiZ2V0Q2FudmFzIiwiY2FudmFzTWFuYWdlciIsImNyZWF0ZUNhbnZhcyIsImNhbnZhc1JlZiIsImN1cnJlbnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3YWl0Rm9yQ2FudmFzIiwibWF4VHJpZXMiLCJpbnRlcnZhbCIsImkiLCJjYW52YXMiLCJ3aWR0aCIsImhlaWdodCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJoYW5kbGVBY3Rpb24iLCJ0aW1lSW5wdXQiLCJkZWxheUlucHV0IiwidGltZXMiLCJkZWxheSIsInBhcnNlZFRpbWUiLCJwYXJzZUludCIsInZhbHVlIiwiaXNOYU4iLCJwYXJzZWREZWxheSIsInRvZ2dsZVRvcEJhciIsIm9uU3RhdHVzVXBkYXRlIiwicHJvY2Vzc1N0YXR1cyIsImlzQ2FwdHVyaW5nIiwicmVtYWluaW5nQ2FwdHVyZXMiLCJlbnRlckZ1bGxzY3JlZW4iLCJzdWNjZXNzQ291bnQiLCJjdXJyZW50Q2FwdHVyZSIsImN0eCIsImdldENvbnRleHQiLCJjbGVhclJlY3QiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsInBvc2l0aW9uIiwieCIsInkiLCJyZWRyYXdJbnRlcnZhbCIsInNldEludGVydmFsIiwic3RhdHVzIiwiY2xlYXJJbnRlcnZhbCIsInRyaWdnZXJDYW1lcmFBY2Nlc3MiLCJjYW1lcmFSZXN1bHQiLCJjb25zb2xlIiwid2FybiIsImVycm9yIiwiY2FwdHVyZVJlc3VsdCIsInBvaW50IiwiY2FwdHVyZUNvdW50IiwiY2FwdHVyZUNvdW50ZXIiLCJzZXRDYXB0dXJlQ291bnQiLCJzZXRDYXB0dXJlQ291bnRlciIsInNjcmVlbkltYWdlIiwic3VjY2VzcyIsInByZXYiLCJleGl0RnVsbHNjcmVlbiIsImVyciIsIm1lc3NhZ2UiLCJ3aW5kb3ciXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./components/collected-dataset-customized/Action/SetRandomAction.jsx\n"));

/***/ })

});
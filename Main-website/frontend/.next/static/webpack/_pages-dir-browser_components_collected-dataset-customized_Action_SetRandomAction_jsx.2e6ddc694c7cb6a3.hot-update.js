"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_pages-dir-browser_components_collected-dataset-customized_Action_SetRandomAction_jsx",{

/***/ "(pages-dir-browser)/./components/collected-dataset-customized/Action/SetRandomAction.jsx":
/*!****************************************************************************!*\
  !*** ./components/collected-dataset-customized/Action/SetRandomAction.jsx ***!
  \****************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _countSave_jsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./countSave.jsx */ \"(pages-dir-browser)/./components/collected-dataset-customized/Action/countSave.jsx\");\n/* harmony import */ var _Helper_savefile__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Helper/savefile */ \"(pages-dir-browser)/./components/collected-dataset-customized/Helper/savefile.js\");\n// SetRandomAction.jsx\n// Handles the set random sequence functionality\n\n\n\nclass SetRandomAction {\n    // Get or create canvas using the canvas management system from actionButton.js\n    getCanvas() {\n        var _this_canvasRef;\n        // First try to use canvasUtils from actionButton.js\n        if (this.canvasUtils && typeof this.canvasUtils.getCanvas === 'function') {\n            return this.canvasUtils.getCanvas();\n        }\n        // Fallback to canvasManager\n        if (this.canvasManager && typeof this.canvasManager.getCanvas === 'function') {\n            return this.canvasManager.getCanvas() || this.canvasManager.createCanvas();\n        }\n        // Fallback to canvasRef if canvasManager not available\n        return ((_this_canvasRef = this.canvasRef) === null || _this_canvasRef === void 0 ? void 0 : _this_canvasRef.current) || document.querySelector('#tracking-canvas');\n    }\n    // Enter fullscreen using the canvas management system\n    enterFullscreen() {\n        if (this.canvasUtils && typeof this.canvasUtils.enterFullscreen === 'function') {\n            return this.canvasUtils.enterFullscreen();\n        }\n        if (this.canvasManager && typeof this.canvasManager.enterFullscreen === 'function') {\n            this.canvasManager.enterFullscreen();\n            return this.canvasManager.getCanvas();\n        }\n        // Fallback: manually enter fullscreen\n        const canvas = this.getCanvas();\n        if (canvas) {\n            document.body.appendChild(canvas);\n            canvas.style.cssText = \"\\n        position: fixed;\\n        top: 0;\\n        left: 0;\\n        width: 100vw;\\n        height: 100vh;\\n        z-index: 99999;\\n        background-color: white;\\n        border: none;\\n        display: block;\\n        opacity: 1;\\n        pointer-events: auto;\\n        margin: 0;\\n        padding: 0;\\n        box-sizing: border-box;\\n      \";\n            canvas.width = window.innerWidth;\n            canvas.height = window.innerHeight;\n            // Clear with white background\n            const ctx = canvas.getContext('2d');\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n        return canvas;\n    }\n    // Exit fullscreen using the canvas management system\n    exitFullscreen() {\n        if (this.canvasUtils && typeof this.canvasUtils.exitFullscreen === 'function') {\n            return this.canvasUtils.exitFullscreen();\n        }\n        if (this.canvasManager && typeof this.canvasManager.exitFullscreen === 'function') {\n            this.canvasManager.exitFullscreen();\n            return this.canvasManager.getCanvas();\n        }\n        // Fallback: manually exit fullscreen\n        const canvas = this.getCanvas();\n        if (canvas) {\n            const container = document.querySelector('.canvas-container') || document.querySelector('.main-content') || document.body;\n            container.appendChild(canvas);\n            canvas.style.position = 'relative';\n            canvas.style.top = '';\n            canvas.style.left = '';\n            canvas.style.width = '100%';\n            canvas.style.height = '100%';\n            canvas.style.zIndex = '';\n            canvas.style.backgroundColor = 'white';\n        }\n        return canvas;\n    }\n    // Clear canvas using the canvas management system\n    clearCanvas() {\n        if (this.canvasUtils && typeof this.canvasUtils.clear === 'function') {\n            this.canvasUtils.clear();\n            return;\n        }\n        if (this.canvasManager && typeof this.canvasManager.clear === 'function') {\n            this.canvasManager.clear();\n            return;\n        }\n        // Fallback: manually clear canvas\n        const canvas = this.getCanvas();\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.fillStyle = 'yellow';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n    }\n    // Draw dot using the canvas management system\n    drawDot(x, y) {\n        let radius = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 12;\n        if (this.canvasUtils && typeof this.canvasUtils.drawDot === 'function') {\n            return this.canvasUtils.drawDot(x, y, radius);\n        }\n        // Fallback: manually draw dot\n        const canvas = this.getCanvas();\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            (0,_countSave_jsx__WEBPACK_IMPORTED_MODULE_1__.drawRedDot)(ctx, x, y, radius, false);\n            return true;\n        }\n        return false;\n    }\n    // Wait until canvas is fully ready\n    async waitForCanvas() {\n        let maxTries = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 20, interval = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 100;\n        for(let i = 0; i < maxTries; i++){\n            const canvas = this.getCanvas();\n            if (canvas && canvas.width > 0 && canvas.height > 0) {\n                return canvas;\n            }\n            await new Promise((resolve)=>setTimeout(resolve, interval));\n        }\n        throw new Error(\"Canvas not ready after multiple attempts\");\n    }\n    constructor(config){\n        // Main handler for Set Random button\n        this.handleAction = async ()=>{\n            try {\n                var _this_onStatusUpdate, _this, // Sequence complete\n                _this_onStatusUpdate1, _this1;\n                // Get control values from the TopBar\n                const timeInput = document.querySelector('.control-input-field[data-control=\"time\"]');\n                const delayInput = document.querySelector('.control-input-field[data-control=\"delay\"]');\n                // Default values if inputs can't be found\n                let times = 1;\n                let delay = 3;\n                // Parse input values if available\n                if (timeInput) {\n                    const parsedTime = parseInt(timeInput.value, 10);\n                    if (!isNaN(parsedTime) && parsedTime > 0) {\n                        times = parsedTime;\n                    }\n                }\n                if (delayInput) {\n                    const parsedDelay = parseInt(delayInput.value, 10);\n                    if (!isNaN(parsedDelay) && parsedDelay > 0) {\n                        delay = parsedDelay;\n                    }\n                }\n                // Hide UI during capture process\n                if (this.toggleTopBar) this.toggleTopBar(false);\n                (_this_onStatusUpdate = (_this = this).onStatusUpdate) === null || _this_onStatusUpdate === void 0 ? void 0 : _this_onStatusUpdate.call(_this, {\n                    processStatus: \"Starting \".concat(times, \" random captures with \").concat(delay, \"s delay...\"),\n                    isCapturing: true,\n                    remainingCaptures: times\n                });\n                // Wait for canvas to be ready\n                const canvas = await this.waitForCanvas();\n                // Use canvas management system to enter fullscreen\n                this.enterFullscreen();\n                // Process all captures sequentially\n                let successCount = 0;\n                let currentCapture = 1;\n                while(currentCapture <= times){\n                    var // Update status for current capture\n                    _this_onStatusUpdate2, _this2;\n                    (_this_onStatusUpdate2 = (_this2 = this).onStatusUpdate) === null || _this_onStatusUpdate2 === void 0 ? void 0 : _this_onStatusUpdate2.call(_this2, {\n                        processStatus: \"Capture \".concat(currentCapture, \" of \").concat(times),\n                        remainingCaptures: times - currentCapture + 1,\n                        isCapturing: true\n                    });\n                    // Clear canvas before each capture using canvas management system\n                    this.clearCanvas();\n                    // Generate random position for this capture\n                    const position = (0,_countSave_jsx__WEBPACK_IMPORTED_MODULE_1__.getRandomPosition)(canvas, 20);\n                    // Draw the dot using canvas management system\n                    this.drawDot(position.x, position.y, 12);\n                    // Create a redrawInterval to ensure dot stays visible\n                    let redrawInterval = setInterval(()=>{\n                        this.drawDot(position.x, position.y, 12);\n                    }, 200);\n                    // Run countdown and wait for it to complete\n                    await new Promise((resolve)=>{\n                        (0,_countSave_jsx__WEBPACK_IMPORTED_MODULE_1__.runCountdown)(position, canvas, (status)=>{\n                            // Update UI based on status\n                            if (status.processStatus) {\n                                var _this_onStatusUpdate, _this;\n                                (_this_onStatusUpdate = (_this = this).onStatusUpdate) === null || _this_onStatusUpdate === void 0 ? void 0 : _this_onStatusUpdate.call(_this, {\n                                    processStatus: \"Capture \".concat(currentCapture, \"/\").concat(times, \": \").concat(status.processStatus),\n                                    remainingCaptures: times - currentCapture + 1,\n                                    isCapturing: true\n                                });\n                            }\n                        }, resolve // This will be called when countdown completes\n                        );\n                    });\n                    // Clear redrawInterval after countdown\n                    clearInterval(redrawInterval);\n                    // Trigger camera access before capture\n                    if (this.triggerCameraAccess) {\n                        try {\n                            const cameraResult = this.triggerCameraAccess(true);\n                            if (!cameraResult) {\n                                console.warn('Camera access failed, but continuing with capture');\n                            }\n                        } catch (error) {\n                            console.warn('Camera access error, but continuing with capture:', error);\n                        }\n                    }\n                    // Wait briefly for camera to initialize\n                    await new Promise((resolve)=>setTimeout(resolve, 500));\n                    // Capture images at this point\n                    try {\n                        const captureResult = await (0,_Helper_savefile__WEBPACK_IMPORTED_MODULE_2__.captureImagesAtPoint)({\n                            point: position,\n                            captureCount: this.captureCounter,\n                            canvasRef: {\n                                current: canvas\n                            },\n                            setCaptureCount: this.setCaptureCounter,\n                            showCapturePreview: _countSave_jsx__WEBPACK_IMPORTED_MODULE_1__.showCapturePreview\n                        });\n                        if (captureResult && (captureResult.screenImage || captureResult.success)) {\n                            successCount++;\n                        }\n                        // Increment counter\n                        if (this.setCaptureCounter) {\n                            this.setCaptureCounter((prev)=>prev + 1);\n                        }\n                    } catch (error) {\n                        console.error(\"Error capturing point \".concat(currentCapture, \":\"), error);\n                    }\n                    // Wait between captures for the specified delay time\n                    if (currentCapture < times) {\n                        var _this_onStatusUpdate3, _this3;\n                        (_this_onStatusUpdate3 = (_this3 = this).onStatusUpdate) === null || _this_onStatusUpdate3 === void 0 ? void 0 : _this_onStatusUpdate3.call(_this3, {\n                            processStatus: \"Waiting \".concat(delay, \"s before next capture...\"),\n                            remainingCaptures: times - currentCapture,\n                            isCapturing: true\n                        });\n                        await new Promise((resolve)=>setTimeout(resolve, delay * 1000));\n                    }\n                    // Move to next capture\n                    currentCapture++;\n                }\n                (_this_onStatusUpdate1 = (_this1 = this).onStatusUpdate) === null || _this_onStatusUpdate1 === void 0 ? void 0 : _this_onStatusUpdate1.call(_this1, {\n                    processStatus: \"Random capture sequence completed: \".concat(successCount, \"/\").concat(times, \" captures successful\"),\n                    remainingCaptures: 0,\n                    isCapturing: false\n                });\n                // Clear the last dot using canvas management system\n                this.clearCanvas();\n                // Exit fullscreen and restore canvas using canvas management system\n                this.exitFullscreen();\n                // Turn TopBar back on\n                if (this.toggleTopBar) {\n                    this.toggleTopBar(true);\n                }\n            } catch (err) {\n                var _this_onStatusUpdate4, _this4;\n                console.error('Random sequence error:', err);\n                (_this_onStatusUpdate4 = (_this4 = this).onStatusUpdate) === null || _this_onStatusUpdate4 === void 0 ? void 0 : _this_onStatusUpdate4.call(_this4, {\n                    processStatus: \"Random sequence failed: \".concat(err.message),\n                    isCapturing: false,\n                    remainingCaptures: 0\n                });\n                // Make sure to restore the UI\n                if (this.toggleTopBar) this.toggleTopBar(true);\n            }\n        };\n        // Required properties\n        this.canvasRef = config.canvasRef;\n        this.onStatusUpdate = config.onStatusUpdate;\n        this.setCaptureCounter = config.setCaptureCounter;\n        this.toggleTopBar = config.toggleTopBar;\n        this.captureCounter = config.captureCounter || 1;\n        this.triggerCameraAccess = config.triggerCameraAccess;\n        // Get canvas manager and utilities from global scope (from actionButton.js)\n        this.canvasManager =  true ? window.canvasManager : 0;\n        this.canvasUtils =  true ? window.canvasUtils : 0;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SetRandomAction);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./components/collected-dataset-customized/Action/SetRandomAction.jsx\n"));

/***/ })

});
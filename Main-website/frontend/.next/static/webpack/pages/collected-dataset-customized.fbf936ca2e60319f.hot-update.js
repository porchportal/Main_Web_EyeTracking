"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/collected-dataset-customized",{

/***/ "(pages-dir-browser)/./components/collected-dataset-customized/Action/countSave.jsx":
/*!**********************************************************************!*\
  !*** ./components/collected-dataset-customized/Action/countSave.jsx ***!
  \**********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calibrationCapture: () => (/* binding */ calibrationCapture),\n/* harmony export */   captureAndPreviewProcess: () => (/* binding */ captureAndPreviewProcess),\n/* harmony export */   captureImages: () => (/* binding */ captureImages),\n/* harmony export */   createCountdownElement: () => (/* binding */ createCountdownElement),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   drawRedDot: () => (/* binding */ drawRedDot),\n/* harmony export */   getRandomPosition: () => (/* binding */ getRandomPosition),\n/* harmony export */   runCountdown: () => (/* binding */ runCountdown),\n/* harmony export */   showCapturePreview: () => (/* binding */ showCapturePreview)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Helper_savefile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Helper/savefile */ \"(pages-dir-browser)/./components/collected-dataset-customized/Helper/savefile.js\");\n// Fixed countSave.jsx - Resolving redrawInterval reference error\n// Shared functionality for countdown and image capture processes\n\n\n/**\n * Get canvas management utilities from global scope (from actionButton.js)\n * @returns {Object} Canvas utilities object\n */ const getCanvasUtils = ()=>{\n    if (true) {\n        return {\n            canvasUtils: window.canvasUtils,\n            canvasManager: window.canvasManager\n        };\n    }\n    return {\n        canvasUtils: null,\n        canvasManager: null\n    };\n};\n/**\n * Get or create canvas using the canvas management system from actionButton.js\n * @returns {HTMLCanvasElement} Canvas element\n */ const getCanvas = ()=>{\n    const { canvasUtils, canvasManager } = getCanvasUtils();\n    // First try to use canvasUtils from actionButton.js\n    if (canvasUtils && typeof canvasUtils.getCanvas === 'function') {\n        return canvasUtils.getCanvas();\n    }\n    // Fallback to canvasManager\n    if (canvasManager && typeof canvasManager.getCanvas === 'function') {\n        return canvasManager.getCanvas() || canvasManager.createCanvas();\n    }\n    // Fallback to direct query\n    return document.querySelector('#tracking-canvas');\n};\n/**\n * Draw dot using the canvas management system\n * @param {number} x - X coordinate\n * @param {number} y - Y coordinate\n * @param {number} radius - Dot radius\n * @returns {boolean} Success status\n */ const drawDotWithCanvasManager = function(x, y) {\n    let radius = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 12;\n    const { canvasUtils } = getCanvasUtils();\n    if (canvasUtils && typeof canvasUtils.drawDot === 'function') {\n        return canvasUtils.drawDot(x, y, radius);\n    }\n    // Fallback: manually draw dot\n    const canvas = getCanvas();\n    if (canvas) {\n        const ctx = canvas.getContext('2d');\n        drawRedDot(ctx, x, y, radius, false);\n        return true;\n    }\n    return false;\n};\n/**\n * Creates and displays a countdown element above a dot position\n * @param {Object} position - {x, y} position of the dot\n * @param {DOMRect} canvasRect - getBoundingClientRect() of the canvas\n * @returns {HTMLElement} - The created countdown element\n */ const createCountdownElement = (position, canvasRect)=>{\n    if (!position || typeof position.x !== 'number' || typeof position.y !== 'number') {\n        console.warn('[createCountdownElement] Invalid position:', position);\n        return null;\n    }\n    // Remove any existing countdown elements\n    const existingCountdowns = document.querySelectorAll('.calibrate-countdown, .forced-countdown, .center-countdown-backup, .dot-countdown, .test-countdown');\n    existingCountdowns.forEach((el)=>{\n        console.log('Removing existing countdown element:', el);\n        if (el.parentNode) {\n            el.parentNode.removeChild(el);\n        }\n    });\n    // Get canvas to check if we need coordinate transformation\n    const canvas = getCanvas();\n    let displayPosition = position;\n    if (canvas) {\n        // Check if canvas is in fullscreen mode\n        const isFullscreen = canvas.style.position === 'fixed' && (canvas.style.width === '100vw' || canvas.style.width === '100%');\n        if (isFullscreen) {\n            // Canvas is in fullscreen mode, use direct coordinates\n            displayPosition = {\n                x: position.x,\n                y: position.y\n            };\n        } else {\n            // Canvas is in normal mode, use canvas-relative coordinates\n            displayPosition = {\n                x: canvasRect.left + position.x,\n                y: canvasRect.top + position.y\n            };\n        }\n    }\n    console.log('[createCountdownElement] Creating countdown at position:', {\n        original: position,\n        display: displayPosition,\n        canvasRect: canvasRect,\n        canvasFullscreen: canvas ? canvas.style.position === 'fixed' && canvas.style.width === '100vw' : false\n    });\n    // Create the main countdown element\n    const countdownElement = document.createElement('div');\n    countdownElement.className = 'dot-countdown';\n    countdownElement.style.cssText = \"\\n    position: fixed;\\n    left: \".concat(displayPosition.x, \"px;\\n    top: \").concat(displayPosition.y - 80, \"px;\\n    transform: translateX(-50%);\\n    color: red;\\n    font-size: 64px;\\n    font-weight: bold;\\n    text-shadow: 0 0 20px white, 0 0 30px white, 0 0 40px white;\\n    z-index: 10;\\n    background-color: rgba(255, 255, 255, 0.98);\\n    border: 4px solid red;\\n    border-radius: 50%;\\n    width: 100px;\\n    height: 100px;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    box-shadow: 0 0 30px rgba(0, 0, 0, 0.7), 0 0 50px rgba(255, 0, 0, 0.5);\\n    animation: countdownPulse 1s infinite;\\n    pointer-events: none;\\n    user-select: none;\\n  \");\n    // Add CSS animation for pulse effect\n    if (!document.querySelector('#countdown-styles')) {\n        const style = document.createElement('style');\n        style.id = 'countdown-styles';\n        style.textContent = \"\\n      @keyframes countdownPulse {\\n        0% { transform: translateX(-50%) scale(1); }\\n        50% { transform: translateX(-50%) scale(1.1); }\\n        100% { transform: translateX(-50%) scale(1); }\\n      }\\n    \";\n        document.head.appendChild(style);\n    }\n    document.body.appendChild(countdownElement);\n    console.log('createCountdownElement created at:', {\n        originalPosition: position,\n        displayPosition,\n        canvasRect,\n        canvasInfo: canvas ? {\n            position: canvas.style.position,\n            width: canvas.style.width,\n            height: canvas.style.height,\n            rect: canvas.getBoundingClientRect()\n        } : null\n    });\n    // Add a temporary visual indicator to show where the countdown is positioned\n    const indicator = document.createElement('div');\n    indicator.style.cssText = \"\\n    position: fixed;\\n    left: \".concat(displayPosition.x, \"px;\\n    top: \").concat(displayPosition.y, \"px;\\n    width: 10px;\\n    height: 10px;\\n    background-color: blue;\\n    border-radius: 50%;\\n    z-index: 10;\\n    pointer-events: none;\\n  \");\n    document.body.appendChild(indicator);\n    // Remove indicator after 2 seconds\n    setTimeout(()=>{\n        if (indicator.parentNode) {\n            indicator.parentNode.removeChild(indicator);\n        }\n    }, 2000);\n    return countdownElement;\n};\n/**\n * Display a preview of the captured images\n * @param {string} screenImage - Data URL of the screen image\n * @param {string} webcamImage - Data URL of the webcam image\n * @param {Object} point - {x, y} position of the dot\n */ const showCapturePreview = (screenImage, webcamImage, point)=>{\n    if (!screenImage && !webcamImage) return;\n    // Remove any existing previews\n    const existingPreviews = document.querySelectorAll('.capture-preview-container');\n    existingPreviews.forEach((preview)=>{\n        if (preview.parentNode) {\n            preview.parentNode.removeChild(preview);\n        }\n    });\n    // Create preview container\n    const previewContainer = document.createElement('div');\n    previewContainer.className = 'capture-preview-container';\n    previewContainer.style.cssText = \"\\n    position: fixed;\\n    top: 50%;\\n    left: 50%;\\n    transform: translate(-50%, -50%);\\n    display: flex;\\n    gap: 20px;\\n    background-color: rgba(0, 0, 0, 0.85);\\n    padding: 20px;\\n    border-radius: 12px;\\n    z-index: 10;\\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.6);\\n  \";\n    // Add screen image if available\n    if (screenImage) {\n        const screenPreview = document.createElement('div');\n        screenPreview.style.cssText = \"\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n    \";\n        const screenImg = document.createElement('img');\n        screenImg.src = screenImage;\n        screenImg.alt = 'Screen Capture';\n        screenImg.style.cssText = \"\\n      max-width: 320px;\\n      max-height: 240px;\\n      border: 3px solid white;\\n      border-radius: 8px;\\n      background-color: #333;\\n    \";\n        const screenLabel = document.createElement('div');\n        screenLabel.textContent = 'Screen Capture';\n        screenLabel.style.cssText = \"\\n      color: white;\\n      font-size: 14px;\\n      margin-top: 10px;\\n      font-weight: bold;\\n    \";\n        screenPreview.appendChild(screenImg);\n        screenPreview.appendChild(screenLabel);\n        previewContainer.appendChild(screenPreview);\n    }\n    // Add webcam image if available\n    if (webcamImage) {\n        const webcamPreview = document.createElement('div');\n        webcamPreview.style.cssText = \"\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n    \";\n        const webcamImg = document.createElement('img');\n        webcamImg.src = webcamImage;\n        webcamImg.alt = 'Webcam Capture';\n        webcamImg.style.cssText = \"\\n      max-width: 320px;\\n      max-height: 240px;\\n      border: 3px solid white;\\n      border-radius: 8px;\\n      background-color: #333;\\n    \";\n        const webcamLabel = document.createElement('div');\n        webcamLabel.textContent = 'Webcam Capture';\n        webcamLabel.style.cssText = \"\\n      color: white;\\n      font-size: 14px;\\n      margin-top: 10px;\\n      font-weight: bold;\\n    \";\n        webcamPreview.appendChild(webcamImg);\n        webcamPreview.appendChild(webcamLabel);\n        previewContainer.appendChild(webcamPreview);\n    }\n    // Add point info\n    if (point) {\n        const pointInfo = document.createElement('div');\n        pointInfo.textContent = point.label ? \"\".concat(point.label, \": x=\").concat(Math.round(point.x), \", y=\").concat(Math.round(point.y)) : \"Point: x=\".concat(Math.round(point.x), \", y=\").concat(Math.round(point.y));\n        pointInfo.style.cssText = \"\\n      color: #ffcc00;\\n      font-size: 14px;\\n      position: absolute;\\n      top: -40px;\\n      left: 0;\\n      width: 100%;\\n      text-align: center;\\n    \";\n        previewContainer.appendChild(pointInfo);\n    }\n    // Add timer\n    const timerElement = document.createElement('div');\n    timerElement.textContent = '2.0s';\n    timerElement.style.cssText = \"\\n    position: absolute;\\n    bottom: -25px;\\n    right: 20px;\\n    color: white;\\n    font-size: 12px;\\n    background-color: rgba(0, 0, 0, 0.7);\\n    padding: 3px 8px;\\n    border-radius: 4px;\\n  \";\n    previewContainer.appendChild(timerElement);\n    // Add to document\n    document.body.appendChild(previewContainer);\n    // Countdown\n    let timeLeft = 2.0;\n    const interval = setInterval(()=>{\n        timeLeft -= 0.1;\n        if (timeLeft <= 0) {\n            clearInterval(interval);\n            previewContainer.style.opacity = '0';\n            previewContainer.style.transition = 'opacity 0.3s ease';\n            setTimeout(()=>{\n                if (previewContainer.parentNode) {\n                    previewContainer.parentNode.removeChild(previewContainer);\n                }\n            }, 300);\n        } else {\n            timerElement.textContent = \"\".concat(timeLeft.toFixed(1), \"s\");\n        }\n    }, 100);\n    // Safety cleanup\n    setTimeout(()=>{\n        if (previewContainer.parentNode) {\n            previewContainer.parentNode.removeChild(previewContainer);\n        }\n    }, 5000);\n};\n/**\n * Runs a countdown process that displays 3-2-1 above a dot\n * @param {Object} position - {x, y} position of the dot\n * @param {HTMLCanvasElement} canvas - Canvas element with the dot\n * @param {Function} onStatusUpdate - Function to update status messages\n * @param {Function} onComplete - Callback to execute when countdown completes\n */ const runCountdown = async (position, canvas, onStatusUpdate, onComplete)=>{\n    if (!position || typeof position.x !== 'number' || typeof position.y !== 'number') {\n        console.warn('[runCountdown] Invalid position:', position);\n        onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n            processStatus: \"Invalid dot position\",\n            countdownValue: null,\n            isCapturing: false\n        });\n        return;\n    }\n    const canvasRect = canvas.getBoundingClientRect();\n    const countdownElement = createCountdownElement(position, canvasRect);\n    if (!countdownElement) {\n        console.warn('[runCountdown] Countdown element could not be created.');\n        return;\n    }\n    // Get the backup countdown element\n    const backupCountdown = document.querySelector('.backup-countdown');\n    // Use canvas management system to draw dot\n    drawDotWithCanvasManager(position.x, position.y);\n    let count = 3;\n    countdownElement.textContent = count;\n    if (backupCountdown) {\n        backupCountdown.textContent = count;\n    }\n    onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n        processStatus: \"Countdown\",\n        countdownValue: count,\n        isCapturing: true\n    });\n    // Create redrawInterval for keeping dot visible during countdown\n    let redrawInterval = setInterval(()=>{\n        drawDotWithCanvasManager(position.x, position.y);\n    }, 200);\n    return new Promise((resolve)=>{\n        const countdownInterval = setInterval(()=>{\n            count--;\n            if (count <= 0) {\n                clearInterval(countdownInterval);\n                countdownElement.textContent = \"✓\";\n                if (backupCountdown) {\n                    backupCountdown.textContent = \"✓\";\n                }\n                onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                    countdownValue: \"Capturing...\",\n                    processStatus: \"Capturing image...\",\n                    isCapturing: true\n                });\n                setTimeout(()=>{\n                    // Remove both countdown elements\n                    if (countdownElement.parentNode) {\n                        countdownElement.parentNode.removeChild(countdownElement);\n                    }\n                    if (backupCountdown && backupCountdown.parentNode) {\n                        backupCountdown.parentNode.removeChild(backupCountdown);\n                    }\n                    drawDotWithCanvasManager(position.x, position.y);\n                    // Clear the redrawInterval we defined above\n                    if (redrawInterval) {\n                        clearInterval(redrawInterval);\n                    }\n                    if (onComplete) {\n                        drawDotWithCanvasManager(position.x, position.y);\n                        onComplete();\n                    }\n                    resolve();\n                }, 300);\n            } else {\n                countdownElement.textContent = count;\n                if (backupCountdown) {\n                    backupCountdown.textContent = count;\n                }\n                onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                    processStatus: \"Countdown\",\n                    countdownValue: count,\n                    isCapturing: true\n                });\n            }\n        }, 800);\n    });\n};\n/**\n * Draw a red dot on the canvas (legacy function for backward compatibility)\n * @param {CanvasRenderingContext2D} ctx - Canvas 2D context\n * @param {number} x - X coordinate\n * @param {number} y - Y coordinate\n * @param {number} radius - Dot radius\n * @param {boolean} clearCanvas - Whether to clear the canvas before drawing (default: true)\n * @returns {Object} - {x, y} position\n */ const drawRedDot = function(ctx, x, y) {\n    let radius = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 12, clearCanvas = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;\n    const canvas = ctx.canvas;\n    // Clear the canvas if requested (default behavior)\n    if (clearCanvas) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'yellow';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n    // Draw the dot with a bright red color\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = 'red';\n    ctx.fill();\n    // Add glow effect for better visibility\n    ctx.beginPath();\n    ctx.arc(x, y, radius + 3, 0, Math.PI * 2);\n    ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)';\n    ctx.lineWidth = 3;\n    ctx.stroke();\n    // Add a second larger glow for even better visibility\n    ctx.beginPath();\n    ctx.arc(x, y, radius + 6, 0, Math.PI * 2);\n    ctx.strokeStyle = 'rgba(255, 0, 0, 0.3)';\n    ctx.lineWidth = 2;\n    ctx.stroke();\n    console.log(\"Drew red dot at (\".concat(x, \", \").concat(y, \") with radius \").concat(radius));\n    return {\n        x,\n        y\n    };\n};\n/**\n * Get highest resolution camera constraints\n * @returns {Promise<Object>} - Camera constraints\n */ const getHighestResolutionConstraints = async ()=>{\n    try {\n        // Get all video input devices\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        const videoDevices = devices.filter((device)=>device.kind === 'videoinput');\n        if (videoDevices.length === 0) {\n            console.warn('No video devices found, using default constraints');\n            return {\n                video: true\n            };\n        }\n        // Try to get capabilities for the first video device\n        const stream = await navigator.mediaDevices.getUserMedia({\n            video: true\n        });\n        const videoTrack = stream.getVideoTracks()[0];\n        if (!videoTrack.getCapabilities) {\n            console.warn('getCapabilities not supported, using default constraints');\n            stream.getTracks().forEach((track)=>track.stop());\n            return {\n                video: true\n            };\n        }\n        const capabilities = videoTrack.getCapabilities();\n        stream.getTracks().forEach((track)=>track.stop());\n        if (!capabilities.width || !capabilities.height) {\n            console.warn('No width/height capabilities, using default constraints');\n            return {\n                video: true\n            };\n        }\n        // Get the highest resolution available\n        const maxWidth = Math.max(...capabilities.width.values);\n        const maxHeight = Math.max(...capabilities.height.values);\n        console.log(\"Using highest resolution: \".concat(maxWidth, \"x\").concat(maxHeight));\n        return {\n            video: {\n                width: {\n                    ideal: maxWidth\n                },\n                height: {\n                    ideal: maxHeight\n                },\n                frameRate: {\n                    ideal: 30\n                }\n            }\n        };\n    } catch (error) {\n        console.warn('Error getting camera constraints, using default:', error);\n        return {\n            video: true\n        };\n    }\n};\n/**\n * Capture images at a specific point\n * @param {Object} options - Capture options\n * @returns {Promise} - Promise that resolves with the capture result\n */ const captureImages = async (options)=>{\n    const { canvasRef, position, captureCounter, setCaptureCounter, setProcessStatus, toggleTopBar, captureFolder = 'eye_tracking_captures' } = options;\n    if (!position || typeof position.x !== 'number' || typeof position.y !== 'number') {\n        console.warn('[captureImages] Invalid position object:', position);\n        setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus('Error: Invalid capture position');\n        return null;\n    }\n    try {\n        // Get highest resolution constraints\n        const constraints = await getHighestResolutionConstraints();\n        console.log('Using camera constraints:', constraints);\n        // Get a new stream with the highest resolution\n        const stream = await navigator.mediaDevices.getUserMedia(constraints);\n        const videoTrack = stream.getVideoTracks()[0];\n        const settings = videoTrack.getSettings();\n        console.log('Actual camera settings:', settings);\n        // Update video element with new stream\n        const videoElement = window.videoElement || document.querySelector('video');\n        if (videoElement) {\n            videoElement.srcObject = stream;\n            await videoElement.play();\n        }\n        // Call the captureImagesAtPoint with all necessary parameters\n        const result = await (0,_Helper_savefile__WEBPACK_IMPORTED_MODULE_1__.captureImagesAtPoint)({\n            point: position,\n            captureCount: captureCounter,\n            canvasRef,\n            setCaptureCount: setCaptureCounter,\n            showCapturePreview\n        });\n        console.log('Capture successful with ID:', result.captureId);\n        // Clean up the stream\n        stream.getTracks().forEach((track)=>track.stop());\n        return {\n            screenImage: (result === null || result === void 0 ? void 0 : result.screenImage) || '',\n            webcamImage: (result === null || result === void 0 ? void 0 : result.webcamImage) || '',\n            success: true,\n            captureId: result === null || result === void 0 ? void 0 : result.captureId,\n            resolution: {\n                width: settings.width,\n                height: settings.height\n            }\n        };\n    } catch (err) {\n        console.error('[captureImages] Unexpected error:', err);\n        setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(\"Error: \".concat(err.message));\n        return {\n            screenImage: '',\n            webcamImage: '',\n            success: false,\n            error: err.message\n        };\n    }\n};\n/**\n * Generate a random dot position within the canvas\n * @param {HTMLCanvasElement} canvas - Canvas element\n * @param {number} padding - Padding from the edges\n * @returns {Object} - {x, y} position\n */ const getRandomPosition = function(canvas) {\n    let padding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 40;\n    if (!canvas) return {\n        x: 100,\n        y: 100\n    }; // Fallback position\n    const width = canvas.width || 400; // Fallback if width is 0\n    const height = canvas.height || 300; // Fallback if height is 0\n    return {\n        x: Math.floor(Math.random() * (width - 2 * padding)) + padding,\n        y: Math.floor(Math.random() * (height - 2 * padding)) + padding\n    };\n};\n/**\n * Special calibration capture function that behaves like random dot capture\n * @param {Object} options - All the calibration options\n * @returns {Promise<Object>} Result object with captured data\n */ const calibrationCapture = async (options)=>{\n    const { canvasRef, point, captureCounter, setCaptureCounter, setProcessStatus, toggleTopBar, captureFolder = 'eye_tracking_captures', pointIndex, totalPoints } = options;\n    try {\n        console.log(\"Starting calibration capture for point \".concat(pointIndex + 1, \"/\").concat(totalPoints));\n        // Get canvas using canvas management system\n        const canvas = getCanvas();\n        if (!canvas) {\n            console.error(\"Canvas reference is null in calibrationCapture\");\n            setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(\"Error: Canvas not available\");\n            return {\n                success: false\n            };\n        }\n        // Use canvas management system to draw dot\n        drawDotWithCanvasManager(point.x, point.y);\n        setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(\"Calibration point \".concat(pointIndex + 1, \"/\").concat(totalPoints));\n        // Use the same countdown element creation method\n        const canvasRect = canvas.getBoundingClientRect();\n        const countdownElement = createCountdownElement(point, canvasRect);\n        if (!countdownElement) {\n            console.error(\"Failed to create countdown element\");\n            return {\n                success: false\n            };\n        }\n        // Create a redrawInterval for keeping the dot visible\n        let redrawInterval = setInterval(()=>{\n            drawDotWithCanvasManager(point.x, point.y);\n        }, 200);\n        // Run the same countdown as random dot\n        for(let count = 3; count > 0; count--){\n            countdownElement.textContent = count;\n            setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(\"Point \".concat(pointIndex + 1, \"/\").concat(totalPoints, \" - countdown \").concat(count));\n            // Redraw the dot at each step to ensure it remains visible\n            drawDotWithCanvasManager(point.x, point.y);\n            await new Promise((resolve)=>setTimeout(resolve, 800));\n        }\n        // Show checkmark\n        countdownElement.textContent = \"✓\";\n        // Remove countdown element\n        setTimeout(()=>{\n            if (countdownElement.parentNode) {\n                countdownElement.parentNode.removeChild(countdownElement);\n            }\n            // Clear redrawInterval\n            if (redrawInterval) {\n                clearInterval(redrawInterval);\n            }\n        }, 300);\n        // Use captureAndPreviewProcess instead of directly calling captureImagesAtPoint\n        const captureResult = await captureAndPreviewProcess({\n            canvasRef,\n            position: point,\n            captureCounter,\n            setCaptureCounter,\n            setProcessStatus: (status)=>{\n                if (typeof status === 'string') {\n                    setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(status);\n                } else if (status && typeof status === 'object') {\n                    setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(status.processStatus || '');\n                }\n            },\n            toggleTopBar,\n            onStatusUpdate: (status)=>{\n                if (typeof status === 'string') {\n                    setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(status);\n                } else if (status && typeof status === 'object') {\n                    setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(status.processStatus || '');\n                }\n            },\n            captureFolder\n        });\n        // Ensure proper return even if captureResult is null\n        const safeResult = captureResult && typeof captureResult === 'object' ? captureResult : {\n            screenImage: '',\n            webcamImage: '',\n            success: false\n        };\n        return {\n            screenImage: safeResult.screenImage || '',\n            webcamImage: safeResult.webcamImage || '',\n            success: true,\n            point\n        };\n    } catch (error) {\n        console.error(\"Error in calibrationCapture:\", error);\n        setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(\"Error: \".concat(error.message));\n        // Always return a valid object with default values\n        return {\n            screenImage: '',\n            webcamImage: '',\n            success: false,\n            error: error.message\n        };\n    }\n};\n/**\n * Complete capture and preview process\n * @param {Object} options - Process options\n */ const captureAndPreviewProcess = async (options)=>{\n    const { canvasRef, position, captureCounter, setCaptureCounter, setProcessStatus, toggleTopBar, onStatusUpdate, captureFolder } = options;\n    try {\n        // Get canvas using canvas management system\n        const canvas = getCanvas();\n        if (!canvas) {\n            console.error(\"[captureAndPreviewProcess] Canvas reference is null\");\n            if (setProcessStatus) setProcessStatus('Error: Canvas is not available');\n            return null;\n        }\n        // Draw the dot using canvas management system\n        drawDotWithCanvasManager(position.x, position.y);\n        // Countdown before capture\n        if (onStatusUpdate) {\n            onStatusUpdate({\n                processStatus: 'Starting countdown...',\n                isCapturing: true\n            });\n        }\n        // Remove any existing countdown elements first\n        const existingCountdowns = document.querySelectorAll('.calibrate-countdown, .dot-countdown, .forced-countdown, .center-countdown-backup');\n        existingCountdowns.forEach((el)=>{\n            console.log('captureAndPreviewProcess: Removing existing countdown:', el);\n            el.remove();\n        });\n        // Create a custom countdown element\n        const canvasRect = canvas.getBoundingClientRect();\n        // Transform coordinates for fullscreen display\n        let displayPosition = position;\n        displayPosition = {\n            x: position.x,\n            y: position.y\n        };\n        // if (canvas.style.position === 'fixed' && canvas.style.width === '100vw') {\n        //   // Canvas is in fullscreen mode, use direct coordinates\n        //   displayPosition = {\n        //     x: position.x,\n        //     y: position.y\n        //   };\n        // } else {\n        //   // Canvas is in normal mode, use canvas-relative coordinates\n        //   displayPosition = {\n        //     x: canvasRect.left + position.x,\n        //     y: canvasRect.top + position.y\n        //   };\n        // }\n        console.log('captureAndPreviewProcess: Creating countdown at:', {\n            originalPosition: position,\n            displayPosition,\n            canvasRect,\n            canvasStyle: {\n                position: canvas.style.position,\n                width: canvas.style.width,\n                height: canvas.style.height\n            }\n        });\n        const countdownElement = document.createElement('div');\n        countdownElement.className = 'calibrate-countdown';\n        countdownElement.style.cssText = \"\\n      position: fixed;\\n      left: \".concat(displayPosition.x, \"px;\\n      top: \").concat(displayPosition.y - 60, \"px;\\n      transform: translateX(-50%);\\n      color: red;\\n      font-size: 48px;\\n      font-weight: bold;\\n      text-shadow: 0 0 15px white, 0 0 25px white, 0 0 35px white;\\n      z-index: 10;\\n      background-color: rgba(255, 255, 255, 0.95);\\n      border: 3px solid red;\\n      border-radius: 50%;\\n      width: 80px;\\n      height: 80px;\\n      display: flex;\\n      justify-content: center;\\n      align-items: center;\\n      box-shadow: 0 0 20px rgba(0, 0, 0, 0.5), 0 0 40px rgba(255, 0, 0, 0.3);\\n      animation: pulse 1s infinite;\\n    \");\n        document.body.appendChild(countdownElement);\n        console.log('captureAndPreviewProcess: Created countdown element:', {\n            element: countdownElement,\n            style: countdownElement.style.cssText,\n            position: {\n                x: displayPosition.x,\n                y: displayPosition.y - 60\n            }\n        });\n        console.log('Countdown element created at:', {\n            position,\n            displayPosition,\n            canvasRect,\n            canvasStyle: {\n                position: canvas.style.position,\n                width: canvas.style.width,\n                height: canvas.style.height\n            }\n        });\n        // Create a redrawInterval for keeping the dot visible\n        let redrawInterval = setInterval(()=>{\n            drawDotWithCanvasManager(position.x, position.y);\n        }, 200);\n        // Manual countdown\n        for(let count = 3; count > 0; count--){\n            countdownElement.textContent = count;\n            // backupCountdown.textContent = count;\n            if (onStatusUpdate) {\n                onStatusUpdate({\n                    processStatus: \"Countdown: \".concat(count),\n                    countdownValue: count,\n                    isCapturing: true\n                });\n            }\n            // Redraw dot to ensure it's visible\n            drawDotWithCanvasManager(position.x, position.y);\n            await new Promise((resolve)=>setTimeout(resolve, 800));\n        }\n        // Change to checkmark\n        countdownElement.textContent = \"✓\";\n        // backupCountdown.textContent = \"✓\";\n        if (onStatusUpdate) {\n            onStatusUpdate({\n                processStatus: 'Capturing images...',\n                countdownValue: \"Capturing...\",\n                isCapturing: true\n            });\n        }\n        // Remove countdown elements and clear redrawInterval\n        setTimeout(()=>{\n            if (countdownElement.parentNode) {\n                countdownElement.parentNode.removeChild(countdownElement);\n            }\n            // if (backupCountdown.parentNode) {\n            //   backupCountdown.parentNode.removeChild(backupCountdown);\n            // }\n            if (redrawInterval) {\n                clearInterval(redrawInterval);\n            }\n        }, 300);\n        // Use captureImagesAtPoint from savefile.js\n        const captureResult = await (0,_Helper_savefile__WEBPACK_IMPORTED_MODULE_1__.captureImagesAtPoint)({\n            point: position,\n            captureCount: captureCounter,\n            canvasRef,\n            setCaptureCount: setCaptureCounter,\n            showCapturePreview\n        });\n        if (setProcessStatus) {\n            setProcessStatus(\"Captured dot at x=\".concat(Math.round(position.x), \", y=\").concat(Math.round(position.y)));\n        }\n        if (onStatusUpdate) {\n            onStatusUpdate({\n                processStatus: 'Capture complete',\n                isCapturing: false\n            });\n        }\n        // Show TopBar again with delay\n        setTimeout(()=>{\n            if (typeof toggleTopBar === 'function') {\n                toggleTopBar(true);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(true);\n            }\n        }, 2500);\n        return captureResult;\n    } catch (error) {\n        console.error(\"[captureAndPreviewProcess] Fatal error:\", error);\n        if (setProcessStatus) {\n            setProcessStatus(\"Fatal error: \".concat(error.message));\n        }\n        // Ensure TopBar is shown even on error\n        setTimeout(()=>{\n            if (typeof toggleTopBar === 'function') {\n                toggleTopBar(true);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(true);\n            }\n        }, 1500);\n        // Return a minimal valid object to prevent null reference errors\n        return {\n            screenImage: '',\n            webcamImage: '',\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Default export for React compatibility\nconst CountSave = ()=>null; // This is a utility file, so we don't need to render anything\n_c = CountSave;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CountSave);\nvar _c;\n$RefreshReg$(_c, \"CountSave\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL2NvbXBvbmVudHMvY29sbGVjdGVkLWRhdGFzZXQtY3VzdG9taXplZC9BY3Rpb24vY291bnRTYXZlLmpzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxpRUFBaUU7QUFDakUsaUVBQWlFO0FBQ3ZDO0FBQ2dDO0FBRTFEOzs7Q0FHQyxHQUNELE1BQU1FLGlCQUFpQjtJQUNyQixJQUFJLElBQTZCLEVBQUU7UUFDakMsT0FBTztZQUNMQyxhQUFhQyxPQUFPRCxXQUFXO1lBQy9CRSxlQUFlRCxPQUFPQyxhQUFhO1FBQ3JDO0lBQ0Y7SUFDQSxPQUFPO1FBQUVGLGFBQWE7UUFBTUUsZUFBZTtJQUFLO0FBQ2xEO0FBRUE7OztDQUdDLEdBQ0QsTUFBTUMsWUFBWTtJQUNoQixNQUFNLEVBQUVILFdBQVcsRUFBRUUsYUFBYSxFQUFFLEdBQUdIO0lBRXZDLG9EQUFvRDtJQUNwRCxJQUFJQyxlQUFlLE9BQU9BLFlBQVlHLFNBQVMsS0FBSyxZQUFZO1FBQzlELE9BQU9ILFlBQVlHLFNBQVM7SUFDOUI7SUFFQSw0QkFBNEI7SUFDNUIsSUFBSUQsaUJBQWlCLE9BQU9BLGNBQWNDLFNBQVMsS0FBSyxZQUFZO1FBQ2xFLE9BQU9ELGNBQWNDLFNBQVMsTUFBTUQsY0FBY0UsWUFBWTtJQUNoRTtJQUVBLDJCQUEyQjtJQUMzQixPQUFPQyxTQUFTQyxhQUFhLENBQUM7QUFDaEM7QUFHQTs7Ozs7O0NBTUMsR0FDRCxNQUFNQywyQkFBMkIsU0FBQ0MsR0FBR0M7UUFBR0MsMEVBQVM7SUFDL0MsTUFBTSxFQUFFVixXQUFXLEVBQUUsR0FBR0Q7SUFFeEIsSUFBSUMsZUFBZSxPQUFPQSxZQUFZVyxPQUFPLEtBQUssWUFBWTtRQUM1RCxPQUFPWCxZQUFZVyxPQUFPLENBQUNILEdBQUdDLEdBQUdDO0lBQ25DO0lBRUEsOEJBQThCO0lBQzlCLE1BQU1FLFNBQVNUO0lBQ2YsSUFBSVMsUUFBUTtRQUNWLE1BQU1DLE1BQU1ELE9BQU9FLFVBQVUsQ0FBQztRQUM5QkMsV0FBV0YsS0FBS0wsR0FBR0MsR0FBR0MsUUFBUTtRQUM5QixPQUFPO0lBQ1Q7SUFDQSxPQUFPO0FBQ1Q7QUFHQTs7Ozs7Q0FLQyxHQUNNLE1BQU1NLHlCQUF5QixDQUFDQyxVQUFVQztJQUMvQyxJQUFJLENBQUNELFlBQVksT0FBT0EsU0FBU1QsQ0FBQyxLQUFLLFlBQVksT0FBT1MsU0FBU1IsQ0FBQyxLQUFLLFVBQVU7UUFDakZVLFFBQVFDLElBQUksQ0FBQyw4Q0FBOENIO1FBQzNELE9BQU87SUFDVDtJQUVBLHlDQUF5QztJQUN6QyxNQUFNSSxxQkFBcUJoQixTQUFTaUIsZ0JBQWdCLENBQUM7SUFDckRELG1CQUFtQkUsT0FBTyxDQUFDQyxDQUFBQTtRQUN6QkwsUUFBUU0sR0FBRyxDQUFDLHdDQUF3Q0Q7UUFDcEQsSUFBSUEsR0FBR0UsVUFBVSxFQUFFO1lBQ2pCRixHQUFHRSxVQUFVLENBQUNDLFdBQVcsQ0FBQ0g7UUFDNUI7SUFDRjtJQUVBLDJEQUEyRDtJQUMzRCxNQUFNWixTQUFTVDtJQUNmLElBQUl5QixrQkFBa0JYO0lBRXRCLElBQUlMLFFBQVE7UUFDVix3Q0FBd0M7UUFDeEMsTUFBTWlCLGVBQWVqQixPQUFPa0IsS0FBSyxDQUFDYixRQUFRLEtBQUssV0FDMUJMLENBQUFBLE9BQU9rQixLQUFLLENBQUNDLEtBQUssS0FBSyxXQUFXbkIsT0FBT2tCLEtBQUssQ0FBQ0MsS0FBSyxLQUFLLE1BQUs7UUFFbkYsSUFBSUYsY0FBYztZQUNoQix1REFBdUQ7WUFDdkRELGtCQUFrQjtnQkFDaEJwQixHQUFHUyxTQUFTVCxDQUFDO2dCQUNiQyxHQUFHUSxTQUFTUixDQUFDO1lBQ2Y7UUFDRixPQUFPO1lBQ0wsNERBQTREO1lBQzVEbUIsa0JBQWtCO2dCQUNoQnBCLEdBQUdVLFdBQVdjLElBQUksR0FBR2YsU0FBU1QsQ0FBQztnQkFDL0JDLEdBQUdTLFdBQVdlLEdBQUcsR0FBR2hCLFNBQVNSLENBQUM7WUFDaEM7UUFDRjtJQUNGO0lBRUFVLFFBQVFNLEdBQUcsQ0FBQyw0REFBNEQ7UUFDdEVTLFVBQVVqQjtRQUNWa0IsU0FBU1A7UUFDVFYsWUFBWUE7UUFDWmtCLGtCQUFrQnhCLFNBQVVBLE9BQU9rQixLQUFLLENBQUNiLFFBQVEsS0FBSyxXQUFXTCxPQUFPa0IsS0FBSyxDQUFDQyxLQUFLLEtBQUssVUFBVztJQUNyRztJQUVBLG9DQUFvQztJQUNwQyxNQUFNTSxtQkFBbUJoQyxTQUFTaUMsYUFBYSxDQUFDO0lBQ2hERCxpQkFBaUJFLFNBQVMsR0FBRztJQUM3QkYsaUJBQWlCUCxLQUFLLENBQUNVLE9BQU8sR0FBRyxxQ0FHeEJaLE9BRENBLGdCQUFnQnBCLENBQUMsRUFBQyxrQkFDSSxPQUF2Qm9CLGdCQUFnQm5CLENBQUMsR0FBRyxJQUFHO0lBcUJoQyxxQ0FBcUM7SUFDckMsSUFBSSxDQUFDSixTQUFTQyxhQUFhLENBQUMsc0JBQXNCO1FBQ2hELE1BQU13QixRQUFRekIsU0FBU2lDLGFBQWEsQ0FBQztRQUNyQ1IsTUFBTVcsRUFBRSxHQUFHO1FBQ1hYLE1BQU1ZLFdBQVcsR0FBSTtRQU9yQnJDLFNBQVNzQyxJQUFJLENBQUNDLFdBQVcsQ0FBQ2Q7SUFDNUI7SUFFQXpCLFNBQVN3QyxJQUFJLENBQUNELFdBQVcsQ0FBQ1A7SUFFMUJsQixRQUFRTSxHQUFHLENBQUMsc0NBQXNDO1FBQ2hEcUIsa0JBQWtCN0I7UUFDbEJXO1FBQ0FWO1FBQ0E2QixZQUFZbkMsU0FBUztZQUNuQkssVUFBVUwsT0FBT2tCLEtBQUssQ0FBQ2IsUUFBUTtZQUMvQmMsT0FBT25CLE9BQU9rQixLQUFLLENBQUNDLEtBQUs7WUFDekJpQixRQUFRcEMsT0FBT2tCLEtBQUssQ0FBQ2tCLE1BQU07WUFDM0JDLE1BQU1yQyxPQUFPc0MscUJBQXFCO1FBQ3BDLElBQUk7SUFDTjtJQUVBLDZFQUE2RTtJQUM3RSxNQUFNQyxZQUFZOUMsU0FBU2lDLGFBQWEsQ0FBQztJQUN6Q2EsVUFBVXJCLEtBQUssQ0FBQ1UsT0FBTyxHQUFHLHFDQUdqQlosT0FEQ0EsZ0JBQWdCcEIsQ0FBQyxFQUFDLGtCQUNELE9BQWxCb0IsZ0JBQWdCbkIsQ0FBQyxFQUFDO0lBUTNCSixTQUFTd0MsSUFBSSxDQUFDRCxXQUFXLENBQUNPO0lBRTFCLG1DQUFtQztJQUNuQ0MsV0FBVztRQUNULElBQUlELFVBQVV6QixVQUFVLEVBQUU7WUFDeEJ5QixVQUFVekIsVUFBVSxDQUFDQyxXQUFXLENBQUN3QjtRQUNuQztJQUNGLEdBQUc7SUFFSCxPQUFPZDtBQUNULEVBQUU7QUFFRjs7Ozs7Q0FLQyxHQUNNLE1BQU1nQixxQkFBcUIsQ0FBQ0MsYUFBYUMsYUFBYUM7SUFDM0QsSUFBSSxDQUFDRixlQUFlLENBQUNDLGFBQWE7SUFFbEMsK0JBQStCO0lBQy9CLE1BQU1FLG1CQUFtQnBELFNBQVNpQixnQkFBZ0IsQ0FBQztJQUNuRG1DLGlCQUFpQmxDLE9BQU8sQ0FBQ21DLENBQUFBO1FBQ3ZCLElBQUlBLFFBQVFoQyxVQUFVLEVBQUU7WUFDdEJnQyxRQUFRaEMsVUFBVSxDQUFDQyxXQUFXLENBQUMrQjtRQUNqQztJQUNGO0lBRUEsMkJBQTJCO0lBQzNCLE1BQU1DLG1CQUFtQnRELFNBQVNpQyxhQUFhLENBQUM7SUFDaERxQixpQkFBaUJwQixTQUFTLEdBQUc7SUFDN0JvQixpQkFBaUI3QixLQUFLLENBQUNVLE9BQU8sR0FBSTtJQWNsQyxnQ0FBZ0M7SUFDaEMsSUFBSWMsYUFBYTtRQUNmLE1BQU1NLGdCQUFnQnZELFNBQVNpQyxhQUFhLENBQUM7UUFDN0NzQixjQUFjOUIsS0FBSyxDQUFDVSxPQUFPLEdBQUk7UUFNL0IsTUFBTXFCLFlBQVl4RCxTQUFTaUMsYUFBYSxDQUFDO1FBQ3pDdUIsVUFBVUMsR0FBRyxHQUFHUjtRQUNoQk8sVUFBVUUsR0FBRyxHQUFHO1FBQ2hCRixVQUFVL0IsS0FBSyxDQUFDVSxPQUFPLEdBQUk7UUFRM0IsTUFBTXdCLGNBQWMzRCxTQUFTaUMsYUFBYSxDQUFDO1FBQzNDMEIsWUFBWXRCLFdBQVcsR0FBRztRQUMxQnNCLFlBQVlsQyxLQUFLLENBQUNVLE9BQU8sR0FBSTtRQU83Qm9CLGNBQWNoQixXQUFXLENBQUNpQjtRQUMxQkQsY0FBY2hCLFdBQVcsQ0FBQ29CO1FBQzFCTCxpQkFBaUJmLFdBQVcsQ0FBQ2dCO0lBQy9CO0lBRUEsZ0NBQWdDO0lBQ2hDLElBQUlMLGFBQWE7UUFDZixNQUFNVSxnQkFBZ0I1RCxTQUFTaUMsYUFBYSxDQUFDO1FBQzdDMkIsY0FBY25DLEtBQUssQ0FBQ1UsT0FBTyxHQUFJO1FBTS9CLE1BQU0wQixZQUFZN0QsU0FBU2lDLGFBQWEsQ0FBQztRQUN6QzRCLFVBQVVKLEdBQUcsR0FBR1A7UUFDaEJXLFVBQVVILEdBQUcsR0FBRztRQUNoQkcsVUFBVXBDLEtBQUssQ0FBQ1UsT0FBTyxHQUFJO1FBUTNCLE1BQU0yQixjQUFjOUQsU0FBU2lDLGFBQWEsQ0FBQztRQUMzQzZCLFlBQVl6QixXQUFXLEdBQUc7UUFDMUJ5QixZQUFZckMsS0FBSyxDQUFDVSxPQUFPLEdBQUk7UUFPN0J5QixjQUFjckIsV0FBVyxDQUFDc0I7UUFDMUJELGNBQWNyQixXQUFXLENBQUN1QjtRQUMxQlIsaUJBQWlCZixXQUFXLENBQUNxQjtJQUMvQjtJQUVBLGlCQUFpQjtJQUNqQixJQUFJVCxPQUFPO1FBQ1QsTUFBTVksWUFBWS9ELFNBQVNpQyxhQUFhLENBQUM7UUFDekM4QixVQUFVMUIsV0FBVyxHQUFHYyxNQUFNYSxLQUFLLEdBQ2pDLEdBQXFCQyxPQUFsQmQsTUFBTWEsS0FBSyxFQUFDLFFBQWdDQyxPQUExQkEsS0FBS0MsS0FBSyxDQUFDZixNQUFNaEQsQ0FBQyxHQUFFLFFBQTBCLE9BQXBCOEQsS0FBS0MsS0FBSyxDQUFDZixNQUFNL0MsQ0FBQyxLQUNqRSxZQUFzQzZELE9BQTFCQSxLQUFLQyxLQUFLLENBQUNmLE1BQU1oRCxDQUFDLEdBQUUsUUFBMEIsT0FBcEI4RCxLQUFLQyxLQUFLLENBQUNmLE1BQU0vQyxDQUFDO1FBRTFEMkQsVUFBVXRDLEtBQUssQ0FBQ1UsT0FBTyxHQUFJO1FBUzNCbUIsaUJBQWlCZixXQUFXLENBQUN3QjtJQUMvQjtJQUVBLFlBQVk7SUFDWixNQUFNSSxlQUFlbkUsU0FBU2lDLGFBQWEsQ0FBQztJQUM1Q2tDLGFBQWE5QixXQUFXLEdBQUc7SUFDM0I4QixhQUFhMUMsS0FBSyxDQUFDVSxPQUFPLEdBQUk7SUFVOUJtQixpQkFBaUJmLFdBQVcsQ0FBQzRCO0lBRTdCLGtCQUFrQjtJQUNsQm5FLFNBQVN3QyxJQUFJLENBQUNELFdBQVcsQ0FBQ2U7SUFFMUIsWUFBWTtJQUNaLElBQUljLFdBQVc7SUFDZixNQUFNQyxXQUFXQyxZQUFZO1FBQzNCRixZQUFZO1FBQ1osSUFBSUEsWUFBWSxHQUFHO1lBQ2pCRyxjQUFjRjtZQUNkZixpQkFBaUI3QixLQUFLLENBQUMrQyxPQUFPLEdBQUc7WUFDakNsQixpQkFBaUI3QixLQUFLLENBQUNnRCxVQUFVLEdBQUc7WUFDcEMxQixXQUFXO2dCQUNULElBQUlPLGlCQUFpQmpDLFVBQVUsRUFBRTtvQkFDL0JpQyxpQkFBaUJqQyxVQUFVLENBQUNDLFdBQVcsQ0FBQ2dDO2dCQUMxQztZQUNGLEdBQUc7UUFDTCxPQUFPO1lBQ0xhLGFBQWE5QixXQUFXLEdBQUcsR0FBdUIsT0FBcEIrQixTQUFTTSxPQUFPLENBQUMsSUFBRztRQUNwRDtJQUNGLEdBQUc7SUFFSCxpQkFBaUI7SUFDakIzQixXQUFXO1FBQ1QsSUFBSU8saUJBQWlCakMsVUFBVSxFQUFFO1lBQy9CaUMsaUJBQWlCakMsVUFBVSxDQUFDQyxXQUFXLENBQUNnQztRQUMxQztJQUNGLEdBQUc7QUFDTCxFQUFFO0FBRUY7Ozs7OztDQU1DLEdBQ00sTUFBTXFCLGVBQWUsT0FBTy9ELFVBQVVMLFFBQVFxRSxnQkFBZ0JDO0lBQ25FLElBQUksQ0FBQ2pFLFlBQVksT0FBT0EsU0FBU1QsQ0FBQyxLQUFLLFlBQVksT0FBT1MsU0FBU1IsQ0FBQyxLQUFLLFVBQVU7UUFDakZVLFFBQVFDLElBQUksQ0FBQyxvQ0FBb0NIO1FBQ2pEZ0UsMkJBQUFBLHFDQUFBQSxlQUFpQjtZQUNmRSxlQUFlO1lBQ2ZDLGdCQUFnQjtZQUNoQkMsYUFBYTtRQUNmO1FBQ0E7SUFDRjtJQUVBLE1BQU1uRSxhQUFhTixPQUFPc0MscUJBQXFCO0lBQy9DLE1BQU1iLG1CQUFtQnJCLHVCQUF1QkMsVUFBVUM7SUFFMUQsSUFBSSxDQUFDbUIsa0JBQWtCO1FBQ3JCbEIsUUFBUUMsSUFBSSxDQUFDO1FBQ2I7SUFDRjtJQUVBLG1DQUFtQztJQUNuQyxNQUFNa0Usa0JBQWtCakYsU0FBU0MsYUFBYSxDQUFDO0lBRS9DLDJDQUEyQztJQUMzQ0MseUJBQXlCVSxTQUFTVCxDQUFDLEVBQUVTLFNBQVNSLENBQUM7SUFFL0MsSUFBSThFLFFBQVE7SUFDWmxELGlCQUFpQkssV0FBVyxHQUFHNkM7SUFDL0IsSUFBSUQsaUJBQWlCO1FBQ25CQSxnQkFBZ0I1QyxXQUFXLEdBQUc2QztJQUNoQztJQUVBTiwyQkFBQUEscUNBQUFBLGVBQWlCO1FBQ2ZFLGVBQWU7UUFDZkMsZ0JBQWdCRztRQUNoQkYsYUFBYTtJQUNmO0lBRUEsaUVBQWlFO0lBQ2pFLElBQUlHLGlCQUFpQmIsWUFBWTtRQUMvQnBFLHlCQUF5QlUsU0FBU1QsQ0FBQyxFQUFFUyxTQUFTUixDQUFDO0lBQ2pELEdBQUc7SUFFSCxPQUFPLElBQUlnRixRQUFRLENBQUNDO1FBQ2xCLE1BQU1DLG9CQUFvQmhCLFlBQVk7WUFDcENZO1lBRUEsSUFBSUEsU0FBUyxHQUFHO2dCQUNkWCxjQUFjZTtnQkFDZHRELGlCQUFpQkssV0FBVyxHQUFHO2dCQUMvQixJQUFJNEMsaUJBQWlCO29CQUNuQkEsZ0JBQWdCNUMsV0FBVyxHQUFHO2dCQUNoQztnQkFFQXVDLDJCQUFBQSxxQ0FBQUEsZUFBaUI7b0JBQ2ZHLGdCQUFnQjtvQkFDaEJELGVBQWU7b0JBQ2ZFLGFBQWE7Z0JBQ2Y7Z0JBRUFqQyxXQUFXO29CQUNULGlDQUFpQztvQkFDakMsSUFBSWYsaUJBQWlCWCxVQUFVLEVBQUU7d0JBQy9CVyxpQkFBaUJYLFVBQVUsQ0FBQ0MsV0FBVyxDQUFDVTtvQkFDMUM7b0JBQ0EsSUFBSWlELG1CQUFtQkEsZ0JBQWdCNUQsVUFBVSxFQUFFO3dCQUNqRDRELGdCQUFnQjVELFVBQVUsQ0FBQ0MsV0FBVyxDQUFDMkQ7b0JBQ3pDO29CQUVBL0UseUJBQXlCVSxTQUFTVCxDQUFDLEVBQUVTLFNBQVNSLENBQUM7b0JBRS9DLDRDQUE0QztvQkFDNUMsSUFBSStFLGdCQUFnQjt3QkFDbEJaLGNBQWNZO29CQUNoQjtvQkFFQSxJQUFJTixZQUFZO3dCQUNkM0UseUJBQXlCVSxTQUFTVCxDQUFDLEVBQUVTLFNBQVNSLENBQUM7d0JBQy9DeUU7b0JBQ0Y7b0JBQ0FRO2dCQUNGLEdBQUc7WUFDTCxPQUFPO2dCQUNMckQsaUJBQWlCSyxXQUFXLEdBQUc2QztnQkFDL0IsSUFBSUQsaUJBQWlCO29CQUNuQkEsZ0JBQWdCNUMsV0FBVyxHQUFHNkM7Z0JBQ2hDO2dCQUVBTiwyQkFBQUEscUNBQUFBLGVBQWlCO29CQUNmRSxlQUFlO29CQUNmQyxnQkFBZ0JHO29CQUNoQkYsYUFBYTtnQkFDZjtZQUNGO1FBQ0YsR0FBRztJQUNMO0FBQ0YsRUFBRTtBQUVGOzs7Ozs7OztDQVFDLEdBQ00sTUFBTXRFLGFBQWEsU0FBQ0YsS0FBS0wsR0FBR0M7UUFBR0MsMEVBQVMsSUFBSWtGLCtFQUFjO0lBQy9ELE1BQU1oRixTQUFTQyxJQUFJRCxNQUFNO0lBRXpCLG1EQUFtRDtJQUNuRCxJQUFJZ0YsYUFBYTtRQUNmL0UsSUFBSWdGLFNBQVMsQ0FBQyxHQUFHLEdBQUdqRixPQUFPbUIsS0FBSyxFQUFFbkIsT0FBT29DLE1BQU07UUFDL0NuQyxJQUFJaUYsU0FBUyxHQUFHO1FBQ2hCakYsSUFBSWtGLFFBQVEsQ0FBQyxHQUFHLEdBQUduRixPQUFPbUIsS0FBSyxFQUFFbkIsT0FBT29DLE1BQU07SUFDaEQ7SUFFQSx1Q0FBdUM7SUFDdkNuQyxJQUFJbUYsU0FBUztJQUNibkYsSUFBSW9GLEdBQUcsQ0FBQ3pGLEdBQUdDLEdBQUdDLFFBQVEsR0FBRzRELEtBQUs0QixFQUFFLEdBQUc7SUFDbkNyRixJQUFJaUYsU0FBUyxHQUFHO0lBQ2hCakYsSUFBSXNGLElBQUk7SUFFUix3Q0FBd0M7SUFDeEN0RixJQUFJbUYsU0FBUztJQUNibkYsSUFBSW9GLEdBQUcsQ0FBQ3pGLEdBQUdDLEdBQUdDLFNBQVMsR0FBRyxHQUFHNEQsS0FBSzRCLEVBQUUsR0FBRztJQUN2Q3JGLElBQUl1RixXQUFXLEdBQUc7SUFDbEJ2RixJQUFJd0YsU0FBUyxHQUFHO0lBQ2hCeEYsSUFBSXlGLE1BQU07SUFFVixzREFBc0Q7SUFDdER6RixJQUFJbUYsU0FBUztJQUNibkYsSUFBSW9GLEdBQUcsQ0FBQ3pGLEdBQUdDLEdBQUdDLFNBQVMsR0FBRyxHQUFHNEQsS0FBSzRCLEVBQUUsR0FBRztJQUN2Q3JGLElBQUl1RixXQUFXLEdBQUc7SUFDbEJ2RixJQUFJd0YsU0FBUyxHQUFHO0lBQ2hCeEYsSUFBSXlGLE1BQU07SUFFVm5GLFFBQVFNLEdBQUcsQ0FBQyxvQkFBMEJoQixPQUFORCxHQUFFLE1BQXNCRSxPQUFsQkQsR0FBRSxrQkFBdUIsT0FBUEM7SUFDeEQsT0FBTztRQUFFRjtRQUFHQztJQUFFO0FBQ2hCLEVBQUU7QUFFRjs7O0NBR0MsR0FDRCxNQUFNOEYsa0NBQWtDO0lBQ3RDLElBQUk7UUFDRiw4QkFBOEI7UUFDOUIsTUFBTUMsVUFBVSxNQUFNQyxVQUFVQyxZQUFZLENBQUNDLGdCQUFnQjtRQUM3RCxNQUFNQyxlQUFlSixRQUFRSyxNQUFNLENBQUNDLENBQUFBLFNBQVVBLE9BQU9DLElBQUksS0FBSztRQUU5RCxJQUFJSCxhQUFhSSxNQUFNLEtBQUssR0FBRztZQUM3QjdGLFFBQVFDLElBQUksQ0FBQztZQUNiLE9BQU87Z0JBQUU2RixPQUFPO1lBQUs7UUFDdkI7UUFFQSxxREFBcUQ7UUFDckQsTUFBTUMsU0FBUyxNQUFNVCxVQUFVQyxZQUFZLENBQUNTLFlBQVksQ0FBQztZQUFFRixPQUFPO1FBQUs7UUFDdkUsTUFBTUcsYUFBYUYsT0FBT0csY0FBYyxFQUFFLENBQUMsRUFBRTtRQUU3QyxJQUFJLENBQUNELFdBQVdFLGVBQWUsRUFBRTtZQUMvQm5HLFFBQVFDLElBQUksQ0FBQztZQUNiOEYsT0FBT0ssU0FBUyxHQUFHaEcsT0FBTyxDQUFDaUcsQ0FBQUEsUUFBU0EsTUFBTUMsSUFBSTtZQUM5QyxPQUFPO2dCQUFFUixPQUFPO1lBQUs7UUFDdkI7UUFFQSxNQUFNUyxlQUFlTixXQUFXRSxlQUFlO1FBQy9DSixPQUFPSyxTQUFTLEdBQUdoRyxPQUFPLENBQUNpRyxDQUFBQSxRQUFTQSxNQUFNQyxJQUFJO1FBRTlDLElBQUksQ0FBQ0MsYUFBYTNGLEtBQUssSUFBSSxDQUFDMkYsYUFBYTFFLE1BQU0sRUFBRTtZQUMvQzdCLFFBQVFDLElBQUksQ0FBQztZQUNiLE9BQU87Z0JBQUU2RixPQUFPO1lBQUs7UUFDdkI7UUFFQSx1Q0FBdUM7UUFDdkMsTUFBTVUsV0FBV3JELEtBQUtzRCxHQUFHLElBQUlGLGFBQWEzRixLQUFLLENBQUM4RixNQUFNO1FBQ3RELE1BQU1DLFlBQVl4RCxLQUFLc0QsR0FBRyxJQUFJRixhQUFhMUUsTUFBTSxDQUFDNkUsTUFBTTtRQUV4RDFHLFFBQVFNLEdBQUcsQ0FBQyw2QkFBeUNxRyxPQUFaSCxVQUFTLEtBQWEsT0FBVkc7UUFFckQsT0FBTztZQUNMYixPQUFPO2dCQUNMbEYsT0FBTztvQkFBRWdHLE9BQU9KO2dCQUFTO2dCQUN6QjNFLFFBQVE7b0JBQUUrRSxPQUFPRDtnQkFBVTtnQkFDM0JFLFdBQVc7b0JBQUVELE9BQU87Z0JBQUc7WUFDekI7UUFDRjtJQUNGLEVBQUUsT0FBT0UsT0FBTztRQUNkOUcsUUFBUUMsSUFBSSxDQUFDLG9EQUFvRDZHO1FBQ2pFLE9BQU87WUFBRWhCLE9BQU87UUFBSztJQUN2QjtBQUNGO0FBRUE7Ozs7Q0FJQyxHQUNNLE1BQU1pQixnQkFBZ0IsT0FBT0M7SUFDaEMsTUFBTSxFQUNKQyxTQUFTLEVBQ1RuSCxRQUFRLEVBQ1JvSCxjQUFjLEVBQ2RDLGlCQUFpQixFQUNqQkMsZ0JBQWdCLEVBQ2hCQyxZQUFZLEVBQ1pDLGdCQUFnQix1QkFBdUIsRUFDeEMsR0FBR047SUFFSixJQUFJLENBQUNsSCxZQUFZLE9BQU9BLFNBQVNULENBQUMsS0FBSyxZQUFZLE9BQU9TLFNBQVNSLENBQUMsS0FBSyxVQUFVO1FBQ2pGVSxRQUFRQyxJQUFJLENBQUMsNENBQTRDSDtRQUN6RHNILDZCQUFBQSx1Q0FBQUEsaUJBQW1CO1FBQ25CLE9BQU87SUFDVDtJQUVBLElBQUk7UUFDRixxQ0FBcUM7UUFDckMsTUFBTUcsY0FBYyxNQUFNbkM7UUFDMUJwRixRQUFRTSxHQUFHLENBQUMsNkJBQTZCaUg7UUFFekMsK0NBQStDO1FBQy9DLE1BQU14QixTQUFTLE1BQU1ULFVBQVVDLFlBQVksQ0FBQ1MsWUFBWSxDQUFDdUI7UUFDekQsTUFBTXRCLGFBQWFGLE9BQU9HLGNBQWMsRUFBRSxDQUFDLEVBQUU7UUFDN0MsTUFBTXNCLFdBQVd2QixXQUFXd0IsV0FBVztRQUN2Q3pILFFBQVFNLEdBQUcsQ0FBQywyQkFBMkJrSDtRQUV2Qyx1Q0FBdUM7UUFDdkMsTUFBTUUsZUFBZTVJLE9BQU80SSxZQUFZLElBQUl4SSxTQUFTQyxhQUFhLENBQUM7UUFDbkUsSUFBSXVJLGNBQWM7WUFDaEJBLGFBQWFDLFNBQVMsR0FBRzVCO1lBQ3pCLE1BQU0yQixhQUFhRSxJQUFJO1FBQ3pCO1FBRUEsOERBQThEO1FBQzlELE1BQU1DLFNBQVMsTUFBTWxKLHNFQUFvQkEsQ0FBQztZQUN4QzBELE9BQU92QztZQUNQZ0ksY0FBY1o7WUFDZEQ7WUFDQWMsaUJBQWlCWjtZQUNqQmpGO1FBQ0Y7UUFFQWxDLFFBQVFNLEdBQUcsQ0FBQywrQkFBK0J1SCxPQUFPRyxTQUFTO1FBRTNELHNCQUFzQjtRQUN0QmpDLE9BQU9LLFNBQVMsR0FBR2hHLE9BQU8sQ0FBQ2lHLENBQUFBLFFBQVNBLE1BQU1DLElBQUk7UUFFOUMsT0FBTztZQUNMbkUsYUFBYTBGLENBQUFBLG1CQUFBQSw2QkFBQUEsT0FBUTFGLFdBQVcsS0FBSTtZQUNwQ0MsYUFBYXlGLENBQUFBLG1CQUFBQSw2QkFBQUEsT0FBUXpGLFdBQVcsS0FBSTtZQUNwQzZGLFNBQVM7WUFDVEQsU0FBUyxFQUFFSCxtQkFBQUEsNkJBQUFBLE9BQVFHLFNBQVM7WUFDNUJFLFlBQVk7Z0JBQ1Z0SCxPQUFPNEcsU0FBUzVHLEtBQUs7Z0JBQ3JCaUIsUUFBUTJGLFNBQVMzRixNQUFNO1lBQ3pCO1FBQ0Y7SUFDRixFQUFFLE9BQU9zRyxLQUFLO1FBQ1puSSxRQUFROEcsS0FBSyxDQUFDLHFDQUFxQ3FCO1FBQ25EZiw2QkFBQUEsdUNBQUFBLGlCQUFtQixVQUFzQixPQUFaZSxJQUFJQyxPQUFPO1FBQ3hDLE9BQU87WUFDTGpHLGFBQWE7WUFDYkMsYUFBYTtZQUNiNkYsU0FBUztZQUNUbkIsT0FBT3FCLElBQUlDLE9BQU87UUFDcEI7SUFDRjtBQUNGLEVBQUU7QUFFSjs7Ozs7Q0FLQyxHQUNNLE1BQU1DLG9CQUFvQixTQUFDNUk7UUFBUTZJLDJFQUFVO0lBQ2xELElBQUksQ0FBQzdJLFFBQVEsT0FBTztRQUFFSixHQUFHO1FBQUtDLEdBQUc7SUFBSSxHQUFHLG9CQUFvQjtJQUU1RCxNQUFNc0IsUUFBUW5CLE9BQU9tQixLQUFLLElBQUksS0FBTSx5QkFBeUI7SUFDN0QsTUFBTWlCLFNBQVNwQyxPQUFPb0MsTUFBTSxJQUFJLEtBQUssMEJBQTBCO0lBRS9ELE9BQU87UUFDTHhDLEdBQUc4RCxLQUFLb0YsS0FBSyxDQUFDcEYsS0FBS3FGLE1BQU0sS0FBTTVILENBQUFBLFFBQVEsSUFBSTBILE9BQU0sS0FBTUE7UUFDdkRoSixHQUFHNkQsS0FBS29GLEtBQUssQ0FBQ3BGLEtBQUtxRixNQUFNLEtBQU0zRyxDQUFBQSxTQUFTLElBQUl5RyxPQUFNLEtBQU1BO0lBQzFEO0FBQ0YsRUFBRTtBQUVGOzs7O0NBSUMsR0FDTSxNQUFNRyxxQkFBcUIsT0FBT3pCO0lBQ3JDLE1BQU0sRUFDSkMsU0FBUyxFQUNUNUUsS0FBSyxFQUNMNkUsY0FBYyxFQUNkQyxpQkFBaUIsRUFDakJDLGdCQUFnQixFQUNoQkMsWUFBWSxFQUNaQyxnQkFBZ0IsdUJBQXVCLEVBQ3ZDb0IsVUFBVSxFQUNWQyxXQUFXLEVBQ1osR0FBRzNCO0lBRUosSUFBSTtRQUNGaEgsUUFBUU0sR0FBRyxDQUFDLDBDQUE0RHFJLE9BQWxCRCxhQUFhLEdBQUUsS0FBZSxPQUFaQztRQUV4RSw0Q0FBNEM7UUFDNUMsTUFBTWxKLFNBQVNUO1FBQ2YsSUFBSSxDQUFDUyxRQUFRO1lBQ1hPLFFBQVE4RyxLQUFLLENBQUM7WUFDZE0sNkJBQUFBLHVDQUFBQSxpQkFBb0I7WUFDcEIsT0FBTztnQkFBRWEsU0FBUztZQUFNO1FBQzFCO1FBRUEsMkNBQTJDO1FBQzNDN0kseUJBQXlCaUQsTUFBTWhELENBQUMsRUFBRWdELE1BQU0vQyxDQUFDO1FBRXpDOEgsNkJBQUFBLHVDQUFBQSxpQkFBbUIscUJBQXVDdUIsT0FBbEJELGFBQWEsR0FBRSxLQUFlLE9BQVpDO1FBRTFELGlEQUFpRDtRQUNqRCxNQUFNNUksYUFBYU4sT0FBT3NDLHFCQUFxQjtRQUMvQyxNQUFNYixtQkFBbUJyQix1QkFBdUJ3QyxPQUFPdEM7UUFFdkQsSUFBSSxDQUFDbUIsa0JBQWtCO1lBQ3JCbEIsUUFBUThHLEtBQUssQ0FBQztZQUNkLE9BQU87Z0JBQUVtQixTQUFTO1lBQU07UUFDMUI7UUFFQSxzREFBc0Q7UUFDdEQsSUFBSTVELGlCQUFpQmIsWUFBWTtZQUMvQnBFLHlCQUF5QmlELE1BQU1oRCxDQUFDLEVBQUVnRCxNQUFNL0MsQ0FBQztRQUMzQyxHQUFHO1FBRUgsdUNBQXVDO1FBQ3ZDLElBQUssSUFBSThFLFFBQVEsR0FBR0EsUUFBUSxHQUFHQSxRQUFTO1lBQ3RDbEQsaUJBQWlCSyxXQUFXLEdBQUc2QztZQUMvQmdELDZCQUFBQSx1Q0FBQUEsaUJBQW1CLFNBQTJCdUIsT0FBbEJELGFBQWEsR0FBRSxLQUE4QnRFLE9BQTNCdUUsYUFBWSxpQkFBcUIsT0FBTnZFO1lBRXpFLDJEQUEyRDtZQUMzRGhGLHlCQUF5QmlELE1BQU1oRCxDQUFDLEVBQUVnRCxNQUFNL0MsQ0FBQztZQUV6QyxNQUFNLElBQUlnRixRQUFRQyxDQUFBQSxVQUFXdEMsV0FBV3NDLFNBQVM7UUFDbkQ7UUFFQSxpQkFBaUI7UUFDakJyRCxpQkFBaUJLLFdBQVcsR0FBRztRQUUvQiwyQkFBMkI7UUFDM0JVLFdBQVc7WUFDVCxJQUFJZixpQkFBaUJYLFVBQVUsRUFBRTtnQkFDL0JXLGlCQUFpQlgsVUFBVSxDQUFDQyxXQUFXLENBQUNVO1lBQzFDO1lBRUEsdUJBQXVCO1lBQ3ZCLElBQUltRCxnQkFBZ0I7Z0JBQ2xCWixjQUFjWTtZQUNoQjtRQUNGLEdBQUc7UUFFSCxnRkFBZ0Y7UUFDaEYsTUFBTXVFLGdCQUFnQixNQUFNQyx5QkFBeUI7WUFDbkQ1QjtZQUNBbkgsVUFBVXVDO1lBQ1Y2RTtZQUNBQztZQUNBQyxrQkFBa0IsQ0FBQzBCO2dCQUNqQixJQUFJLE9BQU9BLFdBQVcsVUFBVTtvQkFDOUIxQiw2QkFBQUEsdUNBQUFBLGlCQUFtQjBCO2dCQUNyQixPQUFPLElBQUlBLFVBQVUsT0FBT0EsV0FBVyxVQUFVO29CQUMvQzFCLDZCQUFBQSx1Q0FBQUEsaUJBQW1CMEIsT0FBTzlFLGFBQWEsSUFBSTtnQkFDN0M7WUFDRjtZQUNBcUQ7WUFDQXZELGdCQUFnQixDQUFDZ0Y7Z0JBQ2YsSUFBSSxPQUFPQSxXQUFXLFVBQVU7b0JBQzlCMUIsNkJBQUFBLHVDQUFBQSxpQkFBbUIwQjtnQkFDckIsT0FBTyxJQUFJQSxVQUFVLE9BQU9BLFdBQVcsVUFBVTtvQkFDL0MxQiw2QkFBQUEsdUNBQUFBLGlCQUFtQjBCLE9BQU85RSxhQUFhLElBQUk7Z0JBQzdDO1lBQ0Y7WUFDQXNEO1FBQ0Y7UUFFQSxxREFBcUQ7UUFDckQsTUFBTXlCLGFBQWFILGlCQUFpQixPQUFPQSxrQkFBa0IsV0FDekRBLGdCQUNBO1lBQUV6RyxhQUFhO1lBQUlDLGFBQWE7WUFBSTZGLFNBQVM7UUFBTTtRQUV2RCxPQUFPO1lBQ0w5RixhQUFhNEcsV0FBVzVHLFdBQVcsSUFBSTtZQUN2Q0MsYUFBYTJHLFdBQVczRyxXQUFXLElBQUk7WUFDdkM2RixTQUFTO1lBQ1Q1RjtRQUNGO0lBRUYsRUFBRSxPQUFPeUUsT0FBTztRQUNkOUcsUUFBUThHLEtBQUssQ0FBQyxnQ0FBZ0NBO1FBQzlDTSw2QkFBQUEsdUNBQUFBLGlCQUFtQixVQUF3QixPQUFkTixNQUFNc0IsT0FBTztRQUUxQyxtREFBbUQ7UUFDbkQsT0FBTztZQUNMakcsYUFBYTtZQUNiQyxhQUFhO1lBQ2I2RixTQUFTO1lBQ1RuQixPQUFPQSxNQUFNc0IsT0FBTztRQUN0QjtJQUNGO0FBQ0YsRUFBRTtBQUVKOzs7Q0FHQyxHQUNNLE1BQU1TLDJCQUEyQixPQUFPN0I7SUFDN0MsTUFBTSxFQUNKQyxTQUFTLEVBQ1RuSCxRQUFRLEVBQ1JvSCxjQUFjLEVBQ2RDLGlCQUFpQixFQUNqQkMsZ0JBQWdCLEVBQ2hCQyxZQUFZLEVBQ1p2RCxjQUFjLEVBQ2R3RCxhQUFhLEVBQ2QsR0FBR047SUFFSixJQUFJO1FBQ0YsNENBQTRDO1FBQzVDLE1BQU12SCxTQUFTVDtRQUNmLElBQUksQ0FBQ1MsUUFBUTtZQUNYTyxRQUFROEcsS0FBSyxDQUFDO1lBQ2QsSUFBSU0sa0JBQWtCQSxpQkFBaUI7WUFDdkMsT0FBTztRQUNUO1FBRUEsOENBQThDO1FBQzlDaEkseUJBQXlCVSxTQUFTVCxDQUFDLEVBQUVTLFNBQVNSLENBQUM7UUFFL0MsMkJBQTJCO1FBQzNCLElBQUl3RSxnQkFBZ0I7WUFDbEJBLGVBQWU7Z0JBQ2JFLGVBQWU7Z0JBQ2ZFLGFBQWE7WUFDZjtRQUNGO1FBRUEsK0NBQStDO1FBQy9DLE1BQU1oRSxxQkFBcUJoQixTQUFTaUIsZ0JBQWdCLENBQUM7UUFDckRELG1CQUFtQkUsT0FBTyxDQUFDQyxDQUFBQTtZQUN6QkwsUUFBUU0sR0FBRyxDQUFDLDBEQUEwREQ7WUFDdEVBLEdBQUcySSxNQUFNO1FBQ1g7UUFFQSxvQ0FBb0M7UUFDcEMsTUFBTWpKLGFBQWFOLE9BQU9zQyxxQkFBcUI7UUFFL0MsK0NBQStDO1FBQy9DLElBQUl0QixrQkFBa0JYO1FBQ3RCVyxrQkFBa0I7WUFDaEJwQixHQUFHUyxTQUFTVCxDQUFDO1lBQ2JDLEdBQUdRLFNBQVNSLENBQUM7UUFDZjtRQUNBLDZFQUE2RTtRQUM3RSw0REFBNEQ7UUFDNUQsd0JBQXdCO1FBQ3hCLHFCQUFxQjtRQUNyQixvQkFBb0I7UUFDcEIsT0FBTztRQUNQLFdBQVc7UUFDWCxpRUFBaUU7UUFDakUsd0JBQXdCO1FBQ3hCLHVDQUF1QztRQUN2QyxxQ0FBcUM7UUFDckMsT0FBTztRQUNQLElBQUk7UUFFSlUsUUFBUU0sR0FBRyxDQUFDLG9EQUFvRDtZQUM5RHFCLGtCQUFrQjdCO1lBQ2xCVztZQUNBVjtZQUNBa0osYUFBYTtnQkFDWG5KLFVBQVVMLE9BQU9rQixLQUFLLENBQUNiLFFBQVE7Z0JBQy9CYyxPQUFPbkIsT0FBT2tCLEtBQUssQ0FBQ0MsS0FBSztnQkFDekJpQixRQUFRcEMsT0FBT2tCLEtBQUssQ0FBQ2tCLE1BQU07WUFDN0I7UUFDRjtRQUVBLE1BQU1YLG1CQUFtQmhDLFNBQVNpQyxhQUFhLENBQUM7UUFDaERELGlCQUFpQkUsU0FBUyxHQUFHO1FBQzdCRixpQkFBaUJQLEtBQUssQ0FBQ1UsT0FBTyxHQUFHLHlDQUd4QlosT0FEQ0EsZ0JBQWdCcEIsQ0FBQyxFQUFDLG9CQUNJLE9BQXZCb0IsZ0JBQWdCbkIsQ0FBQyxHQUFHLElBQUc7UUFrQmhDSixTQUFTd0MsSUFBSSxDQUFDRCxXQUFXLENBQUNQO1FBRTFCbEIsUUFBUU0sR0FBRyxDQUFDLHdEQUF3RDtZQUNsRTRJLFNBQVNoSTtZQUNUUCxPQUFPTyxpQkFBaUJQLEtBQUssQ0FBQ1UsT0FBTztZQUNyQ3ZCLFVBQVU7Z0JBQUVULEdBQUdvQixnQkFBZ0JwQixDQUFDO2dCQUFFQyxHQUFHbUIsZ0JBQWdCbkIsQ0FBQyxHQUFHO1lBQUc7UUFDOUQ7UUFFQVUsUUFBUU0sR0FBRyxDQUFDLGlDQUFpQztZQUMzQ1I7WUFDQVc7WUFDQVY7WUFDQWtKLGFBQWE7Z0JBQ1huSixVQUFVTCxPQUFPa0IsS0FBSyxDQUFDYixRQUFRO2dCQUMvQmMsT0FBT25CLE9BQU9rQixLQUFLLENBQUNDLEtBQUs7Z0JBQ3pCaUIsUUFBUXBDLE9BQU9rQixLQUFLLENBQUNrQixNQUFNO1lBQzdCO1FBQ0Y7UUFFQSxzREFBc0Q7UUFDdEQsSUFBSXdDLGlCQUFpQmIsWUFBWTtZQUMvQnBFLHlCQUF5QlUsU0FBU1QsQ0FBQyxFQUFFUyxTQUFTUixDQUFDO1FBQ2pELEdBQUc7UUFFSCxtQkFBbUI7UUFDbkIsSUFBSyxJQUFJOEUsUUFBUSxHQUFHQSxRQUFRLEdBQUdBLFFBQVM7WUFDdENsRCxpQkFBaUJLLFdBQVcsR0FBRzZDO1lBQy9CLHVDQUF1QztZQUN2QyxJQUFJTixnQkFBZ0I7Z0JBQ2xCQSxlQUFlO29CQUNiRSxlQUFlLGNBQW9CLE9BQU5JO29CQUM3QkgsZ0JBQWdCRztvQkFDaEJGLGFBQWE7Z0JBQ2Y7WUFDRjtZQUNBLG9DQUFvQztZQUNwQzlFLHlCQUF5QlUsU0FBU1QsQ0FBQyxFQUFFUyxTQUFTUixDQUFDO1lBQy9DLE1BQU0sSUFBSWdGLFFBQVFDLENBQUFBLFVBQVd0QyxXQUFXc0MsU0FBUztRQUNuRDtRQUVBLHNCQUFzQjtRQUN0QnJELGlCQUFpQkssV0FBVyxHQUFHO1FBQy9CLHFDQUFxQztRQUNyQyxJQUFJdUMsZ0JBQWdCO1lBQ2xCQSxlQUFlO2dCQUNiRSxlQUFlO2dCQUNmQyxnQkFBZ0I7Z0JBQ2hCQyxhQUFhO1lBQ2Y7UUFDRjtRQUVBLHFEQUFxRDtRQUNyRGpDLFdBQVc7WUFDVCxJQUFJZixpQkFBaUJYLFVBQVUsRUFBRTtnQkFDL0JXLGlCQUFpQlgsVUFBVSxDQUFDQyxXQUFXLENBQUNVO1lBQzFDO1lBQ0Esb0NBQW9DO1lBQ3BDLDZEQUE2RDtZQUM3RCxJQUFJO1lBRUosSUFBSW1ELGdCQUFnQjtnQkFDbEJaLGNBQWNZO1lBQ2hCO1FBQ0YsR0FBRztRQUVILDRDQUE0QztRQUM1QyxNQUFNdUUsZ0JBQWdCLE1BQU1qSyxzRUFBb0JBLENBQUM7WUFDL0MwRCxPQUFPdkM7WUFDUGdJLGNBQWNaO1lBQ2REO1lBQ0FjLGlCQUFpQlo7WUFDakJqRjtRQUNGO1FBRUEsSUFBSWtGLGtCQUFrQjtZQUNwQkEsaUJBQWlCLHFCQUFrRGpFLE9BQTdCQSxLQUFLQyxLQUFLLENBQUN0RCxTQUFTVCxDQUFDLEdBQUUsUUFBNkIsT0FBdkI4RCxLQUFLQyxLQUFLLENBQUN0RCxTQUFTUixDQUFDO1FBQzFGO1FBRUEsSUFBSXdFLGdCQUFnQjtZQUNsQkEsZUFBZTtnQkFDYkUsZUFBZTtnQkFDZkUsYUFBYTtZQUNmO1FBQ0Y7UUFFQSwrQkFBK0I7UUFDL0JqQyxXQUFXO1lBQ1QsSUFBSSxPQUFPb0YsaUJBQWlCLFlBQVk7Z0JBQ3RDQSxhQUFhO1lBQ2YsT0FBTyxJQUFJLEtBQTZCLElBQUl2SSxPQUFPdUksWUFBWSxFQUFFO2dCQUMvRHZJLE9BQU91SSxZQUFZLENBQUM7WUFDdEI7UUFDRixHQUFHO1FBRUgsT0FBT3VCO0lBRVQsRUFBRSxPQUFPOUIsT0FBTztRQUNkOUcsUUFBUThHLEtBQUssQ0FBQywyQ0FBMkNBO1FBRXpELElBQUlNLGtCQUFrQjtZQUNwQkEsaUJBQWlCLGdCQUE4QixPQUFkTixNQUFNc0IsT0FBTztRQUNoRDtRQUVBLHVDQUF1QztRQUN2Q25HLFdBQVc7WUFDVCxJQUFJLE9BQU9vRixpQkFBaUIsWUFBWTtnQkFDdENBLGFBQWE7WUFDZixPQUFPLElBQUksS0FBNkIsSUFBSXZJLE9BQU91SSxZQUFZLEVBQUU7Z0JBQy9EdkksT0FBT3VJLFlBQVksQ0FBQztZQUN0QjtRQUNGLEdBQUc7UUFFSCxpRUFBaUU7UUFDakUsT0FBTztZQUNMbEYsYUFBYTtZQUNiQyxhQUFhO1lBQ2I2RixTQUFTO1lBQ1RuQixPQUFPQSxNQUFNc0IsT0FBTztRQUN0QjtJQUNGO0FBQ0YsRUFBRTtBQUVGLHlDQUF5QztBQUN6QyxNQUFNZSxZQUFZLElBQU0sTUFBTSw4REFBOEQ7S0FBdEZBO0FBRU4saUVBQWVBLFNBQVNBLEVBQUMiLCJzb3VyY2VzIjpbIi9hcHAvY29tcG9uZW50cy9jb2xsZWN0ZWQtZGF0YXNldC1jdXN0b21pemVkL0FjdGlvbi9jb3VudFNhdmUuanN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEZpeGVkIGNvdW50U2F2ZS5qc3ggLSBSZXNvbHZpbmcgcmVkcmF3SW50ZXJ2YWwgcmVmZXJlbmNlIGVycm9yXG4vLyBTaGFyZWQgZnVuY3Rpb25hbGl0eSBmb3IgY291bnRkb3duIGFuZCBpbWFnZSBjYXB0dXJlIHByb2Nlc3Nlc1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNhcHR1cmVJbWFnZXNBdFBvaW50IH0gZnJvbSAnLi4vSGVscGVyL3NhdmVmaWxlJztcblxuLyoqXG4gKiBHZXQgY2FudmFzIG1hbmFnZW1lbnQgdXRpbGl0aWVzIGZyb20gZ2xvYmFsIHNjb3BlIChmcm9tIGFjdGlvbkJ1dHRvbi5qcylcbiAqIEByZXR1cm5zIHtPYmplY3R9IENhbnZhcyB1dGlsaXRpZXMgb2JqZWN0XG4gKi9cbmNvbnN0IGdldENhbnZhc1V0aWxzID0gKCkgPT4ge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2FudmFzVXRpbHM6IHdpbmRvdy5jYW52YXNVdGlscyxcbiAgICAgIGNhbnZhc01hbmFnZXI6IHdpbmRvdy5jYW52YXNNYW5hZ2VyXG4gICAgfTtcbiAgfVxuICByZXR1cm4geyBjYW52YXNVdGlsczogbnVsbCwgY2FudmFzTWFuYWdlcjogbnVsbCB9O1xufTtcblxuLyoqXG4gKiBHZXQgb3IgY3JlYXRlIGNhbnZhcyB1c2luZyB0aGUgY2FudmFzIG1hbmFnZW1lbnQgc3lzdGVtIGZyb20gYWN0aW9uQnV0dG9uLmpzXG4gKiBAcmV0dXJucyB7SFRNTENhbnZhc0VsZW1lbnR9IENhbnZhcyBlbGVtZW50XG4gKi9cbmNvbnN0IGdldENhbnZhcyA9ICgpID0+IHtcbiAgY29uc3QgeyBjYW52YXNVdGlscywgY2FudmFzTWFuYWdlciB9ID0gZ2V0Q2FudmFzVXRpbHMoKTtcbiAgXG4gIC8vIEZpcnN0IHRyeSB0byB1c2UgY2FudmFzVXRpbHMgZnJvbSBhY3Rpb25CdXR0b24uanNcbiAgaWYgKGNhbnZhc1V0aWxzICYmIHR5cGVvZiBjYW52YXNVdGlscy5nZXRDYW52YXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY2FudmFzVXRpbHMuZ2V0Q2FudmFzKCk7XG4gIH1cbiAgXG4gIC8vIEZhbGxiYWNrIHRvIGNhbnZhc01hbmFnZXJcbiAgaWYgKGNhbnZhc01hbmFnZXIgJiYgdHlwZW9mIGNhbnZhc01hbmFnZXIuZ2V0Q2FudmFzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGNhbnZhc01hbmFnZXIuZ2V0Q2FudmFzKCkgfHwgY2FudmFzTWFuYWdlci5jcmVhdGVDYW52YXMoKTtcbiAgfVxuICBcbiAgLy8gRmFsbGJhY2sgdG8gZGlyZWN0IHF1ZXJ5XG4gIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdHJhY2tpbmctY2FudmFzJyk7XG59O1xuXG5cbi8qKlxuICogRHJhdyBkb3QgdXNpbmcgdGhlIGNhbnZhcyBtYW5hZ2VtZW50IHN5c3RlbVxuICogQHBhcmFtIHtudW1iZXJ9IHggLSBYIGNvb3JkaW5hdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gWSBjb29yZGluYXRlXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzIC0gRG90IHJhZGl1c1xuICogQHJldHVybnMge2Jvb2xlYW59IFN1Y2Nlc3Mgc3RhdHVzXG4gKi9cbmNvbnN0IGRyYXdEb3RXaXRoQ2FudmFzTWFuYWdlciA9ICh4LCB5LCByYWRpdXMgPSAxMikgPT4ge1xuICBjb25zdCB7IGNhbnZhc1V0aWxzIH0gPSBnZXRDYW52YXNVdGlscygpO1xuICBcbiAgaWYgKGNhbnZhc1V0aWxzICYmIHR5cGVvZiBjYW52YXNVdGlscy5kcmF3RG90ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGNhbnZhc1V0aWxzLmRyYXdEb3QoeCwgeSwgcmFkaXVzKTtcbiAgfVxuICBcbiAgLy8gRmFsbGJhY2s6IG1hbnVhbGx5IGRyYXcgZG90XG4gIGNvbnN0IGNhbnZhcyA9IGdldENhbnZhcygpO1xuICBpZiAoY2FudmFzKSB7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgZHJhd1JlZERvdChjdHgsIHgsIHksIHJhZGl1cywgZmFsc2UpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cblxuLyoqXG4gKiBDcmVhdGVzIGFuZCBkaXNwbGF5cyBhIGNvdW50ZG93biBlbGVtZW50IGFib3ZlIGEgZG90IHBvc2l0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gcG9zaXRpb24gLSB7eCwgeX0gcG9zaXRpb24gb2YgdGhlIGRvdFxuICogQHBhcmFtIHtET01SZWN0fSBjYW52YXNSZWN0IC0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgb2YgdGhlIGNhbnZhc1xuICogQHJldHVybnMge0hUTUxFbGVtZW50fSAtIFRoZSBjcmVhdGVkIGNvdW50ZG93biBlbGVtZW50XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVDb3VudGRvd25FbGVtZW50ID0gKHBvc2l0aW9uLCBjYW52YXNSZWN0KSA9PiB7XG4gIGlmICghcG9zaXRpb24gfHwgdHlwZW9mIHBvc2l0aW9uLnggIT09ICdudW1iZXInIHx8IHR5cGVvZiBwb3NpdGlvbi55ICE9PSAnbnVtYmVyJykge1xuICAgIGNvbnNvbGUud2FybignW2NyZWF0ZUNvdW50ZG93bkVsZW1lbnRdIEludmFsaWQgcG9zaXRpb246JywgcG9zaXRpb24pO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gUmVtb3ZlIGFueSBleGlzdGluZyBjb3VudGRvd24gZWxlbWVudHNcbiAgY29uc3QgZXhpc3RpbmdDb3VudGRvd25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNhbGlicmF0ZS1jb3VudGRvd24sIC5mb3JjZWQtY291bnRkb3duLCAuY2VudGVyLWNvdW50ZG93bi1iYWNrdXAsIC5kb3QtY291bnRkb3duLCAudGVzdC1jb3VudGRvd24nKTtcbiAgZXhpc3RpbmdDb3VudGRvd25zLmZvckVhY2goZWwgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdSZW1vdmluZyBleGlzdGluZyBjb3VudGRvd24gZWxlbWVudDonLCBlbCk7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUpIHtcbiAgICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gR2V0IGNhbnZhcyB0byBjaGVjayBpZiB3ZSBuZWVkIGNvb3JkaW5hdGUgdHJhbnNmb3JtYXRpb25cbiAgY29uc3QgY2FudmFzID0gZ2V0Q2FudmFzKCk7XG4gIGxldCBkaXNwbGF5UG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgXG4gIGlmIChjYW52YXMpIHtcbiAgICAvLyBDaGVjayBpZiBjYW52YXMgaXMgaW4gZnVsbHNjcmVlbiBtb2RlXG4gICAgY29uc3QgaXNGdWxsc2NyZWVuID0gY2FudmFzLnN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgKGNhbnZhcy5zdHlsZS53aWR0aCA9PT0gJzEwMHZ3JyB8fCBjYW52YXMuc3R5bGUud2lkdGggPT09ICcxMDAlJyk7XG4gICAgXG4gICAgaWYgKGlzRnVsbHNjcmVlbikge1xuICAgICAgLy8gQ2FudmFzIGlzIGluIGZ1bGxzY3JlZW4gbW9kZSwgdXNlIGRpcmVjdCBjb29yZGluYXRlc1xuICAgICAgZGlzcGxheVBvc2l0aW9uID0ge1xuICAgICAgICB4OiBwb3NpdGlvbi54LFxuICAgICAgICB5OiBwb3NpdGlvbi55XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYW52YXMgaXMgaW4gbm9ybWFsIG1vZGUsIHVzZSBjYW52YXMtcmVsYXRpdmUgY29vcmRpbmF0ZXNcbiAgICAgIGRpc3BsYXlQb3NpdGlvbiA9IHtcbiAgICAgICAgeDogY2FudmFzUmVjdC5sZWZ0ICsgcG9zaXRpb24ueCxcbiAgICAgICAgeTogY2FudmFzUmVjdC50b3AgKyBwb3NpdGlvbi55XG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIGNvbnNvbGUubG9nKCdbY3JlYXRlQ291bnRkb3duRWxlbWVudF0gQ3JlYXRpbmcgY291bnRkb3duIGF0IHBvc2l0aW9uOicsIHtcbiAgICBvcmlnaW5hbDogcG9zaXRpb24sXG4gICAgZGlzcGxheTogZGlzcGxheVBvc2l0aW9uLFxuICAgIGNhbnZhc1JlY3Q6IGNhbnZhc1JlY3QsXG4gICAgY2FudmFzRnVsbHNjcmVlbjogY2FudmFzID8gKGNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJyAmJiBjYW52YXMuc3R5bGUud2lkdGggPT09ICcxMDB2dycpIDogZmFsc2VcbiAgfSk7XG5cbiAgLy8gQ3JlYXRlIHRoZSBtYWluIGNvdW50ZG93biBlbGVtZW50XG4gIGNvbnN0IGNvdW50ZG93bkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY291bnRkb3duRWxlbWVudC5jbGFzc05hbWUgPSAnZG90LWNvdW50ZG93bic7XG4gIGNvdW50ZG93bkVsZW1lbnQuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgbGVmdDogJHtkaXNwbGF5UG9zaXRpb24ueH1weDtcbiAgICB0b3A6ICR7ZGlzcGxheVBvc2l0aW9uLnkgLSA4MH1weDtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG4gICAgY29sb3I6IHJlZDtcbiAgICBmb250LXNpemU6IDY0cHg7XG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgdGV4dC1zaGFkb3c6IDAgMCAyMHB4IHdoaXRlLCAwIDAgMzBweCB3aGl0ZSwgMCAwIDQwcHggd2hpdGU7XG4gICAgei1pbmRleDogMTA7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjk4KTtcbiAgICBib3JkZXI6IDRweCBzb2xpZCByZWQ7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIHdpZHRoOiAxMDBweDtcbiAgICBoZWlnaHQ6IDEwMHB4O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBib3gtc2hhZG93OiAwIDAgMzBweCByZ2JhKDAsIDAsIDAsIDAuNyksIDAgMCA1MHB4IHJnYmEoMjU1LCAwLCAwLCAwLjUpO1xuICAgIGFuaW1hdGlvbjogY291bnRkb3duUHVsc2UgMXMgaW5maW5pdGU7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gIGA7XG4gIFxuICAvLyBBZGQgQ1NTIGFuaW1hdGlvbiBmb3IgcHVsc2UgZWZmZWN0XG4gIGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvdW50ZG93bi1zdHlsZXMnKSkge1xuICAgIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBzdHlsZS5pZCA9ICdjb3VudGRvd24tc3R5bGVzJztcbiAgICBzdHlsZS50ZXh0Q29udGVudCA9IGBcbiAgICAgIEBrZXlmcmFtZXMgY291bnRkb3duUHVsc2Uge1xuICAgICAgICAwJSB7IHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSBzY2FsZSgxKTsgfVxuICAgICAgICA1MCUgeyB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSkgc2NhbGUoMS4xKTsgfVxuICAgICAgICAxMDAlIHsgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpIHNjYWxlKDEpOyB9XG4gICAgICB9XG4gICAgYDtcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY291bnRkb3duRWxlbWVudCk7XG4gIFxuICBjb25zb2xlLmxvZygnY3JlYXRlQ291bnRkb3duRWxlbWVudCBjcmVhdGVkIGF0OicsIHtcbiAgICBvcmlnaW5hbFBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICBkaXNwbGF5UG9zaXRpb24sXG4gICAgY2FudmFzUmVjdCxcbiAgICBjYW52YXNJbmZvOiBjYW52YXMgPyB7XG4gICAgICBwb3NpdGlvbjogY2FudmFzLnN0eWxlLnBvc2l0aW9uLFxuICAgICAgd2lkdGg6IGNhbnZhcy5zdHlsZS53aWR0aCxcbiAgICAgIGhlaWdodDogY2FudmFzLnN0eWxlLmhlaWdodCxcbiAgICAgIHJlY3Q6IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIH0gOiBudWxsXG4gIH0pO1xuXG4gIC8vIEFkZCBhIHRlbXBvcmFyeSB2aXN1YWwgaW5kaWNhdG9yIHRvIHNob3cgd2hlcmUgdGhlIGNvdW50ZG93biBpcyBwb3NpdGlvbmVkXG4gIGNvbnN0IGluZGljYXRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBpbmRpY2F0b3Iuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgbGVmdDogJHtkaXNwbGF5UG9zaXRpb24ueH1weDtcbiAgICB0b3A6ICR7ZGlzcGxheVBvc2l0aW9uLnl9cHg7XG4gICAgd2lkdGg6IDEwcHg7XG4gICAgaGVpZ2h0OiAxMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IGJsdWU7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIHotaW5kZXg6IDEwO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBgO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGluZGljYXRvcik7XG4gIFxuICAvLyBSZW1vdmUgaW5kaWNhdG9yIGFmdGVyIDIgc2Vjb25kc1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBpZiAoaW5kaWNhdG9yLnBhcmVudE5vZGUpIHtcbiAgICAgIGluZGljYXRvci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGluZGljYXRvcik7XG4gICAgfVxuICB9LCAyMDAwKTtcbiAgXG4gIHJldHVybiBjb3VudGRvd25FbGVtZW50O1xufTtcblxuLyoqXG4gKiBEaXNwbGF5IGEgcHJldmlldyBvZiB0aGUgY2FwdHVyZWQgaW1hZ2VzXG4gKiBAcGFyYW0ge3N0cmluZ30gc2NyZWVuSW1hZ2UgLSBEYXRhIFVSTCBvZiB0aGUgc2NyZWVuIGltYWdlXG4gKiBAcGFyYW0ge3N0cmluZ30gd2ViY2FtSW1hZ2UgLSBEYXRhIFVSTCBvZiB0aGUgd2ViY2FtIGltYWdlXG4gKiBAcGFyYW0ge09iamVjdH0gcG9pbnQgLSB7eCwgeX0gcG9zaXRpb24gb2YgdGhlIGRvdFxuICovXG5leHBvcnQgY29uc3Qgc2hvd0NhcHR1cmVQcmV2aWV3ID0gKHNjcmVlbkltYWdlLCB3ZWJjYW1JbWFnZSwgcG9pbnQpID0+IHtcbiAgaWYgKCFzY3JlZW5JbWFnZSAmJiAhd2ViY2FtSW1hZ2UpIHJldHVybjtcbiAgXG4gIC8vIFJlbW92ZSBhbnkgZXhpc3RpbmcgcHJldmlld3NcbiAgY29uc3QgZXhpc3RpbmdQcmV2aWV3cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jYXB0dXJlLXByZXZpZXctY29udGFpbmVyJyk7XG4gIGV4aXN0aW5nUHJldmlld3MuZm9yRWFjaChwcmV2aWV3ID0+IHtcbiAgICBpZiAocHJldmlldy5wYXJlbnROb2RlKSB7XG4gICAgICBwcmV2aWV3LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocHJldmlldyk7XG4gICAgfVxuICB9KTtcbiAgXG4gIC8vIENyZWF0ZSBwcmV2aWV3IGNvbnRhaW5lclxuICBjb25zdCBwcmV2aWV3Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHByZXZpZXdDb250YWluZXIuY2xhc3NOYW1lID0gJ2NhcHR1cmUtcHJldmlldy1jb250YWluZXInO1xuICBwcmV2aWV3Q29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHRvcDogNTAlO1xuICAgIGxlZnQ6IDUwJTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGdhcDogMjBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuODUpO1xuICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgYm9yZGVyLXJhZGl1czogMTJweDtcbiAgICB6LWluZGV4OiAxMDtcbiAgICBib3gtc2hhZG93OiAwIDhweCAyNXB4IHJnYmEoMCwgMCwgMCwgMC42KTtcbiAgYDtcbiAgXG4gIC8vIEFkZCBzY3JlZW4gaW1hZ2UgaWYgYXZhaWxhYmxlXG4gIGlmIChzY3JlZW5JbWFnZSkge1xuICAgIGNvbnN0IHNjcmVlblByZXZpZXcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBzY3JlZW5QcmV2aWV3LnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYDtcbiAgICBcbiAgICBjb25zdCBzY3JlZW5JbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICBzY3JlZW5JbWcuc3JjID0gc2NyZWVuSW1hZ2U7XG4gICAgc2NyZWVuSW1nLmFsdCA9ICdTY3JlZW4gQ2FwdHVyZSc7XG4gICAgc2NyZWVuSW1nLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICBtYXgtd2lkdGg6IDMyMHB4O1xuICAgICAgbWF4LWhlaWdodDogMjQwcHg7XG4gICAgICBib3JkZXI6IDNweCBzb2xpZCB3aGl0ZTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzM7XG4gICAgYDtcbiAgICBcbiAgICBjb25zdCBzY3JlZW5MYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHNjcmVlbkxhYmVsLnRleHRDb250ZW50ID0gJ1NjcmVlbiBDYXB0dXJlJztcbiAgICBzY3JlZW5MYWJlbC5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGA7XG4gICAgXG4gICAgc2NyZWVuUHJldmlldy5hcHBlbmRDaGlsZChzY3JlZW5JbWcpO1xuICAgIHNjcmVlblByZXZpZXcuYXBwZW5kQ2hpbGQoc2NyZWVuTGFiZWwpO1xuICAgIHByZXZpZXdDb250YWluZXIuYXBwZW5kQ2hpbGQoc2NyZWVuUHJldmlldyk7XG4gIH1cbiAgXG4gIC8vIEFkZCB3ZWJjYW0gaW1hZ2UgaWYgYXZhaWxhYmxlXG4gIGlmICh3ZWJjYW1JbWFnZSkge1xuICAgIGNvbnN0IHdlYmNhbVByZXZpZXcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB3ZWJjYW1QcmV2aWV3LnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYDtcbiAgICBcbiAgICBjb25zdCB3ZWJjYW1JbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICB3ZWJjYW1JbWcuc3JjID0gd2ViY2FtSW1hZ2U7XG4gICAgd2ViY2FtSW1nLmFsdCA9ICdXZWJjYW0gQ2FwdHVyZSc7XG4gICAgd2ViY2FtSW1nLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICBtYXgtd2lkdGg6IDMyMHB4O1xuICAgICAgbWF4LWhlaWdodDogMjQwcHg7XG4gICAgICBib3JkZXI6IDNweCBzb2xpZCB3aGl0ZTtcbiAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzMzM7XG4gICAgYDtcbiAgICBcbiAgICBjb25zdCB3ZWJjYW1MYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHdlYmNhbUxhYmVsLnRleHRDb250ZW50ID0gJ1dlYmNhbSBDYXB0dXJlJztcbiAgICB3ZWJjYW1MYWJlbC5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgbWFyZ2luLXRvcDogMTBweDtcbiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGA7XG4gICAgXG4gICAgd2ViY2FtUHJldmlldy5hcHBlbmRDaGlsZCh3ZWJjYW1JbWcpO1xuICAgIHdlYmNhbVByZXZpZXcuYXBwZW5kQ2hpbGQod2ViY2FtTGFiZWwpO1xuICAgIHByZXZpZXdDb250YWluZXIuYXBwZW5kQ2hpbGQod2ViY2FtUHJldmlldyk7XG4gIH1cbiAgXG4gIC8vIEFkZCBwb2ludCBpbmZvXG4gIGlmIChwb2ludCkge1xuICAgIGNvbnN0IHBvaW50SW5mbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHBvaW50SW5mby50ZXh0Q29udGVudCA9IHBvaW50LmxhYmVsID8gXG4gICAgICBgJHtwb2ludC5sYWJlbH06IHg9JHtNYXRoLnJvdW5kKHBvaW50LngpfSwgeT0ke01hdGgucm91bmQocG9pbnQueSl9YCA6XG4gICAgICBgUG9pbnQ6IHg9JHtNYXRoLnJvdW5kKHBvaW50LngpfSwgeT0ke01hdGgucm91bmQocG9pbnQueSl9YDtcbiAgICAgIFxuICAgIHBvaW50SW5mby5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgY29sb3I6ICNmZmNjMDA7XG4gICAgICBmb250LXNpemU6IDE0cHg7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IC00MHB4O1xuICAgICAgbGVmdDogMDtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIGA7XG4gICAgcHJldmlld0NvbnRhaW5lci5hcHBlbmRDaGlsZChwb2ludEluZm8pO1xuICB9XG4gIFxuICAvLyBBZGQgdGltZXJcbiAgY29uc3QgdGltZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRpbWVyRWxlbWVudC50ZXh0Q29udGVudCA9ICcyLjBzJztcbiAgdGltZXJFbGVtZW50LnN0eWxlLmNzc1RleHQgPSBgXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvdHRvbTogLTI1cHg7XG4gICAgcmlnaHQ6IDIwcHg7XG4gICAgY29sb3I6IHdoaXRlO1xuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuNyk7XG4gICAgcGFkZGluZzogM3B4IDhweDtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gIGA7XG4gIHByZXZpZXdDb250YWluZXIuYXBwZW5kQ2hpbGQodGltZXJFbGVtZW50KTtcbiAgXG4gIC8vIEFkZCB0byBkb2N1bWVudFxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHByZXZpZXdDb250YWluZXIpO1xuICBcbiAgLy8gQ291bnRkb3duXG4gIGxldCB0aW1lTGVmdCA9IDIuMDtcbiAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgdGltZUxlZnQgLT0gMC4xO1xuICAgIGlmICh0aW1lTGVmdCA8PSAwKSB7XG4gICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgIHByZXZpZXdDb250YWluZXIuc3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICAgIHByZXZpZXdDb250YWluZXIuc3R5bGUudHJhbnNpdGlvbiA9ICdvcGFjaXR5IDAuM3MgZWFzZSc7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHByZXZpZXdDb250YWluZXIucGFyZW50Tm9kZSkge1xuICAgICAgICAgIHByZXZpZXdDb250YWluZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChwcmV2aWV3Q29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgICAgfSwgMzAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGltZXJFbGVtZW50LnRleHRDb250ZW50ID0gYCR7dGltZUxlZnQudG9GaXhlZCgxKX1zYDtcbiAgICB9XG4gIH0sIDEwMCk7XG4gIFxuICAvLyBTYWZldHkgY2xlYW51cFxuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICBpZiAocHJldmlld0NvbnRhaW5lci5wYXJlbnROb2RlKSB7XG4gICAgICBwcmV2aWV3Q29udGFpbmVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocHJldmlld0NvbnRhaW5lcik7XG4gICAgfVxuICB9LCA1MDAwKTtcbn07XG5cbi8qKlxuICogUnVucyBhIGNvdW50ZG93biBwcm9jZXNzIHRoYXQgZGlzcGxheXMgMy0yLTEgYWJvdmUgYSBkb3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb3NpdGlvbiAtIHt4LCB5fSBwb3NpdGlvbiBvZiB0aGUgZG90XG4gKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBjYW52YXMgLSBDYW52YXMgZWxlbWVudCB3aXRoIHRoZSBkb3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG9uU3RhdHVzVXBkYXRlIC0gRnVuY3Rpb24gdG8gdXBkYXRlIHN0YXR1cyBtZXNzYWdlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gb25Db21wbGV0ZSAtIENhbGxiYWNrIHRvIGV4ZWN1dGUgd2hlbiBjb3VudGRvd24gY29tcGxldGVzXG4gKi9cbmV4cG9ydCBjb25zdCBydW5Db3VudGRvd24gPSBhc3luYyAocG9zaXRpb24sIGNhbnZhcywgb25TdGF0dXNVcGRhdGUsIG9uQ29tcGxldGUpID0+IHtcbiAgaWYgKCFwb3NpdGlvbiB8fCB0eXBlb2YgcG9zaXRpb24ueCAhPT0gJ251bWJlcicgfHwgdHlwZW9mIHBvc2l0aW9uLnkgIT09ICdudW1iZXInKSB7XG4gICAgY29uc29sZS53YXJuKCdbcnVuQ291bnRkb3duXSBJbnZhbGlkIHBvc2l0aW9uOicsIHBvc2l0aW9uKTtcbiAgICBvblN0YXR1c1VwZGF0ZT8uKHtcbiAgICAgIHByb2Nlc3NTdGF0dXM6IFwiSW52YWxpZCBkb3QgcG9zaXRpb25cIixcbiAgICAgIGNvdW50ZG93blZhbHVlOiBudWxsLFxuICAgICAgaXNDYXB0dXJpbmc6IGZhbHNlXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgY2FudmFzUmVjdCA9IGNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgY291bnRkb3duRWxlbWVudCA9IGNyZWF0ZUNvdW50ZG93bkVsZW1lbnQocG9zaXRpb24sIGNhbnZhc1JlY3QpO1xuICBcbiAgaWYgKCFjb3VudGRvd25FbGVtZW50KSB7XG4gICAgY29uc29sZS53YXJuKCdbcnVuQ291bnRkb3duXSBDb3VudGRvd24gZWxlbWVudCBjb3VsZCBub3QgYmUgY3JlYXRlZC4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBHZXQgdGhlIGJhY2t1cCBjb3VudGRvd24gZWxlbWVudFxuICBjb25zdCBiYWNrdXBDb3VudGRvd24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYmFja3VwLWNvdW50ZG93bicpO1xuXG4gIC8vIFVzZSBjYW52YXMgbWFuYWdlbWVudCBzeXN0ZW0gdG8gZHJhdyBkb3RcbiAgZHJhd0RvdFdpdGhDYW52YXNNYW5hZ2VyKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xuXG4gIGxldCBjb3VudCA9IDM7XG4gIGNvdW50ZG93bkVsZW1lbnQudGV4dENvbnRlbnQgPSBjb3VudDtcbiAgaWYgKGJhY2t1cENvdW50ZG93bikge1xuICAgIGJhY2t1cENvdW50ZG93bi50ZXh0Q29udGVudCA9IGNvdW50O1xuICB9XG5cbiAgb25TdGF0dXNVcGRhdGU/Lih7XG4gICAgcHJvY2Vzc1N0YXR1czogXCJDb3VudGRvd25cIixcbiAgICBjb3VudGRvd25WYWx1ZTogY291bnQsXG4gICAgaXNDYXB0dXJpbmc6IHRydWVcbiAgfSk7XG5cbiAgLy8gQ3JlYXRlIHJlZHJhd0ludGVydmFsIGZvciBrZWVwaW5nIGRvdCB2aXNpYmxlIGR1cmluZyBjb3VudGRvd25cbiAgbGV0IHJlZHJhd0ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgIGRyYXdEb3RXaXRoQ2FudmFzTWFuYWdlcihwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcbiAgfSwgMjAwKTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBjb25zdCBjb3VudGRvd25JbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIGNvdW50LS07XG5cbiAgICAgIGlmIChjb3VudCA8PSAwKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoY291bnRkb3duSW50ZXJ2YWwpO1xuICAgICAgICBjb3VudGRvd25FbGVtZW50LnRleHRDb250ZW50ID0gXCLinJNcIjtcbiAgICAgICAgaWYgKGJhY2t1cENvdW50ZG93bikge1xuICAgICAgICAgIGJhY2t1cENvdW50ZG93bi50ZXh0Q29udGVudCA9IFwi4pyTXCI7XG4gICAgICAgIH1cblxuICAgICAgICBvblN0YXR1c1VwZGF0ZT8uKHtcbiAgICAgICAgICBjb3VudGRvd25WYWx1ZTogXCJDYXB0dXJpbmcuLi5cIixcbiAgICAgICAgICBwcm9jZXNzU3RhdHVzOiBcIkNhcHR1cmluZyBpbWFnZS4uLlwiLFxuICAgICAgICAgIGlzQ2FwdHVyaW5nOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIC8vIFJlbW92ZSBib3RoIGNvdW50ZG93biBlbGVtZW50c1xuICAgICAgICAgIGlmIChjb3VudGRvd25FbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIGNvdW50ZG93bkVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjb3VudGRvd25FbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGJhY2t1cENvdW50ZG93biAmJiBiYWNrdXBDb3VudGRvd24ucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgYmFja3VwQ291bnRkb3duLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYmFja3VwQ291bnRkb3duKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgZHJhd0RvdFdpdGhDYW52YXNNYW5hZ2VyKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xuXG4gICAgICAgICAgLy8gQ2xlYXIgdGhlIHJlZHJhd0ludGVydmFsIHdlIGRlZmluZWQgYWJvdmVcbiAgICAgICAgICBpZiAocmVkcmF3SW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocmVkcmF3SW50ZXJ2YWwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChvbkNvbXBsZXRlKSB7XG4gICAgICAgICAgICBkcmF3RG90V2l0aENhbnZhc01hbmFnZXIocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG4gICAgICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSwgMzAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvdW50ZG93bkVsZW1lbnQudGV4dENvbnRlbnQgPSBjb3VudDtcbiAgICAgICAgaWYgKGJhY2t1cENvdW50ZG93bikge1xuICAgICAgICAgIGJhY2t1cENvdW50ZG93bi50ZXh0Q29udGVudCA9IGNvdW50O1xuICAgICAgICB9XG5cbiAgICAgICAgb25TdGF0dXNVcGRhdGU/Lih7XG4gICAgICAgICAgcHJvY2Vzc1N0YXR1czogXCJDb3VudGRvd25cIixcbiAgICAgICAgICBjb3VudGRvd25WYWx1ZTogY291bnQsXG4gICAgICAgICAgaXNDYXB0dXJpbmc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSwgODAwKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIERyYXcgYSByZWQgZG90IG9uIHRoZSBjYW52YXMgKGxlZ2FjeSBmdW5jdGlvbiBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSlcbiAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggLSBDYW52YXMgMkQgY29udGV4dFxuICogQHBhcmFtIHtudW1iZXJ9IHggLSBYIGNvb3JkaW5hdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gWSBjb29yZGluYXRlXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkaXVzIC0gRG90IHJhZGl1c1xuICogQHBhcmFtIHtib29sZWFufSBjbGVhckNhbnZhcyAtIFdoZXRoZXIgdG8gY2xlYXIgdGhlIGNhbnZhcyBiZWZvcmUgZHJhd2luZyAoZGVmYXVsdDogdHJ1ZSlcbiAqIEByZXR1cm5zIHtPYmplY3R9IC0ge3gsIHl9IHBvc2l0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBkcmF3UmVkRG90ID0gKGN0eCwgeCwgeSwgcmFkaXVzID0gMTIsIGNsZWFyQ2FudmFzID0gdHJ1ZSkgPT4ge1xuICBjb25zdCBjYW52YXMgPSBjdHguY2FudmFzO1xuICBcbiAgLy8gQ2xlYXIgdGhlIGNhbnZhcyBpZiByZXF1ZXN0ZWQgKGRlZmF1bHQgYmVoYXZpb3IpXG4gIGlmIChjbGVhckNhbnZhcykge1xuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICBjdHguZmlsbFN0eWxlID0gJ3llbGxvdyc7XG4gICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gIH1cbiAgXG4gIC8vIERyYXcgdGhlIGRvdCB3aXRoIGEgYnJpZ2h0IHJlZCBjb2xvclxuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5hcmMoeCwgeSwgcmFkaXVzLCAwLCBNYXRoLlBJICogMik7XG4gIGN0eC5maWxsU3R5bGUgPSAncmVkJztcbiAgY3R4LmZpbGwoKTtcbiAgXG4gIC8vIEFkZCBnbG93IGVmZmVjdCBmb3IgYmV0dGVyIHZpc2liaWxpdHlcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHguYXJjKHgsIHksIHJhZGl1cyArIDMsIDAsIE1hdGguUEkgKiAyKTtcbiAgY3R4LnN0cm9rZVN0eWxlID0gJ3JnYmEoMjU1LCAwLCAwLCAwLjUpJztcbiAgY3R4LmxpbmVXaWR0aCA9IDM7XG4gIGN0eC5zdHJva2UoKTtcbiAgXG4gIC8vIEFkZCBhIHNlY29uZCBsYXJnZXIgZ2xvdyBmb3IgZXZlbiBiZXR0ZXIgdmlzaWJpbGl0eVxuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5hcmMoeCwgeSwgcmFkaXVzICsgNiwgMCwgTWF0aC5QSSAqIDIpO1xuICBjdHguc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsIDAsIDAsIDAuMyknO1xuICBjdHgubGluZVdpZHRoID0gMjtcbiAgY3R4LnN0cm9rZSgpO1xuICBcbiAgY29uc29sZS5sb2coYERyZXcgcmVkIGRvdCBhdCAoJHt4fSwgJHt5fSkgd2l0aCByYWRpdXMgJHtyYWRpdXN9YCk7XG4gIHJldHVybiB7IHgsIHkgfTtcbn07XG5cbi8qKlxuICogR2V0IGhpZ2hlc3QgcmVzb2x1dGlvbiBjYW1lcmEgY29uc3RyYWludHNcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IC0gQ2FtZXJhIGNvbnN0cmFpbnRzXG4gKi9cbmNvbnN0IGdldEhpZ2hlc3RSZXNvbHV0aW9uQ29uc3RyYWludHMgPSBhc3luYyAoKSA9PiB7XG4gIHRyeSB7XG4gICAgLy8gR2V0IGFsbCB2aWRlbyBpbnB1dCBkZXZpY2VzXG4gICAgY29uc3QgZGV2aWNlcyA9IGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpO1xuICAgIGNvbnN0IHZpZGVvRGV2aWNlcyA9IGRldmljZXMuZmlsdGVyKGRldmljZSA9PiBkZXZpY2Uua2luZCA9PT0gJ3ZpZGVvaW5wdXQnKTtcbiAgICBcbiAgICBpZiAodmlkZW9EZXZpY2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc29sZS53YXJuKCdObyB2aWRlbyBkZXZpY2VzIGZvdW5kLCB1c2luZyBkZWZhdWx0IGNvbnN0cmFpbnRzJyk7XG4gICAgICByZXR1cm4geyB2aWRlbzogdHJ1ZSB9O1xuICAgIH1cbiAgICBcbiAgICAvLyBUcnkgdG8gZ2V0IGNhcGFiaWxpdGllcyBmb3IgdGhlIGZpcnN0IHZpZGVvIGRldmljZVxuICAgIGNvbnN0IHN0cmVhbSA9IGF3YWl0IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHsgdmlkZW86IHRydWUgfSk7XG4gICAgY29uc3QgdmlkZW9UcmFjayA9IHN0cmVhbS5nZXRWaWRlb1RyYWNrcygpWzBdO1xuICAgIFxuICAgIGlmICghdmlkZW9UcmFjay5nZXRDYXBhYmlsaXRpZXMpIHtcbiAgICAgIGNvbnNvbGUud2FybignZ2V0Q2FwYWJpbGl0aWVzIG5vdCBzdXBwb3J0ZWQsIHVzaW5nIGRlZmF1bHQgY29uc3RyYWludHMnKTtcbiAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHRyYWNrLnN0b3AoKSk7XG4gICAgICByZXR1cm4geyB2aWRlbzogdHJ1ZSB9O1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBjYXBhYmlsaXRpZXMgPSB2aWRlb1RyYWNrLmdldENhcGFiaWxpdGllcygpO1xuICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHRyYWNrLnN0b3AoKSk7XG4gICAgXG4gICAgaWYgKCFjYXBhYmlsaXRpZXMud2lkdGggfHwgIWNhcGFiaWxpdGllcy5oZWlnaHQpIHtcbiAgICAgIGNvbnNvbGUud2FybignTm8gd2lkdGgvaGVpZ2h0IGNhcGFiaWxpdGllcywgdXNpbmcgZGVmYXVsdCBjb25zdHJhaW50cycpO1xuICAgICAgcmV0dXJuIHsgdmlkZW86IHRydWUgfTtcbiAgICB9XG4gICAgXG4gICAgLy8gR2V0IHRoZSBoaWdoZXN0IHJlc29sdXRpb24gYXZhaWxhYmxlXG4gICAgY29uc3QgbWF4V2lkdGggPSBNYXRoLm1heCguLi5jYXBhYmlsaXRpZXMud2lkdGgudmFsdWVzKTtcbiAgICBjb25zdCBtYXhIZWlnaHQgPSBNYXRoLm1heCguLi5jYXBhYmlsaXRpZXMuaGVpZ2h0LnZhbHVlcyk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYFVzaW5nIGhpZ2hlc3QgcmVzb2x1dGlvbjogJHttYXhXaWR0aH14JHttYXhIZWlnaHR9YCk7XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgIHZpZGVvOiB7XG4gICAgICAgIHdpZHRoOiB7IGlkZWFsOiBtYXhXaWR0aCB9LFxuICAgICAgICBoZWlnaHQ6IHsgaWRlYWw6IG1heEhlaWdodCB9LFxuICAgICAgICBmcmFtZVJhdGU6IHsgaWRlYWw6IDMwIH1cbiAgICAgIH1cbiAgICB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUud2FybignRXJyb3IgZ2V0dGluZyBjYW1lcmEgY29uc3RyYWludHMsIHVzaW5nIGRlZmF1bHQ6JywgZXJyb3IpO1xuICAgIHJldHVybiB7IHZpZGVvOiB0cnVlIH07XG4gIH1cbn07XG5cbi8qKlxuICogQ2FwdHVyZSBpbWFnZXMgYXQgYSBzcGVjaWZpYyBwb2ludFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBDYXB0dXJlIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtQcm9taXNlfSAtIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBjYXB0dXJlIHJlc3VsdFxuICovXG5leHBvcnQgY29uc3QgY2FwdHVyZUltYWdlcyA9IGFzeW5jIChvcHRpb25zKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY2FudmFzUmVmLFxuICAgICAgcG9zaXRpb24sXG4gICAgICBjYXB0dXJlQ291bnRlciwgXG4gICAgICBzZXRDYXB0dXJlQ291bnRlcixcbiAgICAgIHNldFByb2Nlc3NTdGF0dXMsXG4gICAgICB0b2dnbGVUb3BCYXIsXG4gICAgICBjYXB0dXJlRm9sZGVyID0gJ2V5ZV90cmFja2luZ19jYXB0dXJlcydcbiAgICB9ID0gb3B0aW9ucztcbiAgXG4gICAgaWYgKCFwb3NpdGlvbiB8fCB0eXBlb2YgcG9zaXRpb24ueCAhPT0gJ251bWJlcicgfHwgdHlwZW9mIHBvc2l0aW9uLnkgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1tjYXB0dXJlSW1hZ2VzXSBJbnZhbGlkIHBvc2l0aW9uIG9iamVjdDonLCBwb3NpdGlvbik7XG4gICAgICBzZXRQcm9jZXNzU3RhdHVzPy4oJ0Vycm9yOiBJbnZhbGlkIGNhcHR1cmUgcG9zaXRpb24nKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgXG4gICAgdHJ5IHtcbiAgICAgIC8vIEdldCBoaWdoZXN0IHJlc29sdXRpb24gY29uc3RyYWludHNcbiAgICAgIGNvbnN0IGNvbnN0cmFpbnRzID0gYXdhaXQgZ2V0SGlnaGVzdFJlc29sdXRpb25Db25zdHJhaW50cygpO1xuICAgICAgY29uc29sZS5sb2coJ1VzaW5nIGNhbWVyYSBjb25zdHJhaW50czonLCBjb25zdHJhaW50cyk7XG4gICAgICBcbiAgICAgIC8vIEdldCBhIG5ldyBzdHJlYW0gd2l0aCB0aGUgaGlnaGVzdCByZXNvbHV0aW9uXG4gICAgICBjb25zdCBzdHJlYW0gPSBhd2FpdCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShjb25zdHJhaW50cyk7XG4gICAgICBjb25zdCB2aWRlb1RyYWNrID0gc3RyZWFtLmdldFZpZGVvVHJhY2tzKClbMF07XG4gICAgICBjb25zdCBzZXR0aW5ncyA9IHZpZGVvVHJhY2suZ2V0U2V0dGluZ3MoKTtcbiAgICAgIGNvbnNvbGUubG9nKCdBY3R1YWwgY2FtZXJhIHNldHRpbmdzOicsIHNldHRpbmdzKTtcbiAgICAgIFxuICAgICAgLy8gVXBkYXRlIHZpZGVvIGVsZW1lbnQgd2l0aCBuZXcgc3RyZWFtXG4gICAgICBjb25zdCB2aWRlb0VsZW1lbnQgPSB3aW5kb3cudmlkZW9FbGVtZW50IHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3ZpZGVvJyk7XG4gICAgICBpZiAodmlkZW9FbGVtZW50KSB7XG4gICAgICAgIHZpZGVvRWxlbWVudC5zcmNPYmplY3QgPSBzdHJlYW07XG4gICAgICAgIGF3YWl0IHZpZGVvRWxlbWVudC5wbGF5KCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIENhbGwgdGhlIGNhcHR1cmVJbWFnZXNBdFBvaW50IHdpdGggYWxsIG5lY2Vzc2FyeSBwYXJhbWV0ZXJzXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjYXB0dXJlSW1hZ2VzQXRQb2ludCh7XG4gICAgICAgIHBvaW50OiBwb3NpdGlvbixcbiAgICAgICAgY2FwdHVyZUNvdW50OiBjYXB0dXJlQ291bnRlcixcbiAgICAgICAgY2FudmFzUmVmLCBcbiAgICAgICAgc2V0Q2FwdHVyZUNvdW50OiBzZXRDYXB0dXJlQ291bnRlcixcbiAgICAgICAgc2hvd0NhcHR1cmVQcmV2aWV3XG4gICAgICB9KTtcbiAgXG4gICAgICBjb25zb2xlLmxvZygnQ2FwdHVyZSBzdWNjZXNzZnVsIHdpdGggSUQ6JywgcmVzdWx0LmNhcHR1cmVJZCk7XG4gICAgICBcbiAgICAgIC8vIENsZWFuIHVwIHRoZSBzdHJlYW1cbiAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHRyYWNrLnN0b3AoKSk7XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNjcmVlbkltYWdlOiByZXN1bHQ/LnNjcmVlbkltYWdlIHx8ICcnLFxuICAgICAgICB3ZWJjYW1JbWFnZTogcmVzdWx0Py53ZWJjYW1JbWFnZSB8fCAnJyxcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgY2FwdHVyZUlkOiByZXN1bHQ/LmNhcHR1cmVJZCxcbiAgICAgICAgcmVzb2x1dGlvbjoge1xuICAgICAgICAgIHdpZHRoOiBzZXR0aW5ncy53aWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IHNldHRpbmdzLmhlaWdodFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcignW2NhcHR1cmVJbWFnZXNdIFVuZXhwZWN0ZWQgZXJyb3I6JywgZXJyKTtcbiAgICAgIHNldFByb2Nlc3NTdGF0dXM/LihgRXJyb3I6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzY3JlZW5JbWFnZTogJycsXG4gICAgICAgIHdlYmNhbUltYWdlOiAnJyxcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiBlcnIubWVzc2FnZVxuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogR2VuZXJhdGUgYSByYW5kb20gZG90IHBvc2l0aW9uIHdpdGhpbiB0aGUgY2FudmFzXG4gKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSBjYW52YXMgLSBDYW52YXMgZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmcgLSBQYWRkaW5nIGZyb20gdGhlIGVkZ2VzXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAtIHt4LCB5fSBwb3NpdGlvblxuICovXG5leHBvcnQgY29uc3QgZ2V0UmFuZG9tUG9zaXRpb24gPSAoY2FudmFzLCBwYWRkaW5nID0gNDApID0+IHtcbiAgaWYgKCFjYW52YXMpIHJldHVybiB7IHg6IDEwMCwgeTogMTAwIH07IC8vIEZhbGxiYWNrIHBvc2l0aW9uXG4gIFxuICBjb25zdCB3aWR0aCA9IGNhbnZhcy53aWR0aCB8fCA0MDA7ICAvLyBGYWxsYmFjayBpZiB3aWR0aCBpcyAwXG4gIGNvbnN0IGhlaWdodCA9IGNhbnZhcy5oZWlnaHQgfHwgMzAwOyAvLyBGYWxsYmFjayBpZiBoZWlnaHQgaXMgMFxuICBcbiAgcmV0dXJuIHtcbiAgICB4OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAod2lkdGggLSAyICogcGFkZGluZykpICsgcGFkZGluZyxcbiAgICB5OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoaGVpZ2h0IC0gMiAqIHBhZGRpbmcpKSArIHBhZGRpbmdcbiAgfTtcbn07XG5cbi8qKlxuICogU3BlY2lhbCBjYWxpYnJhdGlvbiBjYXB0dXJlIGZ1bmN0aW9uIHRoYXQgYmVoYXZlcyBsaWtlIHJhbmRvbSBkb3QgY2FwdHVyZVxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBBbGwgdGhlIGNhbGlicmF0aW9uIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IFJlc3VsdCBvYmplY3Qgd2l0aCBjYXB0dXJlZCBkYXRhXG4gKi9cbmV4cG9ydCBjb25zdCBjYWxpYnJhdGlvbkNhcHR1cmUgPSBhc3luYyAob3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGNhbnZhc1JlZixcbiAgICAgIHBvaW50LFxuICAgICAgY2FwdHVyZUNvdW50ZXIsXG4gICAgICBzZXRDYXB0dXJlQ291bnRlcixcbiAgICAgIHNldFByb2Nlc3NTdGF0dXMsXG4gICAgICB0b2dnbGVUb3BCYXIsXG4gICAgICBjYXB0dXJlRm9sZGVyID0gJ2V5ZV90cmFja2luZ19jYXB0dXJlcycsXG4gICAgICBwb2ludEluZGV4LFxuICAgICAgdG90YWxQb2ludHNcbiAgICB9ID0gb3B0aW9ucztcbiAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKGBTdGFydGluZyBjYWxpYnJhdGlvbiBjYXB0dXJlIGZvciBwb2ludCAke3BvaW50SW5kZXggKyAxfS8ke3RvdGFsUG9pbnRzfWApO1xuICAgICAgXG4gICAgICAvLyBHZXQgY2FudmFzIHVzaW5nIGNhbnZhcyBtYW5hZ2VtZW50IHN5c3RlbVxuICAgICAgY29uc3QgY2FudmFzID0gZ2V0Q2FudmFzKCk7XG4gICAgICBpZiAoIWNhbnZhcykge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiQ2FudmFzIHJlZmVyZW5jZSBpcyBudWxsIGluIGNhbGlicmF0aW9uQ2FwdHVyZVwiKTtcbiAgICAgICAgc2V0UHJvY2Vzc1N0YXR1cz8uKGBFcnJvcjogQ2FudmFzIG5vdCBhdmFpbGFibGVgKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICAgIH1cbiAgXG4gICAgICAvLyBVc2UgY2FudmFzIG1hbmFnZW1lbnQgc3lzdGVtIHRvIGRyYXcgZG90XG4gICAgICBkcmF3RG90V2l0aENhbnZhc01hbmFnZXIocG9pbnQueCwgcG9pbnQueSk7XG4gIFxuICAgICAgc2V0UHJvY2Vzc1N0YXR1cz8uKGBDYWxpYnJhdGlvbiBwb2ludCAke3BvaW50SW5kZXggKyAxfS8ke3RvdGFsUG9pbnRzfWApO1xuICBcbiAgICAgIC8vIFVzZSB0aGUgc2FtZSBjb3VudGRvd24gZWxlbWVudCBjcmVhdGlvbiBtZXRob2RcbiAgICAgIGNvbnN0IGNhbnZhc1JlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBjb25zdCBjb3VudGRvd25FbGVtZW50ID0gY3JlYXRlQ291bnRkb3duRWxlbWVudChwb2ludCwgY2FudmFzUmVjdCk7XG4gICAgICBcbiAgICAgIGlmICghY291bnRkb3duRWxlbWVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGNyZWF0ZSBjb3VudGRvd24gZWxlbWVudFwiKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UgfTtcbiAgICAgIH1cbiAgXG4gICAgICAvLyBDcmVhdGUgYSByZWRyYXdJbnRlcnZhbCBmb3Iga2VlcGluZyB0aGUgZG90IHZpc2libGVcbiAgICAgIGxldCByZWRyYXdJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgZHJhd0RvdFdpdGhDYW52YXNNYW5hZ2VyKHBvaW50LngsIHBvaW50LnkpO1xuICAgICAgfSwgMjAwKTtcbiAgXG4gICAgICAvLyBSdW4gdGhlIHNhbWUgY291bnRkb3duIGFzIHJhbmRvbSBkb3RcbiAgICAgIGZvciAobGV0IGNvdW50ID0gMzsgY291bnQgPiAwOyBjb3VudC0tKSB7XG4gICAgICAgIGNvdW50ZG93bkVsZW1lbnQudGV4dENvbnRlbnQgPSBjb3VudDtcbiAgICAgICAgc2V0UHJvY2Vzc1N0YXR1cz8uKGBQb2ludCAke3BvaW50SW5kZXggKyAxfS8ke3RvdGFsUG9pbnRzfSAtIGNvdW50ZG93biAke2NvdW50fWApO1xuICAgICAgICBcbiAgICAgICAgLy8gUmVkcmF3IHRoZSBkb3QgYXQgZWFjaCBzdGVwIHRvIGVuc3VyZSBpdCByZW1haW5zIHZpc2libGVcbiAgICAgICAgZHJhd0RvdFdpdGhDYW52YXNNYW5hZ2VyKHBvaW50LngsIHBvaW50LnkpO1xuICAgICAgICBcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDgwMCkpO1xuICAgICAgfVxuICBcbiAgICAgIC8vIFNob3cgY2hlY2ttYXJrXG4gICAgICBjb3VudGRvd25FbGVtZW50LnRleHRDb250ZW50ID0gXCLinJNcIjtcbiAgICAgIFxuICAgICAgLy8gUmVtb3ZlIGNvdW50ZG93biBlbGVtZW50XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKGNvdW50ZG93bkVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGNvdW50ZG93bkVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjb3VudGRvd25FbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ2xlYXIgcmVkcmF3SW50ZXJ2YWxcbiAgICAgICAgaWYgKHJlZHJhd0ludGVydmFsKSB7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChyZWRyYXdJbnRlcnZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0sIDMwMCk7XG4gIFxuICAgICAgLy8gVXNlIGNhcHR1cmVBbmRQcmV2aWV3UHJvY2VzcyBpbnN0ZWFkIG9mIGRpcmVjdGx5IGNhbGxpbmcgY2FwdHVyZUltYWdlc0F0UG9pbnRcbiAgICAgIGNvbnN0IGNhcHR1cmVSZXN1bHQgPSBhd2FpdCBjYXB0dXJlQW5kUHJldmlld1Byb2Nlc3Moe1xuICAgICAgICBjYW52YXNSZWYsXG4gICAgICAgIHBvc2l0aW9uOiBwb2ludCxcbiAgICAgICAgY2FwdHVyZUNvdW50ZXIsXG4gICAgICAgIHNldENhcHR1cmVDb3VudGVyLFxuICAgICAgICBzZXRQcm9jZXNzU3RhdHVzOiAoc3RhdHVzKSA9PiB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBzdGF0dXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBzZXRQcm9jZXNzU3RhdHVzPy4oc3RhdHVzKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyAmJiB0eXBlb2Ygc3RhdHVzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgc2V0UHJvY2Vzc1N0YXR1cz8uKHN0YXR1cy5wcm9jZXNzU3RhdHVzIHx8ICcnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRvZ2dsZVRvcEJhcixcbiAgICAgICAgb25TdGF0dXNVcGRhdGU6IChzdGF0dXMpID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIHN0YXR1cyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHNldFByb2Nlc3NTdGF0dXM/LihzdGF0dXMpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzICYmIHR5cGVvZiBzdGF0dXMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBzZXRQcm9jZXNzU3RhdHVzPy4oc3RhdHVzLnByb2Nlc3NTdGF0dXMgfHwgJycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FwdHVyZUZvbGRlclxuICAgICAgfSk7XG4gIFxuICAgICAgLy8gRW5zdXJlIHByb3BlciByZXR1cm4gZXZlbiBpZiBjYXB0dXJlUmVzdWx0IGlzIG51bGxcbiAgICAgIGNvbnN0IHNhZmVSZXN1bHQgPSBjYXB0dXJlUmVzdWx0ICYmIHR5cGVvZiBjYXB0dXJlUmVzdWx0ID09PSAnb2JqZWN0JyBcbiAgICAgICAgPyBjYXB0dXJlUmVzdWx0IFxuICAgICAgICA6IHsgc2NyZWVuSW1hZ2U6ICcnLCB3ZWJjYW1JbWFnZTogJycsIHN1Y2Nlc3M6IGZhbHNlIH07XG4gIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2NyZWVuSW1hZ2U6IHNhZmVSZXN1bHQuc2NyZWVuSW1hZ2UgfHwgJycsXG4gICAgICAgIHdlYmNhbUltYWdlOiBzYWZlUmVzdWx0LndlYmNhbUltYWdlIHx8ICcnLFxuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBwb2ludFxuICAgICAgfTtcbiAgICAgIFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gY2FsaWJyYXRpb25DYXB0dXJlOlwiLCBlcnJvcik7XG4gICAgICBzZXRQcm9jZXNzU3RhdHVzPy4oYEVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICBcbiAgICAgIC8vIEFsd2F5cyByZXR1cm4gYSB2YWxpZCBvYmplY3Qgd2l0aCBkZWZhdWx0IHZhbHVlc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2NyZWVuSW1hZ2U6ICcnLFxuICAgICAgICB3ZWJjYW1JbWFnZTogJycsXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZVxuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogQ29tcGxldGUgY2FwdHVyZSBhbmQgcHJldmlldyBwcm9jZXNzXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFByb2Nlc3Mgb3B0aW9uc1xuICovXG5leHBvcnQgY29uc3QgY2FwdHVyZUFuZFByZXZpZXdQcm9jZXNzID0gYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgY29uc3Qge1xuICAgIGNhbnZhc1JlZixcbiAgICBwb3NpdGlvbixcbiAgICBjYXB0dXJlQ291bnRlcixcbiAgICBzZXRDYXB0dXJlQ291bnRlcixcbiAgICBzZXRQcm9jZXNzU3RhdHVzLFxuICAgIHRvZ2dsZVRvcEJhcixcbiAgICBvblN0YXR1c1VwZGF0ZSxcbiAgICBjYXB0dXJlRm9sZGVyXG4gIH0gPSBvcHRpb25zO1xuXG4gIHRyeSB7XG4gICAgLy8gR2V0IGNhbnZhcyB1c2luZyBjYW52YXMgbWFuYWdlbWVudCBzeXN0ZW1cbiAgICBjb25zdCBjYW52YXMgPSBnZXRDYW52YXMoKTtcbiAgICBpZiAoIWNhbnZhcykge1xuICAgICAgY29uc29sZS5lcnJvcihcIltjYXB0dXJlQW5kUHJldmlld1Byb2Nlc3NdIENhbnZhcyByZWZlcmVuY2UgaXMgbnVsbFwiKTtcbiAgICAgIGlmIChzZXRQcm9jZXNzU3RhdHVzKSBzZXRQcm9jZXNzU3RhdHVzKCdFcnJvcjogQ2FudmFzIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIERyYXcgdGhlIGRvdCB1c2luZyBjYW52YXMgbWFuYWdlbWVudCBzeXN0ZW1cbiAgICBkcmF3RG90V2l0aENhbnZhc01hbmFnZXIocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG5cbiAgICAvLyBDb3VudGRvd24gYmVmb3JlIGNhcHR1cmVcbiAgICBpZiAob25TdGF0dXNVcGRhdGUpIHtcbiAgICAgIG9uU3RhdHVzVXBkYXRlKHtcbiAgICAgICAgcHJvY2Vzc1N0YXR1czogJ1N0YXJ0aW5nIGNvdW50ZG93bi4uLicsXG4gICAgICAgIGlzQ2FwdHVyaW5nOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgYW55IGV4aXN0aW5nIGNvdW50ZG93biBlbGVtZW50cyBmaXJzdFxuICAgIGNvbnN0IGV4aXN0aW5nQ291bnRkb3ducyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jYWxpYnJhdGUtY291bnRkb3duLCAuZG90LWNvdW50ZG93biwgLmZvcmNlZC1jb3VudGRvd24sIC5jZW50ZXItY291bnRkb3duLWJhY2t1cCcpO1xuICAgIGV4aXN0aW5nQ291bnRkb3ducy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdjYXB0dXJlQW5kUHJldmlld1Byb2Nlc3M6IFJlbW92aW5nIGV4aXN0aW5nIGNvdW50ZG93bjonLCBlbCk7XG4gICAgICBlbC5yZW1vdmUoKTtcbiAgICB9KTtcbiAgICBcbiAgICAvLyBDcmVhdGUgYSBjdXN0b20gY291bnRkb3duIGVsZW1lbnRcbiAgICBjb25zdCBjYW52YXNSZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIFxuICAgIC8vIFRyYW5zZm9ybSBjb29yZGluYXRlcyBmb3IgZnVsbHNjcmVlbiBkaXNwbGF5XG4gICAgbGV0IGRpc3BsYXlQb3NpdGlvbiA9IHBvc2l0aW9uO1xuICAgIGRpc3BsYXlQb3NpdGlvbiA9IHtcbiAgICAgIHg6IHBvc2l0aW9uLngsXG4gICAgICB5OiBwb3NpdGlvbi55XG4gICAgfTtcbiAgICAvLyBpZiAoY2FudmFzLnN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnICYmIGNhbnZhcy5zdHlsZS53aWR0aCA9PT0gJzEwMHZ3Jykge1xuICAgIC8vICAgLy8gQ2FudmFzIGlzIGluIGZ1bGxzY3JlZW4gbW9kZSwgdXNlIGRpcmVjdCBjb29yZGluYXRlc1xuICAgIC8vICAgZGlzcGxheVBvc2l0aW9uID0ge1xuICAgIC8vICAgICB4OiBwb3NpdGlvbi54LFxuICAgIC8vICAgICB5OiBwb3NpdGlvbi55XG4gICAgLy8gICB9O1xuICAgIC8vIH0gZWxzZSB7XG4gICAgLy8gICAvLyBDYW52YXMgaXMgaW4gbm9ybWFsIG1vZGUsIHVzZSBjYW52YXMtcmVsYXRpdmUgY29vcmRpbmF0ZXNcbiAgICAvLyAgIGRpc3BsYXlQb3NpdGlvbiA9IHtcbiAgICAvLyAgICAgeDogY2FudmFzUmVjdC5sZWZ0ICsgcG9zaXRpb24ueCxcbiAgICAvLyAgICAgeTogY2FudmFzUmVjdC50b3AgKyBwb3NpdGlvbi55XG4gICAgLy8gICB9O1xuICAgIC8vIH1cbiAgICBcbiAgICBjb25zb2xlLmxvZygnY2FwdHVyZUFuZFByZXZpZXdQcm9jZXNzOiBDcmVhdGluZyBjb3VudGRvd24gYXQ6Jywge1xuICAgICAgb3JpZ2luYWxQb3NpdGlvbjogcG9zaXRpb24sXG4gICAgICBkaXNwbGF5UG9zaXRpb24sXG4gICAgICBjYW52YXNSZWN0LFxuICAgICAgY2FudmFzU3R5bGU6IHtcbiAgICAgICAgcG9zaXRpb246IGNhbnZhcy5zdHlsZS5wb3NpdGlvbixcbiAgICAgICAgd2lkdGg6IGNhbnZhcy5zdHlsZS53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBjYW52YXMuc3R5bGUuaGVpZ2h0XG4gICAgICB9XG4gICAgfSk7XG4gICAgXG4gICAgY29uc3QgY291bnRkb3duRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGNvdW50ZG93bkVsZW1lbnQuY2xhc3NOYW1lID0gJ2NhbGlicmF0ZS1jb3VudGRvd24nO1xuICAgIGNvdW50ZG93bkVsZW1lbnQuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgIGxlZnQ6ICR7ZGlzcGxheVBvc2l0aW9uLnh9cHg7XG4gICAgICB0b3A6ICR7ZGlzcGxheVBvc2l0aW9uLnkgLSA2MH1weDtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcbiAgICAgIGNvbG9yOiByZWQ7XG4gICAgICBmb250LXNpemU6IDQ4cHg7XG4gICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgIHRleHQtc2hhZG93OiAwIDAgMTVweCB3aGl0ZSwgMCAwIDI1cHggd2hpdGUsIDAgMCAzNXB4IHdoaXRlO1xuICAgICAgei1pbmRleDogMTA7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOTUpO1xuICAgICAgYm9yZGVyOiAzcHggc29saWQgcmVkO1xuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgd2lkdGg6IDgwcHg7XG4gICAgICBoZWlnaHQ6IDgwcHg7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgYm94LXNoYWRvdzogMCAwIDIwcHggcmdiYSgwLCAwLCAwLCAwLjUpLCAwIDAgNDBweCByZ2JhKDI1NSwgMCwgMCwgMC4zKTtcbiAgICAgIGFuaW1hdGlvbjogcHVsc2UgMXMgaW5maW5pdGU7XG4gICAgYDtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvdW50ZG93bkVsZW1lbnQpO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKCdjYXB0dXJlQW5kUHJldmlld1Byb2Nlc3M6IENyZWF0ZWQgY291bnRkb3duIGVsZW1lbnQ6Jywge1xuICAgICAgZWxlbWVudDogY291bnRkb3duRWxlbWVudCxcbiAgICAgIHN0eWxlOiBjb3VudGRvd25FbGVtZW50LnN0eWxlLmNzc1RleHQsXG4gICAgICBwb3NpdGlvbjogeyB4OiBkaXNwbGF5UG9zaXRpb24ueCwgeTogZGlzcGxheVBvc2l0aW9uLnkgLSA2MCB9XG4gICAgfSk7XG4gICAgXG4gICAgY29uc29sZS5sb2coJ0NvdW50ZG93biBlbGVtZW50IGNyZWF0ZWQgYXQ6Jywge1xuICAgICAgcG9zaXRpb24sXG4gICAgICBkaXNwbGF5UG9zaXRpb24sXG4gICAgICBjYW52YXNSZWN0LFxuICAgICAgY2FudmFzU3R5bGU6IHtcbiAgICAgICAgcG9zaXRpb246IGNhbnZhcy5zdHlsZS5wb3NpdGlvbixcbiAgICAgICAgd2lkdGg6IGNhbnZhcy5zdHlsZS53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBjYW52YXMuc3R5bGUuaGVpZ2h0XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBDcmVhdGUgYSByZWRyYXdJbnRlcnZhbCBmb3Iga2VlcGluZyB0aGUgZG90IHZpc2libGVcbiAgICBsZXQgcmVkcmF3SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBkcmF3RG90V2l0aENhbnZhc01hbmFnZXIocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG4gICAgfSwgMjAwKTtcblxuICAgIC8vIE1hbnVhbCBjb3VudGRvd25cbiAgICBmb3IgKGxldCBjb3VudCA9IDM7IGNvdW50ID4gMDsgY291bnQtLSkge1xuICAgICAgY291bnRkb3duRWxlbWVudC50ZXh0Q29udGVudCA9IGNvdW50O1xuICAgICAgLy8gYmFja3VwQ291bnRkb3duLnRleHRDb250ZW50ID0gY291bnQ7XG4gICAgICBpZiAob25TdGF0dXNVcGRhdGUpIHtcbiAgICAgICAgb25TdGF0dXNVcGRhdGUoe1xuICAgICAgICAgIHByb2Nlc3NTdGF0dXM6IGBDb3VudGRvd246ICR7Y291bnR9YCxcbiAgICAgICAgICBjb3VudGRvd25WYWx1ZTogY291bnQsXG4gICAgICAgICAgaXNDYXB0dXJpbmc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBSZWRyYXcgZG90IHRvIGVuc3VyZSBpdCdzIHZpc2libGVcbiAgICAgIGRyYXdEb3RXaXRoQ2FudmFzTWFuYWdlcihwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCA4MDApKTtcbiAgICB9XG5cbiAgICAvLyBDaGFuZ2UgdG8gY2hlY2ttYXJrXG4gICAgY291bnRkb3duRWxlbWVudC50ZXh0Q29udGVudCA9IFwi4pyTXCI7XG4gICAgLy8gYmFja3VwQ291bnRkb3duLnRleHRDb250ZW50ID0gXCLinJNcIjtcbiAgICBpZiAob25TdGF0dXNVcGRhdGUpIHtcbiAgICAgIG9uU3RhdHVzVXBkYXRlKHtcbiAgICAgICAgcHJvY2Vzc1N0YXR1czogJ0NhcHR1cmluZyBpbWFnZXMuLi4nLFxuICAgICAgICBjb3VudGRvd25WYWx1ZTogXCJDYXB0dXJpbmcuLi5cIixcbiAgICAgICAgaXNDYXB0dXJpbmc6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSBjb3VudGRvd24gZWxlbWVudHMgYW5kIGNsZWFyIHJlZHJhd0ludGVydmFsXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoY291bnRkb3duRWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgIGNvdW50ZG93bkVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjb3VudGRvd25FbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIChiYWNrdXBDb3VudGRvd24ucGFyZW50Tm9kZSkge1xuICAgICAgLy8gICBiYWNrdXBDb3VudGRvd24ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiYWNrdXBDb3VudGRvd24pO1xuICAgICAgLy8gfVxuICAgICAgXG4gICAgICBpZiAocmVkcmF3SW50ZXJ2YWwpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChyZWRyYXdJbnRlcnZhbCk7XG4gICAgICB9XG4gICAgfSwgMzAwKTtcblxuICAgIC8vIFVzZSBjYXB0dXJlSW1hZ2VzQXRQb2ludCBmcm9tIHNhdmVmaWxlLmpzXG4gICAgY29uc3QgY2FwdHVyZVJlc3VsdCA9IGF3YWl0IGNhcHR1cmVJbWFnZXNBdFBvaW50KHtcbiAgICAgIHBvaW50OiBwb3NpdGlvbixcbiAgICAgIGNhcHR1cmVDb3VudDogY2FwdHVyZUNvdW50ZXIsXG4gICAgICBjYW52YXNSZWYsXG4gICAgICBzZXRDYXB0dXJlQ291bnQ6IHNldENhcHR1cmVDb3VudGVyLFxuICAgICAgc2hvd0NhcHR1cmVQcmV2aWV3XG4gICAgfSk7XG5cbiAgICBpZiAoc2V0UHJvY2Vzc1N0YXR1cykge1xuICAgICAgc2V0UHJvY2Vzc1N0YXR1cyhgQ2FwdHVyZWQgZG90IGF0IHg9JHtNYXRoLnJvdW5kKHBvc2l0aW9uLngpfSwgeT0ke01hdGgucm91bmQocG9zaXRpb24ueSl9YCk7XG4gICAgfVxuXG4gICAgaWYgKG9uU3RhdHVzVXBkYXRlKSB7XG4gICAgICBvblN0YXR1c1VwZGF0ZSh7XG4gICAgICAgIHByb2Nlc3NTdGF0dXM6ICdDYXB0dXJlIGNvbXBsZXRlJyxcbiAgICAgICAgaXNDYXB0dXJpbmc6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBTaG93IFRvcEJhciBhZ2FpbiB3aXRoIGRlbGF5XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHRvZ2dsZVRvcEJhciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0b2dnbGVUb3BCYXIodHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy50b2dnbGVUb3BCYXIpIHtcbiAgICAgICAgd2luZG93LnRvZ2dsZVRvcEJhcih0cnVlKTtcbiAgICAgIH1cbiAgICB9LCAyNTAwKTtcblxuICAgIHJldHVybiBjYXB0dXJlUmVzdWx0O1xuXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIltjYXB0dXJlQW5kUHJldmlld1Byb2Nlc3NdIEZhdGFsIGVycm9yOlwiLCBlcnJvcik7XG4gICAgXG4gICAgaWYgKHNldFByb2Nlc3NTdGF0dXMpIHtcbiAgICAgIHNldFByb2Nlc3NTdGF0dXMoYEZhdGFsIGVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgfVxuICAgIFxuICAgIC8vIEVuc3VyZSBUb3BCYXIgaXMgc2hvd24gZXZlbiBvbiBlcnJvclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB0b2dnbGVUb3BCYXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdG9nZ2xlVG9wQmFyKHRydWUpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cudG9nZ2xlVG9wQmFyKSB7XG4gICAgICAgIHdpbmRvdy50b2dnbGVUb3BCYXIodHJ1ZSk7XG4gICAgICB9XG4gICAgfSwgMTUwMCk7XG4gICAgXG4gICAgLy8gUmV0dXJuIGEgbWluaW1hbCB2YWxpZCBvYmplY3QgdG8gcHJldmVudCBudWxsIHJlZmVyZW5jZSBlcnJvcnNcbiAgICByZXR1cm4ge1xuICAgICAgc2NyZWVuSW1hZ2U6ICcnLFxuICAgICAgd2ViY2FtSW1hZ2U6ICcnLFxuICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICBlcnJvcjogZXJyb3IubWVzc2FnZVxuICAgIH07XG4gIH1cbn07XG5cbi8vIERlZmF1bHQgZXhwb3J0IGZvciBSZWFjdCBjb21wYXRpYmlsaXR5XG5jb25zdCBDb3VudFNhdmUgPSAoKSA9PiBudWxsOyAvLyBUaGlzIGlzIGEgdXRpbGl0eSBmaWxlLCBzbyB3ZSBkb24ndCBuZWVkIHRvIHJlbmRlciBhbnl0aGluZ1xuXG5leHBvcnQgZGVmYXVsdCBDb3VudFNhdmU7ICJdLCJuYW1lcyI6WyJSZWFjdCIsImNhcHR1cmVJbWFnZXNBdFBvaW50IiwiZ2V0Q2FudmFzVXRpbHMiLCJjYW52YXNVdGlscyIsIndpbmRvdyIsImNhbnZhc01hbmFnZXIiLCJnZXRDYW52YXMiLCJjcmVhdGVDYW52YXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJkcmF3RG90V2l0aENhbnZhc01hbmFnZXIiLCJ4IiwieSIsInJhZGl1cyIsImRyYXdEb3QiLCJjYW52YXMiLCJjdHgiLCJnZXRDb250ZXh0IiwiZHJhd1JlZERvdCIsImNyZWF0ZUNvdW50ZG93bkVsZW1lbnQiLCJwb3NpdGlvbiIsImNhbnZhc1JlY3QiLCJjb25zb2xlIiwid2FybiIsImV4aXN0aW5nQ291bnRkb3ducyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiZWwiLCJsb2ciLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJkaXNwbGF5UG9zaXRpb24iLCJpc0Z1bGxzY3JlZW4iLCJzdHlsZSIsIndpZHRoIiwibGVmdCIsInRvcCIsIm9yaWdpbmFsIiwiZGlzcGxheSIsImNhbnZhc0Z1bGxzY3JlZW4iLCJjb3VudGRvd25FbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImNzc1RleHQiLCJpZCIsInRleHRDb250ZW50IiwiaGVhZCIsImFwcGVuZENoaWxkIiwiYm9keSIsIm9yaWdpbmFsUG9zaXRpb24iLCJjYW52YXNJbmZvIiwiaGVpZ2h0IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImluZGljYXRvciIsInNldFRpbWVvdXQiLCJzaG93Q2FwdHVyZVByZXZpZXciLCJzY3JlZW5JbWFnZSIsIndlYmNhbUltYWdlIiwicG9pbnQiLCJleGlzdGluZ1ByZXZpZXdzIiwicHJldmlldyIsInByZXZpZXdDb250YWluZXIiLCJzY3JlZW5QcmV2aWV3Iiwic2NyZWVuSW1nIiwic3JjIiwiYWx0Iiwic2NyZWVuTGFiZWwiLCJ3ZWJjYW1QcmV2aWV3Iiwid2ViY2FtSW1nIiwid2ViY2FtTGFiZWwiLCJwb2ludEluZm8iLCJsYWJlbCIsIk1hdGgiLCJyb3VuZCIsInRpbWVyRWxlbWVudCIsInRpbWVMZWZ0IiwiaW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJvcGFjaXR5IiwidHJhbnNpdGlvbiIsInRvRml4ZWQiLCJydW5Db3VudGRvd24iLCJvblN0YXR1c1VwZGF0ZSIsIm9uQ29tcGxldGUiLCJwcm9jZXNzU3RhdHVzIiwiY291bnRkb3duVmFsdWUiLCJpc0NhcHR1cmluZyIsImJhY2t1cENvdW50ZG93biIsImNvdW50IiwicmVkcmF3SW50ZXJ2YWwiLCJQcm9taXNlIiwicmVzb2x2ZSIsImNvdW50ZG93bkludGVydmFsIiwiY2xlYXJDYW52YXMiLCJjbGVhclJlY3QiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImJlZ2luUGF0aCIsImFyYyIsIlBJIiwiZmlsbCIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlIiwiZ2V0SGlnaGVzdFJlc29sdXRpb25Db25zdHJhaW50cyIsImRldmljZXMiLCJuYXZpZ2F0b3IiLCJtZWRpYURldmljZXMiLCJlbnVtZXJhdGVEZXZpY2VzIiwidmlkZW9EZXZpY2VzIiwiZmlsdGVyIiwiZGV2aWNlIiwia2luZCIsImxlbmd0aCIsInZpZGVvIiwic3RyZWFtIiwiZ2V0VXNlck1lZGlhIiwidmlkZW9UcmFjayIsImdldFZpZGVvVHJhY2tzIiwiZ2V0Q2FwYWJpbGl0aWVzIiwiZ2V0VHJhY2tzIiwidHJhY2siLCJzdG9wIiwiY2FwYWJpbGl0aWVzIiwibWF4V2lkdGgiLCJtYXgiLCJ2YWx1ZXMiLCJtYXhIZWlnaHQiLCJpZGVhbCIsImZyYW1lUmF0ZSIsImVycm9yIiwiY2FwdHVyZUltYWdlcyIsIm9wdGlvbnMiLCJjYW52YXNSZWYiLCJjYXB0dXJlQ291bnRlciIsInNldENhcHR1cmVDb3VudGVyIiwic2V0UHJvY2Vzc1N0YXR1cyIsInRvZ2dsZVRvcEJhciIsImNhcHR1cmVGb2xkZXIiLCJjb25zdHJhaW50cyIsInNldHRpbmdzIiwiZ2V0U2V0dGluZ3MiLCJ2aWRlb0VsZW1lbnQiLCJzcmNPYmplY3QiLCJwbGF5IiwicmVzdWx0IiwiY2FwdHVyZUNvdW50Iiwic2V0Q2FwdHVyZUNvdW50IiwiY2FwdHVyZUlkIiwic3VjY2VzcyIsInJlc29sdXRpb24iLCJlcnIiLCJtZXNzYWdlIiwiZ2V0UmFuZG9tUG9zaXRpb24iLCJwYWRkaW5nIiwiZmxvb3IiLCJyYW5kb20iLCJjYWxpYnJhdGlvbkNhcHR1cmUiLCJwb2ludEluZGV4IiwidG90YWxQb2ludHMiLCJjYXB0dXJlUmVzdWx0IiwiY2FwdHVyZUFuZFByZXZpZXdQcm9jZXNzIiwic3RhdHVzIiwic2FmZVJlc3VsdCIsInJlbW92ZSIsImNhbnZhc1N0eWxlIiwiZWxlbWVudCIsIkNvdW50U2F2ZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./components/collected-dataset-customized/Action/countSave.jsx\n"));

/***/ })

});
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/collected-dataset-customized",{

/***/ "(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/actionButton.js":
/*!***************************************************************************!*\
  !*** ./pages/collected-dataset-customized/components-gui/actionButton.js ***!
  \***************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionButton: () => (/* binding */ ActionButton),\n/* harmony export */   ActionButtonGroup: () => (/* binding */ ActionButtonGroup),\n/* harmony export */   \"default\": () => (/* binding */ ActionButtonPage)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dynamic */ \"(pages-dir-browser)/./node_modules/next/dynamic.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _components_collected_dataset_customized_Action_CalibratePoints__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../components/collected-dataset-customized/Action/CalibratePoints */ \"(pages-dir-browser)/./components/collected-dataset-customized/Action/CalibratePoints.js\");\n/* harmony import */ var _components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../components/collected-dataset-customized/Action/countSave */ \"(pages-dir-browser)/./components/collected-dataset-customized/Action/countSave.js\");\n/* harmony import */ var _components_collected_dataset_customized_Helper_savefile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../components/collected-dataset-customized/Helper/savefile */ \"(pages-dir-browser)/./components/collected-dataset-customized/Helper/savefile.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/router */ \"(pages-dir-browser)/./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _adminSettings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./adminSettings */ \"(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/adminSettings.js\");\n/* harmony import */ var _canvasConfig__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./canvasConfig */ \"(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/canvasConfig.js\");\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n\n// Add deep comparison utility\nconst isEqual = (obj1, obj2)=>{\n    if (obj1 === obj2) return true;\n    if (typeof obj1 !== 'object' || typeof obj2 !== 'object') return false;\n    if (obj1 === null || obj2 === null) return false;\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) return false;\n    return keys1.every((key)=>keys2.includes(key) && isEqual(obj1[key], obj2[key]));\n};\n// Create a basic ActionButton component with optimization\nconst ActionButton = (param)=>{\n    let { text, abbreviatedText, onClick, customClass = '', disabled = false, active = false } = param;\n    _s();\n    const [isAbbreviated, setIsAbbreviated] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const { settings } = (0,_adminSettings__WEBPACK_IMPORTED_MODULE_7__.useAdminSettings)();\n    const [currentUserId, setCurrentUserId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('default');\n    const [isCapturing, setIsCapturing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [captureCounter, setCaptureCounter] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [processStatus, setProcessStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    // Memoize button props to prevent unnecessary re-renders\n    const buttonProps = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"ActionButton.useMemo[buttonProps]\": ()=>({\n                className: \"action-button \".concat(customClass, \" \").concat(isAbbreviated ? 'abbreviated' : '', \" \").concat(active ? 'active' : ''),\n                onClick,\n                disabled,\n                title: text\n            })\n    }[\"ActionButton.useMemo[buttonProps]\"], [\n        customClass,\n        isAbbreviated,\n        active,\n        onClick,\n        disabled,\n        text\n    ]);\n    // Check window size and set abbreviated mode with debounce\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButton.useEffect\": ()=>{\n            if (false) {}\n            let timeoutId;\n            const handleResize = {\n                \"ActionButton.useEffect.handleResize\": ()=>{\n                    clearTimeout(timeoutId);\n                    timeoutId = setTimeout({\n                        \"ActionButton.useEffect.handleResize\": ()=>{\n                            const width = window.innerWidth;\n                            setIsAbbreviated(width < 768);\n                        }\n                    }[\"ActionButton.useEffect.handleResize\"], 100);\n                }\n            }[\"ActionButton.useEffect.handleResize\"];\n            window.addEventListener('resize', handleResize);\n            handleResize(); // Initial call\n            return ({\n                \"ActionButton.useEffect\": ()=>{\n                    window.removeEventListener('resize', handleResize);\n                    clearTimeout(timeoutId);\n                }\n            })[\"ActionButton.useEffect\"];\n        }\n    }[\"ActionButton.useEffect\"], []);\n    // Add effect to listen for user ID changes with optimization\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButton.useEffect\": ()=>{\n            const handleUserIdChange = {\n                \"ActionButton.useEffect.handleUserIdChange\": (event)=>{\n                    if (event.detail && event.detail.type === 'userIdChange') {\n                        const newUserId = event.detail.userId;\n                        if (newUserId !== currentUserId) {\n                            setCurrentUserId(newUserId);\n                        }\n                    }\n                }\n            }[\"ActionButton.useEffect.handleUserIdChange\"];\n            window.addEventListener('userIdChange', handleUserIdChange);\n            return ({\n                \"ActionButton.useEffect\": ()=>{\n                    window.removeEventListener('userIdChange', handleUserIdChange);\n                }\n            })[\"ActionButton.useEffect\"];\n        }\n    }[\"ActionButton.useEffect\"], [\n        currentUserId\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n        ...buttonProps,\n        children: [\n            isAbbreviated ? abbreviatedText : text,\n            processStatus && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"process-status\",\n                children: processStatus\n            }, void 0, false, {\n                fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                lineNumber: 92,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n        lineNumber: 89,\n        columnNumber: 5\n    }, undefined);\n};\n_s(ActionButton, \"Nkz1GO/Uf3mvhA1uh+EhQBsi9aE=\", false, function() {\n    return [\n        _adminSettings__WEBPACK_IMPORTED_MODULE_7__.useAdminSettings\n    ];\n});\n_c = ActionButton;\n// Create the ActionButtonGroup component with client-side only rendering and optimization\nconst ActionButtonGroupInner = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(_s1((param, ref)=>{\n    let { triggerCameraAccess, isCompactMode, onActionClick } = param;\n    _s1();\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_6__.useRouter)();\n    const { settings, updateSettings } = (0,_adminSettings__WEBPACK_IMPORTED_MODULE_7__.useAdminSettings)(ref);\n    // State for button actions\n    const [randomTimes, setRandomTimes] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [delaySeconds, setDelaySeconds] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(3);\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [processStatus, setProcessStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [countdownValue, setCountdownValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [currentDot, setCurrentDot] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [calibrationPoints, setCalibrationPoints] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [remainingCaptures, setRemainingCaptures] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [showCanvas, setShowCanvas] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    // Track the capture count\n    const [calibrationHandler, setCalibrationHandler] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [captureCount, setCaptureCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [isCapturing, setIsCapturing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Toggle states\n    const [showHeadPose, setShowHeadPose] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showBoundingBox, setShowBoundingBox] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showMask, setShowMask] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showParameters, setShowParameters] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isCameraActive, setIsCameraActive] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showPermissionPopup, setShowPermissionPopup] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [currentUserId, setCurrentUserId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('default');\n    // Add cache for settings\n    const settingsCache = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const lastSettingsUpdate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    // Optimize settings updates\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            if (settings && currentUserId && settings[currentUserId]) {\n                const userSettings = settings[currentUserId];\n                const cachedSettings = settingsCache.current.get(currentUserId);\n                if (!isEqual(cachedSettings, userSettings)) {\n                    setRandomTimes(Number(userSettings.times_set_random) || 1);\n                    setDelaySeconds(Number(userSettings.delay_set_random) || 3);\n                    settingsCache.current.set(currentUserId, userSettings);\n                    lastSettingsUpdate.current.set(currentUserId, Date.now());\n                }\n            }\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], [\n        settings,\n        currentUserId\n    ]);\n    // Listen for user ID changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            const handleUserIdChange = {\n                \"ActionButtonGroupInner.useEffect.handleUserIdChange\": (event)=>{\n                    if (event.detail && event.detail.type === 'userIdChange') {\n                        const newUserId = event.detail.userId;\n                        setCurrentUserId(newUserId);\n                        // Update settings for new user\n                        if (settings && settings[newUserId]) {\n                            const userSettings = settings[newUserId];\n                            setRandomTimes(Number(userSettings.times_set_random) || 1);\n                            setDelaySeconds(Number(userSettings.delay_set_random) || 3);\n                        }\n                    }\n                }\n            }[\"ActionButtonGroupInner.useEffect.handleUserIdChange\"];\n            window.addEventListener('userIdChange', handleUserIdChange);\n            return ({\n                \"ActionButtonGroupInner.useEffect\": ()=>{\n                    window.removeEventListener('userIdChange', handleUserIdChange);\n                }\n            })[\"ActionButtonGroupInner.useEffect\"];\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], [\n        settings\n    ]);\n    // Listen for settings updates\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            const handleSettingsUpdate = {\n                \"ActionButtonGroupInner.useEffect.handleSettingsUpdate\": (event)=>{\n                    if (event.detail && event.detail.type === 'captureSettings') {\n                        const { userId, times_set_random, delay_set_random } = event.detail;\n                        if (userId === currentUserId) {\n                            if (times_set_random !== undefined) {\n                                const newTimes = Number(times_set_random) || 1;\n                                setRandomTimes(newTimes);\n                            }\n                            if (delay_set_random !== undefined) {\n                                const newDelay = Number(delay_set_random) || 3;\n                                setDelaySeconds(newDelay);\n                            }\n                        }\n                    }\n                }\n            }[\"ActionButtonGroupInner.useEffect.handleSettingsUpdate\"];\n            window.addEventListener('captureSettingsUpdate', handleSettingsUpdate);\n            return ({\n                \"ActionButtonGroupInner.useEffect\": ()=>{\n                    window.removeEventListener('captureSettingsUpdate', handleSettingsUpdate);\n                }\n            })[\"ActionButtonGroupInner.useEffect\"];\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], [\n        currentUserId\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            // Make functions globally accessible as a fallback\n            if (true) {\n                window.actionButtonFunctions = {\n                    handleRandomDot,\n                    handleSetRandom,\n                    handleSetCalibrate,\n                    handleClearAll\n                };\n            // console.log('Action button functions exposed to window.actionButtonFunctions');\n            }\n            return ({\n                \"ActionButtonGroupInner.useEffect\": ()=>{\n                    if (true) {\n                        delete window.actionButtonFunctions;\n                    }\n                }\n            })[\"ActionButtonGroupInner.useEffect\"];\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            // Only initialize if canvas doesn't exist\n            if (!document.querySelector('#tracking-canvas')) {\n                const canvas = getMainCanvas();\n                console.log('Canvas initialized:', canvas ? 'success' : 'failed');\n            }\n            // Cleanup function\n            return ({\n                \"ActionButtonGroupInner.useEffect\": ()=>{\n                    // Don't remove canvas on cleanup to prevent recreation issues\n                    console.log('ActionButton cleanup - canvas preserved');\n                }\n            })[\"ActionButtonGroupInner.useEffect\"];\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            if (false) {}\n            // Function to get control values from TopBar\n            const updateControlValues = {\n                \"ActionButtonGroupInner.useEffect.updateControlValues\": ()=>{\n                    // Get the time input element\n                    const timeInput = document.querySelector('.control-input-field[data-control=\"time\"]');\n                    if (timeInput) {\n                        const timeValue = parseInt(timeInput.value, 10);\n                        if (!isNaN(timeValue) && timeValue > 0) {\n                            console.log('Updating randomTimes to:', timeValue);\n                            setRandomTimes(timeValue);\n                        }\n                    }\n                    // Get the delay input element\n                    const delayInput = document.querySelector('.control-input-field[data-control=\"delay\"]');\n                    if (delayInput) {\n                        const delayValue = parseInt(delayInput.value, 10);\n                        if (!isNaN(delayValue) && delayValue > 0) {\n                            console.log('Updating delaySeconds to:', delayValue);\n                            setDelaySeconds(delayValue);\n                        }\n                    }\n                }\n            }[\"ActionButtonGroupInner.useEffect.updateControlValues\"];\n            // Add event listeners to the control inputs\n            const timeInput = document.querySelector('.control-input-field[data-control=\"time\"]');\n            const delayInput = document.querySelector('.control-input-field[data-control=\"delay\"]');\n            if (timeInput) {\n                timeInput.addEventListener('change', updateControlValues);\n                timeInput.addEventListener('input', updateControlValues); // Also listen for input events\n            }\n            if (delayInput) {\n                delayInput.addEventListener('change', updateControlValues);\n                delayInput.addEventListener('input', updateControlValues); // Also listen for input events\n            }\n            // Initial update\n            updateControlValues();\n            // Cleanup event listeners\n            return ({\n                \"ActionButtonGroupInner.useEffect\": ()=>{\n                    if (timeInput) {\n                        timeInput.removeEventListener('change', updateControlValues);\n                        timeInput.removeEventListener('input', updateControlValues);\n                    }\n                    if (delayInput) {\n                        delayInput.removeEventListener('change', updateControlValues);\n                        delayInput.removeEventListener('input', updateControlValues);\n                    }\n                }\n            })[\"ActionButtonGroupInner.useEffect\"];\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], []);\n    // Initialize canvas on component mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            const initializeCanvas = {\n                \"ActionButtonGroupInner.useEffect.initializeCanvas\": ()=>{\n                    // Remove any existing canvas\n                    const existingCanvas = document.querySelector('.tracking-canvas');\n                    if (existingCanvas) {\n                        existingCanvas.remove();\n                    }\n                    // Create new canvas\n                    const canvas = document.createElement('canvas');\n                    canvas.className = 'tracking-canvas';\n                    canvas.id = 'tracking-canvas';\n                    canvas.style.cssText = \"\\n        position: fixed;\\n        top: 0;\\n        left: 0;\\n        width: 100vw;\\n        height: 100vh;\\n        opacity: 0;\\n        pointer-events: none;\\n        z-index: 5;\\n      \";\n                    // Set canvas dimensions\n                    canvas.width = window.innerWidth;\n                    canvas.height = window.innerHeight;\n                    // Add canvas to body\n                    document.body.appendChild(canvas);\n                    // Store reference\n                    canvasRef.current = canvas;\n                    if (true) {\n                        window.whiteScreenCanvas = canvas;\n                    }\n                    // Initialize with white background\n                    const ctx = canvas.getContext('2d');\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(0, 0, canvas.width, canvas.height);\n                    // Add resize handler\n                    const handleResize = {\n                        \"ActionButtonGroupInner.useEffect.initializeCanvas.handleResize\": ()=>{\n                            canvas.width = window.innerWidth;\n                            canvas.height = window.innerHeight;\n                            ctx.fillStyle = 'white';\n                            ctx.fillRect(0, 0, canvas.width, canvas.height);\n                        }\n                    }[\"ActionButtonGroupInner.useEffect.initializeCanvas.handleResize\"];\n                    window.addEventListener('resize', handleResize);\n                    return ({\n                        \"ActionButtonGroupInner.useEffect.initializeCanvas\": ()=>{\n                            window.removeEventListener('resize', handleResize);\n                            if (canvas.parentNode) {\n                                canvas.parentNode.removeChild(canvas);\n                            }\n                        }\n                    })[\"ActionButtonGroupInner.useEffect.initializeCanvas\"];\n                }\n            }[\"ActionButtonGroupInner.useEffect.initializeCanvas\"];\n            const cleanup = initializeCanvas();\n            return cleanup;\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], []);\n    // Helper function to get the main canvas - improved to be more reliable\n    const getMainCanvas = ()=>{\n        // First check if we have a valid canvas reference\n        if (canvasRef.current && document.contains(canvasRef.current)) {\n            return canvasRef.current;\n        }\n        // Try to find existing canvas in DOM\n        let existingCanvas = document.querySelector('#tracking-canvas');\n        if (existingCanvas && document.contains(existingCanvas)) {\n            canvasRef.current = existingCanvas;\n            window.whiteScreenCanvas = existingCanvas;\n            return existingCanvas;\n        }\n        // Create new canvas only if none exists\n        console.log('Creating new canvas...');\n        const canvas = document.createElement('canvas');\n        canvas.className = 'tracking-canvas';\n        canvas.id = 'tracking-canvas';\n        // Set initial dimensions and style\n        canvas.width = 800;\n        canvas.height = 400;\n        canvas.style.cssText = \"\\n      position: relative;\\n      width: 100%;\\n      height: 400px;\\n      background-color: white;\\n      border: 1px solid #ccc;\\n      display: block;\\n    \";\n        // Initialize with white background\n        const ctx = canvas.getContext('2d');\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        // Find container and append\n        const container = document.querySelector('.canvas-container') || document.querySelector('.main-content') || document.body;\n        container.appendChild(canvas);\n        // Store references\n        canvasRef.current = canvas;\n        window.whiteScreenCanvas = canvas;\n        return canvas;\n    };\n    const handlePermissionAccepted = ()=>{\n        setShowPermissionPopup(false);\n        if (triggerCameraAccess) {\n            triggerCameraAccess(true);\n        }\n    };\n    // Handler to cancel permission popup\n    const handlePermissionDenied = ()=>{\n        setShowPermissionPopup(false);\n    };\n    // Helper function to restore the canvas to its original parent and styling\n    const restoreCanvas = (canvas)=>{\n        if (!canvas || !canvas._originalState) return;\n        const original = canvas._originalState;\n        try {\n            // Restore to original parent\n            if (original.parent && document.contains(original.parent)) {\n                original.parent.appendChild(canvas);\n            } else {\n                // Fallback to a container if original parent is gone\n                const container = document.querySelector('.canvas-container') || document.querySelector('.main-content') || document.body;\n                container.appendChild(canvas);\n            }\n            // Restore styles\n            canvas.style.position = original.position || 'relative';\n            canvas.style.top = original.top || '';\n            canvas.style.left = original.left || '';\n            canvas.style.width = original.width || '100%';\n            canvas.style.height = original.height || '400px';\n            canvas.style.zIndex = original.zIndex || '';\n            canvas.style.backgroundColor = 'white';\n            // Restore dimensions\n            canvas.width = original.canvasWidth || 800;\n            canvas.height = original.canvasHeight || 400;\n            // Clear with white background\n            const ctx = canvas.getContext('2d');\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            // Clear the saved state\n            delete canvas._originalState;\n        } catch (error) {\n            console.error('Error restoring canvas:', error);\n            // Fallback: just clear the canvas\n            const ctx = canvas.getContext('2d');\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n    };\n    // Clear the canvas\n    const clearCanvas = ()=>{\n        const canvas = getMainCanvas();\n        if (!canvas) {\n            console.warn(\"No canvas found for clearing\");\n            return;\n        }\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        setCurrentDot(null);\n    };\n    // Add this function to actionButton.js\n    /**\n   * Consolidated function that handles the entire dot process: drawing, countdown, capture, and preview\n   * @param {Object} options - Configuration options\n   * @param {Object} options.position - {x, y} coordinates where to draw the dot\n   * @param {Function} options.onStatusUpdate - Callback for status updates\n   * @param {Function} options.toggleTopBar - Function to toggle top bar visibility\n   * @param {Function} options.triggerCameraAccess - Function to ensure camera is available\n   * @param {Function} options.setIsCapturing - Function to update capturing state\n   * @param {Number} options.captureCount - Current capture counter\n   * @param {Function} options.setCaptureCount - Function to update the capture counter\n   * @param {Boolean} options.useRandomPosition - Whether to generate a random position\n   * @returns {Promise<Object>} - Result object with capture data\n   */ // Add a centralized canvas configuration system\n    const CANVAS_CONFIG = {\n        // Default dimensions\n        defaultWidth: 800,\n        defaultHeight: 400,\n        // Responsive breakpoints\n        breakpoints: {\n            mobile: {\n                maxWidth: 768,\n                height: 300\n            },\n            tablet: {\n                maxWidth: 1024,\n                height: 400\n            },\n            desktop: {\n                minWidth: 1025,\n                height: 500\n            }\n        },\n        // Canvas modes\n        modes: {\n            container: {\n                position: 'relative',\n                width: '100%',\n                height: '400px',\n                backgroundColor: 'white',\n                border: '1px solid #ccc',\n                display: 'block',\n                zIndex: 'auto',\n                opacity: '1',\n                pointerEvents: 'auto'\n            },\n            fullscreen: {\n                position: 'fixed',\n                top: '0',\n                left: '0',\n                width: '100vw',\n                height: '100vh',\n                backgroundColor: 'white',\n                border: 'none',\n                display: 'block',\n                zIndex: '99999',\n                opacity: '1',\n                pointerEvents: 'auto',\n                margin: '0',\n                padding: '0',\n                boxSizing: 'border-box'\n            },\n            overlay: {\n                position: 'fixed',\n                top: '0',\n                left: '0',\n                width: '100vw',\n                height: '100vh',\n                backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                border: 'none',\n                display: 'block',\n                zIndex: '9999',\n                opacity: '1',\n                pointerEvents: 'auto'\n            }\n        },\n        // Animation settings\n        animations: {\n            transition: 'all 0.3s ease-in-out',\n            fadeIn: 'opacity 0.3s ease-in',\n            fadeOut: 'opacity 0.3s ease-out'\n        }\n    };\n    // Canvas manager class for better organization\n    class CanvasManager {\n        // Get responsive dimensions based on screen size\n        getResponsiveDimensions() {\n            const width = window.innerWidth;\n            const height = window.innerHeight;\n            if (width <= this.config.breakpoints.mobile.maxWidth) {\n                return {\n                    width: width,\n                    height: this.config.breakpoints.mobile.height\n                };\n            } else if (width <= this.config.breakpoints.tablet.maxWidth) {\n                return {\n                    width: width,\n                    height: this.config.breakpoints.tablet.height\n                };\n            } else {\n                return {\n                    width: width,\n                    height: this.config.breakpoints.desktop.height\n                };\n            }\n        }\n        // Create or get canvas with proper initialization\n        createCanvas() {\n            let canvas = document.querySelector('#tracking-canvas');\n            if (!canvas) {\n                canvas = document.createElement('canvas');\n                canvas.className = 'tracking-canvas';\n                canvas.id = 'tracking-canvas';\n                // Set initial responsive dimensions\n                const dimensions = this.getResponsiveDimensions();\n                canvas.width = dimensions.width;\n                canvas.height = dimensions.height;\n                // Apply container mode styles\n                this.applyMode(canvas, 'container');\n                // Find appropriate container\n                const container = this.findContainer();\n                container.appendChild(canvas);\n                // Initialize with white background\n                this.clearCanvas(canvas);\n                console.log(\"Canvas created with dimensions: \".concat(dimensions.width, \"x\").concat(dimensions.height));\n            }\n            this.canvas = canvas;\n            window.whiteScreenCanvas = canvas;\n            return canvas;\n        }\n        // Find the best container for the canvas\n        findContainer() {\n            const containers = [\n                '.canvas-container',\n                '.main-content',\n                '.preview-area',\n                'body'\n            ];\n            for (const selector of containers){\n                const container = document.querySelector(selector);\n                if (container) {\n                    return container;\n                }\n            }\n            return document.body;\n        }\n        // Apply a specific mode to the canvas\n        applyMode(canvas, mode) {\n            if (!canvas || !this.config.modes[mode]) {\n                console.warn(\"Invalid canvas or mode: \".concat(mode));\n                return;\n            }\n            const modeConfig = this.config.modes[mode];\n            const style = canvas.style;\n            // Apply all mode properties\n            Object.entries(modeConfig).forEach((param)=>{\n                let [property, value] = param;\n                style[property] = value;\n            });\n            // Add transition for smooth mode changes\n            style.transition = this.config.animations.transition;\n            this.currentMode = mode;\n            console.log(\"Canvas mode changed to: \".concat(mode));\n        }\n        // Switch canvas to fullscreen mode\n        switchToFullscreen() {\n            if (!this.canvas) {\n                this.createCanvas();\n            }\n            // Save original state if not already saved\n            if (!this.originalState) {\n                this.saveOriginalState();\n            }\n            // Move to body for fullscreen\n            document.body.appendChild(this.canvas);\n            // Apply fullscreen mode\n            this.applyMode(this.canvas, 'fullscreen');\n            // Update dimensions to match window\n            const dimensions = this.getResponsiveDimensions();\n            this.canvas.width = dimensions.width;\n            this.canvas.height = dimensions.height;\n            // Clear and redraw\n            this.clearCanvas(this.canvas);\n            // Hide UI elements\n            this.hideUIElements();\n            // Set up resize observer\n            this.setupResizeObserver();\n        }\n        // Restore canvas to container mode\n        restoreToContainer() {\n            if (!this.canvas) return;\n            // Remove resize observer\n            this.removeResizeObserver();\n            // Show UI elements\n            this.showUIElements();\n            // Find container and move canvas\n            const container = this.findContainer();\n            container.appendChild(this.canvas);\n            // Apply container mode\n            this.applyMode(this.canvas, 'container');\n            // Update dimensions based on container\n            const containerRect = container.getBoundingClientRect();\n            this.canvas.width = containerRect.width || this.config.defaultWidth;\n            this.canvas.height = containerRect.height || this.config.defaultHeight;\n            // Clear and redraw\n            this.clearCanvas(this.canvas);\n            // Restore original state if available\n            if (this.originalState) {\n                this.restoreOriginalState();\n            }\n        }\n        // Save original canvas state\n        saveOriginalState() {\n            if (!this.canvas) return;\n            this.originalState = {\n                parent: this.canvas.parentElement,\n                width: this.canvas.width,\n                height: this.canvas.height,\n                style: {\n                    position: this.canvas.style.position,\n                    top: this.canvas.style.top,\n                    left: this.canvas.style.left,\n                    width: this.canvas.style.width,\n                    height: this.canvas.style.height,\n                    zIndex: this.canvas.style.zIndex,\n                    backgroundColor: this.canvas.style.backgroundColor\n                }\n            };\n        }\n        // Restore original canvas state\n        restoreOriginalState() {\n            if (!this.canvas || !this.originalState) return;\n            try {\n                // Restore dimensions\n                this.canvas.width = this.originalState.width;\n                this.canvas.height = this.originalState.height;\n                // Restore styles\n                Object.entries(this.originalState.style).forEach((param)=>{\n                    let [property, value] = param;\n                    this.canvas.style[property] = value;\n                });\n                // Clear saved state\n                this.originalState = null;\n            } catch (error) {\n                console.error('Error restoring canvas state:', error);\n            }\n        }\n        // Clear canvas with white background\n        clearCanvas(canvas) {\n            if (!canvas) return;\n            const ctx = canvas.getContext('2d');\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n        // Hide UI elements during fullscreen\n        hideUIElements() {\n            const elementsToHide = [\n                '.topbar',\n                '.canvas-container',\n                '.main-content',\n                '.metrics-panel',\n                '.display-metrics',\n                'nav',\n                'header',\n                '.button-groups',\n                '.control-buttons'\n            ];\n            elementsToHide.forEach((selector)=>{\n                const elements = document.querySelectorAll(selector);\n                elements.forEach((el)=>{\n                    if (el.style.display !== 'none') {\n                        el.setAttribute('data-original-display', el.style.display);\n                        el.style.display = 'none';\n                        el.setAttribute('data-hidden-by-canvas', 'true');\n                    }\n                });\n            });\n        }\n        // Show previously hidden UI elements\n        showUIElements() {\n            const hiddenElements = document.querySelectorAll('[data-hidden-by-canvas=\"true\"]');\n            hiddenElements.forEach((el)=>{\n                const originalDisplay = el.getAttribute('data-original-display') || '';\n                el.style.display = originalDisplay;\n                el.removeAttribute('data-original-display');\n                el.removeAttribute('data-hidden-by-canvas');\n            });\n        }\n        // Set up resize observer for responsive behavior\n        setupResizeObserver() {\n            if (this.resizeObserver) {\n                this.resizeObserver.disconnect();\n            }\n            this.resizeObserver = new ResizeObserver((entries)=>{\n                for (const entry of entries){\n                    if (entry.target === this.canvas) {\n                        this.handleResize();\n                    }\n                }\n            });\n            this.resizeObserver.observe(this.canvas);\n            // Also listen for window resize\n            window.addEventListener('resize', this.handleResize.bind(this));\n        }\n        // Handle canvas resize\n        handleResize() {\n            if (!this.canvas) return;\n            const dimensions = this.getResponsiveDimensions();\n            // Update canvas dimensions\n            this.canvas.width = dimensions.width;\n            this.canvas.height = dimensions.height;\n            // Redraw white background\n            this.clearCanvas(this.canvas);\n            console.log(\"Canvas resized to: \".concat(dimensions.width, \"x\").concat(dimensions.height));\n        }\n        // Remove resize observer\n        removeResizeObserver() {\n            if (this.resizeObserver) {\n                this.resizeObserver.disconnect();\n                this.resizeObserver = null;\n            }\n            window.removeEventListener('resize', this.handleResize.bind(this));\n        }\n        // Cleanup canvas\n        cleanup() {\n            this.removeResizeObserver();\n            if (this.canvas && this.canvas.parentNode) {\n                this.canvas.parentNode.removeChild(this.canvas);\n            }\n            if (window.whiteScreenCanvas === this.canvas) {\n                delete window.whiteScreenCanvas;\n            }\n            this.canvas = null;\n            this.originalState = null;\n            this.currentMode = 'container';\n        }\n        // Get current canvas\n        getCanvas() {\n            return this.canvas || this.createCanvas();\n        }\n        // Check if canvas is in fullscreen mode\n        isFullscreen() {\n            return this.currentMode === 'fullscreen';\n        }\n        constructor(){\n            this.canvas = null;\n            this.currentMode = 'container';\n            this.originalState = null;\n            this.resizeObserver = null;\n            this.config = CANVAS_CONFIG;\n        }\n    }\n    // Create global canvas manager instance\n    const canvasManager = new CanvasManager();\n    // Replace the old ensureCanvasExists function with the new manager\n    const ensureCanvasExists = ()=>{\n        return canvasManager.getCanvas();\n    };\n    // Update the existing functions to use the new canvas manager\n    const restoreCanvasToContainer = (canvas)=>{\n        canvasManager.restoreToContainer();\n    };\n    const cleanupCanvas = ()=>{\n        canvasManager.cleanup();\n    };\n    // Modified handleDotProcess function with improved dot and countdown alignment\n    // Complete handleDotProcess function with proper canvas management\n    const handleDotProcess = async (options)=>{\n        const { position, onStatusUpdate, toggleTopBar, triggerCameraAccess, setIsCapturing, captureCount, setCaptureCount, useRandomPosition = false, postCountdownDelay = 500 } = options;\n        let canvas = null;\n        let keepDotVisibleInterval = null;\n        let countdownElement = null;\n        try {\n            // Hide the TopBar before showing the dot\n            if (typeof toggleTopBar === 'function') {\n                toggleTopBar(false);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(false);\n            }\n            // Set capturing state\n            setIsCapturing(true);\n            // Update status\n            onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                processStatus: useRandomPosition ? 'Generating random dot...' : 'Starting dot process...',\n                isCapturing: true\n            });\n            // Wait for UI updates to take effect\n            await new Promise((resolve)=>setTimeout(resolve, 200));\n            // Use canvas manager to switch to fullscreen mode\n            canvasManager.switchToFullscreen();\n            canvas = canvasManager.getCanvas();\n            if (!canvas) {\n                throw new Error(\"Failed to create or find canvas\");\n            }\n            // Get canvas dimensions\n            const canvasWidth = canvas.width;\n            const canvasHeight = canvas.height;\n            // Get context and clear canvas with white background\n            const ctx = canvas.getContext('2d');\n            ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n            // Get position for the dot - either use provided position or generate random one\n            const dotPosition = useRandomPosition ? (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.getRandomPosition)(canvas, 20) : position;\n            if (!dotPosition || typeof dotPosition.x !== 'number' || typeof dotPosition.y !== 'number') {\n                throw new Error(\"Invalid dot position\");\n            }\n            // Draw the dot\n            const dotRadius = 12;\n            (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n            // Create a redraw interval to ensure dot stays visible\n            keepDotVisibleInterval = setInterval(()=>{\n                (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n            }, 50); // More frequent updates for reliability\n            // Remove any existing countdown elements\n            const existingCountdowns = document.querySelectorAll('.dot-countdown, .calibrate-countdown');\n            existingCountdowns.forEach((el)=>{\n                if (el.parentNode) el.parentNode.removeChild(el);\n            });\n            // Create a countdown element directly on top of the dot\n            countdownElement = document.createElement('div');\n            countdownElement.className = 'dot-countdown';\n            countdownElement.style.cssText = \"\\n        position: fixed;\\n        left: \".concat(dotPosition.x, \"px;\\n        top: \").concat(dotPosition.y, \"px;\\n        transform: translate(-50%, -50%);\\n        color: red;\\n        font-size: 36px;\\n        font-weight: bold;\\n        text-shadow: 0 0 10px white, 0 0 20px white;\\n        z-index: 10000;\\n        background-color: rgba(255, 255, 255, 0.8);\\n        border: 2px solid red;\\n        border-radius: 50%;\\n        width: 50px;\\n        height: 50px;\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\n      \");\n            document.body.appendChild(countdownElement);\n            // Manual countdown\n            for(let count = 3; count > 0; count--){\n                countdownElement.textContent = count;\n                onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                    processStatus: \"Countdown: \".concat(count),\n                    countdownValue: count,\n                    isCapturing: true\n                });\n                // Redraw the dot for reliability\n                (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n                await new Promise((resolve)=>setTimeout(resolve, 800));\n                // Additional redraw during countdown to ensure visibility\n                (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n            }\n            // Show checkmark\n            countdownElement.textContent = \"✓\";\n            // Make sure dot is still visible\n            (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n            // Remove countdown element after delay\n            setTimeout(()=>{\n                if (countdownElement && countdownElement.parentNode) {\n                    countdownElement.parentNode.removeChild(countdownElement);\n                }\n            }, 300);\n            // Wait after countdown completes\n            await new Promise((resolve)=>setTimeout(resolve, postCountdownDelay));\n            // Ensure the dot is still visible\n            (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n            // Capture images at this point\n            const captureResult = await (0,_components_collected_dataset_customized_Helper_savefile__WEBPACK_IMPORTED_MODULE_5__.captureImagesAtPoint)({\n                point: dotPosition,\n                captureCount: captureCount,\n                canvasRef: {\n                    current: canvas\n                },\n                setCaptureCount: setCaptureCount,\n                showCapturePreview: _components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.showCapturePreview\n            });\n            // Update status\n            onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                processStatus: 'Capture completed',\n                isCapturing: false\n            });\n            return {\n                success: true,\n                position: dotPosition,\n                captureResult\n            };\n        } catch (error) {\n            console.error(\"Error in handleDotProcess:\", error);\n            onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                processStatus: \"Error: \".concat(error.message),\n                isCapturing: false\n            });\n            return {\n                success: false,\n                error: error.message\n            };\n        } finally{\n            // Clear redraw interval first\n            if (keepDotVisibleInterval) {\n                clearInterval(keepDotVisibleInterval);\n                keepDotVisibleInterval = null;\n            }\n            // Remove countdown element if it still exists\n            if (countdownElement && countdownElement.parentNode) {\n                countdownElement.parentNode.removeChild(countdownElement);\n            }\n            // Remove any remaining countdown elements\n            const remainingCountdowns = document.querySelectorAll('.dot-countdown, .calibrate-countdown');\n            remainingCountdowns.forEach((el)=>{\n                if (el.parentNode) el.parentNode.removeChild(el);\n            });\n            // Use restoreCanvasToContainer to properly restore canvas\n            if (canvas) {\n                restoreCanvasToContainer(canvas);\n            }\n            // Show TopBar again after a delay\n            setTimeout(()=>{\n                if (typeof toggleTopBar === 'function') {\n                    toggleTopBar(true);\n                } else if ( true && window.toggleTopBar) {\n                    window.toggleTopBar(true);\n                }\n            }, 1000);\n        }\n    };\n    const handleSetCalibrate = async ()=>{\n        if (isCapturing) return;\n        // Declare these variables OUTSIDE the try block\n        let canvas = null;\n        let originalCanvasParent = null;\n        let originalCanvasStyle = {};\n        let statusIndicator = null;\n        let currentRedrawInterval = null;\n        try {\n            canvasManager.switchToFullscreen();\n            canvas = canvasManager.getCanvas();\n            if (!canvas) {\n                console.error('Failed to create canvas for calibration');\n                return;\n            }\n            // Hide TopBar\n            if (typeof onActionClick === 'function') {\n                onActionClick('toggleTopBar', false);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(false);\n            }\n            setIsCapturing(true);\n            setShowCanvas(true);\n            setProcessStatus(\"Starting calibration sequence...\");\n            // Wait for UI updates to take effect\n            await new Promise((resolve)=>setTimeout(resolve, 300));\n            // Get canvas reference\n            canvas = getMainCanvas();\n            if (!canvas) {\n                setProcessStatus(\"Error: Canvas not found\");\n                setIsCapturing(false);\n                if (typeof onActionClick === 'function') {\n                    onActionClick('toggleTopBar', true);\n                }\n                return;\n            }\n            // Save original parent and style\n            originalCanvasParent = canvas.parentElement;\n            originalCanvasStyle = {\n                position: canvas.style.position,\n                top: canvas.style.top,\n                left: canvas.style.left,\n                width: canvas.style.width,\n                height: canvas.style.height,\n                zIndex: canvas.style.zIndex\n            };\n            // Move canvas to body for maximum reliability\n            document.body.appendChild(canvas);\n            // Make canvas fullscreen with fixed positioning\n            canvas.style.position = 'fixed';\n            canvas.style.top = '0';\n            canvas.style.left = '0';\n            canvas.style.width = '100vw';\n            canvas.style.height = '100vh';\n            canvas.style.zIndex = '10';\n            // Set dimensions to match window exactly\n            const canvasWidth = window.innerWidth;\n            const canvasHeight = window.innerHeight;\n            canvas.width = canvasWidth;\n            canvas.height = canvasHeight;\n            console.log(\"Canvas set to fullscreen: \".concat(canvasWidth, \"x\").concat(canvasHeight));\n            // Get context\n            const ctx = canvas.getContext('2d');\n            // Clear canvas with white background\n            ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n            // Generate calibration points based on the canvas size\n            const { generateCalibrationPoints } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../../components/collected-dataset-customized/Action/CalibratePoints */ \"(pages-dir-browser)/./components/collected-dataset-customized/Action/CalibratePoints.js\"));\n            const points = generateCalibrationPoints(canvasWidth, canvasHeight);\n            if (!points || points.length === 0) {\n                throw new Error(\"Failed to generate calibration points\");\n            }\n            // Create a status indicator\n            statusIndicator = document.createElement('div');\n            statusIndicator.className = 'calibrate-status-indicator';\n            statusIndicator.style.cssText = \"\\n        position: fixed;\\n        top: 20px;\\n        right: 20px;\\n        background-color: rgba(0, 102, 204, 0.9);\\n        color: white;\\n        font-size: 16px;\\n        font-weight: bold;\\n        padding: 10px 15px;\\n        border-radius: 8px;\\n        z-index: 10000;\\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\\n      \";\n            statusIndicator.textContent = 'Calibration: Initializing...';\n            document.body.appendChild(statusIndicator);\n            // Process each calibration point\n            let successCount = 0;\n            for(let i = 0; i < points.length; i++){\n                const point = points[i];\n                // Clear any existing redraw interval\n                if (currentRedrawInterval) {\n                    clearInterval(currentRedrawInterval);\n                    currentRedrawInterval = null;\n                }\n                // Update status displays\n                statusIndicator.textContent = \"Calibration: Point \".concat(i + 1, \"/\").concat(points.length);\n                setProcessStatus(\"Processing calibration point \".concat(i + 1, \"/\").concat(points.length));\n                // Reset canvas if dimensions changed\n                if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n                    console.warn(\"Canvas dimensions changed. Resetting to \".concat(canvasWidth, \"x\").concat(canvasHeight));\n                    canvas.width = canvasWidth;\n                    canvas.height = canvasHeight;\n                }\n                // Make sure canvas is still attached to body and in fullscreen mode\n                if (canvas.parentElement !== document.body) {\n                    document.body.appendChild(canvas);\n                    canvas.style.position = 'fixed';\n                    canvas.style.top = '0';\n                    canvas.style.left = '0';\n                    canvas.style.width = '100vw';\n                    canvas.style.height = '100vh';\n                    canvas.style.zIndex = '10';\n                }\n                // Clear canvas with white background\n                ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n                ctx.fillStyle = 'white';\n                ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n                // Draw the calibration point\n                const radius = 14; // Slightly larger for better visibility\n                (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, point.x, point.y, radius, false);\n                // Create redraw function for this point\n                const redrawCurrentDot = ()=>{\n                    // Verify canvas dimensions and parent\n                    if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n                        canvas.width = canvasWidth;\n                        canvas.height = canvasHeight;\n                        ctx.fillStyle = 'white';\n                        ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n                    }\n                    // Make sure canvas is still attached to body\n                    if (canvas.parentElement !== document.body) {\n                        document.body.appendChild(canvas);\n                    }\n                    // Redraw dot without clearing\n                    (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, point.x, point.y, radius, false);\n                };\n                // Start redraw interval - more frequent updates for reliable dot visibility\n                currentRedrawInterval = setInterval(redrawCurrentDot, 50);\n                // Remove any existing countdown elements\n                const existingCountdowns = document.querySelectorAll('.dot-countdown, .calibrate-countdown');\n                existingCountdowns.forEach((el)=>{\n                    if (el.parentNode) el.parentNode.removeChild(el);\n                });\n                // Create custom countdown element\n                const countdownElement = document.createElement('div');\n                countdownElement.className = 'dot-countdown'; // Consistent class name\n                countdownElement.style.cssText = \"\\n          position: fixed;\\n          left: \".concat(point.x, \"px;\\n          top: \").concat(point.y - 60, \"px;\\n          transform: translateX(-50%);\\n          color: red;\\n          font-size: 36px;\\n          font-weight: bold;\\n          text-shadow: 0 0 10px white, 0 0 20px white;\\n          z-index: 10000;\\n          background-color: rgba(255, 255, 255, 0.8);\\n          border: 2px solid red;\\n          border-radius: 50%;\\n          width: 50px;\\n          height: 50px;\\n          display: flex;\\n          justify-content: center;\\n          align-items: center;\\n          box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\n        \");\n                document.body.appendChild(countdownElement);\n                try {\n                    // Manual countdown\n                    for(let count = 3; count > 0; count--){\n                        countdownElement.textContent = count;\n                        setProcessStatus(\"Point \".concat(i + 1, \"/\").concat(points.length, \": Countdown \").concat(count));\n                        // Force redraw multiple times during countdown to ensure visibility\n                        redrawCurrentDot();\n                        await new Promise((resolve)=>setTimeout(resolve, 800));\n                        // Redraw again halfway through the wait to ensure dot stays visible\n                        redrawCurrentDot();\n                    }\n                    // Show checkmark\n                    countdownElement.textContent = \"✓\";\n                    redrawCurrentDot();\n                    // Remove countdown element after delay\n                    setTimeout(()=>{\n                        if (countdownElement.parentNode) {\n                            countdownElement.parentNode.removeChild(countdownElement);\n                        }\n                    }, 300);\n                    // Make sure dot is still visible\n                    redrawCurrentDot();\n                    // Capture images at this point\n                    console.log(\"Capturing calibration point \".concat(i + 1, \"/\").concat(points.length, \" at (\").concat(point.x, \", \").concat(point.y, \")\"));\n                    // Manual force redraw one more time just before capture\n                    (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, point.x, point.y, radius, false);\n                    const captureResult = await (0,_components_collected_dataset_customized_Helper_savefile__WEBPACK_IMPORTED_MODULE_5__.captureImagesAtPoint)({\n                        point: point,\n                        captureCount: captureCount,\n                        canvasRef: {\n                            current: canvas\n                        },\n                        setCaptureCount: setCaptureCount,\n                        showCapturePreview: _components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.showCapturePreview\n                    });\n                    if (captureResult && (captureResult.screenImage || captureResult.success)) {\n                        successCount++;\n                    }\n                    // Wait between points\n                    await new Promise((resolve)=>setTimeout(resolve, 1200));\n                } catch (error) {\n                    console.error(\"Error processing calibration point \".concat(i + 1, \":\"), error);\n                } finally{\n                    // Clean up countdown if it still exists\n                    if (countdownElement.parentNode) {\n                        countdownElement.parentNode.removeChild(countdownElement);\n                    }\n                    // Clear redraw interval\n                    if (currentRedrawInterval) {\n                        clearInterval(currentRedrawInterval);\n                        currentRedrawInterval = null;\n                    }\n                }\n            }\n            // Calibration complete\n            if (statusIndicator) {\n                statusIndicator.textContent = \"Calibration complete: \".concat(successCount, \"/\").concat(points.length, \" points\");\n            }\n            setProcessStatus(\"Calibration completed: \".concat(successCount, \"/\").concat(points.length, \" points captured\"));\n        } catch (error) {\n            console.error(\"Calibration error:\", error);\n            setProcessStatus(\"Calibration error: \".concat(error.message));\n            // Clean up redraw interval\n            if (currentRedrawInterval) {\n                clearInterval(currentRedrawInterval);\n            }\n        } finally{\n            // Remove status indicator if it exists\n            if (statusIndicator && statusIndicator.parentNode) {\n                setTimeout(()=>{\n                    statusIndicator.parentNode.removeChild(statusIndicator);\n                }, 3000);\n            }\n            setIsCapturing(false);\n            setTimeout(()=>{\n                cleanupCanvas();\n            }, 3000);\n            if (canvas) {\n                restoreCanvasToContainer(canvas);\n            }\n            // Show TopBar again\n            setTimeout(()=>{\n                if (typeof onActionClick === 'function') {\n                    onActionClick('toggleTopBar', true);\n                } else if ( true && window.toggleTopBar) {\n                    window.toggleTopBar(true);\n                }\n            }, 1000);\n        }\n    };\n    const handleSetRandom = async ()=>{\n        if (isCapturing) return;\n        try {\n            canvasManager.switchToFullscreen();\n            const canvas = canvasManager.getCanvas();\n            if (!canvas) {\n                console.error('Failed to create canvas for set random');\n                return;\n            }\n            // Always get the latest settings from context for the current user\n            const userSettings = settings && settings[currentUserId] ? settings[currentUserId] : {};\n            const times = Number(userSettings.times_set_random) || Number(randomTimes) || 1;\n            const delay = Number(userSettings.delay_set_random) || Number(delaySeconds) || 3;\n            // Log current settings before starting\n            console.log('Starting Set Random with settings:', {\n                randomTimes,\n                delaySeconds,\n                currentUserId,\n                settings,\n                userSettings,\n                times,\n                delay\n            });\n            // Hide TopBar\n            if (typeof onActionClick === 'function') {\n                onActionClick('toggleTopBar', false);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(false);\n            }\n            setIsCapturing(true);\n            setRemainingCaptures(times);\n            setProcessStatus(\"Starting \".concat(times, \" random captures with \").concat(delay, \"s delay...\"));\n            // Process all captures in sequence\n            let successCount = 0;\n            for(let currentIndex = 1; currentIndex <= times; currentIndex++){\n                // Update status for current capture\n                setProcessStatus(\"Capture \".concat(currentIndex, \" of \").concat(times));\n                setRemainingCaptures(times - currentIndex + 1);\n                console.log(\"Starting capture \".concat(currentIndex, \" of \").concat(times));\n                // Use handleDotProcess for each capture\n                const result = await handleDotProcess({\n                    useRandomPosition: true,\n                    onStatusUpdate: (status)=>{\n                        if (status.processStatus) {\n                            setProcessStatus(\"Capture \".concat(currentIndex, \"/\").concat(times, \": \").concat(status.processStatus));\n                        }\n                    },\n                    toggleTopBar: (show)=>{\n                        // Only show TopBar after the last capture\n                        if (show && currentIndex < times) {\n                            return; // Don't show yet for intermediate captures\n                        }\n                        if (typeof onActionClick === 'function') {\n                            onActionClick('toggleTopBar', show);\n                        } else if ( true && window.toggleTopBar) {\n                            window.toggleTopBar(show);\n                        }\n                    },\n                    triggerCameraAccess,\n                    setIsCapturing: (capturing)=>{\n                        // Only set capturing to false after all captures\n                        if (!capturing && currentIndex < times) {\n                            return; // Stay in capturing state between dots\n                        }\n                        setIsCapturing(capturing);\n                    },\n                    captureCount,\n                    setCaptureCount,\n                    postCountdownDelay: 800\n                });\n                if (result && result.success) {\n                    successCount++;\n                    console.log(\"Successfully completed capture \".concat(currentIndex));\n                } else {\n                    console.warn(\"Capture \".concat(currentIndex, \" may have failed:\"), result);\n                }\n                // Wait between captures - but only if there are more captures to go\n                if (currentIndex < times) {\n                    setProcessStatus(\"Waiting \".concat(delay, \"s before next capture...\"));\n                    console.log(\"Waiting \".concat(delay, \"s before next capture...\"));\n                    await new Promise((resolve)=>setTimeout(resolve, delay * 1000));\n                }\n            }\n            // Completion notification\n            setProcessStatus(\"Random capture sequence completed: \".concat(successCount, \"/\").concat(times, \" captures successful\"));\n            setRemainingCaptures(0);\n            console.log(\"Completed all captures: \".concat(successCount, \"/\").concat(times, \" successful\"));\n        } catch (error) {\n            console.error(\"Random sequence error:\", error);\n            setProcessStatus(\"Random sequence failed: \".concat(error.message));\n        } finally{\n            setIsCapturing(false);\n            setTimeout(()=>{\n                cleanupCanvas();\n            }, 3000);\n            const canvas = document.querySelector('#tracking-canvas');\n            if (canvas) {\n                restoreCanvasToContainer(canvas);\n            }\n            // Show TopBar again\n            setTimeout(()=>{\n                if (typeof onActionClick === 'function') {\n                    onActionClick('toggleTopBar', true);\n                } else if ( true && window.toggleTopBar) {\n                    window.toggleTopBar(true);\n                }\n            }, 1000);\n        }\n    };\n    const handleRandomDot = async ()=>{\n        if (isCapturing) return;\n        try {\n            canvasManager.switchToFullscreen();\n            const canvas = canvasManager.getCanvas();\n            if (!canvas) {\n                console.error('Failed to create canvas for random dot');\n                return;\n            }\n            // Use the consolidated function with random position\n            await handleDotProcess({\n                useRandomPosition: true,\n                onStatusUpdate: (status)=>{\n                    if (status.processStatus) setProcessStatus(status.processStatus);\n                    if (status.isCapturing !== undefined) setIsCapturing(status.isCapturing);\n                },\n                toggleTopBar: (show)=>{\n                    if (typeof onActionClick === 'function') {\n                        onActionClick('toggleTopBar', show);\n                    }\n                },\n                triggerCameraAccess,\n                setIsCapturing,\n                captureCount,\n                setCaptureCount: setCaptureCount,\n                postCountdownDelay: 1000\n            });\n        } catch (error) {\n            console.error('Random dot error:', error);\n        } finally{\n            // Clean up canvas after process completes\n            setTimeout(()=>{\n                cleanupCanvas();\n            }, 2000); // Wait 2 seconds before cleanup\n        }\n    };\n    const makeCanvasFullscreen = (canvas)=>{\n        if (!canvas) return null;\n        // Save original state if not already saved\n        if (!canvas._originalState) {\n            canvas._originalState = {\n                parent: canvas.parentElement,\n                position: canvas.style.position,\n                top: canvas.style.top,\n                left: canvas.style.left,\n                width: canvas.style.width,\n                height: canvas.style.height,\n                zIndex: canvas.style.zIndex,\n                canvasWidth: canvas.width,\n                canvasHeight: canvas.height\n            };\n        }\n        // Move to body and make fullscreen\n        document.body.appendChild(canvas);\n        canvas.style.position = 'fixed';\n        canvas.style.top = '0';\n        canvas.style.left = '0';\n        canvas.style.width = '100vw';\n        canvas.style.height = '100vh';\n        canvas.style.zIndex = '10';\n        canvas.style.backgroundColor = 'white';\n        // Set canvas dimensions to match window\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        // Clear with white background\n        const ctx = canvas.getContext('2d');\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        return canvas;\n    };\n    // Load calibration setup\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            if (false) {}\n            const setupCalibration = {\n                \"ActionButtonGroupInner.useEffect.setupCalibration\": async ()=>{\n                    try {\n                        const { default: CalibrateHandler } = await __webpack_require__.e(/*! import() */ \"_pages-dir-browser_components_collected-dataset-customized_Action_CalibrateHandler_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../../components/collected-dataset-customized/Action/CalibrateHandler */ \"(pages-dir-browser)/./components/collected-dataset-customized/Action/CalibrateHandler.js\"));\n                        const canvas = getMainCanvas();\n                        if (!canvas) {\n                            console.warn(\"Canvas not available during setupCalibration\");\n                            return;\n                        }\n                        if (canvas) {\n                            makeCanvasFullscreen(canvas);\n                        }\n                        // console.log('Canvas size:', canvas.width, canvas.height);\n                        const points = (0,_components_collected_dataset_customized_Action_CalibratePoints__WEBPACK_IMPORTED_MODULE_3__.generateCalibrationPoints)(canvas.width, canvas.height);\n                        // console.log('Generated calibration points:', points);\n                        setCalibrationPoints(points);\n                        const calibrateHandler = new CalibrateHandler({\n                            canvasRef: {\n                                current: canvas\n                            },\n                            calibrationPoints: points,\n                            toggleTopBar: {\n                                \"ActionButtonGroupInner.useEffect.setupCalibration\": (show)=>onActionClick === null || onActionClick === void 0 ? void 0 : onActionClick('toggleTopBar', show)\n                            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"],\n                            setOutputText: {\n                                \"ActionButtonGroupInner.useEffect.setupCalibration\": (status)=>{\n                                    setProcessStatus(status);\n                                }\n                            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"],\n                            captureCounter: captureCount,\n                            setCaptureCounter: {\n                                \"ActionButtonGroupInner.useEffect.setupCalibration\": (newCounter)=>{\n                                    if (typeof newCounter === 'function') {\n                                        setCaptureCount({\n                                            \"ActionButtonGroupInner.useEffect.setupCalibration\": (prev)=>newCounter(prev)\n                                        }[\"ActionButtonGroupInner.useEffect.setupCalibration\"]);\n                                    } else {\n                                        setCaptureCount(newCounter);\n                                    }\n                                }\n                            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"],\n                            captureFolder: 'eye_tracking_captures',\n                            onComplete: {\n                                \"ActionButtonGroupInner.useEffect.setupCalibration\": ()=>{\n                                    setIsCapturing(false);\n                                    setProcessStatus('Calibration completed');\n                                }\n                            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"]\n                        });\n                        setCalibrationHandler({\n                            handleAction: {\n                                \"ActionButtonGroupInner.useEffect.setupCalibration\": async ()=>{\n                                    setIsCapturing(true);\n                                    setProcessStatus('Starting calibration...');\n                                    await calibrateHandler.startCalibration();\n                                    setIsCapturing(false);\n                                }\n                            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"]\n                        });\n                        if (canvas) {\n                            restoreCanvasSize(canvas);\n                        }\n                    } catch (err) {\n                        console.error('Error initializing calibration:', err);\n                    }\n                }\n            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"];\n            setupCalibration();\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], [\n        captureCount,\n        onActionClick\n    ]);\n    // Clear All Button - Reset everything\n    const handleClearAll = ()=>{\n        // Clear canvas content\n        const canvas = document.querySelector('#tracking-canvas');\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            // Restore canvas to container mode\n            restoreCanvasToContainer(canvas);\n        }\n        // Reset states\n        setProcessStatus('');\n        setRemainingCaptures(0);\n        setIsCapturing(false);\n        setCountdownValue(null);\n        setShowCanvas(true);\n        setCurrentDot(null);\n    };\n    // Toggle Head Pose visualization\n    const handleToggleHeadPose = ()=>{\n        const newHeadPoseState = !showHeadPose;\n        setShowHeadPose(newHeadPoseState);\n        setProcessStatus(\"Head pose visualization \".concat(newHeadPoseState ? 'enabled' : 'disabled'));\n        // Call the parent handler to update processor options\n        if (onActionClick) {\n            onActionClick('headPose');\n        }\n        // Update videoProcessor options directly if available\n        if ( true && window.videoProcessor) {\n            window.videoProcessor.updateOptions({\n                showHeadPose: newHeadPoseState\n            });\n        // console.log(`Updated backend head pose: ${newHeadPoseState}`);\n        }\n    };\n    // Toggle Bounding Box visualization\n    const handleToggleBoundingBox = ()=>{\n        const newBoundingBoxState = !showBoundingBox;\n        setShowBoundingBox(newBoundingBoxState);\n        setProcessStatus(\"Bounding box \".concat(newBoundingBoxState ? 'shown' : 'hidden'));\n        // Call the parent handler to update processor options\n        if (onActionClick) {\n            onActionClick('boundingBox');\n        }\n        // Update videoProcessor options directly if available\n        if ( true && window.videoProcessor) {\n            window.videoProcessor.updateOptions({\n                showBoundingBox: newBoundingBoxState\n            });\n        // console.log(`Updated backend bounding box: ${newBoundingBoxState}`);\n        }\n    };\n    // Toggle Mask visualization\n    const handleToggleMask = ()=>{\n        const newMaskState = !showMask;\n        setShowMask(newMaskState);\n        setProcessStatus(\"Mask \".concat(newMaskState ? 'shown' : 'hidden'));\n        // Call the parent handler to update processor options\n        if (onActionClick) {\n            onActionClick('mask');\n        }\n        // Update videoProcessor options directly if available\n        if ( true && window.videoProcessor) {\n            window.videoProcessor.updateOptions({\n                showMask: newMaskState\n            });\n        // console.log(`Updated backend mask: ${newMaskState}`);\n        }\n    };\n    // Toggle Parameters display\n    const handleToggleParameters = ()=>{\n        const newParametersState = !showParameters;\n        setShowParameters(newParametersState);\n        setProcessStatus(\"Parameters \".concat(newParametersState ? 'shown' : 'hidden'));\n        // Call the parent handler to update processor options\n        if (onActionClick) {\n            onActionClick('parameters');\n        }\n        // Update videoProcessor options directly if available\n        if ( true && window.videoProcessor) {\n            window.videoProcessor.updateOptions({\n                showParameters: newParametersState\n            });\n        // console.log(`Updated backend parameters: ${newParametersState}`);\n        }\n    };\n    // Toggle camera preview\n    const handleToggleCamera = ()=>{\n        const newCameraState = !isCameraActive;\n        setIsCameraActive(newCameraState);\n        // Call the parent handler with 'preview' action\n        if (onActionClick) {\n            onActionClick('preview', newCameraState); // Pass the new state\n        } else {\n            // Fallback to direct trigger if no action handler\n            setShowPermissionPopup(true);\n        }\n        // If turning on camera, ensure we apply current visualization settings\n        if (newCameraState && \"object\" !== 'undefined' && window.videoProcessor) {\n            // Wait a short moment to ensure the video element is ready\n            setTimeout(()=>{\n                if (window.videoProcessor) {\n                    window.videoProcessor.updateOptions({\n                        showHeadPose,\n                        showBoundingBox,\n                        showMask,\n                        showParameters\n                    });\n                }\n            }, 100);\n        }\n    };\n    // Add back button handler\n    const handleGoBack = ()=>{\n        router.push('/');\n    };\n    // Mobile layout - 2x5 grid\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: [\n            isCompactMode ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"grid grid-cols-2 gap-2 mb-4\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {}, void 0, false, {\n                    fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                    lineNumber: 1832,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                lineNumber: 1831,\n                columnNumber: 9\n            }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"grid grid-cols-2 gap-2\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {}, void 0, false, {\n                    fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                    lineNumber: 1836,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                lineNumber: 1835,\n                columnNumber: 9\n            }, undefined),\n            showPermissionPopup && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"camera-permission-popup\",\n                style: {\n                    position: 'fixed',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%',\n                    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    zIndex: 15\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"camera-permission-dialog\",\n                    style: {\n                        width: '400px',\n                        backgroundColor: 'white',\n                        borderRadius: '8px',\n                        padding: '20px',\n                        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)'\n                    },\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                            className: \"camera-permission-title\",\n                            style: {\n                                margin: '0 0 15px',\n                                fontSize: '18px',\n                                fontWeight: 'bold'\n                            },\n                            children: \"Camera Access Required\"\n                        }, void 0, false, {\n                            fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                            lineNumber: 1867,\n                            columnNumber: 13\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            className: \"camera-permission-message\",\n                            style: {\n                                margin: '0 0 20px',\n                                fontSize: '14px',\n                                lineHeight: '1.4'\n                            },\n                            children: 'This application needs access to your camera to function properly. When prompted by your browser, please click \"Allow\" to grant camera access.'\n                        }, void 0, false, {\n                            fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                            lineNumber: 1877,\n                            columnNumber: 13\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"camera-permission-buttons\",\n                            style: {\n                                display: 'flex',\n                                justifyContent: 'flex-end',\n                                gap: '10px'\n                            },\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: handlePermissionDenied,\n                                    className: \"camera-btn\",\n                                    style: {\n                                        padding: '8px 16px',\n                                        backgroundColor: '#f0f0f0',\n                                        border: 'none',\n                                        borderRadius: '4px',\n                                        cursor: 'pointer'\n                                    },\n                                    children: \"Cancel\"\n                                }, void 0, false, {\n                                    fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                                    lineNumber: 1895,\n                                    columnNumber: 15\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: handlePermissionAccepted,\n                                    className: \"camera-btn\",\n                                    style: {\n                                        padding: '8px 16px',\n                                        backgroundColor: '#0066cc',\n                                        color: 'white',\n                                        border: 'none',\n                                        borderRadius: '4px',\n                                        cursor: 'pointer'\n                                    },\n                                    children: \"Continue\"\n                                }, void 0, false, {\n                                    fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                                    lineNumber: 1908,\n                                    columnNumber: 15\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                            lineNumber: 1887,\n                            columnNumber: 13\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                    lineNumber: 1857,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                lineNumber: 1842,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n        lineNumber: 1829,\n        columnNumber: 5\n    }, undefined);\n}, \"l311k0juR60uxpHVRV/MyFvStaI=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_6__.useRouter,\n        _adminSettings__WEBPACK_IMPORTED_MODULE_7__.useAdminSettings\n    ];\n}));\n_c1 = ActionButtonGroupInner;\nconst ActionButtonGroup = next_dynamic__WEBPACK_IMPORTED_MODULE_2___default()(_c2 = ()=>Promise.resolve(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, ref)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ActionButtonGroupInner, {\n            ...props,\n            ref: ref\n        }, void 0, false, {\n            fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n            lineNumber: 1930,\n            columnNumber: 30\n        }, undefined))), {\n    ssr: false\n});\n_c3 = ActionButtonGroup;\n// Create a client-only version of ActionButtonGroup\n// const ActionButtonGroup = dynamic(() => Promise.resolve(ActionButtonGroupInner), { ssr: false });\n// Add default export component\nfunction ActionButtonPage() {\n    return null; // This is a utility file, so we don't need to render anything\n}\n_c4 = ActionButtonPage;\n\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"ActionButton\");\n$RefreshReg$(_c1, \"ActionButtonGroupInner\");\n$RefreshReg$(_c2, \"ActionButtonGroup$dynamic\");\n$RefreshReg$(_c3, \"ActionButtonGroup\");\n$RefreshReg$(_c4, \"ActionButtonPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/actionButton.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/canvasConfig.js":
/*!***************************************************************************!*\
  !*** ./pages/collected-dataset-customized/components-gui/canvasConfig.js ***!
  \***************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CANVAS_CONFIG: () => (/* binding */ CANVAS_CONFIG),\n/* harmony export */   CanvasHelpers: () => (/* binding */ CanvasHelpers),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Canvas Configuration System\n// This file contains all canvas-related configurations for easy maintenance\nconst CANVAS_CONFIG = {\n    // Default dimensions\n    defaultWidth: 800,\n    defaultHeight: 400,\n    // Responsive breakpoints\n    breakpoints: {\n        mobile: {\n            maxWidth: 768,\n            height: 300\n        },\n        tablet: {\n            maxWidth: 1024,\n            height: 400\n        },\n        desktop: {\n            minWidth: 1025,\n            height: 500\n        }\n    },\n    // Canvas modes with their CSS properties\n    modes: {\n        container: {\n            position: 'relative',\n            width: '100%',\n            height: '400px',\n            backgroundColor: 'white',\n            border: '1px solid #ccc',\n            display: 'block',\n            zIndex: 'auto',\n            opacity: '1',\n            pointerEvents: 'auto'\n        },\n        fullscreen: {\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: 'white',\n            border: 'none',\n            display: 'block',\n            zIndex: '99999',\n            opacity: '1',\n            pointerEvents: 'auto',\n            margin: '0',\n            padding: '0',\n            boxSizing: 'border-box'\n        },\n        overlay: {\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            width: '100vw',\n            height: '100vh',\n            backgroundColor: 'rgba(255, 255, 255, 0.95)',\n            border: 'none',\n            display: 'block',\n            zIndex: '9999',\n            opacity: '1',\n            pointerEvents: 'auto'\n        }\n    },\n    // Animation settings\n    animations: {\n        transition: 'all 0.3s ease-in-out',\n        fadeIn: 'opacity 0.3s ease-in',\n        fadeOut: 'opacity 0.3s ease-out'\n    },\n    // UI elements to hide during fullscreen\n    elementsToHide: [\n        '.topbar',\n        '.canvas-container',\n        '.main-content',\n        '.metrics-panel',\n        '.display-metrics',\n        'nav',\n        'header',\n        '.button-groups',\n        '.control-buttons'\n    ],\n    // Container selectors in order of preference\n    containerSelectors: [\n        '.canvas-container',\n        '.main-content',\n        '.preview-area',\n        'body'\n    ],\n    // Canvas element properties\n    canvasElement: {\n        className: 'tracking-canvas',\n        id: 'tracking-canvas'\n    },\n    // Drawing settings\n    drawing: {\n        dotRadius: 12,\n        dotColor: 'red',\n        backgroundColor: 'white',\n        countdownFontSize: '36px',\n        countdownColor: 'red'\n    },\n    // Performance settings\n    performance: {\n        redrawInterval: 50,\n        resizeDebounce: 100,\n        transitionDelay: 200 // milliseconds\n    }\n};\n// Helper functions for canvas operations\nconst CanvasHelpers = {\n    // Get responsive dimensions based on screen size\n    getResponsiveDimensions () {\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        if (width <= CANVAS_CONFIG.breakpoints.mobile.maxWidth) {\n            return {\n                width: width,\n                height: CANVAS_CONFIG.breakpoints.mobile.height\n            };\n        } else if (width <= CANVAS_CONFIG.breakpoints.tablet.maxWidth) {\n            return {\n                width: width,\n                height: CANVAS_CONFIG.breakpoints.tablet.height\n            };\n        } else {\n            return {\n                width: width,\n                height: CANVAS_CONFIG.breakpoints.desktop.height\n            };\n        }\n    },\n    // Find the best container for the canvas\n    findContainer () {\n        for (const selector of CANVAS_CONFIG.containerSelectors){\n            const container = document.querySelector(selector);\n            if (container) {\n                return container;\n            }\n        }\n        return document.body;\n    },\n    // Clear canvas with white background\n    clearCanvas (canvas) {\n        if (!canvas) return;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = CANVAS_CONFIG.drawing.backgroundColor;\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n    },\n    // Apply mode styles to canvas\n    applyMode (canvas, mode) {\n        if (!canvas || !CANVAS_CONFIG.modes[mode]) {\n            console.warn(\"Invalid canvas or mode: \".concat(mode));\n            return;\n        }\n        const modeConfig = CANVAS_CONFIG.modes[mode];\n        const style = canvas.style;\n        // Apply all mode properties\n        Object.entries(modeConfig).forEach((param)=>{\n            let [property, value] = param;\n            style[property] = value;\n        });\n        // Add transition for smooth mode changes\n        style.transition = CANVAS_CONFIG.animations.transition;\n        console.log(\"Canvas mode changed to: \".concat(mode));\n    },\n    // Hide UI elements during fullscreen\n    hideUIElements () {\n        CANVAS_CONFIG.elementsToHide.forEach((selector)=>{\n            const elements = document.querySelectorAll(selector);\n            elements.forEach((el)=>{\n                if (el.style.display !== 'none') {\n                    el.setAttribute('data-original-display', el.style.display);\n                    el.style.display = 'none';\n                    el.setAttribute('data-hidden-by-canvas', 'true');\n                }\n            });\n        });\n    },\n    // Show previously hidden UI elements\n    showUIElements () {\n        const hiddenElements = document.querySelectorAll('[data-hidden-by-canvas=\"true\"]');\n        hiddenElements.forEach((el)=>{\n            const originalDisplay = el.getAttribute('data-original-display') || '';\n            el.style.display = originalDisplay;\n            el.removeAttribute('data-original-display');\n            el.removeAttribute('data-hidden-by-canvas');\n        });\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CANVAS_CONFIG);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3BhZ2VzL2NvbGxlY3RlZC1kYXRhc2V0LWN1c3RvbWl6ZWQvY29tcG9uZW50cy1ndWkvY2FudmFzQ29uZmlnLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDhCQUE4QjtBQUM5Qiw0RUFBNEU7QUFFckUsTUFBTUEsZ0JBQWdCO0lBQzNCLHFCQUFxQjtJQUNyQkMsY0FBYztJQUNkQyxlQUFlO0lBRWYseUJBQXlCO0lBQ3pCQyxhQUFhO1FBQ1hDLFFBQVE7WUFBRUMsVUFBVTtZQUFLQyxRQUFRO1FBQUk7UUFDckNDLFFBQVE7WUFBRUYsVUFBVTtZQUFNQyxRQUFRO1FBQUk7UUFDdENFLFNBQVM7WUFBRUMsVUFBVTtZQUFNSCxRQUFRO1FBQUk7SUFDekM7SUFFQSx5Q0FBeUM7SUFDekNJLE9BQU87UUFDTEMsV0FBVztZQUNUQyxVQUFVO1lBQ1ZDLE9BQU87WUFDUFAsUUFBUTtZQUNSUSxpQkFBaUI7WUFDakJDLFFBQVE7WUFDUkMsU0FBUztZQUNUQyxRQUFRO1lBQ1JDLFNBQVM7WUFDVEMsZUFBZTtRQUNqQjtRQUNBQyxZQUFZO1lBQ1ZSLFVBQVU7WUFDVlMsS0FBSztZQUNMQyxNQUFNO1lBQ05ULE9BQU87WUFDUFAsUUFBUTtZQUNSUSxpQkFBaUI7WUFDakJDLFFBQVE7WUFDUkMsU0FBUztZQUNUQyxRQUFRO1lBQ1JDLFNBQVM7WUFDVEMsZUFBZTtZQUNmSSxRQUFRO1lBQ1JDLFNBQVM7WUFDVEMsV0FBVztRQUNiO1FBQ0FDLFNBQVM7WUFDUGQsVUFBVTtZQUNWUyxLQUFLO1lBQ0xDLE1BQU07WUFDTlQsT0FBTztZQUNQUCxRQUFRO1lBQ1JRLGlCQUFpQjtZQUNqQkMsUUFBUTtZQUNSQyxTQUFTO1lBQ1RDLFFBQVE7WUFDUkMsU0FBUztZQUNUQyxlQUFlO1FBQ2pCO0lBQ0Y7SUFFQSxxQkFBcUI7SUFDckJRLFlBQVk7UUFDVkMsWUFBWTtRQUNaQyxRQUFRO1FBQ1JDLFNBQVM7SUFDWDtJQUVBLHdDQUF3QztJQUN4Q0MsZ0JBQWdCO1FBQ2Q7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO0tBQ0Q7SUFFRCw2Q0FBNkM7SUFDN0NDLG9CQUFvQjtRQUNsQjtRQUNBO1FBQ0E7UUFDQTtLQUNEO0lBRUQsNEJBQTRCO0lBQzVCQyxlQUFlO1FBQ2JDLFdBQVc7UUFDWEMsSUFBSTtJQUNOO0lBRUEsbUJBQW1CO0lBQ25CQyxTQUFTO1FBQ1BDLFdBQVc7UUFDWEMsVUFBVTtRQUNWeEIsaUJBQWlCO1FBQ2pCeUIsbUJBQW1CO1FBQ25CQyxnQkFBZ0I7SUFDbEI7SUFFQSx1QkFBdUI7SUFDdkJDLGFBQWE7UUFDWEMsZ0JBQWdCO1FBQ2hCQyxnQkFBZ0I7UUFDaEJDLGlCQUFpQixJQUFJLGVBQWU7SUFDdEM7QUFDRixFQUFFO0FBRUYseUNBQXlDO0FBQ2xDLE1BQU1DLGdCQUFnQjtJQUMzQixpREFBaUQ7SUFDakRDO1FBQ0UsTUFBTWpDLFFBQVFrQyxPQUFPQyxVQUFVO1FBQy9CLE1BQU0xQyxTQUFTeUMsT0FBT0UsV0FBVztRQUVqQyxJQUFJcEMsU0FBU2IsY0FBY0csV0FBVyxDQUFDQyxNQUFNLENBQUNDLFFBQVEsRUFBRTtZQUN0RCxPQUFPO2dCQUNMUSxPQUFPQTtnQkFDUFAsUUFBUU4sY0FBY0csV0FBVyxDQUFDQyxNQUFNLENBQUNFLE1BQU07WUFDakQ7UUFDRixPQUFPLElBQUlPLFNBQVNiLGNBQWNHLFdBQVcsQ0FBQ0ksTUFBTSxDQUFDRixRQUFRLEVBQUU7WUFDN0QsT0FBTztnQkFDTFEsT0FBT0E7Z0JBQ1BQLFFBQVFOLGNBQWNHLFdBQVcsQ0FBQ0ksTUFBTSxDQUFDRCxNQUFNO1lBQ2pEO1FBQ0YsT0FBTztZQUNMLE9BQU87Z0JBQ0xPLE9BQU9BO2dCQUNQUCxRQUFRTixjQUFjRyxXQUFXLENBQUNLLE9BQU8sQ0FBQ0YsTUFBTTtZQUNsRDtRQUNGO0lBQ0Y7SUFFQSx5Q0FBeUM7SUFDekM0QztRQUNFLEtBQUssTUFBTUMsWUFBWW5ELGNBQWNnQyxrQkFBa0IsQ0FBRTtZQUN2RCxNQUFNckIsWUFBWXlDLFNBQVNDLGFBQWEsQ0FBQ0Y7WUFDekMsSUFBSXhDLFdBQVc7Z0JBQ2IsT0FBT0E7WUFDVDtRQUNGO1FBQ0EsT0FBT3lDLFNBQVNFLElBQUk7SUFDdEI7SUFFQSxxQ0FBcUM7SUFDckNDLGFBQVlDLE1BQU07UUFDaEIsSUFBSSxDQUFDQSxRQUFRO1FBRWIsTUFBTUMsTUFBTUQsT0FBT0UsVUFBVSxDQUFDO1FBQzlCRCxJQUFJRSxTQUFTLENBQUMsR0FBRyxHQUFHSCxPQUFPM0MsS0FBSyxFQUFFMkMsT0FBT2xELE1BQU07UUFDL0NtRCxJQUFJRyxTQUFTLEdBQUc1RCxjQUFjb0MsT0FBTyxDQUFDdEIsZUFBZTtRQUNyRDJDLElBQUlJLFFBQVEsQ0FBQyxHQUFHLEdBQUdMLE9BQU8zQyxLQUFLLEVBQUUyQyxPQUFPbEQsTUFBTTtJQUNoRDtJQUVBLDhCQUE4QjtJQUM5QndELFdBQVVOLE1BQU0sRUFBRU8sSUFBSTtRQUNwQixJQUFJLENBQUNQLFVBQVUsQ0FBQ3hELGNBQWNVLEtBQUssQ0FBQ3FELEtBQUssRUFBRTtZQUN6Q0MsUUFBUUMsSUFBSSxDQUFDLDJCQUFnQyxPQUFMRjtZQUN4QztRQUNGO1FBRUEsTUFBTUcsYUFBYWxFLGNBQWNVLEtBQUssQ0FBQ3FELEtBQUs7UUFDNUMsTUFBTUksUUFBUVgsT0FBT1csS0FBSztRQUUxQiw0QkFBNEI7UUFDNUJDLE9BQU9DLE9BQU8sQ0FBQ0gsWUFBWUksT0FBTyxDQUFDO2dCQUFDLENBQUNDLFVBQVVDLE1BQU07WUFDbkRMLEtBQUssQ0FBQ0ksU0FBUyxHQUFHQztRQUNwQjtRQUVBLHlDQUF5QztRQUN6Q0wsTUFBTXZDLFVBQVUsR0FBRzVCLGNBQWMyQixVQUFVLENBQUNDLFVBQVU7UUFFdERvQyxRQUFRUyxHQUFHLENBQUMsMkJBQWdDLE9BQUxWO0lBQ3pDO0lBRUEscUNBQXFDO0lBQ3JDVztRQUNFMUUsY0FBYytCLGNBQWMsQ0FBQ3VDLE9BQU8sQ0FBQ25CLENBQUFBO1lBQ25DLE1BQU13QixXQUFXdkIsU0FBU3dCLGdCQUFnQixDQUFDekI7WUFDM0N3QixTQUFTTCxPQUFPLENBQUNPLENBQUFBO2dCQUNmLElBQUlBLEdBQUdWLEtBQUssQ0FBQ25ELE9BQU8sS0FBSyxRQUFRO29CQUMvQjZELEdBQUdDLFlBQVksQ0FBQyx5QkFBeUJELEdBQUdWLEtBQUssQ0FBQ25ELE9BQU87b0JBQ3pENkQsR0FBR1YsS0FBSyxDQUFDbkQsT0FBTyxHQUFHO29CQUNuQjZELEdBQUdDLFlBQVksQ0FBQyx5QkFBeUI7Z0JBQzNDO1lBQ0Y7UUFDRjtJQUNGO0lBRUEscUNBQXFDO0lBQ3JDQztRQUNFLE1BQU1DLGlCQUFpQjVCLFNBQVN3QixnQkFBZ0IsQ0FBQztRQUNqREksZUFBZVYsT0FBTyxDQUFDTyxDQUFBQTtZQUNyQixNQUFNSSxrQkFBa0JKLEdBQUdLLFlBQVksQ0FBQyw0QkFBNEI7WUFDcEVMLEdBQUdWLEtBQUssQ0FBQ25ELE9BQU8sR0FBR2lFO1lBQ25CSixHQUFHTSxlQUFlLENBQUM7WUFDbkJOLEdBQUdNLGVBQWUsQ0FBQztRQUNyQjtJQUNGO0FBQ0YsRUFBRTtBQUVGLGlFQUFlbkYsYUFBYUEsRUFBQyIsInNvdXJjZXMiOlsiL2FwcC9wYWdlcy9jb2xsZWN0ZWQtZGF0YXNldC1jdXN0b21pemVkL2NvbXBvbmVudHMtZ3VpL2NhbnZhc0NvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDYW52YXMgQ29uZmlndXJhdGlvbiBTeXN0ZW1cbi8vIFRoaXMgZmlsZSBjb250YWlucyBhbGwgY2FudmFzLXJlbGF0ZWQgY29uZmlndXJhdGlvbnMgZm9yIGVhc3kgbWFpbnRlbmFuY2VcblxuZXhwb3J0IGNvbnN0IENBTlZBU19DT05GSUcgPSB7XG4gIC8vIERlZmF1bHQgZGltZW5zaW9uc1xuICBkZWZhdWx0V2lkdGg6IDgwMCxcbiAgZGVmYXVsdEhlaWdodDogNDAwLFxuICBcbiAgLy8gUmVzcG9uc2l2ZSBicmVha3BvaW50c1xuICBicmVha3BvaW50czoge1xuICAgIG1vYmlsZTogeyBtYXhXaWR0aDogNzY4LCBoZWlnaHQ6IDMwMCB9LFxuICAgIHRhYmxldDogeyBtYXhXaWR0aDogMTAyNCwgaGVpZ2h0OiA0MDAgfSxcbiAgICBkZXNrdG9wOiB7IG1pbldpZHRoOiAxMDI1LCBoZWlnaHQ6IDUwMCB9XG4gIH0sXG4gIFxuICAvLyBDYW52YXMgbW9kZXMgd2l0aCB0aGVpciBDU1MgcHJvcGVydGllc1xuICBtb2Rlczoge1xuICAgIGNvbnRhaW5lcjoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgaGVpZ2h0OiAnNDAwcHgnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICNjY2MnLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHpJbmRleDogJ2F1dG8nLFxuICAgICAgb3BhY2l0eTogJzEnLFxuICAgICAgcG9pbnRlckV2ZW50czogJ2F1dG8nXG4gICAgfSxcbiAgICBmdWxsc2NyZWVuOiB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHRvcDogJzAnLFxuICAgICAgbGVmdDogJzAnLFxuICAgICAgd2lkdGg6ICcxMDB2dycsXG4gICAgICBoZWlnaHQ6ICcxMDB2aCcsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB6SW5kZXg6ICc5OTk5OScsXG4gICAgICBvcGFjaXR5OiAnMScsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnYXV0bycsXG4gICAgICBtYXJnaW46ICcwJyxcbiAgICAgIHBhZGRpbmc6ICcwJyxcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gICAgfSxcbiAgICBvdmVybGF5OiB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHRvcDogJzAnLFxuICAgICAgbGVmdDogJzAnLFxuICAgICAgd2lkdGg6ICcxMDB2dycsXG4gICAgICBoZWlnaHQ6ICcxMDB2aCcsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuOTUpJyxcbiAgICAgIGJvcmRlcjogJ25vbmUnLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHpJbmRleDogJzk5OTknLFxuICAgICAgb3BhY2l0eTogJzEnLFxuICAgICAgcG9pbnRlckV2ZW50czogJ2F1dG8nXG4gICAgfVxuICB9LFxuICBcbiAgLy8gQW5pbWF0aW9uIHNldHRpbmdzXG4gIGFuaW1hdGlvbnM6IHtcbiAgICB0cmFuc2l0aW9uOiAnYWxsIDAuM3MgZWFzZS1pbi1vdXQnLFxuICAgIGZhZGVJbjogJ29wYWNpdHkgMC4zcyBlYXNlLWluJyxcbiAgICBmYWRlT3V0OiAnb3BhY2l0eSAwLjNzIGVhc2Utb3V0J1xuICB9LFxuICBcbiAgLy8gVUkgZWxlbWVudHMgdG8gaGlkZSBkdXJpbmcgZnVsbHNjcmVlblxuICBlbGVtZW50c1RvSGlkZTogW1xuICAgICcudG9wYmFyJyxcbiAgICAnLmNhbnZhcy1jb250YWluZXInLCBcbiAgICAnLm1haW4tY29udGVudCcsXG4gICAgJy5tZXRyaWNzLXBhbmVsJyxcbiAgICAnLmRpc3BsYXktbWV0cmljcycsXG4gICAgJ25hdicsXG4gICAgJ2hlYWRlcicsXG4gICAgJy5idXR0b24tZ3JvdXBzJyxcbiAgICAnLmNvbnRyb2wtYnV0dG9ucydcbiAgXSxcbiAgXG4gIC8vIENvbnRhaW5lciBzZWxlY3RvcnMgaW4gb3JkZXIgb2YgcHJlZmVyZW5jZVxuICBjb250YWluZXJTZWxlY3RvcnM6IFtcbiAgICAnLmNhbnZhcy1jb250YWluZXInLFxuICAgICcubWFpbi1jb250ZW50JyxcbiAgICAnLnByZXZpZXctYXJlYScsXG4gICAgJ2JvZHknXG4gIF0sXG4gIFxuICAvLyBDYW52YXMgZWxlbWVudCBwcm9wZXJ0aWVzXG4gIGNhbnZhc0VsZW1lbnQ6IHtcbiAgICBjbGFzc05hbWU6ICd0cmFja2luZy1jYW52YXMnLFxuICAgIGlkOiAndHJhY2tpbmctY2FudmFzJ1xuICB9LFxuICBcbiAgLy8gRHJhd2luZyBzZXR0aW5nc1xuICBkcmF3aW5nOiB7XG4gICAgZG90UmFkaXVzOiAxMixcbiAgICBkb3RDb2xvcjogJ3JlZCcsXG4gICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgIGNvdW50ZG93bkZvbnRTaXplOiAnMzZweCcsXG4gICAgY291bnRkb3duQ29sb3I6ICdyZWQnXG4gIH0sXG4gIFxuICAvLyBQZXJmb3JtYW5jZSBzZXR0aW5nc1xuICBwZXJmb3JtYW5jZToge1xuICAgIHJlZHJhd0ludGVydmFsOiA1MCwgLy8gbWlsbGlzZWNvbmRzXG4gICAgcmVzaXplRGVib3VuY2U6IDEwMCwgLy8gbWlsbGlzZWNvbmRzXG4gICAgdHJhbnNpdGlvbkRlbGF5OiAyMDAgLy8gbWlsbGlzZWNvbmRzXG4gIH1cbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIGNhbnZhcyBvcGVyYXRpb25zXG5leHBvcnQgY29uc3QgQ2FudmFzSGVscGVycyA9IHtcbiAgLy8gR2V0IHJlc3BvbnNpdmUgZGltZW5zaW9ucyBiYXNlZCBvbiBzY3JlZW4gc2l6ZVxuICBnZXRSZXNwb25zaXZlRGltZW5zaW9ucygpIHtcbiAgICBjb25zdCB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICBcbiAgICBpZiAod2lkdGggPD0gQ0FOVkFTX0NPTkZJRy5icmVha3BvaW50cy5tb2JpbGUubWF4V2lkdGgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBDQU5WQVNfQ09ORklHLmJyZWFrcG9pbnRzLm1vYmlsZS5oZWlnaHRcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh3aWR0aCA8PSBDQU5WQVNfQ09ORklHLmJyZWFrcG9pbnRzLnRhYmxldC5tYXhXaWR0aCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IENBTlZBU19DT05GSUcuYnJlYWtwb2ludHMudGFibGV0LmhlaWdodFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IENBTlZBU19DT05GSUcuYnJlYWtwb2ludHMuZGVza3RvcC5oZWlnaHRcbiAgICAgIH07XG4gICAgfVxuICB9LFxuICBcbiAgLy8gRmluZCB0aGUgYmVzdCBjb250YWluZXIgZm9yIHRoZSBjYW52YXNcbiAgZmluZENvbnRhaW5lcigpIHtcbiAgICBmb3IgKGNvbnN0IHNlbGVjdG9yIG9mIENBTlZBU19DT05GSUcuY29udGFpbmVyU2VsZWN0b3JzKSB7XG4gICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIGlmIChjb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gIH0sXG4gIFxuICAvLyBDbGVhciBjYW52YXMgd2l0aCB3aGl0ZSBiYWNrZ3JvdW5kXG4gIGNsZWFyQ2FudmFzKGNhbnZhcykge1xuICAgIGlmICghY2FudmFzKSByZXR1cm47XG4gICAgXG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBDQU5WQVNfQ09ORklHLmRyYXdpbmcuYmFja2dyb3VuZENvbG9yO1xuICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICB9LFxuICBcbiAgLy8gQXBwbHkgbW9kZSBzdHlsZXMgdG8gY2FudmFzXG4gIGFwcGx5TW9kZShjYW52YXMsIG1vZGUpIHtcbiAgICBpZiAoIWNhbnZhcyB8fCAhQ0FOVkFTX0NPTkZJRy5tb2Rlc1ttb2RlXSkge1xuICAgICAgY29uc29sZS53YXJuKGBJbnZhbGlkIGNhbnZhcyBvciBtb2RlOiAke21vZGV9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IG1vZGVDb25maWcgPSBDQU5WQVNfQ09ORklHLm1vZGVzW21vZGVdO1xuICAgIGNvbnN0IHN0eWxlID0gY2FudmFzLnN0eWxlO1xuICAgIFxuICAgIC8vIEFwcGx5IGFsbCBtb2RlIHByb3BlcnRpZXNcbiAgICBPYmplY3QuZW50cmllcyhtb2RlQ29uZmlnKS5mb3JFYWNoKChbcHJvcGVydHksIHZhbHVlXSkgPT4ge1xuICAgICAgc3R5bGVbcHJvcGVydHldID0gdmFsdWU7XG4gICAgfSk7XG4gICAgXG4gICAgLy8gQWRkIHRyYW5zaXRpb24gZm9yIHNtb290aCBtb2RlIGNoYW5nZXNcbiAgICBzdHlsZS50cmFuc2l0aW9uID0gQ0FOVkFTX0NPTkZJRy5hbmltYXRpb25zLnRyYW5zaXRpb247XG4gICAgXG4gICAgY29uc29sZS5sb2coYENhbnZhcyBtb2RlIGNoYW5nZWQgdG86ICR7bW9kZX1gKTtcbiAgfSxcbiAgXG4gIC8vIEhpZGUgVUkgZWxlbWVudHMgZHVyaW5nIGZ1bGxzY3JlZW5cbiAgaGlkZVVJRWxlbWVudHMoKSB7XG4gICAgQ0FOVkFTX0NPTkZJRy5lbGVtZW50c1RvSGlkZS5mb3JFYWNoKHNlbGVjdG9yID0+IHtcbiAgICAgIGNvbnN0IGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICBlbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgaWYgKGVsLnN0eWxlLmRpc3BsYXkgIT09ICdub25lJykge1xuICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC1kaXNwbGF5JywgZWwuc3R5bGUuZGlzcGxheSk7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaGlkZGVuLWJ5LWNhbnZhcycsICd0cnVlJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuICBcbiAgLy8gU2hvdyBwcmV2aW91c2x5IGhpZGRlbiBVSSBlbGVtZW50c1xuICBzaG93VUlFbGVtZW50cygpIHtcbiAgICBjb25zdCBoaWRkZW5FbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWhpZGRlbi1ieS1jYW52YXM9XCJ0cnVlXCJdJyk7XG4gICAgaGlkZGVuRWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICBjb25zdCBvcmlnaW5hbERpc3BsYXkgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtZGlzcGxheScpIHx8ICcnO1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC1kaXNwbGF5Jyk7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtaGlkZGVuLWJ5LWNhbnZhcycpO1xuICAgIH0pO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDQU5WQVNfQ09ORklHOyAiXSwibmFtZXMiOlsiQ0FOVkFTX0NPTkZJRyIsImRlZmF1bHRXaWR0aCIsImRlZmF1bHRIZWlnaHQiLCJicmVha3BvaW50cyIsIm1vYmlsZSIsIm1heFdpZHRoIiwiaGVpZ2h0IiwidGFibGV0IiwiZGVza3RvcCIsIm1pbldpZHRoIiwibW9kZXMiLCJjb250YWluZXIiLCJwb3NpdGlvbiIsIndpZHRoIiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyIiwiZGlzcGxheSIsInpJbmRleCIsIm9wYWNpdHkiLCJwb2ludGVyRXZlbnRzIiwiZnVsbHNjcmVlbiIsInRvcCIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm94U2l6aW5nIiwib3ZlcmxheSIsImFuaW1hdGlvbnMiLCJ0cmFuc2l0aW9uIiwiZmFkZUluIiwiZmFkZU91dCIsImVsZW1lbnRzVG9IaWRlIiwiY29udGFpbmVyU2VsZWN0b3JzIiwiY2FudmFzRWxlbWVudCIsImNsYXNzTmFtZSIsImlkIiwiZHJhd2luZyIsImRvdFJhZGl1cyIsImRvdENvbG9yIiwiY291bnRkb3duRm9udFNpemUiLCJjb3VudGRvd25Db2xvciIsInBlcmZvcm1hbmNlIiwicmVkcmF3SW50ZXJ2YWwiLCJyZXNpemVEZWJvdW5jZSIsInRyYW5zaXRpb25EZWxheSIsIkNhbnZhc0hlbHBlcnMiLCJnZXRSZXNwb25zaXZlRGltZW5zaW9ucyIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImZpbmRDb250YWluZXIiLCJzZWxlY3RvciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImJvZHkiLCJjbGVhckNhbnZhcyIsImNhbnZhcyIsImN0eCIsImdldENvbnRleHQiLCJjbGVhclJlY3QiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImFwcGx5TW9kZSIsIm1vZGUiLCJjb25zb2xlIiwid2FybiIsIm1vZGVDb25maWciLCJzdHlsZSIsIk9iamVjdCIsImVudHJpZXMiLCJmb3JFYWNoIiwicHJvcGVydHkiLCJ2YWx1ZSIsImxvZyIsImhpZGVVSUVsZW1lbnRzIiwiZWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWwiLCJzZXRBdHRyaWJ1dGUiLCJzaG93VUlFbGVtZW50cyIsImhpZGRlbkVsZW1lbnRzIiwib3JpZ2luYWxEaXNwbGF5IiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/canvasConfig.js\n"));

/***/ })

});
"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/collected-dataset-customized",{

/***/ "(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/actionButton.js":
/*!***************************************************************************!*\
  !*** ./pages/collected-dataset-customized/components-gui/actionButton.js ***!
  \***************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionButton: () => (/* binding */ ActionButton),\n/* harmony export */   ActionButtonGroup: () => (/* binding */ ActionButtonGroup),\n/* harmony export */   \"default\": () => (/* binding */ ActionButtonPage)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(pages-dir-browser)/./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dynamic */ \"(pages-dir-browser)/./node_modules/next/dynamic.js\");\n/* harmony import */ var next_dynamic__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dynamic__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _components_collected_dataset_customized_Action_CalibratePoints__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../components/collected-dataset-customized/Action/CalibratePoints */ \"(pages-dir-browser)/./components/collected-dataset-customized/Action/CalibratePoints.js\");\n/* harmony import */ var _components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../components/collected-dataset-customized/Action/countSave */ \"(pages-dir-browser)/./components/collected-dataset-customized/Action/countSave.js\");\n/* harmony import */ var _components_collected_dataset_customized_Helper_savefile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../components/collected-dataset-customized/Helper/savefile */ \"(pages-dir-browser)/./components/collected-dataset-customized/Helper/savefile.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/router */ \"(pages-dir-browser)/./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _adminSettings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./adminSettings */ \"(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/adminSettings.js\");\n\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n\n\n\n\n// Add deep comparison utility\nconst isEqual = (obj1, obj2)=>{\n    if (obj1 === obj2) return true;\n    if (typeof obj1 !== 'object' || typeof obj2 !== 'object') return false;\n    if (obj1 === null || obj2 === null) return false;\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) return false;\n    return keys1.every((key)=>keys2.includes(key) && isEqual(obj1[key], obj2[key]));\n};\n// Create a basic ActionButton component with optimization\nconst ActionButton = (param)=>{\n    let { text, abbreviatedText, onClick, customClass = '', disabled = false, active = false } = param;\n    _s();\n    const [isAbbreviated, setIsAbbreviated] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const { settings } = (0,_adminSettings__WEBPACK_IMPORTED_MODULE_7__.useAdminSettings)();\n    const [currentUserId, setCurrentUserId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('default');\n    const [isCapturing, setIsCapturing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [captureCounter, setCaptureCounter] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [processStatus, setProcessStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    // Memoize button props to prevent unnecessary re-renders\n    const buttonProps = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"ActionButton.useMemo[buttonProps]\": ()=>({\n                className: \"action-button \".concat(customClass, \" \").concat(isAbbreviated ? 'abbreviated' : '', \" \").concat(active ? 'active' : ''),\n                onClick,\n                disabled,\n                title: text\n            })\n    }[\"ActionButton.useMemo[buttonProps]\"], [\n        customClass,\n        isAbbreviated,\n        active,\n        onClick,\n        disabled,\n        text\n    ]);\n    // Check window size and set abbreviated mode with debounce\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButton.useEffect\": ()=>{\n            if (false) {}\n            let timeoutId;\n            const handleResize = {\n                \"ActionButton.useEffect.handleResize\": ()=>{\n                    clearTimeout(timeoutId);\n                    timeoutId = setTimeout({\n                        \"ActionButton.useEffect.handleResize\": ()=>{\n                            const width = window.innerWidth;\n                            setIsAbbreviated(width < 768);\n                        }\n                    }[\"ActionButton.useEffect.handleResize\"], 100);\n                }\n            }[\"ActionButton.useEffect.handleResize\"];\n            window.addEventListener('resize', handleResize);\n            handleResize(); // Initial call\n            return ({\n                \"ActionButton.useEffect\": ()=>{\n                    window.removeEventListener('resize', handleResize);\n                    clearTimeout(timeoutId);\n                }\n            })[\"ActionButton.useEffect\"];\n        }\n    }[\"ActionButton.useEffect\"], []);\n    // Add effect to listen for user ID changes with optimization\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButton.useEffect\": ()=>{\n            const handleUserIdChange = {\n                \"ActionButton.useEffect.handleUserIdChange\": (event)=>{\n                    if (event.detail && event.detail.type === 'userIdChange') {\n                        const newUserId = event.detail.userId;\n                        if (newUserId !== currentUserId) {\n                            setCurrentUserId(newUserId);\n                        }\n                    }\n                }\n            }[\"ActionButton.useEffect.handleUserIdChange\"];\n            window.addEventListener('userIdChange', handleUserIdChange);\n            return ({\n                \"ActionButton.useEffect\": ()=>{\n                    window.removeEventListener('userIdChange', handleUserIdChange);\n                }\n            })[\"ActionButton.useEffect\"];\n        }\n    }[\"ActionButton.useEffect\"], [\n        currentUserId\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n        ...buttonProps,\n        children: [\n            isAbbreviated ? abbreviatedText : text,\n            processStatus && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"process-status\",\n                children: processStatus\n            }, void 0, false, {\n                fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                lineNumber: 91,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n        lineNumber: 88,\n        columnNumber: 5\n    }, undefined);\n};\n_s(ActionButton, \"Nkz1GO/Uf3mvhA1uh+EhQBsi9aE=\", false, function() {\n    return [\n        _adminSettings__WEBPACK_IMPORTED_MODULE_7__.useAdminSettings\n    ];\n});\n_c = ActionButton;\n// Create the ActionButtonGroup component with client-side only rendering and optimization\nconst ActionButtonGroupInner = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(_s1((param, ref)=>{\n    let { triggerCameraAccess, isCompactMode, onActionClick } = param;\n    _s1();\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_6__.useRouter)();\n    const { settings, updateSettings } = (0,_adminSettings__WEBPACK_IMPORTED_MODULE_7__.useAdminSettings)(ref);\n    // State for button actions\n    const [randomTimes, setRandomTimes] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [delaySeconds, setDelaySeconds] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(3);\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [processStatus, setProcessStatus] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('');\n    const [countdownValue, setCountdownValue] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [currentDot, setCurrentDot] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [calibrationPoints, setCalibrationPoints] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [remainingCaptures, setRemainingCaptures] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [showCanvas, setShowCanvas] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    // Track the capture count\n    const [calibrationHandler, setCalibrationHandler] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [captureCount, setCaptureCount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(1);\n    const [isCapturing, setIsCapturing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Toggle states\n    const [showHeadPose, setShowHeadPose] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showBoundingBox, setShowBoundingBox] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showMask, setShowMask] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showParameters, setShowParameters] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isCameraActive, setIsCameraActive] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showPermissionPopup, setShowPermissionPopup] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [currentUserId, setCurrentUserId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)('default');\n    // Add cache for settings\n    const settingsCache = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    const lastSettingsUpdate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new Map());\n    // Optimize settings updates\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            if (settings && currentUserId && settings[currentUserId]) {\n                const userSettings = settings[currentUserId];\n                const cachedSettings = settingsCache.current.get(currentUserId);\n                if (!isEqual(cachedSettings, userSettings)) {\n                    setRandomTimes(Number(userSettings.times_set_random) || 1);\n                    setDelaySeconds(Number(userSettings.delay_set_random) || 3);\n                    settingsCache.current.set(currentUserId, userSettings);\n                    lastSettingsUpdate.current.set(currentUserId, Date.now());\n                }\n            }\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], [\n        settings,\n        currentUserId\n    ]);\n    // Listen for user ID changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            const handleUserIdChange = {\n                \"ActionButtonGroupInner.useEffect.handleUserIdChange\": (event)=>{\n                    if (event.detail && event.detail.type === 'userIdChange') {\n                        const newUserId = event.detail.userId;\n                        setCurrentUserId(newUserId);\n                        // Update settings for new user\n                        if (settings && settings[newUserId]) {\n                            const userSettings = settings[newUserId];\n                            setRandomTimes(Number(userSettings.times_set_random) || 1);\n                            setDelaySeconds(Number(userSettings.delay_set_random) || 3);\n                        }\n                    }\n                }\n            }[\"ActionButtonGroupInner.useEffect.handleUserIdChange\"];\n            window.addEventListener('userIdChange', handleUserIdChange);\n            return ({\n                \"ActionButtonGroupInner.useEffect\": ()=>{\n                    window.removeEventListener('userIdChange', handleUserIdChange);\n                }\n            })[\"ActionButtonGroupInner.useEffect\"];\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], [\n        settings\n    ]);\n    // Listen for settings updates\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            const handleSettingsUpdate = {\n                \"ActionButtonGroupInner.useEffect.handleSettingsUpdate\": (event)=>{\n                    if (event.detail && event.detail.type === 'captureSettings') {\n                        const { userId, times_set_random, delay_set_random } = event.detail;\n                        if (userId === currentUserId) {\n                            if (times_set_random !== undefined) {\n                                const newTimes = Number(times_set_random) || 1;\n                                setRandomTimes(newTimes);\n                            }\n                            if (delay_set_random !== undefined) {\n                                const newDelay = Number(delay_set_random) || 3;\n                                setDelaySeconds(newDelay);\n                            }\n                        }\n                    }\n                }\n            }[\"ActionButtonGroupInner.useEffect.handleSettingsUpdate\"];\n            window.addEventListener('captureSettingsUpdate', handleSettingsUpdate);\n            return ({\n                \"ActionButtonGroupInner.useEffect\": ()=>{\n                    window.removeEventListener('captureSettingsUpdate', handleSettingsUpdate);\n                }\n            })[\"ActionButtonGroupInner.useEffect\"];\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], [\n        currentUserId\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            // Make functions globally accessible as a fallback\n            if (true) {\n                window.actionButtonFunctions = {\n                    handleRandomDot,\n                    handleSetRandom,\n                    handleSetCalibrate,\n                    handleClearAll\n                };\n            // console.log('Action button functions exposed to window.actionButtonFunctions');\n            }\n            return ({\n                \"ActionButtonGroupInner.useEffect\": ()=>{\n                    if (true) {\n                        delete window.actionButtonFunctions;\n                    }\n                }\n            })[\"ActionButtonGroupInner.useEffect\"];\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            // Only initialize if canvas doesn't exist\n            if (!document.querySelector('#tracking-canvas')) {\n                const canvas = getMainCanvas();\n                console.log('Canvas initialized:', canvas ? 'success' : 'failed');\n            }\n            // Cleanup function\n            return ({\n                \"ActionButtonGroupInner.useEffect\": ()=>{\n                    // Don't remove canvas on cleanup to prevent recreation issues\n                    console.log('ActionButton cleanup - canvas preserved');\n                }\n            })[\"ActionButtonGroupInner.useEffect\"];\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], []);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            if (false) {}\n            // Function to get control values from TopBar\n            const updateControlValues = {\n                \"ActionButtonGroupInner.useEffect.updateControlValues\": ()=>{\n                    // Get the time input element\n                    const timeInput = document.querySelector('.control-input-field[data-control=\"time\"]');\n                    if (timeInput) {\n                        const timeValue = parseInt(timeInput.value, 10);\n                        if (!isNaN(timeValue) && timeValue > 0) {\n                            console.log('Updating randomTimes to:', timeValue);\n                            setRandomTimes(timeValue);\n                        }\n                    }\n                    // Get the delay input element\n                    const delayInput = document.querySelector('.control-input-field[data-control=\"delay\"]');\n                    if (delayInput) {\n                        const delayValue = parseInt(delayInput.value, 10);\n                        if (!isNaN(delayValue) && delayValue > 0) {\n                            console.log('Updating delaySeconds to:', delayValue);\n                            setDelaySeconds(delayValue);\n                        }\n                    }\n                }\n            }[\"ActionButtonGroupInner.useEffect.updateControlValues\"];\n            // Add event listeners to the control inputs\n            const timeInput = document.querySelector('.control-input-field[data-control=\"time\"]');\n            const delayInput = document.querySelector('.control-input-field[data-control=\"delay\"]');\n            if (timeInput) {\n                timeInput.addEventListener('change', updateControlValues);\n                timeInput.addEventListener('input', updateControlValues); // Also listen for input events\n            }\n            if (delayInput) {\n                delayInput.addEventListener('change', updateControlValues);\n                delayInput.addEventListener('input', updateControlValues); // Also listen for input events\n            }\n            // Initial update\n            updateControlValues();\n            // Cleanup event listeners\n            return ({\n                \"ActionButtonGroupInner.useEffect\": ()=>{\n                    if (timeInput) {\n                        timeInput.removeEventListener('change', updateControlValues);\n                        timeInput.removeEventListener('input', updateControlValues);\n                    }\n                    if (delayInput) {\n                        delayInput.removeEventListener('change', updateControlValues);\n                        delayInput.removeEventListener('input', updateControlValues);\n                    }\n                }\n            })[\"ActionButtonGroupInner.useEffect\"];\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], []);\n    // Initialize canvas on component mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            const initializeCanvas = {\n                \"ActionButtonGroupInner.useEffect.initializeCanvas\": ()=>{\n                    // Remove any existing canvas\n                    const existingCanvas = document.querySelector('.tracking-canvas');\n                    if (existingCanvas) {\n                        existingCanvas.remove();\n                    }\n                    // Create new canvas\n                    const canvas = document.createElement('canvas');\n                    canvas.className = 'tracking-canvas';\n                    canvas.id = 'tracking-canvas';\n                    canvas.style.cssText = \"\\n        position: fixed;\\n        top: 0;\\n        left: 0;\\n        width: 100vw;\\n        height: 100vh;\\n        opacity: 0;\\n        pointer-events: none;\\n        z-index: 5;\\n      \";\n                    // Set canvas dimensions\n                    canvas.width = window.innerWidth;\n                    canvas.height = window.innerHeight;\n                    // Add canvas to body\n                    document.body.appendChild(canvas);\n                    // Store reference\n                    canvasRef.current = canvas;\n                    if (true) {\n                        window.whiteScreenCanvas = canvas;\n                    }\n                    // Initialize with white background\n                    const ctx = canvas.getContext('2d');\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(0, 0, canvas.width, canvas.height);\n                    // Add resize handler\n                    const handleResize = {\n                        \"ActionButtonGroupInner.useEffect.initializeCanvas.handleResize\": ()=>{\n                            canvas.width = window.innerWidth;\n                            canvas.height = window.innerHeight;\n                            ctx.fillStyle = 'white';\n                            ctx.fillRect(0, 0, canvas.width, canvas.height);\n                        }\n                    }[\"ActionButtonGroupInner.useEffect.initializeCanvas.handleResize\"];\n                    window.addEventListener('resize', handleResize);\n                    return ({\n                        \"ActionButtonGroupInner.useEffect.initializeCanvas\": ()=>{\n                            window.removeEventListener('resize', handleResize);\n                            if (canvas.parentNode) {\n                                canvas.parentNode.removeChild(canvas);\n                            }\n                        }\n                    })[\"ActionButtonGroupInner.useEffect.initializeCanvas\"];\n                }\n            }[\"ActionButtonGroupInner.useEffect.initializeCanvas\"];\n            const cleanup = initializeCanvas();\n            return cleanup;\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], []);\n    // Simplified Canvas Manager - More flexible and maintainable\n    class CanvasManager {\n        // Create or get canvas with automatic sizing\n        createCanvas() {\n            let container = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n            // Try to find existing canvas first\n            let canvas = document.querySelector('#tracking-canvas');\n            if (!canvas) {\n                canvas = document.createElement('canvas');\n                canvas.className = 'tracking-canvas';\n                canvas.id = 'tracking-canvas';\n            }\n            // Determine container\n            const targetContainer = container || document.querySelector('.canvas-container') || document.querySelector('.main-content') || document.body;\n            // Set initial dimensions based on container\n            this.updateCanvasSize(canvas, targetContainer);\n            // Initialize with white background\n            const ctx = canvas.getContext('2d');\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            // Add to container if not already there\n            if (!canvas.parentNode) {\n                targetContainer.appendChild(canvas);\n            }\n            // Store reference\n            this.canvas = canvas;\n            window.whiteScreenCanvas = canvas;\n            // Set up responsive behavior\n            this.setupResponsiveCanvas(canvas, targetContainer);\n            console.log(\"Canvas created/updated: \".concat(canvas.width, \"x\").concat(canvas.height));\n            return canvas;\n        }\n        // Update canvas size to match container\n        updateCanvasSize(canvas, container) {\n            if (!canvas || !container) return;\n            const rect = container.getBoundingClientRect();\n            const width = rect.width || container.clientWidth || 800;\n            const height = rect.height || container.clientHeight || 600;\n            canvas.width = width;\n            canvas.height = height;\n            // Update CSS to match\n            canvas.style.width = '100%';\n            canvas.style.height = '100%';\n            canvas.style.display = 'block';\n            canvas.style.backgroundColor = 'white';\n        }\n        // Set up responsive canvas that adapts to container size\n        setupResponsiveCanvas(canvas, container) {\n            if (!canvas || !container) return;\n            // Remove existing resize observer\n            if (this.resizeObserver) {\n                this.resizeObserver.disconnect();\n            }\n            // Create new resize observer\n            this.resizeObserver = new ResizeObserver((entries)=>{\n                for (const entry of entries){\n                    if (entry.target === container) {\n                        this.updateCanvasSize(canvas, container);\n                        // Redraw white background after resize\n                        const ctx = canvas.getContext('2d');\n                        ctx.fillStyle = 'white';\n                        ctx.fillRect(0, 0, canvas.width, canvas.height);\n                    }\n                }\n            });\n            // Observe container for size changes\n            this.resizeObserver.observe(container);\n            // Also listen for window resize as fallback\n            const handleWindowResize = ()=>{\n                this.updateCanvasSize(canvas, container);\n                const ctx = canvas.getContext('2d');\n                ctx.fillStyle = 'white';\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n            };\n            window.addEventListener('resize', handleWindowResize);\n            canvas._windowResizeHandler = handleWindowResize;\n        }\n        // Switch to fullscreen mode\n        enterFullscreen() {\n            if (!this.canvas) {\n                this.canvas = this.createCanvas();\n            }\n            // Save original state\n            this.originalState = {\n                parent: this.canvas.parentElement,\n                position: this.canvas.style.position,\n                top: this.canvas.style.top,\n                left: this.canvas.style.left,\n                width: this.canvas.style.width,\n                height: this.canvas.style.height,\n                zIndex: this.canvas.style.zIndex\n            };\n            // Move to body and make fullscreen\n            document.body.appendChild(this.canvas);\n            // Set fullscreen styles\n            this.canvas.style.cssText = \"\\n        position: fixed;\\n        top: 0;\\n        left: 0;\\n        width: 100vw;\\n        height: 100vh;\\n        z-index: 99999;\\n        background-color: white;\\n        border: none;\\n        display: block;\\n        opacity: 1;\\n        pointer-events: auto;\\n        margin: 0;\\n        padding: 0;\\n        box-sizing: border-box;\\n      \";\n            // Set canvas dimensions to window size\n            this.canvas.width = window.innerWidth;\n            this.canvas.height = window.innerHeight;\n            // Clear with white background\n            const ctx = this.canvas.getContext('2d');\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n            // Hide UI elements\n            this.hideUIElements();\n            this.isFullscreen = true;\n            console.log('Canvas entered fullscreen mode');\n        }\n        // Exit fullscreen mode\n        exitFullscreen() {\n            if (!this.canvas || !this.originalState) return;\n            // Show UI elements\n            this.showUIElements();\n            // Find appropriate container\n            const container = document.querySelector('.canvas-container') || document.querySelector('.main-content') || document.body;\n            // Move canvas back to container\n            container.appendChild(this.canvas);\n            // Restore original styles\n            this.canvas.style.position = 'relative';\n            this.canvas.style.top = '';\n            this.canvas.style.left = '';\n            this.canvas.style.width = '100%';\n            this.canvas.style.height = '100%';\n            this.canvas.style.zIndex = '';\n            this.canvas.style.backgroundColor = 'white';\n            // Update size to match container\n            this.updateCanvasSize(this.canvas, container);\n            // Clear with white background\n            const ctx = this.canvas.getContext('2d');\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n            // Clear original state\n            this.originalState = null;\n            this.isFullscreen = false;\n            console.log('Canvas exited fullscreen mode');\n        }\n        // Hide UI elements during fullscreen\n        hideUIElements() {\n            const elementsToHide = [\n                '.topbar',\n                '.canvas-container',\n                '.main-content',\n                '.metrics-panel',\n                '.display-metrics',\n                'nav',\n                'header',\n                '.button-groups',\n                '.control-buttons'\n            ];\n            elementsToHide.forEach((selector)=>{\n                const elements = document.querySelectorAll(selector);\n                elements.forEach((el)=>{\n                    el.style.display = 'none';\n                    el.setAttribute('data-hidden-by-canvas', 'true');\n                });\n            });\n        }\n        // Show UI elements after fullscreen\n        showUIElements() {\n            const hiddenElements = document.querySelectorAll('[data-hidden-by-canvas=\"true\"]');\n            hiddenElements.forEach((el)=>{\n                el.style.display = '';\n                el.removeAttribute('data-hidden-by-canvas');\n            });\n        }\n        // Clear canvas content\n        clear() {\n            if (!this.canvas) return;\n            const ctx = this.canvas.getContext('2d');\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        }\n        // Cleanup\n        destroy() {\n            if (this.resizeObserver) {\n                this.resizeObserver.disconnect();\n            }\n            if (this.canvas && this.canvas._windowResizeHandler) {\n                window.removeEventListener('resize', this.canvas._windowResizeHandler);\n            }\n            if (this.canvas && this.canvas.parentNode) {\n                this.canvas.parentNode.removeChild(this.canvas);\n            }\n            if (window.whiteScreenCanvas === this.canvas) {\n                delete window.whiteScreenCanvas;\n            }\n            this.canvas = null;\n            this.originalState = null;\n            this.isFullscreen = false;\n        }\n        // Get current canvas\n        getCanvas() {\n            return this.canvas;\n        }\n        // Check if canvas is in fullscreen mode\n        isInFullscreen() {\n            return this.isFullscreen;\n        }\n        constructor(){\n            this.canvas = null;\n            this.originalState = null;\n            this.resizeObserver = null;\n            this.isFullscreen = false;\n        }\n    }\n    // Global canvas manager instance - initialize only once\n    const canvasManager1 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n        \"ActionButtonGroupInner.useMemo[canvasManager]\": ()=>new CanvasManager()\n    }[\"ActionButtonGroupInner.useMemo[canvasManager]\"], []);\n    // Replace the complex canvas functions with simplified versions\n    const getMainCanvas = ()=>{\n        return canvasManager1.getCanvas() || canvasManager1.createCanvas();\n    };\n    const ensureCanvasExists = ()=>{\n        return canvasManager1.createCanvas();\n    };\n    const restoreCanvasToContainer = (canvas)=>{\n        canvasManager1.exitFullscreen();\n    };\n    const cleanupCanvas = ()=>{\n        canvasManager1.destroy();\n    };\n    const clearCanvas = ()=>{\n        canvasManager1.clear();\n    };\n    // Modified handleDotProcess function with improved dot and countdown alignment\n    // Complete handleDotProcess function with proper canvas management\n    const handleDotProcess = async (options)=>{\n        const { position, onStatusUpdate, toggleTopBar, triggerCameraAccess, setIsCapturing, captureCount, setCaptureCount, useRandomPosition = false, postCountdownDelay = 500 } = options;\n        let canvas = null;\n        let keepDotVisibleInterval = null;\n        let countdownElement = null;\n        try {\n            // Hide the TopBar before showing the dot\n            if (typeof toggleTopBar === 'function') {\n                toggleTopBar(false);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(false);\n            }\n            // Set capturing state\n            setIsCapturing(true);\n            // Update status\n            onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                processStatus: useRandomPosition ? 'Generating random dot...' : 'Starting dot process...',\n                isCapturing: true\n            });\n            // Wait for UI updates to take effect\n            await new Promise((resolve)=>setTimeout(resolve, 200));\n            // Use ensureCanvasExists to get or create canvas\n            canvas = ensureCanvasExists();\n            if (!canvas) {\n                throw new Error(\"Failed to create or find canvas\");\n            }\n            // Canvas is already set to fullscreen by ensureCanvasExists\n            const canvasWidth = canvas.width;\n            const canvasHeight = canvas.height;\n            // Get context and clear canvas with white background\n            const ctx = canvas.getContext('2d');\n            ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n            // Get position for the dot - either use provided position or generate random one\n            const dotPosition = useRandomPosition ? (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.getRandomPosition)(canvas, 20) : position;\n            if (!dotPosition || typeof dotPosition.x !== 'number' || typeof dotPosition.y !== 'number') {\n                throw new Error(\"Invalid dot position\");\n            }\n            // Draw the dot\n            const dotRadius = 12;\n            (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n            // Create a redraw interval to ensure dot stays visible\n            keepDotVisibleInterval = setInterval(()=>{\n                (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n            }, 50); // More frequent updates for reliability\n            // Remove any existing countdown elements\n            const existingCountdowns = document.querySelectorAll('.dot-countdown, .calibrate-countdown');\n            existingCountdowns.forEach((el)=>{\n                if (el.parentNode) el.parentNode.removeChild(el);\n            });\n            // Create a countdown element directly on top of the dot\n            countdownElement = document.createElement('div');\n            countdownElement.className = 'dot-countdown';\n            countdownElement.style.cssText = \"\\n        position: fixed;\\n        left: \".concat(dotPosition.x, \"px;\\n        top: \").concat(dotPosition.y, \"px;\\n        transform: translate(-50%, -50%);\\n        color: red;\\n        font-size: 36px;\\n        font-weight: bold;\\n        text-shadow: 0 0 10px white, 0 0 20px white;\\n        z-index: 10000;\\n        background-color: rgba(255, 255, 255, 0.8);\\n        border: 2px solid red;\\n        border-radius: 50%;\\n        width: 50px;\\n        height: 50px;\\n        display: flex;\\n        justify-content: center;\\n        align-items: center;\\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\n      \");\n            document.body.appendChild(countdownElement);\n            // Manual countdown\n            for(let count = 3; count > 0; count--){\n                countdownElement.textContent = count;\n                onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                    processStatus: \"Countdown: \".concat(count),\n                    countdownValue: count,\n                    isCapturing: true\n                });\n                // Redraw the dot for reliability\n                (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n                await new Promise((resolve)=>setTimeout(resolve, 800));\n                // Additional redraw during countdown to ensure visibility\n                (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n            }\n            // Show checkmark\n            countdownElement.textContent = \"✓\";\n            // Make sure dot is still visible\n            (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n            // Remove countdown element after delay\n            setTimeout(()=>{\n                if (countdownElement && countdownElement.parentNode) {\n                    countdownElement.parentNode.removeChild(countdownElement);\n                }\n            }, 300);\n            // Wait after countdown completes\n            await new Promise((resolve)=>setTimeout(resolve, postCountdownDelay));\n            // Ensure the dot is still visible\n            (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, dotPosition.x, dotPosition.y, dotRadius, false);\n            // Capture images at this point\n            const captureResult = await (0,_components_collected_dataset_customized_Helper_savefile__WEBPACK_IMPORTED_MODULE_5__.captureImagesAtPoint)({\n                point: dotPosition,\n                captureCount: captureCount,\n                canvasRef: {\n                    current: canvas\n                },\n                setCaptureCount: setCaptureCount,\n                showCapturePreview: _components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.showCapturePreview\n            });\n            // Update status\n            onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                processStatus: 'Capture completed',\n                isCapturing: false\n            });\n            return {\n                success: true,\n                position: dotPosition,\n                captureResult\n            };\n        } catch (error) {\n            console.error(\"Error in handleDotProcess:\", error);\n            onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                processStatus: \"Error: \".concat(error.message),\n                isCapturing: false\n            });\n            return {\n                success: false,\n                error: error.message\n            };\n        } finally{\n            // Clear redraw interval first\n            if (keepDotVisibleInterval) {\n                clearInterval(keepDotVisibleInterval);\n                keepDotVisibleInterval = null;\n            }\n            // Remove countdown element if it still exists\n            if (countdownElement && countdownElement.parentNode) {\n                countdownElement.parentNode.removeChild(countdownElement);\n            }\n            // Remove any remaining countdown elements\n            const remainingCountdowns = document.querySelectorAll('.dot-countdown, .calibrate-countdown');\n            remainingCountdowns.forEach((el)=>{\n                if (el.parentNode) el.parentNode.removeChild(el);\n            });\n            // Use restoreCanvasToContainer to properly restore canvas\n            if (canvas) {\n                restoreCanvasToContainer(canvas);\n            }\n            // Show TopBar again after a delay\n            setTimeout(()=>{\n                if (typeof toggleTopBar === 'function') {\n                    toggleTopBar(true);\n                } else if ( true && window.toggleTopBar) {\n                    window.toggleTopBar(true);\n                }\n            }, 1000);\n        }\n    };\n    const handleSetCalibrate = async ()=>{\n        if (isCapturing) return;\n        // Declare these variables OUTSIDE the try block\n        let canvas = null;\n        let originalCanvasParent = null;\n        let originalCanvasStyle = {};\n        let statusIndicator = null;\n        let currentRedrawInterval = null;\n        try {\n            canvas = ensureCanvasExists();\n            if (!canvas) {\n                console.error('Failed to create canvas for calibration');\n                return;\n            }\n            // Hide TopBar\n            if (typeof onActionClick === 'function') {\n                onActionClick('toggleTopBar', false);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(false);\n            }\n            setIsCapturing(true);\n            setShowCanvas(true);\n            setProcessStatus(\"Starting calibration sequence...\");\n            // Wait for UI updates to take effect\n            await new Promise((resolve)=>setTimeout(resolve, 300));\n            // Get canvas reference\n            canvas = getMainCanvas();\n            if (!canvas) {\n                setProcessStatus(\"Error: Canvas not found\");\n                setIsCapturing(false);\n                if (typeof onActionClick === 'function') {\n                    onActionClick('toggleTopBar', true);\n                }\n                return;\n            }\n            // Save original parent and style\n            originalCanvasParent = canvas.parentElement;\n            originalCanvasStyle = {\n                position: canvas.style.position,\n                top: canvas.style.top,\n                left: canvas.style.left,\n                width: canvas.style.width,\n                height: canvas.style.height,\n                zIndex: canvas.style.zIndex\n            };\n            // Move canvas to body for maximum reliability\n            document.body.appendChild(canvas);\n            // Make canvas fullscreen with fixed positioning\n            canvas.style.position = 'fixed';\n            canvas.style.top = '0';\n            canvas.style.left = '0';\n            canvas.style.width = '100vw';\n            canvas.style.height = '100vh';\n            canvas.style.zIndex = '10';\n            // Set dimensions to match window exactly\n            const canvasWidth = window.innerWidth;\n            const canvasHeight = window.innerHeight;\n            canvas.width = canvasWidth;\n            canvas.height = canvasHeight;\n            console.log(\"Canvas set to fullscreen: \".concat(canvasWidth, \"x\").concat(canvasHeight));\n            // Get context\n            const ctx = canvas.getContext('2d');\n            // Clear canvas with white background\n            ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n            // Generate calibration points based on the canvas size\n            const { generateCalibrationPoints } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../../components/collected-dataset-customized/Action/CalibratePoints */ \"(pages-dir-browser)/./components/collected-dataset-customized/Action/CalibratePoints.js\"));\n            const points = generateCalibrationPoints(canvasWidth, canvasHeight);\n            if (!points || points.length === 0) {\n                throw new Error(\"Failed to generate calibration points\");\n            }\n            // Create a status indicator\n            statusIndicator = document.createElement('div');\n            statusIndicator.className = 'calibrate-status-indicator';\n            statusIndicator.style.cssText = \"\\n        position: fixed;\\n        top: 20px;\\n        right: 20px;\\n        background-color: rgba(0, 102, 204, 0.9);\\n        color: white;\\n        font-size: 16px;\\n        font-weight: bold;\\n        padding: 10px 15px;\\n        border-radius: 8px;\\n        z-index: 10000;\\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\\n      \";\n            statusIndicator.textContent = 'Calibration: Initializing...';\n            document.body.appendChild(statusIndicator);\n            // Process each calibration point\n            let successCount = 0;\n            for(let i = 0; i < points.length; i++){\n                const point = points[i];\n                // Clear any existing redraw interval\n                if (currentRedrawInterval) {\n                    clearInterval(currentRedrawInterval);\n                    currentRedrawInterval = null;\n                }\n                // Update status displays\n                statusIndicator.textContent = \"Calibration: Point \".concat(i + 1, \"/\").concat(points.length);\n                setProcessStatus(\"Processing calibration point \".concat(i + 1, \"/\").concat(points.length));\n                // Reset canvas if dimensions changed\n                if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n                    console.warn(\"Canvas dimensions changed. Resetting to \".concat(canvasWidth, \"x\").concat(canvasHeight));\n                    canvas.width = canvasWidth;\n                    canvas.height = canvasHeight;\n                }\n                // Make sure canvas is still attached to body and in fullscreen mode\n                if (canvas.parentElement !== document.body) {\n                    document.body.appendChild(canvas);\n                    canvas.style.position = 'fixed';\n                    canvas.style.top = '0';\n                    canvas.style.left = '0';\n                    canvas.style.width = '100vw';\n                    canvas.style.height = '100vh';\n                    canvas.style.zIndex = '10';\n                }\n                // Clear canvas with white background\n                ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n                ctx.fillStyle = 'white';\n                ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n                // Draw the calibration point\n                const radius = 14; // Slightly larger for better visibility\n                (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, point.x, point.y, radius, false);\n                // Create redraw function for this point\n                const redrawCurrentDot = ()=>{\n                    // Verify canvas dimensions and parent\n                    if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n                        canvas.width = canvasWidth;\n                        canvas.height = canvasHeight;\n                        ctx.fillStyle = 'white';\n                        ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n                    }\n                    // Make sure canvas is still attached to body\n                    if (canvas.parentElement !== document.body) {\n                        document.body.appendChild(canvas);\n                    }\n                    // Redraw dot without clearing\n                    (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, point.x, point.y, radius, false);\n                };\n                // Start redraw interval - more frequent updates for reliable dot visibility\n                currentRedrawInterval = setInterval(redrawCurrentDot, 50);\n                // Remove any existing countdown elements\n                const existingCountdowns = document.querySelectorAll('.dot-countdown, .calibrate-countdown');\n                existingCountdowns.forEach((el)=>{\n                    if (el.parentNode) el.parentNode.removeChild(el);\n                });\n                // Create custom countdown element\n                const countdownElement = document.createElement('div');\n                countdownElement.className = 'dot-countdown'; // Consistent class name\n                countdownElement.style.cssText = \"\\n          position: fixed;\\n          left: \".concat(point.x, \"px;\\n          top: \").concat(point.y - 60, \"px;\\n          transform: translateX(-50%);\\n          color: red;\\n          font-size: 36px;\\n          font-weight: bold;\\n          text-shadow: 0 0 10px white, 0 0 20px white;\\n          z-index: 10000;\\n          background-color: rgba(255, 255, 255, 0.8);\\n          border: 2px solid red;\\n          border-radius: 50%;\\n          width: 50px;\\n          height: 50px;\\n          display: flex;\\n          justify-content: center;\\n          align-items: center;\\n          box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\\n        \");\n                document.body.appendChild(countdownElement);\n                try {\n                    // Manual countdown\n                    for(let count = 3; count > 0; count--){\n                        countdownElement.textContent = count;\n                        setProcessStatus(\"Point \".concat(i + 1, \"/\").concat(points.length, \": Countdown \").concat(count));\n                        // Force redraw multiple times during countdown to ensure visibility\n                        redrawCurrentDot();\n                        await new Promise((resolve)=>setTimeout(resolve, 800));\n                        // Redraw again halfway through the wait to ensure dot stays visible\n                        redrawCurrentDot();\n                    }\n                    // Show checkmark\n                    countdownElement.textContent = \"✓\";\n                    redrawCurrentDot();\n                    // Remove countdown element after delay\n                    setTimeout(()=>{\n                        if (countdownElement.parentNode) {\n                            countdownElement.parentNode.removeChild(countdownElement);\n                        }\n                    }, 300);\n                    // Make sure dot is still visible\n                    redrawCurrentDot();\n                    // Capture images at this point\n                    console.log(\"Capturing calibration point \".concat(i + 1, \"/\").concat(points.length, \" at (\").concat(point.x, \", \").concat(point.y, \")\"));\n                    // Manual force redraw one more time just before capture\n                    (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, point.x, point.y, radius, false);\n                    const captureResult = await (0,_components_collected_dataset_customized_Helper_savefile__WEBPACK_IMPORTED_MODULE_5__.captureImagesAtPoint)({\n                        point: point,\n                        captureCount: captureCount,\n                        canvasRef: {\n                            current: canvas\n                        },\n                        setCaptureCount: setCaptureCount,\n                        showCapturePreview: _components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.showCapturePreview\n                    });\n                    if (captureResult && (captureResult.screenImage || captureResult.success)) {\n                        successCount++;\n                    }\n                    // Wait between points\n                    await new Promise((resolve)=>setTimeout(resolve, 1200));\n                } catch (error) {\n                    console.error(\"Error processing calibration point \".concat(i + 1, \":\"), error);\n                } finally{\n                    // Clean up countdown if it still exists\n                    if (countdownElement.parentNode) {\n                        countdownElement.parentNode.removeChild(countdownElement);\n                    }\n                    // Clear redraw interval\n                    if (currentRedrawInterval) {\n                        clearInterval(currentRedrawInterval);\n                        currentRedrawInterval = null;\n                    }\n                }\n            }\n            // Calibration complete\n            if (statusIndicator) {\n                statusIndicator.textContent = \"Calibration complete: \".concat(successCount, \"/\").concat(points.length, \" points\");\n            }\n            setProcessStatus(\"Calibration completed: \".concat(successCount, \"/\").concat(points.length, \" points captured\"));\n        } catch (error) {\n            console.error(\"Calibration error:\", error);\n            setProcessStatus(\"Calibration error: \".concat(error.message));\n            // Clean up redraw interval\n            if (currentRedrawInterval) {\n                clearInterval(currentRedrawInterval);\n            }\n        } finally{\n            // Remove status indicator if it exists\n            if (statusIndicator && statusIndicator.parentNode) {\n                setTimeout(()=>{\n                    statusIndicator.parentNode.removeChild(statusIndicator);\n                }, 3000);\n            }\n            setIsCapturing(false);\n            setTimeout(()=>{\n                cleanupCanvas();\n            }, 3000);\n            if (canvas) {\n                restoreCanvasToContainer(canvas);\n            }\n            // Show TopBar again\n            setTimeout(()=>{\n                if (typeof onActionClick === 'function') {\n                    onActionClick('toggleTopBar', true);\n                } else if ( true && window.toggleTopBar) {\n                    window.toggleTopBar(true);\n                }\n            }, 1000);\n        }\n    };\n    const handleSetRandom = async ()=>{\n        if (isCapturing) return;\n        try {\n            const canvas = ensureCanvasExists();\n            if (!canvas) {\n                console.error('Failed to create canvas for set random');\n                return;\n            }\n            // Always get the latest settings from context for the current user\n            const userSettings = settings && settings[currentUserId] ? settings[currentUserId] : {};\n            const times = Number(userSettings.times_set_random) || Number(randomTimes) || 1;\n            const delay = Number(userSettings.delay_set_random) || Number(delaySeconds) || 3;\n            // Log current settings before starting\n            console.log('Starting Set Random with settings:', {\n                randomTimes,\n                delaySeconds,\n                currentUserId,\n                settings,\n                userSettings,\n                times,\n                delay\n            });\n            // Hide TopBar\n            if (typeof onActionClick === 'function') {\n                onActionClick('toggleTopBar', false);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(false);\n            }\n            setIsCapturing(true);\n            setRemainingCaptures(times);\n            setProcessStatus(\"Starting \".concat(times, \" random captures with \").concat(delay, \"s delay...\"));\n            // Process all captures in sequence\n            let successCount = 0;\n            for(let currentIndex = 1; currentIndex <= times; currentIndex++){\n                // Update status for current capture\n                setProcessStatus(\"Capture \".concat(currentIndex, \" of \").concat(times));\n                setRemainingCaptures(times - currentIndex + 1);\n                console.log(\"Starting capture \".concat(currentIndex, \" of \").concat(times));\n                // Use handleDotProcess for each capture\n                const result = await handleDotProcess({\n                    useRandomPosition: true,\n                    onStatusUpdate: (status)=>{\n                        if (status.processStatus) {\n                            setProcessStatus(\"Capture \".concat(currentIndex, \"/\").concat(times, \": \").concat(status.processStatus));\n                        }\n                    },\n                    toggleTopBar: (show)=>{\n                        // Only show TopBar after the last capture\n                        if (show && currentIndex < times) {\n                            return; // Don't show yet for intermediate captures\n                        }\n                        if (typeof onActionClick === 'function') {\n                            onActionClick('toggleTopBar', show);\n                        } else if ( true && window.toggleTopBar) {\n                            window.toggleTopBar(show);\n                        }\n                    },\n                    triggerCameraAccess,\n                    setIsCapturing: (capturing)=>{\n                        // Only set capturing to false after all captures\n                        if (!capturing && currentIndex < times) {\n                            return; // Stay in capturing state between dots\n                        }\n                        setIsCapturing(capturing);\n                    },\n                    captureCount,\n                    setCaptureCount,\n                    postCountdownDelay: 800\n                });\n                if (result && result.success) {\n                    successCount++;\n                    console.log(\"Successfully completed capture \".concat(currentIndex));\n                } else {\n                    console.warn(\"Capture \".concat(currentIndex, \" may have failed:\"), result);\n                }\n                // Wait between captures - but only if there are more captures to go\n                if (currentIndex < times) {\n                    setProcessStatus(\"Waiting \".concat(delay, \"s before next capture...\"));\n                    console.log(\"Waiting \".concat(delay, \"s before next capture...\"));\n                    await new Promise((resolve)=>setTimeout(resolve, delay * 1000));\n                }\n            }\n            // Completion notification\n            setProcessStatus(\"Random capture sequence completed: \".concat(successCount, \"/\").concat(times, \" captures successful\"));\n            setRemainingCaptures(0);\n            console.log(\"Completed all captures: \".concat(successCount, \"/\").concat(times, \" successful\"));\n        } catch (error) {\n            console.error(\"Random sequence error:\", error);\n            setProcessStatus(\"Random sequence failed: \".concat(error.message));\n        } finally{\n            setIsCapturing(false);\n            setTimeout(()=>{\n                cleanupCanvas();\n            }, 3000);\n            const canvas = document.querySelector('#tracking-canvas');\n            if (canvas) {\n                restoreCanvasToContainer(canvas);\n            }\n            // Show TopBar again\n            setTimeout(()=>{\n                if (typeof onActionClick === 'function') {\n                    onActionClick('toggleTopBar', true);\n                } else if ( true && window.toggleTopBar) {\n                    window.toggleTopBar(true);\n                }\n            }, 1000);\n        }\n    };\n    const handleRandomDot = async ()=>{\n        if (isCapturing) return;\n        try {\n            const canvas = ensureCanvasExists();\n            if (!canvas) {\n                console.error('Failed to create canvas for random dot');\n                return;\n            }\n            // Use the consolidated function with random position\n            await handleDotProcess({\n                useRandomPosition: true,\n                onStatusUpdate: (status)=>{\n                    if (status.processStatus) setProcessStatus(status.processStatus);\n                    if (status.isCapturing !== undefined) setIsCapturing(status.isCapturing);\n                },\n                toggleTopBar: (show)=>{\n                    if (typeof onActionClick === 'function') {\n                        onActionClick('toggleTopBar', show);\n                    }\n                },\n                triggerCameraAccess,\n                setIsCapturing,\n                captureCount,\n                setCaptureCount: setCaptureCount,\n                postCountdownDelay: 1000\n            });\n        } catch (error) {\n            console.error('Random dot error:', error);\n        } finally{\n            // Clean up canvas after process completes\n            setTimeout(()=>{\n                cleanupCanvas();\n            }, 2000); // Wait 2 seconds before cleanup\n        }\n    };\n    const makeCanvasFullscreen = (canvas)=>{\n        if (!canvas) return null;\n        // Save original state if not already saved\n        if (!canvas._originalState) {\n            canvas._originalState = {\n                parent: canvas.parentElement,\n                position: canvas.style.position,\n                top: canvas.style.top,\n                left: canvas.style.left,\n                width: canvas.style.width,\n                height: canvas.style.height,\n                zIndex: canvas.style.zIndex,\n                canvasWidth: canvas.width,\n                canvasHeight: canvas.height\n            };\n        }\n        // Move to body and make fullscreen\n        document.body.appendChild(canvas);\n        canvas.style.position = 'fixed';\n        canvas.style.top = '0';\n        canvas.style.left = '0';\n        canvas.style.width = '100vw';\n        canvas.style.height = '100vh';\n        canvas.style.zIndex = '10';\n        canvas.style.backgroundColor = 'white';\n        // Set canvas dimensions to match window\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        // Clear with white background\n        const ctx = canvas.getContext('2d');\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        return canvas;\n    };\n    // Load calibration setup\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"ActionButtonGroupInner.useEffect\": ()=>{\n            if (false) {}\n            const setupCalibration = {\n                \"ActionButtonGroupInner.useEffect.setupCalibration\": async ()=>{\n                    try {\n                        const { default: CalibrateHandler } = await __webpack_require__.e(/*! import() */ \"_pages-dir-browser_components_collected-dataset-customized_Action_CalibrateHandler_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../../components/collected-dataset-customized/Action/CalibrateHandler */ \"(pages-dir-browser)/./components/collected-dataset-customized/Action/CalibrateHandler.js\"));\n                        const canvas = getMainCanvas();\n                        if (!canvas) {\n                            console.warn(\"Canvas not available during setupCalibration\");\n                            return;\n                        }\n                        if (canvas) {\n                            makeCanvasFullscreen(canvas);\n                        }\n                        // console.log('Canvas size:', canvas.width, canvas.height);\n                        const points = (0,_components_collected_dataset_customized_Action_CalibratePoints__WEBPACK_IMPORTED_MODULE_3__.generateCalibrationPoints)(canvas.width, canvas.height);\n                        // console.log('Generated calibration points:', points);\n                        setCalibrationPoints(points);\n                        const calibrateHandler = new CalibrateHandler({\n                            canvasRef: {\n                                current: canvas\n                            },\n                            calibrationPoints: points,\n                            toggleTopBar: {\n                                \"ActionButtonGroupInner.useEffect.setupCalibration\": (show)=>onActionClick === null || onActionClick === void 0 ? void 0 : onActionClick('toggleTopBar', show)\n                            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"],\n                            setOutputText: {\n                                \"ActionButtonGroupInner.useEffect.setupCalibration\": (status)=>{\n                                    setProcessStatus(status);\n                                }\n                            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"],\n                            captureCounter: captureCount,\n                            setCaptureCounter: {\n                                \"ActionButtonGroupInner.useEffect.setupCalibration\": (newCounter)=>{\n                                    if (typeof newCounter === 'function') {\n                                        setCaptureCount({\n                                            \"ActionButtonGroupInner.useEffect.setupCalibration\": (prev)=>newCounter(prev)\n                                        }[\"ActionButtonGroupInner.useEffect.setupCalibration\"]);\n                                    } else {\n                                        setCaptureCount(newCounter);\n                                    }\n                                }\n                            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"],\n                            captureFolder: 'eye_tracking_captures',\n                            onComplete: {\n                                \"ActionButtonGroupInner.useEffect.setupCalibration\": ()=>{\n                                    setIsCapturing(false);\n                                    setProcessStatus('Calibration completed');\n                                }\n                            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"]\n                        });\n                        setCalibrationHandler({\n                            handleAction: {\n                                \"ActionButtonGroupInner.useEffect.setupCalibration\": async ()=>{\n                                    setIsCapturing(true);\n                                    setProcessStatus('Starting calibration...');\n                                    await calibrateHandler.startCalibration();\n                                    setIsCapturing(false);\n                                }\n                            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"]\n                        });\n                        if (canvas) {\n                            restoreCanvasSize(canvas);\n                        }\n                    } catch (err) {\n                        console.error('Error initializing calibration:', err);\n                    }\n                }\n            }[\"ActionButtonGroupInner.useEffect.setupCalibration\"];\n            setupCalibration();\n        }\n    }[\"ActionButtonGroupInner.useEffect\"], [\n        captureCount,\n        onActionClick\n    ]);\n    // Clear All Button - Reset everything\n    const handleClearAll = ()=>{\n        // Clear canvas content\n        const canvas = document.querySelector('#tracking-canvas');\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            // Restore canvas to container mode\n            restoreCanvasToContainer(canvas);\n        }\n        // Reset states\n        setProcessStatus('');\n        setRemainingCaptures(0);\n        setIsCapturing(false);\n        setCountdownValue(null);\n        setShowCanvas(true);\n        setCurrentDot(null);\n    };\n    // Toggle Head Pose visualization\n    const handleToggleHeadPose = ()=>{\n        const newHeadPoseState = !showHeadPose;\n        setShowHeadPose(newHeadPoseState);\n        setProcessStatus(\"Head pose visualization \".concat(newHeadPoseState ? 'enabled' : 'disabled'));\n        // Call the parent handler to update processor options\n        if (onActionClick) {\n            onActionClick('headPose');\n        }\n        // Update videoProcessor options directly if available\n        if ( true && window.videoProcessor) {\n            window.videoProcessor.updateOptions({\n                showHeadPose: newHeadPoseState\n            });\n        // console.log(`Updated backend head pose: ${newHeadPoseState}`);\n        }\n    };\n    // Toggle Bounding Box visualization\n    const handleToggleBoundingBox = ()=>{\n        const newBoundingBoxState = !showBoundingBox;\n        setShowBoundingBox(newBoundingBoxState);\n        setProcessStatus(\"Bounding box \".concat(newBoundingBoxState ? 'shown' : 'hidden'));\n        // Call the parent handler to update processor options\n        if (onActionClick) {\n            onActionClick('boundingBox');\n        }\n        // Update videoProcessor options directly if available\n        if ( true && window.videoProcessor) {\n            window.videoProcessor.updateOptions({\n                showBoundingBox: newBoundingBoxState\n            });\n        // console.log(`Updated backend bounding box: ${newBoundingBoxState}`);\n        }\n    };\n    // Toggle Mask visualization\n    const handleToggleMask = ()=>{\n        const newMaskState = !showMask;\n        setShowMask(newMaskState);\n        setProcessStatus(\"Mask \".concat(newMaskState ? 'shown' : 'hidden'));\n        // Call the parent handler to update processor options\n        if (onActionClick) {\n            onActionClick('mask');\n        }\n        // Update videoProcessor options directly if available\n        if ( true && window.videoProcessor) {\n            window.videoProcessor.updateOptions({\n                showMask: newMaskState\n            });\n        // console.log(`Updated backend mask: ${newMaskState}`);\n        }\n    };\n    // Toggle Parameters display\n    const handleToggleParameters = ()=>{\n        const newParametersState = !showParameters;\n        setShowParameters(newParametersState);\n        setProcessStatus(\"Parameters \".concat(newParametersState ? 'shown' : 'hidden'));\n        // Call the parent handler to update processor options\n        if (onActionClick) {\n            onActionClick('parameters');\n        }\n        // Update videoProcessor options directly if available\n        if ( true && window.videoProcessor) {\n            window.videoProcessor.updateOptions({\n                showParameters: newParametersState\n            });\n        // console.log(`Updated backend parameters: ${newParametersState}`);\n        }\n    };\n    // Toggle camera preview\n    const handleToggleCamera = ()=>{\n        const newCameraState = !isCameraActive;\n        setIsCameraActive(newCameraState);\n        // Call the parent handler with 'preview' action\n        if (onActionClick) {\n            onActionClick('preview', newCameraState); // Pass the new state\n        } else {\n            // Fallback to direct trigger if no action handler\n            setShowPermissionPopup(true);\n        }\n        // If turning on camera, ensure we apply current visualization settings\n        if (newCameraState && \"object\" !== 'undefined' && window.videoProcessor) {\n            // Wait a short moment to ensure the video element is ready\n            setTimeout(()=>{\n                if (window.videoProcessor) {\n                    window.videoProcessor.updateOptions({\n                        showHeadPose,\n                        showBoundingBox,\n                        showMask,\n                        showParameters\n                    });\n                }\n            }, 100);\n        }\n    };\n    // Add back button handler\n    const handleGoBack = ()=>{\n        router.push('/');\n    };\n    // Mobile layout - 2x5 grid\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        children: [\n            isCompactMode ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"grid grid-cols-2 gap-2 mb-4\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {}, void 0, false, {\n                    fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                    lineNumber: 1570,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                lineNumber: 1569,\n                columnNumber: 9\n            }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"grid grid-cols-2 gap-2\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {}, void 0, false, {\n                    fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                    lineNumber: 1574,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                lineNumber: 1573,\n                columnNumber: 9\n            }, undefined),\n            showPermissionPopup && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"camera-permission-popup\",\n                style: {\n                    position: 'fixed',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%',\n                    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    zIndex: 15\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"camera-permission-dialog\",\n                    style: {\n                        width: '400px',\n                        backgroundColor: 'white',\n                        borderRadius: '8px',\n                        padding: '20px',\n                        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)'\n                    },\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                            className: \"camera-permission-title\",\n                            style: {\n                                margin: '0 0 15px',\n                                fontSize: '18px',\n                                fontWeight: 'bold'\n                            },\n                            children: \"Camera Access Required\"\n                        }, void 0, false, {\n                            fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                            lineNumber: 1605,\n                            columnNumber: 13\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            className: \"camera-permission-message\",\n                            style: {\n                                margin: '0 0 20px',\n                                fontSize: '14px',\n                                lineHeight: '1.4'\n                            },\n                            children: 'This application needs access to your camera to function properly. When prompted by your browser, please click \"Allow\" to grant camera access.'\n                        }, void 0, false, {\n                            fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                            lineNumber: 1615,\n                            columnNumber: 13\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"camera-permission-buttons\",\n                            style: {\n                                display: 'flex',\n                                justifyContent: 'flex-end',\n                                gap: '10px'\n                            },\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: handlePermissionDenied,\n                                    className: \"camera-btn\",\n                                    style: {\n                                        padding: '8px 16px',\n                                        backgroundColor: '#f0f0f0',\n                                        border: 'none',\n                                        borderRadius: '4px',\n                                        cursor: 'pointer'\n                                    },\n                                    children: \"Cancel\"\n                                }, void 0, false, {\n                                    fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                                    lineNumber: 1633,\n                                    columnNumber: 15\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: handlePermissionAccepted,\n                                    className: \"camera-btn\",\n                                    style: {\n                                        padding: '8px 16px',\n                                        backgroundColor: '#0066cc',\n                                        color: 'white',\n                                        border: 'none',\n                                        borderRadius: '4px',\n                                        cursor: 'pointer'\n                                    },\n                                    children: \"Continue\"\n                                }, void 0, false, {\n                                    fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                                    lineNumber: 1646,\n                                    columnNumber: 15\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                            lineNumber: 1625,\n                            columnNumber: 13\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                    lineNumber: 1595,\n                    columnNumber: 11\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n                lineNumber: 1580,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n        lineNumber: 1567,\n        columnNumber: 5\n    }, undefined);\n}, \"IG9XEuSQYIZZfFAGWnodi+4SOx0=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_6__.useRouter,\n        _adminSettings__WEBPACK_IMPORTED_MODULE_7__.useAdminSettings\n    ];\n}));\n_c1 = ActionButtonGroupInner;\nconst ActionButtonGroup = next_dynamic__WEBPACK_IMPORTED_MODULE_2___default()(_c2 = ()=>Promise.resolve(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((props, ref)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ActionButtonGroupInner, {\n            ...props,\n            ref: ref\n        }, void 0, false, {\n            fileName: \"/app/pages/collected-dataset-customized/components-gui/actionButton.js\",\n            lineNumber: 1668,\n            columnNumber: 30\n        }, undefined))), {\n    ssr: false\n});\n_c3 = ActionButtonGroup;\n// Create a client-only version of ActionButtonGroup\n// const ActionButtonGroup = dynamic(() => Promise.resolve(ActionButtonGroupInner), { ssr: false });\n// Add default export component\nfunction ActionButtonPage() {\n    return null; // This is a utility file, so we don't need to render anything\n}\n_c4 = ActionButtonPage;\n\n// Utility function to easily manage canvas operations\nconst canvasUtils = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)({\n    \"useMemo[canvasUtils]\": ()=>({\n            // Get or create canvas\n            getCanvas: ({\n                \"useMemo[canvasUtils]\": ()=>canvasManager.getCanvas() || canvasManager.createCanvas()\n            })[\"useMemo[canvasUtils]\"],\n            // Enter fullscreen mode\n            enterFullscreen: ({\n                \"useMemo[canvasUtils]\": ()=>{\n                    canvasManager.enterFullscreen();\n                    return canvasManager.getCanvas();\n                }\n            })[\"useMemo[canvasUtils]\"],\n            // Exit fullscreen mode\n            exitFullscreen: ({\n                \"useMemo[canvasUtils]\": ()=>{\n                    canvasManager.exitFullscreen();\n                    return canvasManager.getCanvas();\n                }\n            })[\"useMemo[canvasUtils]\"],\n            // Clear canvas\n            clear: ({\n                \"useMemo[canvasUtils]\": ()=>{\n                    canvasManager.clear();\n                }\n            })[\"useMemo[canvasUtils]\"],\n            // Draw dot at position\n            drawDot: ({\n                \"useMemo[canvasUtils]\": function(x, y) {\n                    let radius = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 12;\n                    const canvas = canvasManager.getCanvas();\n                    if (!canvas) return false;\n                    const ctx = canvas.getContext('2d');\n                    (0,_components_collected_dataset_customized_Action_countSave__WEBPACK_IMPORTED_MODULE_4__.drawRedDot)(ctx, x, y, radius, false);\n                    return true;\n                }\n            })[\"useMemo[canvasUtils]\"],\n            // Get canvas dimensions\n            getDimensions: ({\n                \"useMemo[canvasUtils]\": ()=>{\n                    const canvas = canvasManager.getCanvas();\n                    if (!canvas) return {\n                        width: 0,\n                        height: 0\n                    };\n                    return {\n                        width: canvas.width,\n                        height: canvas.height\n                    };\n                }\n            })[\"useMemo[canvasUtils]\"],\n            // Check if canvas is in fullscreen\n            isFullscreen: ({\n                \"useMemo[canvasUtils]\": ()=>canvasManager.isInFullscreen()\n            })[\"useMemo[canvasUtils]\"],\n            // Update canvas size to match container\n            resizeToContainer: ({\n                \"useMemo[canvasUtils]\": (container)=>{\n                    const canvas = canvasManager.getCanvas();\n                    if (!canvas || !container) return false;\n                    const rect = container.getBoundingClientRect();\n                    canvas.width = rect.width || container.clientWidth || 800;\n                    canvas.height = rect.height || container.clientHeight || 600;\n                    // Clear and redraw white background\n                    const ctx = canvas.getContext('2d');\n                    ctx.fillStyle = 'white';\n                    ctx.fillRect(0, 0, canvas.width, canvas.height);\n                    return true;\n                }\n            })[\"useMemo[canvasUtils]\"]\n        })\n}[\"useMemo[canvasUtils]\"], []);\n// Make canvas utilities globally available\n(0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n    if (true) {\n        window.canvasUtils = canvasUtils;\n    }\n    return ()=>{\n        if (true) {\n            delete window.canvasUtils;\n        }\n    };\n}, [\n    canvasUtils\n]);\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"ActionButton\");\n$RefreshReg$(_c1, \"ActionButtonGroupInner\");\n$RefreshReg$(_c2, \"ActionButtonGroup$dynamic\");\n$RefreshReg$(_c3, \"ActionButtonGroup\");\n$RefreshReg$(_c4, \"ActionButtonPage\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL3BhZ2VzL2NvbGxlY3RlZC1kYXRhc2V0LWN1c3RvbWl6ZWQvY29tcG9uZW50cy1ndWkvYWN0aW9uQnV0dG9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXFHO0FBQ2xFO0FBQ2lGO0FBT3pDO0FBQzZCO0FBQ2hFO0FBQ1c7QUFFbkQsOEJBQThCO0FBQzlCLE1BQU1pQixVQUFVLENBQUNDLE1BQU1DO0lBQ3JCLElBQUlELFNBQVNDLE1BQU0sT0FBTztJQUMxQixJQUFJLE9BQU9ELFNBQVMsWUFBWSxPQUFPQyxTQUFTLFVBQVUsT0FBTztJQUNqRSxJQUFJRCxTQUFTLFFBQVFDLFNBQVMsTUFBTSxPQUFPO0lBRTNDLE1BQU1DLFFBQVFDLE9BQU9DLElBQUksQ0FBQ0o7SUFDMUIsTUFBTUssUUFBUUYsT0FBT0MsSUFBSSxDQUFDSDtJQUUxQixJQUFJQyxNQUFNSSxNQUFNLEtBQUtELE1BQU1DLE1BQU0sRUFBRSxPQUFPO0lBRTFDLE9BQU9KLE1BQU1LLEtBQUssQ0FBQ0MsQ0FBQUEsTUFDakJILE1BQU1JLFFBQVEsQ0FBQ0QsUUFBUVQsUUFBUUMsSUFBSSxDQUFDUSxJQUFJLEVBQUVQLElBQUksQ0FBQ08sSUFBSTtBQUV2RDtBQUVBLDBEQUEwRDtBQUMxRCxNQUFNRSxlQUFlO1FBQUMsRUFBRUMsSUFBSSxFQUFFQyxlQUFlLEVBQUVDLE9BQU8sRUFBRUMsY0FBYyxFQUFFLEVBQUVDLFdBQVcsS0FBSyxFQUFFQyxTQUFTLEtBQUssRUFBRTs7SUFDMUcsTUFBTSxDQUFDQyxlQUFlQyxpQkFBaUIsR0FBR25DLCtDQUFRQSxDQUFDO0lBQ25ELE1BQU0sRUFBRW9DLFFBQVEsRUFBRSxHQUFHckIsZ0VBQWdCQTtJQUNyQyxNQUFNLENBQUNzQixlQUFlQyxpQkFBaUIsR0FBR3RDLCtDQUFRQSxDQUFDO0lBQ25ELE1BQU0sQ0FBQ3VDLGFBQWFDLGVBQWUsR0FBR3hDLCtDQUFRQSxDQUFDO0lBQy9DLE1BQU0sQ0FB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NkIsRUFBRTtZQUNqQyxPQUFPOVAsT0FBTzhQLFdBQVc7UUFDM0I7SUFDRjtBQUNGLEdBQUc7SUFBQ0E7Q0FBWSIsInNvdXJjZXMiOlsiL2FwcC9wYWdlcy9jb2xsZWN0ZWQtZGF0YXNldC1jdXN0b21pemVkL2NvbXBvbmVudHMtZ3VpL2FjdGlvbkJ1dHRvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgdXNlUmVmLCBmb3J3YXJkUmVmLCB1c2VJbXBlcmF0aXZlSGFuZGxlLCB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGR5bmFtaWMgZnJvbSAnbmV4dC9keW5hbWljJztcbmltcG9ydCB7IGdlbmVyYXRlQ2FsaWJyYXRpb25Qb2ludHMgfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL2NvbGxlY3RlZC1kYXRhc2V0LWN1c3RvbWl6ZWQvQWN0aW9uL0NhbGlicmF0ZVBvaW50cyc7XG5pbXBvcnQgeyBcbiAgc2hvd0NhcHR1cmVQcmV2aWV3LCBcbiAgZHJhd1JlZERvdCwgXG4gIGdldFJhbmRvbVBvc2l0aW9uLFxuICBjcmVhdGVDb3VudGRvd25FbGVtZW50LFxuICBydW5Db3VudGRvd25cbn0gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9jb2xsZWN0ZWQtZGF0YXNldC1jdXN0b21pemVkL0FjdGlvbi9jb3VudFNhdmUnO1xuaW1wb3J0IHsgY2FwdHVyZUltYWdlc0F0UG9pbnQgfSBmcm9tICcuLi8uLi8uLi9jb21wb25lbnRzL2NvbGxlY3RlZC1kYXRhc2V0LWN1c3RvbWl6ZWQvSGVscGVyL3NhdmVmaWxlJztcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gJ25leHQvcm91dGVyJztcbmltcG9ydCB7IHVzZUFkbWluU2V0dGluZ3MgfSBmcm9tICcuL2FkbWluU2V0dGluZ3MnO1xuXG4vLyBBZGQgZGVlcCBjb21wYXJpc29uIHV0aWxpdHlcbmNvbnN0IGlzRXF1YWwgPSAob2JqMSwgb2JqMikgPT4ge1xuICBpZiAob2JqMSA9PT0gb2JqMikgcmV0dXJuIHRydWU7XG4gIGlmICh0eXBlb2Ygb2JqMSAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iajIgIT09ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7XG4gIGlmIChvYmoxID09PSBudWxsIHx8IG9iajIgPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgXG4gIGNvbnN0IGtleXMxID0gT2JqZWN0LmtleXMob2JqMSk7XG4gIGNvbnN0IGtleXMyID0gT2JqZWN0LmtleXMob2JqMik7XG4gIFxuICBpZiAoa2V5czEubGVuZ3RoICE9PSBrZXlzMi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgXG4gIHJldHVybiBrZXlzMS5ldmVyeShrZXkgPT4gXG4gICAga2V5czIuaW5jbHVkZXMoa2V5KSAmJiBpc0VxdWFsKG9iajFba2V5XSwgb2JqMltrZXldKVxuICApO1xufTtcblxuLy8gQ3JlYXRlIGEgYmFzaWMgQWN0aW9uQnV0dG9uIGNvbXBvbmVudCB3aXRoIG9wdGltaXphdGlvblxuY29uc3QgQWN0aW9uQnV0dG9uID0gKHsgdGV4dCwgYWJicmV2aWF0ZWRUZXh0LCBvbkNsaWNrLCBjdXN0b21DbGFzcyA9ICcnLCBkaXNhYmxlZCA9IGZhbHNlLCBhY3RpdmUgPSBmYWxzZSB9KSA9PiB7XG4gIGNvbnN0IFtpc0FiYnJldmlhdGVkLCBzZXRJc0FiYnJldmlhdGVkXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgeyBzZXR0aW5ncyB9ID0gdXNlQWRtaW5TZXR0aW5ncygpO1xuICBjb25zdCBbY3VycmVudFVzZXJJZCwgc2V0Q3VycmVudFVzZXJJZF0gPSB1c2VTdGF0ZSgnZGVmYXVsdCcpO1xuICBjb25zdCBbaXNDYXB0dXJpbmcsIHNldElzQ2FwdHVyaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2NhcHR1cmVDb3VudGVyLCBzZXRDYXB0dXJlQ291bnRlcl0gPSB1c2VTdGF0ZSgxKTtcbiAgY29uc3QgW3Byb2Nlc3NTdGF0dXMsIHNldFByb2Nlc3NTdGF0dXNdID0gdXNlU3RhdGUoJycpO1xuXG4gIC8vIE1lbW9pemUgYnV0dG9uIHByb3BzIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgcmUtcmVuZGVyc1xuICBjb25zdCBidXR0b25Qcm9wcyA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICBjbGFzc05hbWU6IGBhY3Rpb24tYnV0dG9uICR7Y3VzdG9tQ2xhc3N9ICR7aXNBYmJyZXZpYXRlZCA/ICdhYmJyZXZpYXRlZCcgOiAnJ30gJHthY3RpdmUgPyAnYWN0aXZlJyA6ICcnfWAsXG4gICAgb25DbGljayxcbiAgICBkaXNhYmxlZCxcbiAgICB0aXRsZTogdGV4dFxuICB9KSwgW2N1c3RvbUNsYXNzLCBpc0FiYnJldmlhdGVkLCBhY3RpdmUsIG9uQ2xpY2ssIGRpc2FibGVkLCB0ZXh0XSk7XG5cbiAgLy8gQ2hlY2sgd2luZG93IHNpemUgYW5kIHNldCBhYmJyZXZpYXRlZCBtb2RlIHdpdGggZGVib3VuY2VcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICBcbiAgICBsZXQgdGltZW91dElkO1xuICAgIGNvbnN0IGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICAgIHNldElzQWJicmV2aWF0ZWQod2lkdGggPCA3NjgpO1xuICAgICAgfSwgMTAwKTtcbiAgICB9O1xuICAgIFxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgIGhhbmRsZVJlc2l6ZSgpOyAvLyBJbml0aWFsIGNhbGxcbiAgICBcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgLy8gQWRkIGVmZmVjdCB0byBsaXN0ZW4gZm9yIHVzZXIgSUQgY2hhbmdlcyB3aXRoIG9wdGltaXphdGlvblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZVVzZXJJZENoYW5nZSA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50LmRldGFpbCAmJiBldmVudC5kZXRhaWwudHlwZSA9PT0gJ3VzZXJJZENoYW5nZScpIHtcbiAgICAgICAgY29uc3QgbmV3VXNlcklkID0gZXZlbnQuZGV0YWlsLnVzZXJJZDtcbiAgICAgICAgaWYgKG5ld1VzZXJJZCAhPT0gY3VycmVudFVzZXJJZCkge1xuICAgICAgICAgIHNldEN1cnJlbnRVc2VySWQobmV3VXNlcklkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndXNlcklkQ2hhbmdlJywgaGFuZGxlVXNlcklkQ2hhbmdlKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VzZXJJZENoYW5nZScsIGhhbmRsZVVzZXJJZENoYW5nZSk7XG4gICAgfTtcbiAgfSwgW2N1cnJlbnRVc2VySWRdKTtcblxuICByZXR1cm4gKFxuICAgIDxidXR0b24gey4uLmJ1dHRvblByb3BzfT5cbiAgICAgIHtpc0FiYnJldmlhdGVkID8gYWJicmV2aWF0ZWRUZXh0IDogdGV4dH1cbiAgICAgIHtwcm9jZXNzU3RhdHVzICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9jZXNzLXN0YXR1c1wiPlxuICAgICAgICAgIHtwcm9jZXNzU3RhdHVzfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9idXR0b24+XG4gICk7XG59O1xuXG4vLyBDcmVhdGUgdGhlIEFjdGlvbkJ1dHRvbkdyb3VwIGNvbXBvbmVudCB3aXRoIGNsaWVudC1zaWRlIG9ubHkgcmVuZGVyaW5nIGFuZCBvcHRpbWl6YXRpb25cbmNvbnN0IEFjdGlvbkJ1dHRvbkdyb3VwSW5uZXIgPSBmb3J3YXJkUmVmKCh7IHRyaWdnZXJDYW1lcmFBY2Nlc3MsIGlzQ29tcGFjdE1vZGUsIG9uQWN0aW9uQ2xpY2sgfSwgcmVmKSA9PiB7XG4gIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuICBjb25zdCB7IHNldHRpbmdzLCB1cGRhdGVTZXR0aW5ncyB9ID0gdXNlQWRtaW5TZXR0aW5ncyhyZWYpO1xuICBcbiAgLy8gU3RhdGUgZm9yIGJ1dHRvbiBhY3Rpb25zXG4gIGNvbnN0IFtyYW5kb21UaW1lcywgc2V0UmFuZG9tVGltZXNdID0gdXNlU3RhdGUoMSk7XG4gIGNvbnN0IFtkZWxheVNlY29uZHMsIHNldERlbGF5U2Vjb25kc10gPSB1c2VTdGF0ZSgzKTtcbiAgY29uc3QgY2FudmFzUmVmID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBbcHJvY2Vzc1N0YXR1cywgc2V0UHJvY2Vzc1N0YXR1c10gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtjb3VudGRvd25WYWx1ZSwgc2V0Q291bnRkb3duVmFsdWVdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFtjdXJyZW50RG90LCBzZXRDdXJyZW50RG90XSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbY2FsaWJyYXRpb25Qb2ludHMsIHNldENhbGlicmF0aW9uUG9pbnRzXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW3JlbWFpbmluZ0NhcHR1cmVzLCBzZXRSZW1haW5pbmdDYXB0dXJlc10gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgW3Nob3dDYW52YXMsIHNldFNob3dDYW52YXNdID0gdXNlU3RhdGUodHJ1ZSk7XG4gIFxuICAvLyBUcmFjayB0aGUgY2FwdHVyZSBjb3VudFxuICBjb25zdCBbY2FsaWJyYXRpb25IYW5kbGVyLCBzZXRDYWxpYnJhdGlvbkhhbmRsZXJdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFtjYXB0dXJlQ291bnQsIHNldENhcHR1cmVDb3VudF0gPSB1c2VTdGF0ZSgxKTtcbiAgY29uc3QgW2lzQ2FwdHVyaW5nLCBzZXRJc0NhcHR1cmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIFxuICAvLyBUb2dnbGUgc3RhdGVzXG4gIGNvbnN0IFtzaG93SGVhZFBvc2UsIHNldFNob3dIZWFkUG9zZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtzaG93Qm91bmRpbmdCb3gsIHNldFNob3dCb3VuZGluZ0JveF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtzaG93TWFzaywgc2V0U2hvd01hc2tdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbc2hvd1BhcmFtZXRlcnMsIHNldFNob3dQYXJhbWV0ZXJzXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2lzQ2FtZXJhQWN0aXZlLCBzZXRJc0NhbWVyYUFjdGl2ZV0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGNvbnN0IFtzaG93UGVybWlzc2lvblBvcHVwLCBzZXRTaG93UGVybWlzc2lvblBvcHVwXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgW2N1cnJlbnRVc2VySWQsIHNldEN1cnJlbnRVc2VySWRdID0gdXNlU3RhdGUoJ2RlZmF1bHQnKTtcblxuICAvLyBBZGQgY2FjaGUgZm9yIHNldHRpbmdzXG4gIGNvbnN0IHNldHRpbmdzQ2FjaGUgPSB1c2VSZWYobmV3IE1hcCgpKTtcbiAgY29uc3QgbGFzdFNldHRpbmdzVXBkYXRlID0gdXNlUmVmKG5ldyBNYXAoKSk7XG5cblxuXG4gIFxuICAvLyBPcHRpbWl6ZSBzZXR0aW5ncyB1cGRhdGVzXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHNldHRpbmdzICYmIGN1cnJlbnRVc2VySWQgJiYgc2V0dGluZ3NbY3VycmVudFVzZXJJZF0pIHtcbiAgICAgIGNvbnN0IHVzZXJTZXR0aW5ncyA9IHNldHRpbmdzW2N1cnJlbnRVc2VySWRdO1xuICAgICAgY29uc3QgY2FjaGVkU2V0dGluZ3MgPSBzZXR0aW5nc0NhY2hlLmN1cnJlbnQuZ2V0KGN1cnJlbnRVc2VySWQpO1xuICAgICAgXG4gICAgICBpZiAoIWlzRXF1YWwoY2FjaGVkU2V0dGluZ3MsIHVzZXJTZXR0aW5ncykpIHtcbiAgICAgICAgc2V0UmFuZG9tVGltZXMoTnVtYmVyKHVzZXJTZXR0aW5ncy50aW1lc19zZXRfcmFuZG9tKSB8fCAxKTtcbiAgICAgICAgc2V0RGVsYXlTZWNvbmRzKE51bWJlcih1c2VyU2V0dGluZ3MuZGVsYXlfc2V0X3JhbmRvbSkgfHwgMyk7XG4gICAgICAgIHNldHRpbmdzQ2FjaGUuY3VycmVudC5zZXQoY3VycmVudFVzZXJJZCwgdXNlclNldHRpbmdzKTtcbiAgICAgICAgbGFzdFNldHRpbmdzVXBkYXRlLmN1cnJlbnQuc2V0KGN1cnJlbnRVc2VySWQsIERhdGUubm93KCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW3NldHRpbmdzLCBjdXJyZW50VXNlcklkXSk7XG5cbiAgLy8gTGlzdGVuIGZvciB1c2VyIElEIGNoYW5nZXNcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVVc2VySWRDaGFuZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC5kZXRhaWwgJiYgZXZlbnQuZGV0YWlsLnR5cGUgPT09ICd1c2VySWRDaGFuZ2UnKSB7XG4gICAgICAgIGNvbnN0IG5ld1VzZXJJZCA9IGV2ZW50LmRldGFpbC51c2VySWQ7XG4gICAgICAgIHNldEN1cnJlbnRVc2VySWQobmV3VXNlcklkKTtcbiAgICAgICAgLy8gVXBkYXRlIHNldHRpbmdzIGZvciBuZXcgdXNlclxuICAgICAgICBpZiAoc2V0dGluZ3MgJiYgc2V0dGluZ3NbbmV3VXNlcklkXSkge1xuICAgICAgICAgIGNvbnN0IHVzZXJTZXR0aW5ncyA9IHNldHRpbmdzW25ld1VzZXJJZF07XG4gICAgICAgICAgc2V0UmFuZG9tVGltZXMoTnVtYmVyKHVzZXJTZXR0aW5ncy50aW1lc19zZXRfcmFuZG9tKSB8fCAxKTtcbiAgICAgICAgICBzZXREZWxheVNlY29uZHMoTnVtYmVyKHVzZXJTZXR0aW5ncy5kZWxheV9zZXRfcmFuZG9tKSB8fCAzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VzZXJJZENoYW5nZScsIGhhbmRsZVVzZXJJZENoYW5nZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd1c2VySWRDaGFuZ2UnLCBoYW5kbGVVc2VySWRDaGFuZ2UpO1xuICAgIH07XG4gIH0sIFtzZXR0aW5nc10pO1xuXG4gIC8vIExpc3RlbiBmb3Igc2V0dGluZ3MgdXBkYXRlc1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZVNldHRpbmdzVXBkYXRlID0gKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQuZGV0YWlsICYmIGV2ZW50LmRldGFpbC50eXBlID09PSAnY2FwdHVyZVNldHRpbmdzJykge1xuICAgICAgICBjb25zdCB7IHVzZXJJZCwgdGltZXNfc2V0X3JhbmRvbSwgZGVsYXlfc2V0X3JhbmRvbSB9ID0gZXZlbnQuZGV0YWlsO1xuICAgICAgICBpZiAodXNlcklkID09PSBjdXJyZW50VXNlcklkKSB7XG4gICAgICAgICAgaWYgKHRpbWVzX3NldF9yYW5kb20gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgbmV3VGltZXMgPSBOdW1iZXIodGltZXNfc2V0X3JhbmRvbSkgfHwgMTtcbiAgICAgICAgICAgIHNldFJhbmRvbVRpbWVzKG5ld1RpbWVzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGRlbGF5X3NldF9yYW5kb20gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgbmV3RGVsYXkgPSBOdW1iZXIoZGVsYXlfc2V0X3JhbmRvbSkgfHwgMztcbiAgICAgICAgICAgIHNldERlbGF5U2Vjb25kcyhuZXdEZWxheSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2FwdHVyZVNldHRpbmdzVXBkYXRlJywgaGFuZGxlU2V0dGluZ3NVcGRhdGUpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2FwdHVyZVNldHRpbmdzVXBkYXRlJywgaGFuZGxlU2V0dGluZ3NVcGRhdGUpO1xuICAgIH07XG4gIH0sIFtjdXJyZW50VXNlcklkXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBNYWtlIGZ1bmN0aW9ucyBnbG9iYWxseSBhY2Nlc3NpYmxlIGFzIGEgZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHdpbmRvdy5hY3Rpb25CdXR0b25GdW5jdGlvbnMgPSB7XG4gICAgICAgIGhhbmRsZVJhbmRvbURvdCxcbiAgICAgICAgaGFuZGxlU2V0UmFuZG9tLFxuICAgICAgICBoYW5kbGVTZXRDYWxpYnJhdGUsXG4gICAgICAgIGhhbmRsZUNsZWFyQWxsXG4gICAgICB9O1xuICAgICAgLy8gY29uc29sZS5sb2coJ0FjdGlvbiBidXR0b24gZnVuY3Rpb25zIGV4cG9zZWQgdG8gd2luZG93LmFjdGlvbkJ1dHRvbkZ1bmN0aW9ucycpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRlbGV0ZSB3aW5kb3cuYWN0aW9uQnV0dG9uRnVuY3Rpb25zO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBPbmx5IGluaXRpYWxpemUgaWYgY2FudmFzIGRvZXNuJ3QgZXhpc3RcbiAgICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0cmFja2luZy1jYW52YXMnKSkge1xuICAgICAgY29uc3QgY2FudmFzID0gZ2V0TWFpbkNhbnZhcygpO1xuICAgICAgY29uc29sZS5sb2coJ0NhbnZhcyBpbml0aWFsaXplZDonLCBjYW52YXMgPyAnc3VjY2VzcycgOiAnZmFpbGVkJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIENsZWFudXAgZnVuY3Rpb25cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgLy8gRG9uJ3QgcmVtb3ZlIGNhbnZhcyBvbiBjbGVhbnVwIHRvIHByZXZlbnQgcmVjcmVhdGlvbiBpc3N1ZXNcbiAgICAgIGNvbnNvbGUubG9nKCdBY3Rpb25CdXR0b24gY2xlYW51cCAtIGNhbnZhcyBwcmVzZXJ2ZWQnKTtcbiAgICB9O1xuICB9LCBbXSk7XG4gIFxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgIFxuICAgIC8vIEZ1bmN0aW9uIHRvIGdldCBjb250cm9sIHZhbHVlcyBmcm9tIFRvcEJhclxuICAgIGNvbnN0IHVwZGF0ZUNvbnRyb2xWYWx1ZXMgPSAoKSA9PiB7XG4gICAgICAvLyBHZXQgdGhlIHRpbWUgaW5wdXQgZWxlbWVudFxuICAgICAgY29uc3QgdGltZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRyb2wtaW5wdXQtZmllbGRbZGF0YS1jb250cm9sPVwidGltZVwiXScpO1xuICAgICAgaWYgKHRpbWVJbnB1dCkge1xuICAgICAgICBjb25zdCB0aW1lVmFsdWUgPSBwYXJzZUludCh0aW1lSW5wdXQudmFsdWUsIDEwKTtcbiAgICAgICAgaWYgKCFpc05hTih0aW1lVmFsdWUpICYmIHRpbWVWYWx1ZSA+IDApIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnVXBkYXRpbmcgcmFuZG9tVGltZXMgdG86JywgdGltZVZhbHVlKTtcbiAgICAgICAgICBzZXRSYW5kb21UaW1lcyh0aW1lVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEdldCB0aGUgZGVsYXkgaW5wdXQgZWxlbWVudFxuICAgICAgY29uc3QgZGVsYXlJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250cm9sLWlucHV0LWZpZWxkW2RhdGEtY29udHJvbD1cImRlbGF5XCJdJyk7XG4gICAgICBpZiAoZGVsYXlJbnB1dCkge1xuICAgICAgICBjb25zdCBkZWxheVZhbHVlID0gcGFyc2VJbnQoZGVsYXlJbnB1dC52YWx1ZSwgMTApO1xuICAgICAgICBpZiAoIWlzTmFOKGRlbGF5VmFsdWUpICYmIGRlbGF5VmFsdWUgPiAwKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1VwZGF0aW5nIGRlbGF5U2Vjb25kcyB0bzonLCBkZWxheVZhbHVlKTtcbiAgICAgICAgICBzZXREZWxheVNlY29uZHMoZGVsYXlWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIC8vIEFkZCBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIGNvbnRyb2wgaW5wdXRzXG4gICAgY29uc3QgdGltZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRyb2wtaW5wdXQtZmllbGRbZGF0YS1jb250cm9sPVwidGltZVwiXScpO1xuICAgIGNvbnN0IGRlbGF5SW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udHJvbC1pbnB1dC1maWVsZFtkYXRhLWNvbnRyb2w9XCJkZWxheVwiXScpO1xuICAgIFxuICAgIGlmICh0aW1lSW5wdXQpIHtcbiAgICAgIHRpbWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB1cGRhdGVDb250cm9sVmFsdWVzKTtcbiAgICAgIHRpbWVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIHVwZGF0ZUNvbnRyb2xWYWx1ZXMpOyAvLyBBbHNvIGxpc3RlbiBmb3IgaW5wdXQgZXZlbnRzXG4gICAgfVxuICAgIFxuICAgIGlmIChkZWxheUlucHV0KSB7XG4gICAgICBkZWxheUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHVwZGF0ZUNvbnRyb2xWYWx1ZXMpO1xuICAgICAgZGVsYXlJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIHVwZGF0ZUNvbnRyb2xWYWx1ZXMpOyAvLyBBbHNvIGxpc3RlbiBmb3IgaW5wdXQgZXZlbnRzXG4gICAgfVxuICAgIFxuICAgIC8vIEluaXRpYWwgdXBkYXRlXG4gICAgdXBkYXRlQ29udHJvbFZhbHVlcygpO1xuICAgIFxuICAgIC8vIENsZWFudXAgZXZlbnQgbGlzdGVuZXJzXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmICh0aW1lSW5wdXQpIHtcbiAgICAgICAgdGltZUlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHVwZGF0ZUNvbnRyb2xWYWx1ZXMpO1xuICAgICAgICB0aW1lSW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCB1cGRhdGVDb250cm9sVmFsdWVzKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgaWYgKGRlbGF5SW5wdXQpIHtcbiAgICAgICAgZGVsYXlJbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB1cGRhdGVDb250cm9sVmFsdWVzKTtcbiAgICAgICAgZGVsYXlJbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKCdpbnB1dCcsIHVwZGF0ZUNvbnRyb2xWYWx1ZXMpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtdKTtcblxuICAvLyBJbml0aWFsaXplIGNhbnZhcyBvbiBjb21wb25lbnQgbW91bnRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBpbml0aWFsaXplQ2FudmFzID0gKCkgPT4ge1xuICAgICAgLy8gUmVtb3ZlIGFueSBleGlzdGluZyBjYW52YXNcbiAgICAgIGNvbnN0IGV4aXN0aW5nQ2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRyYWNraW5nLWNhbnZhcycpO1xuICAgICAgaWYgKGV4aXN0aW5nQ2FudmFzKSB7XG4gICAgICAgIGV4aXN0aW5nQ2FudmFzLnJlbW92ZSgpO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgbmV3IGNhbnZhc1xuICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICBjYW52YXMuY2xhc3NOYW1lID0gJ3RyYWNraW5nLWNhbnZhcyc7XG4gICAgICBjYW52YXMuaWQgPSAndHJhY2tpbmctY2FudmFzJztcbiAgICAgIGNhbnZhcy5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgd2lkdGg6IDEwMHZ3O1xuICAgICAgICBoZWlnaHQ6IDEwMHZoO1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgei1pbmRleDogNTtcbiAgICAgIGA7XG5cbiAgICAgIC8vIFNldCBjYW52YXMgZGltZW5zaW9uc1xuICAgICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgICAvLyBBZGQgY2FudmFzIHRvIGJvZHlcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2FudmFzKTtcblxuICAgICAgLy8gU3RvcmUgcmVmZXJlbmNlXG4gICAgICBjYW52YXNSZWYuY3VycmVudCA9IGNhbnZhcztcbiAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3aW5kb3cud2hpdGVTY3JlZW5DYW52YXMgPSBjYW52YXM7XG4gICAgICB9XG5cbiAgICAgIC8vIEluaXRpYWxpemUgd2l0aCB3aGl0ZSBiYWNrZ3JvdW5kXG4gICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAnd2hpdGUnO1xuICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG5cbiAgICAgIC8vIEFkZCByZXNpemUgaGFuZGxlclxuICAgICAgY29uc3QgaGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgICAgICBjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgfTtcblxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG5cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUpO1xuICAgICAgICBpZiAoY2FudmFzLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBjYW52YXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjYW52YXMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBjb25zdCBjbGVhbnVwID0gaW5pdGlhbGl6ZUNhbnZhcygpO1xuICAgIHJldHVybiBjbGVhbnVwO1xuICB9LCBbXSk7XG5cbiAgLy8gU2ltcGxpZmllZCBDYW52YXMgTWFuYWdlciAtIE1vcmUgZmxleGlibGUgYW5kIG1haW50YWluYWJsZVxuICBjbGFzcyBDYW52YXNNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHRoaXMuY2FudmFzID0gbnVsbDtcbiAgICAgIHRoaXMub3JpZ2luYWxTdGF0ZSA9IG51bGw7XG4gICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gbnVsbDtcbiAgICAgIHRoaXMuaXNGdWxsc2NyZWVuID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIG9yIGdldCBjYW52YXMgd2l0aCBhdXRvbWF0aWMgc2l6aW5nXG4gICAgY3JlYXRlQ2FudmFzKGNvbnRhaW5lciA9IG51bGwpIHtcbiAgICAgIC8vIFRyeSB0byBmaW5kIGV4aXN0aW5nIGNhbnZhcyBmaXJzdFxuICAgICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0cmFja2luZy1jYW52YXMnKTtcbiAgICAgIFxuICAgICAgaWYgKCFjYW52YXMpIHtcbiAgICAgICAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIGNhbnZhcy5jbGFzc05hbWUgPSAndHJhY2tpbmctY2FudmFzJztcbiAgICAgICAgY2FudmFzLmlkID0gJ3RyYWNraW5nLWNhbnZhcyc7XG4gICAgICB9XG5cbiAgICAgIC8vIERldGVybWluZSBjb250YWluZXJcbiAgICAgIGNvbnN0IHRhcmdldENvbnRhaW5lciA9IGNvbnRhaW5lciB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbnZhcy1jb250YWluZXInKSB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1haW4tY29udGVudCcpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHk7XG5cbiAgICAgIC8vIFNldCBpbml0aWFsIGRpbWVuc2lvbnMgYmFzZWQgb24gY29udGFpbmVyXG4gICAgICB0aGlzLnVwZGF0ZUNhbnZhc1NpemUoY2FudmFzLCB0YXJnZXRDb250YWluZXIpO1xuICAgICAgXG4gICAgICAvLyBJbml0aWFsaXplIHdpdGggd2hpdGUgYmFja2dyb3VuZFxuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuXG4gICAgICAvLyBBZGQgdG8gY29udGFpbmVyIGlmIG5vdCBhbHJlYWR5IHRoZXJlXG4gICAgICBpZiAoIWNhbnZhcy5wYXJlbnROb2RlKSB7XG4gICAgICAgIHRhcmdldENvbnRhaW5lci5hcHBlbmRDaGlsZChjYW52YXMpO1xuICAgICAgfVxuXG4gICAgICAvLyBTdG9yZSByZWZlcmVuY2VcbiAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgICAgd2luZG93LndoaXRlU2NyZWVuQ2FudmFzID0gY2FudmFzO1xuXG4gICAgICAvLyBTZXQgdXAgcmVzcG9uc2l2ZSBiZWhhdmlvclxuICAgICAgdGhpcy5zZXR1cFJlc3BvbnNpdmVDYW52YXMoY2FudmFzLCB0YXJnZXRDb250YWluZXIpO1xuXG4gICAgICBjb25zb2xlLmxvZyhgQ2FudmFzIGNyZWF0ZWQvdXBkYXRlZDogJHtjYW52YXMud2lkdGh9eCR7Y2FudmFzLmhlaWdodH1gKTtcbiAgICAgIHJldHVybiBjYW52YXM7XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIGNhbnZhcyBzaXplIHRvIG1hdGNoIGNvbnRhaW5lclxuICAgIHVwZGF0ZUNhbnZhc1NpemUoY2FudmFzLCBjb250YWluZXIpIHtcbiAgICAgIGlmICghY2FudmFzIHx8ICFjb250YWluZXIpIHJldHVybjtcblxuICAgICAgY29uc3QgcmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IHdpZHRoID0gcmVjdC53aWR0aCB8fCBjb250YWluZXIuY2xpZW50V2lkdGggfHwgODAwO1xuICAgICAgY29uc3QgaGVpZ2h0ID0gcmVjdC5oZWlnaHQgfHwgY29udGFpbmVyLmNsaWVudEhlaWdodCB8fCA2MDA7XG5cbiAgICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcblxuICAgICAgLy8gVXBkYXRlIENTUyB0byBtYXRjaFxuICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcbiAgICAgIGNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIGNhbnZhcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnd2hpdGUnO1xuICAgIH1cblxuICAgIC8vIFNldCB1cCByZXNwb25zaXZlIGNhbnZhcyB0aGF0IGFkYXB0cyB0byBjb250YWluZXIgc2l6ZVxuICAgIHNldHVwUmVzcG9uc2l2ZUNhbnZhcyhjYW52YXMsIGNvbnRhaW5lcikge1xuICAgICAgaWYgKCFjYW52YXMgfHwgIWNvbnRhaW5lcikgcmV0dXJuO1xuXG4gICAgICAvLyBSZW1vdmUgZXhpc3RpbmcgcmVzaXplIG9ic2VydmVyXG4gICAgICBpZiAodGhpcy5yZXNpemVPYnNlcnZlcikge1xuICAgICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ3JlYXRlIG5ldyByZXNpemUgb2JzZXJ2ZXJcbiAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgaWYgKGVudHJ5LnRhcmdldCA9PT0gY29udGFpbmVyKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNhbnZhc1NpemUoY2FudmFzLCBjb250YWluZXIpO1xuICAgICAgICAgICAgLy8gUmVkcmF3IHdoaXRlIGJhY2tncm91bmQgYWZ0ZXIgcmVzaXplXG4gICAgICAgICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSAnd2hpdGUnO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gT2JzZXJ2ZSBjb250YWluZXIgZm9yIHNpemUgY2hhbmdlc1xuICAgICAgdGhpcy5yZXNpemVPYnNlcnZlci5vYnNlcnZlKGNvbnRhaW5lcik7XG5cbiAgICAgIC8vIEFsc28gbGlzdGVuIGZvciB3aW5kb3cgcmVzaXplIGFzIGZhbGxiYWNrXG4gICAgICBjb25zdCBoYW5kbGVXaW5kb3dSZXNpemUgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMudXBkYXRlQ2FudmFzU2l6ZShjYW52YXMsIGNvbnRhaW5lcik7XG4gICAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICB9O1xuXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlV2luZG93UmVzaXplKTtcbiAgICAgIGNhbnZhcy5fd2luZG93UmVzaXplSGFuZGxlciA9IGhhbmRsZVdpbmRvd1Jlc2l6ZTtcbiAgICB9XG5cbiAgICAvLyBTd2l0Y2ggdG8gZnVsbHNjcmVlbiBtb2RlXG4gICAgZW50ZXJGdWxsc2NyZWVuKCkge1xuICAgICAgaWYgKCF0aGlzLmNhbnZhcykge1xuICAgICAgICB0aGlzLmNhbnZhcyA9IHRoaXMuY3JlYXRlQ2FudmFzKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNhdmUgb3JpZ2luYWwgc3RhdGVcbiAgICAgIHRoaXMub3JpZ2luYWxTdGF0ZSA9IHtcbiAgICAgICAgcGFyZW50OiB0aGlzLmNhbnZhcy5wYXJlbnRFbGVtZW50LFxuICAgICAgICBwb3NpdGlvbjogdGhpcy5jYW52YXMuc3R5bGUucG9zaXRpb24sXG4gICAgICAgIHRvcDogdGhpcy5jYW52YXMuc3R5bGUudG9wLFxuICAgICAgICBsZWZ0OiB0aGlzLmNhbnZhcy5zdHlsZS5sZWZ0LFxuICAgICAgICB3aWR0aDogdGhpcy5jYW52YXMuc3R5bGUud2lkdGgsXG4gICAgICAgIGhlaWdodDogdGhpcy5jYW52YXMuc3R5bGUuaGVpZ2h0LFxuICAgICAgICB6SW5kZXg6IHRoaXMuY2FudmFzLnN0eWxlLnpJbmRleFxuICAgICAgfTtcblxuICAgICAgLy8gTW92ZSB0byBib2R5IGFuZCBtYWtlIGZ1bGxzY3JlZW5cbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5jYW52YXMpO1xuICAgICAgXG4gICAgICAvLyBTZXQgZnVsbHNjcmVlbiBzdHlsZXNcbiAgICAgIHRoaXMuY2FudmFzLnN0eWxlLmNzc1RleHQgPSBgXG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB3aWR0aDogMTAwdnc7XG4gICAgICAgIGhlaWdodDogMTAwdmg7XG4gICAgICAgIHotaW5kZXg6IDk5OTk5O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgIGA7XG5cbiAgICAgIC8vIFNldCBjYW52YXMgZGltZW5zaW9ucyB0byB3aW5kb3cgc2l6ZVxuICAgICAgdGhpcy5jYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuICAgICAgLy8gQ2xlYXIgd2l0aCB3aGl0ZSBiYWNrZ3JvdW5kXG4gICAgICBjb25zdCBjdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICBjdHguZmlsbFJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG5cbiAgICAgIC8vIEhpZGUgVUkgZWxlbWVudHNcbiAgICAgIHRoaXMuaGlkZVVJRWxlbWVudHMoKTtcblxuICAgICAgdGhpcy5pc0Z1bGxzY3JlZW4gPSB0cnVlO1xuICAgICAgY29uc29sZS5sb2coJ0NhbnZhcyBlbnRlcmVkIGZ1bGxzY3JlZW4gbW9kZScpO1xuICAgIH1cblxuICAgIC8vIEV4aXQgZnVsbHNjcmVlbiBtb2RlXG4gICAgZXhpdEZ1bGxzY3JlZW4oKSB7XG4gICAgICBpZiAoIXRoaXMuY2FudmFzIHx8ICF0aGlzLm9yaWdpbmFsU3RhdGUpIHJldHVybjtcblxuICAgICAgLy8gU2hvdyBVSSBlbGVtZW50c1xuICAgICAgdGhpcy5zaG93VUlFbGVtZW50cygpO1xuXG4gICAgICAvLyBGaW5kIGFwcHJvcHJpYXRlIGNvbnRhaW5lclxuICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhbnZhcy1jb250YWluZXInKSB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluLWNvbnRlbnQnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keTtcblxuICAgICAgLy8gTW92ZSBjYW52YXMgYmFjayB0byBjb250YWluZXJcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmNhbnZhcyk7XG5cbiAgICAgIC8vIFJlc3RvcmUgb3JpZ2luYWwgc3R5bGVzXG4gICAgICB0aGlzLmNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgICB0aGlzLmNhbnZhcy5zdHlsZS50b3AgPSAnJztcbiAgICAgIHRoaXMuY2FudmFzLnN0eWxlLmxlZnQgPSAnJztcbiAgICAgIHRoaXMuY2FudmFzLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgdGhpcy5jYW52YXMuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgdGhpcy5jYW52YXMuc3R5bGUuekluZGV4ID0gJyc7XG4gICAgICB0aGlzLmNhbnZhcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnd2hpdGUnO1xuXG4gICAgICAvLyBVcGRhdGUgc2l6ZSB0byBtYXRjaCBjb250YWluZXJcbiAgICAgIHRoaXMudXBkYXRlQ2FudmFzU2l6ZSh0aGlzLmNhbnZhcywgY29udGFpbmVyKTtcblxuICAgICAgLy8gQ2xlYXIgd2l0aCB3aGl0ZSBiYWNrZ3JvdW5kXG4gICAgICBjb25zdCBjdHggPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICBjdHguZmlsbFJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG5cbiAgICAgIC8vIENsZWFyIG9yaWdpbmFsIHN0YXRlXG4gICAgICB0aGlzLm9yaWdpbmFsU3RhdGUgPSBudWxsO1xuICAgICAgdGhpcy5pc0Z1bGxzY3JlZW4gPSBmYWxzZTtcblxuICAgICAgY29uc29sZS5sb2coJ0NhbnZhcyBleGl0ZWQgZnVsbHNjcmVlbiBtb2RlJyk7XG4gICAgfVxuXG4gICAgLy8gSGlkZSBVSSBlbGVtZW50cyBkdXJpbmcgZnVsbHNjcmVlblxuICAgIGhpZGVVSUVsZW1lbnRzKCkge1xuICAgICAgY29uc3QgZWxlbWVudHNUb0hpZGUgPSBbXG4gICAgICAgICcudG9wYmFyJyxcbiAgICAgICAgJy5jYW52YXMtY29udGFpbmVyJywgXG4gICAgICAgICcubWFpbi1jb250ZW50JyxcbiAgICAgICAgJy5tZXRyaWNzLXBhbmVsJyxcbiAgICAgICAgJy5kaXNwbGF5LW1ldHJpY3MnLFxuICAgICAgICAnbmF2JyxcbiAgICAgICAgJ2hlYWRlcicsXG4gICAgICAgICcuYnV0dG9uLWdyb3VwcycsXG4gICAgICAgICcuY29udHJvbC1idXR0b25zJ1xuICAgICAgXTtcbiAgICAgIFxuICAgICAgZWxlbWVudHNUb0hpZGUuZm9yRWFjaChzZWxlY3RvciA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICAgIGVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLWhpZGRlbi1ieS1jYW52YXMnLCAndHJ1ZScpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFNob3cgVUkgZWxlbWVudHMgYWZ0ZXIgZnVsbHNjcmVlblxuICAgIHNob3dVSUVsZW1lbnRzKCkge1xuICAgICAgY29uc3QgaGlkZGVuRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1oaWRkZW4tYnktY2FudmFzPVwidHJ1ZVwiXScpO1xuICAgICAgaGlkZGVuRWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWhpZGRlbi1ieS1jYW52YXMnKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENsZWFyIGNhbnZhcyBjb250ZW50XG4gICAgY2xlYXIoKSB7XG4gICAgICBpZiAoIXRoaXMuY2FudmFzKSByZXR1cm47XG4gICAgICBcbiAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICBjdHguZmlsbFJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG4gICAgfVxuXG4gICAgLy8gQ2xlYW51cFxuICAgIGRlc3Ryb3koKSB7XG4gICAgICBpZiAodGhpcy5yZXNpemVPYnNlcnZlcikge1xuICAgICAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLl93aW5kb3dSZXNpemVIYW5kbGVyKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmNhbnZhcy5fd2luZG93UmVzaXplSGFuZGxlcik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5wYXJlbnROb2RlKSB7XG4gICAgICAgIHRoaXMuY2FudmFzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5jYW52YXMpO1xuICAgICAgfVxuXG4gICAgICBpZiAod2luZG93LndoaXRlU2NyZWVuQ2FudmFzID09PSB0aGlzLmNhbnZhcykge1xuICAgICAgICBkZWxldGUgd2luZG93LndoaXRlU2NyZWVuQ2FudmFzO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbnZhcyA9IG51bGw7XG4gICAgICB0aGlzLm9yaWdpbmFsU3RhdGUgPSBudWxsO1xuICAgICAgdGhpcy5pc0Z1bGxzY3JlZW4gPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBHZXQgY3VycmVudCBjYW52YXNcbiAgICBnZXRDYW52YXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYW52YXM7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgY2FudmFzIGlzIGluIGZ1bGxzY3JlZW4gbW9kZVxuICAgIGlzSW5GdWxsc2NyZWVuKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaXNGdWxsc2NyZWVuO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdsb2JhbCBjYW52YXMgbWFuYWdlciBpbnN0YW5jZSAtIGluaXRpYWxpemUgb25seSBvbmNlXG4gIGNvbnN0IGNhbnZhc01hbmFnZXIgPSB1c2VNZW1vKCgpID0+IG5ldyBDYW52YXNNYW5hZ2VyKCksIFtdKTtcblxuICAvLyBSZXBsYWNlIHRoZSBjb21wbGV4IGNhbnZhcyBmdW5jdGlvbnMgd2l0aCBzaW1wbGlmaWVkIHZlcnNpb25zXG4gIGNvbnN0IGdldE1haW5DYW52YXMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGNhbnZhc01hbmFnZXIuZ2V0Q2FudmFzKCkgfHwgY2FudmFzTWFuYWdlci5jcmVhdGVDYW52YXMoKTtcbiAgfTtcblxuICBjb25zdCBlbnN1cmVDYW52YXNFeGlzdHMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGNhbnZhc01hbmFnZXIuY3JlYXRlQ2FudmFzKCk7XG4gIH07XG5cbiAgY29uc3QgcmVzdG9yZUNhbnZhc1RvQ29udGFpbmVyID0gKGNhbnZhcykgPT4ge1xuICAgIGNhbnZhc01hbmFnZXIuZXhpdEZ1bGxzY3JlZW4oKTtcbiAgfTtcblxuICBjb25zdCBjbGVhbnVwQ2FudmFzID0gKCkgPT4ge1xuICAgIGNhbnZhc01hbmFnZXIuZGVzdHJveSgpO1xuICB9O1xuXG4gIGNvbnN0IGNsZWFyQ2FudmFzID0gKCkgPT4ge1xuICAgIGNhbnZhc01hbmFnZXIuY2xlYXIoKTtcbiAgfTtcbiAgXG4gIC8vIE1vZGlmaWVkIGhhbmRsZURvdFByb2Nlc3MgZnVuY3Rpb24gd2l0aCBpbXByb3ZlZCBkb3QgYW5kIGNvdW50ZG93biBhbGlnbm1lbnRcbiAgLy8gQ29tcGxldGUgaGFuZGxlRG90UHJvY2VzcyBmdW5jdGlvbiB3aXRoIHByb3BlciBjYW52YXMgbWFuYWdlbWVudFxuICBjb25zdCBoYW5kbGVEb3RQcm9jZXNzID0gYXN5bmMgKG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBwb3NpdGlvbixcbiAgICAgIG9uU3RhdHVzVXBkYXRlLFxuICAgICAgdG9nZ2xlVG9wQmFyLFxuICAgICAgdHJpZ2dlckNhbWVyYUFjY2VzcyxcbiAgICAgIHNldElzQ2FwdHVyaW5nLFxuICAgICAgY2FwdHVyZUNvdW50LFxuICAgICAgc2V0Q2FwdHVyZUNvdW50LFxuICAgICAgdXNlUmFuZG9tUG9zaXRpb24gPSBmYWxzZSxcbiAgICAgIHBvc3RDb3VudGRvd25EZWxheSA9IDUwMCBcbiAgICB9ID0gb3B0aW9ucztcbiAgICBcbiAgICBsZXQgY2FudmFzID0gbnVsbDtcbiAgICBsZXQga2VlcERvdFZpc2libGVJbnRlcnZhbCA9IG51bGw7XG4gICAgbGV0IGNvdW50ZG93bkVsZW1lbnQgPSBudWxsO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICAvLyBIaWRlIHRoZSBUb3BCYXIgYmVmb3JlIHNob3dpbmcgdGhlIGRvdFxuICAgICAgaWYgKHR5cGVvZiB0b2dnbGVUb3BCYXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdG9nZ2xlVG9wQmFyKGZhbHNlKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnRvZ2dsZVRvcEJhcikge1xuICAgICAgICB3aW5kb3cudG9nZ2xlVG9wQmFyKGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gU2V0IGNhcHR1cmluZyBzdGF0ZVxuICAgICAgc2V0SXNDYXB0dXJpbmcodHJ1ZSk7XG4gICAgICBcbiAgICAgIC8vIFVwZGF0ZSBzdGF0dXNcbiAgICAgIG9uU3RhdHVzVXBkYXRlPy4oe1xuICAgICAgICBwcm9jZXNzU3RhdHVzOiB1c2VSYW5kb21Qb3NpdGlvbiA/ICdHZW5lcmF0aW5nIHJhbmRvbSBkb3QuLi4nIDogJ1N0YXJ0aW5nIGRvdCBwcm9jZXNzLi4uJyxcbiAgICAgICAgaXNDYXB0dXJpbmc6IHRydWVcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBXYWl0IGZvciBVSSB1cGRhdGVzIHRvIHRha2UgZWZmZWN0XG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMjAwKSk7XG4gICAgICBcbiAgICAgIC8vIFVzZSBlbnN1cmVDYW52YXNFeGlzdHMgdG8gZ2V0IG9yIGNyZWF0ZSBjYW52YXNcbiAgICAgIGNhbnZhcyA9IGVuc3VyZUNhbnZhc0V4aXN0cygpO1xuICAgICAgaWYgKCFjYW52YXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGNyZWF0ZSBvciBmaW5kIGNhbnZhc1wiKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQ2FudmFzIGlzIGFscmVhZHkgc2V0IHRvIGZ1bGxzY3JlZW4gYnkgZW5zdXJlQ2FudmFzRXhpc3RzXG4gICAgICBjb25zdCBjYW52YXNXaWR0aCA9IGNhbnZhcy53aWR0aDtcbiAgICAgIGNvbnN0IGNhbnZhc0hlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XG4gICAgICBcbiAgICAgIC8vIEdldCBjb250ZXh0IGFuZCBjbGVhciBjYW52YXMgd2l0aCB3aGl0ZSBiYWNrZ3JvdW5kXG4gICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcbiAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KTtcbiAgICAgIFxuICAgICAgLy8gR2V0IHBvc2l0aW9uIGZvciB0aGUgZG90IC0gZWl0aGVyIHVzZSBwcm92aWRlZCBwb3NpdGlvbiBvciBnZW5lcmF0ZSByYW5kb20gb25lXG4gICAgICBjb25zdCBkb3RQb3NpdGlvbiA9IHVzZVJhbmRvbVBvc2l0aW9uIFxuICAgICAgICA/IGdldFJhbmRvbVBvc2l0aW9uKGNhbnZhcywgMjApIFxuICAgICAgICA6IHBvc2l0aW9uO1xuICAgICAgXG4gICAgICBpZiAoIWRvdFBvc2l0aW9uIHx8IHR5cGVvZiBkb3RQb3NpdGlvbi54ICE9PSAnbnVtYmVyJyB8fCB0eXBlb2YgZG90UG9zaXRpb24ueSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBkb3QgcG9zaXRpb25cIik7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIERyYXcgdGhlIGRvdFxuICAgICAgY29uc3QgZG90UmFkaXVzID0gMTI7XG4gICAgICBkcmF3UmVkRG90KGN0eCwgZG90UG9zaXRpb24ueCwgZG90UG9zaXRpb24ueSwgZG90UmFkaXVzLCBmYWxzZSk7XG4gICAgICBcbiAgICAgIC8vIENyZWF0ZSBhIHJlZHJhdyBpbnRlcnZhbCB0byBlbnN1cmUgZG90IHN0YXlzIHZpc2libGVcbiAgICAgIGtlZXBEb3RWaXNpYmxlSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIGRyYXdSZWREb3QoY3R4LCBkb3RQb3NpdGlvbi54LCBkb3RQb3NpdGlvbi55LCBkb3RSYWRpdXMsIGZhbHNlKTtcbiAgICAgIH0sIDUwKTsgIC8vIE1vcmUgZnJlcXVlbnQgdXBkYXRlcyBmb3IgcmVsaWFiaWxpdHlcbiAgICAgIFxuICAgICAgLy8gUmVtb3ZlIGFueSBleGlzdGluZyBjb3VudGRvd24gZWxlbWVudHNcbiAgICAgIGNvbnN0IGV4aXN0aW5nQ291bnRkb3ducyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kb3QtY291bnRkb3duLCAuY2FsaWJyYXRlLWNvdW50ZG93bicpO1xuICAgICAgZXhpc3RpbmdDb3VudGRvd25zLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBpZiAoZWwucGFyZW50Tm9kZSkgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gQ3JlYXRlIGEgY291bnRkb3duIGVsZW1lbnQgZGlyZWN0bHkgb24gdG9wIG9mIHRoZSBkb3RcbiAgICAgIGNvdW50ZG93bkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvdW50ZG93bkVsZW1lbnQuY2xhc3NOYW1lID0gJ2RvdC1jb3VudGRvd24nO1xuICAgICAgY291bnRkb3duRWxlbWVudC5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgIGxlZnQ6ICR7ZG90UG9zaXRpb24ueH1weDtcbiAgICAgICAgdG9wOiAke2RvdFBvc2l0aW9uLnl9cHg7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xuICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICBmb250LXNpemU6IDM2cHg7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICB0ZXh0LXNoYWRvdzogMCAwIDEwcHggd2hpdGUsIDAgMCAyMHB4IHdoaXRlO1xuICAgICAgICB6LWluZGV4OiAxMDAwMDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpO1xuICAgICAgICBib3JkZXI6IDJweCBzb2xpZCByZWQ7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgd2lkdGg6IDUwcHg7XG4gICAgICAgIGhlaWdodDogNTBweDtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGJveC1zaGFkb3c6IDAgMCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcbiAgICAgIGA7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvdW50ZG93bkVsZW1lbnQpO1xuICAgICAgXG4gICAgICAvLyBNYW51YWwgY291bnRkb3duXG4gICAgICBmb3IgKGxldCBjb3VudCA9IDM7IGNvdW50ID4gMDsgY291bnQtLSkge1xuICAgICAgICBjb3VudGRvd25FbGVtZW50LnRleHRDb250ZW50ID0gY291bnQ7XG4gICAgICAgIFxuICAgICAgICBvblN0YXR1c1VwZGF0ZT8uKHtcbiAgICAgICAgICBwcm9jZXNzU3RhdHVzOiBgQ291bnRkb3duOiAke2NvdW50fWAsXG4gICAgICAgICAgY291bnRkb3duVmFsdWU6IGNvdW50LFxuICAgICAgICAgIGlzQ2FwdHVyaW5nOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gUmVkcmF3IHRoZSBkb3QgZm9yIHJlbGlhYmlsaXR5XG4gICAgICAgIGRyYXdSZWREb3QoY3R4LCBkb3RQb3NpdGlvbi54LCBkb3RQb3NpdGlvbi55LCBkb3RSYWRpdXMsIGZhbHNlKTtcbiAgICAgICAgXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCA4MDApKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFkZGl0aW9uYWwgcmVkcmF3IGR1cmluZyBjb3VudGRvd24gdG8gZW5zdXJlIHZpc2liaWxpdHlcbiAgICAgICAgZHJhd1JlZERvdChjdHgsIGRvdFBvc2l0aW9uLngsIGRvdFBvc2l0aW9uLnksIGRvdFJhZGl1cywgZmFsc2UpO1xuICAgICAgfVxuICAgICAgXG4gICAgICAvLyBTaG93IGNoZWNrbWFya1xuICAgICAgY291bnRkb3duRWxlbWVudC50ZXh0Q29udGVudCA9IFwi4pyTXCI7XG4gICAgICAvLyBNYWtlIHN1cmUgZG90IGlzIHN0aWxsIHZpc2libGVcbiAgICAgIGRyYXdSZWREb3QoY3R4LCBkb3RQb3NpdGlvbi54LCBkb3RQb3NpdGlvbi55LCBkb3RSYWRpdXMsIGZhbHNlKTtcbiAgICAgIFxuICAgICAgLy8gUmVtb3ZlIGNvdW50ZG93biBlbGVtZW50IGFmdGVyIGRlbGF5XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKGNvdW50ZG93bkVsZW1lbnQgJiYgY291bnRkb3duRWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgY291bnRkb3duRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNvdW50ZG93bkVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9LCAzMDApO1xuICAgICAgXG4gICAgICAvLyBXYWl0IGFmdGVyIGNvdW50ZG93biBjb21wbGV0ZXNcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBwb3N0Q291bnRkb3duRGVsYXkpKTtcbiAgICAgIFxuICAgICAgLy8gRW5zdXJlIHRoZSBkb3QgaXMgc3RpbGwgdmlzaWJsZVxuICAgICAgZHJhd1JlZERvdChjdHgsIGRvdFBvc2l0aW9uLngsIGRvdFBvc2l0aW9uLnksIGRvdFJhZGl1cywgZmFsc2UpO1xuICAgICAgXG4gICAgICAvLyBDYXB0dXJlIGltYWdlcyBhdCB0aGlzIHBvaW50XG4gICAgICBjb25zdCBjYXB0dXJlUmVzdWx0ID0gYXdhaXQgY2FwdHVyZUltYWdlc0F0UG9pbnQoe1xuICAgICAgICBwb2ludDogZG90UG9zaXRpb24sXG4gICAgICAgIGNhcHR1cmVDb3VudDogY2FwdHVyZUNvdW50LFxuICAgICAgICBjYW52YXNSZWY6IHsgY3VycmVudDogY2FudmFzIH0sXG4gICAgICAgIHNldENhcHR1cmVDb3VudDogc2V0Q2FwdHVyZUNvdW50LFxuICAgICAgICBzaG93Q2FwdHVyZVByZXZpZXdcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgc3RhdHVzXG4gICAgICBvblN0YXR1c1VwZGF0ZT8uKHtcbiAgICAgICAgcHJvY2Vzc1N0YXR1czogJ0NhcHR1cmUgY29tcGxldGVkJyxcbiAgICAgICAgaXNDYXB0dXJpbmc6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgcG9zaXRpb246IGRvdFBvc2l0aW9uLFxuICAgICAgICBjYXB0dXJlUmVzdWx0XG4gICAgICB9O1xuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiBoYW5kbGVEb3RQcm9jZXNzOlwiLCBlcnJvcik7XG4gICAgICBcbiAgICAgIG9uU3RhdHVzVXBkYXRlPy4oe1xuICAgICAgICBwcm9jZXNzU3RhdHVzOiBgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gLFxuICAgICAgICBpc0NhcHR1cmluZzogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2VcbiAgICAgIH07XG4gICAgICBcbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gQ2xlYXIgcmVkcmF3IGludGVydmFsIGZpcnN0XG4gICAgICBpZiAoa2VlcERvdFZpc2libGVJbnRlcnZhbCkge1xuICAgICAgICBjbGVhckludGVydmFsKGtlZXBEb3RWaXNpYmxlSW50ZXJ2YWwpO1xuICAgICAgICBrZWVwRG90VmlzaWJsZUludGVydmFsID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gUmVtb3ZlIGNvdW50ZG93biBlbGVtZW50IGlmIGl0IHN0aWxsIGV4aXN0c1xuICAgICAgaWYgKGNvdW50ZG93bkVsZW1lbnQgJiYgY291bnRkb3duRWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgIGNvdW50ZG93bkVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjb3VudGRvd25FbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gUmVtb3ZlIGFueSByZW1haW5pbmcgY291bnRkb3duIGVsZW1lbnRzXG4gICAgICBjb25zdCByZW1haW5pbmdDb3VudGRvd25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRvdC1jb3VudGRvd24sIC5jYWxpYnJhdGUtY291bnRkb3duJyk7XG4gICAgICByZW1haW5pbmdDb3VudGRvd25zLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBpZiAoZWwucGFyZW50Tm9kZSkgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgLy8gVXNlIHJlc3RvcmVDYW52YXNUb0NvbnRhaW5lciB0byBwcm9wZXJseSByZXN0b3JlIGNhbnZhc1xuICAgICAgaWYgKGNhbnZhcykge1xuICAgICAgICByZXN0b3JlQ2FudmFzVG9Db250YWluZXIoY2FudmFzKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gU2hvdyBUb3BCYXIgYWdhaW4gYWZ0ZXIgYSBkZWxheVxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdG9nZ2xlVG9wQmFyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdG9nZ2xlVG9wQmFyKHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy50b2dnbGVUb3BCYXIpIHtcbiAgICAgICAgICB3aW5kb3cudG9nZ2xlVG9wQmFyKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9LCAxMDAwKTtcbiAgICB9XG4gIH07XG4gIFxuICBjb25zdCBoYW5kbGVTZXRDYWxpYnJhdGUgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKGlzQ2FwdHVyaW5nKSByZXR1cm47XG4gICAgXG4gICAgLy8gRGVjbGFyZSB0aGVzZSB2YXJpYWJsZXMgT1VUU0lERSB0aGUgdHJ5IGJsb2NrXG4gICAgbGV0IGNhbnZhcyA9IG51bGw7XG4gICAgbGV0IG9yaWdpbmFsQ2FudmFzUGFyZW50ID0gbnVsbDtcbiAgICBsZXQgb3JpZ2luYWxDYW52YXNTdHlsZSA9IHt9O1xuICAgIGxldCBzdGF0dXNJbmRpY2F0b3IgPSBudWxsO1xuICAgIGxldCBjdXJyZW50UmVkcmF3SW50ZXJ2YWwgPSBudWxsO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNhbnZhcyA9IGVuc3VyZUNhbnZhc0V4aXN0cygpO1xuICAgICAgaWYgKCFjYW52YXMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBjYW52YXMgZm9yIGNhbGlicmF0aW9uJyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIEhpZGUgVG9wQmFyXG4gICAgICBpZiAodHlwZW9mIG9uQWN0aW9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb25BY3Rpb25DbGljaygndG9nZ2xlVG9wQmFyJywgZmFsc2UpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cudG9nZ2xlVG9wQmFyKSB7XG4gICAgICAgIHdpbmRvdy50b2dnbGVUb3BCYXIoZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBzZXRJc0NhcHR1cmluZyh0cnVlKTtcbiAgICAgIHNldFNob3dDYW52YXModHJ1ZSk7XG4gICAgICBzZXRQcm9jZXNzU3RhdHVzKFwiU3RhcnRpbmcgY2FsaWJyYXRpb24gc2VxdWVuY2UuLi5cIik7XG4gICAgICBcbiAgICAgIC8vIFdhaXQgZm9yIFVJIHVwZGF0ZXMgdG8gdGFrZSBlZmZlY3RcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAzMDApKTtcbiAgICAgIFxuICAgICAgLy8gR2V0IGNhbnZhcyByZWZlcmVuY2VcbiAgICAgIGNhbnZhcyA9IGdldE1haW5DYW52YXMoKTtcbiAgICAgIGlmICghY2FudmFzKSB7XG4gICAgICAgIHNldFByb2Nlc3NTdGF0dXMoXCJFcnJvcjogQ2FudmFzIG5vdCBmb3VuZFwiKTtcbiAgICAgICAgc2V0SXNDYXB0dXJpbmcoZmFsc2UpO1xuICAgICAgICBpZiAodHlwZW9mIG9uQWN0aW9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBvbkFjdGlvbkNsaWNrKCd0b2dnbGVUb3BCYXInLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFNhdmUgb3JpZ2luYWwgcGFyZW50IGFuZCBzdHlsZVxuICAgICAgb3JpZ2luYWxDYW52YXNQYXJlbnQgPSBjYW52YXMucGFyZW50RWxlbWVudDtcbiAgICAgIG9yaWdpbmFsQ2FudmFzU3R5bGUgPSB7XG4gICAgICAgIHBvc2l0aW9uOiBjYW52YXMuc3R5bGUucG9zaXRpb24sXG4gICAgICAgIHRvcDogY2FudmFzLnN0eWxlLnRvcCxcbiAgICAgICAgbGVmdDogY2FudmFzLnN0eWxlLmxlZnQsXG4gICAgICAgIHdpZHRoOiBjYW52YXMuc3R5bGUud2lkdGgsXG4gICAgICAgIGhlaWdodDogY2FudmFzLnN0eWxlLmhlaWdodCxcbiAgICAgICAgekluZGV4OiBjYW52YXMuc3R5bGUuekluZGV4XG4gICAgICB9O1xuICAgICAgXG4gICAgICAvLyBNb3ZlIGNhbnZhcyB0byBib2R5IGZvciBtYXhpbXVtIHJlbGlhYmlsaXR5XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7XG4gICAgICBcbiAgICAgIC8vIE1ha2UgY2FudmFzIGZ1bGxzY3JlZW4gd2l0aCBmaXhlZCBwb3NpdGlvbmluZ1xuICAgICAgY2FudmFzLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgICAgIGNhbnZhcy5zdHlsZS50b3AgPSAnMCc7XG4gICAgICBjYW52YXMuc3R5bGUubGVmdCA9ICcwJztcbiAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9ICcxMDB2dyc7XG4gICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gJzEwMHZoJztcbiAgICAgIGNhbnZhcy5zdHlsZS56SW5kZXggPSAnMTAnO1xuICAgICAgXG4gICAgICAvLyBTZXQgZGltZW5zaW9ucyB0byBtYXRjaCB3aW5kb3cgZXhhY3RseVxuICAgICAgY29uc3QgY2FudmFzV2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIGNvbnN0IGNhbnZhc0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgIGNhbnZhcy53aWR0aCA9IGNhbnZhc1dpZHRoO1xuICAgICAgY2FudmFzLmhlaWdodCA9IGNhbnZhc0hlaWdodDtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coYENhbnZhcyBzZXQgdG8gZnVsbHNjcmVlbjogJHtjYW52YXNXaWR0aH14JHtjYW52YXNIZWlnaHR9YCk7XG4gICAgICBcbiAgICAgIC8vIEdldCBjb250ZXh0XG4gICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIFxuICAgICAgLy8gQ2xlYXIgY2FudmFzIHdpdGggd2hpdGUgYmFja2dyb3VuZFxuICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAnd2hpdGUnO1xuICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQpO1xuXG4gICAgICAvLyBHZW5lcmF0ZSBjYWxpYnJhdGlvbiBwb2ludHMgYmFzZWQgb24gdGhlIGNhbnZhcyBzaXplXG4gICAgICBjb25zdCB7IGdlbmVyYXRlQ2FsaWJyYXRpb25Qb2ludHMgfSA9IGF3YWl0IGltcG9ydCgnLi4vLi4vLi4vY29tcG9uZW50cy9jb2xsZWN0ZWQtZGF0YXNldC1jdXN0b21pemVkL0FjdGlvbi9DYWxpYnJhdGVQb2ludHMnKTtcbiAgICAgIGNvbnN0IHBvaW50cyA9IGdlbmVyYXRlQ2FsaWJyYXRpb25Qb2ludHMoY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCk7XG4gICAgICBcbiAgICAgIGlmICghcG9pbnRzIHx8IHBvaW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGdlbmVyYXRlIGNhbGlicmF0aW9uIHBvaW50c1wiKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQ3JlYXRlIGEgc3RhdHVzIGluZGljYXRvclxuICAgICAgc3RhdHVzSW5kaWNhdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBzdGF0dXNJbmRpY2F0b3IuY2xhc3NOYW1lID0gJ2NhbGlicmF0ZS1zdGF0dXMtaW5kaWNhdG9yJztcbiAgICAgIHN0YXR1c0luZGljYXRvci5zdHlsZS5jc3NUZXh0ID0gYFxuICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgIHRvcDogMjBweDtcbiAgICAgICAgcmlnaHQ6IDIwcHg7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMTAyLCAyMDQsIDAuOSk7XG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgcGFkZGluZzogMTBweCAxNXB4O1xuICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICAgIHotaW5kZXg6IDEwMDAwO1xuICAgICAgICBib3gtc2hhZG93OiAwIDRweCAxMnB4IHJnYmEoMCwgMCwgMCwgMC4zKTtcbiAgICAgIGA7XG4gICAgICBzdGF0dXNJbmRpY2F0b3IudGV4dENvbnRlbnQgPSAnQ2FsaWJyYXRpb246IEluaXRpYWxpemluZy4uLic7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHN0YXR1c0luZGljYXRvcik7XG4gICAgICBcbiAgICAgIC8vIFByb2Nlc3MgZWFjaCBjYWxpYnJhdGlvbiBwb2ludFxuICAgICAgbGV0IHN1Y2Nlc3NDb3VudCA9IDA7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgXG4gICAgICAgIC8vIENsZWFyIGFueSBleGlzdGluZyByZWRyYXcgaW50ZXJ2YWxcbiAgICAgICAgaWYgKGN1cnJlbnRSZWRyYXdJbnRlcnZhbCkge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoY3VycmVudFJlZHJhd0ludGVydmFsKTtcbiAgICAgICAgICBjdXJyZW50UmVkcmF3SW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBVcGRhdGUgc3RhdHVzIGRpc3BsYXlzXG4gICAgICAgIHN0YXR1c0luZGljYXRvci50ZXh0Q29udGVudCA9IGBDYWxpYnJhdGlvbjogUG9pbnQgJHtpICsgMX0vJHtwb2ludHMubGVuZ3RofWA7XG4gICAgICAgIHNldFByb2Nlc3NTdGF0dXMoYFByb2Nlc3NpbmcgY2FsaWJyYXRpb24gcG9pbnQgJHtpICsgMX0vJHtwb2ludHMubGVuZ3RofWApO1xuICAgICAgICBcbiAgICAgICAgLy8gUmVzZXQgY2FudmFzIGlmIGRpbWVuc2lvbnMgY2hhbmdlZFxuICAgICAgICBpZiAoY2FudmFzLndpZHRoICE9PSBjYW52YXNXaWR0aCB8fCBjYW52YXMuaGVpZ2h0ICE9PSBjYW52YXNIZWlnaHQpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYENhbnZhcyBkaW1lbnNpb25zIGNoYW5nZWQuIFJlc2V0dGluZyB0byAke2NhbnZhc1dpZHRofXgke2NhbnZhc0hlaWdodH1gKTtcbiAgICAgICAgICBjYW52YXMud2lkdGggPSBjYW52YXNXaWR0aDtcbiAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gY2FudmFzSGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBNYWtlIHN1cmUgY2FudmFzIGlzIHN0aWxsIGF0dGFjaGVkIHRvIGJvZHkgYW5kIGluIGZ1bGxzY3JlZW4gbW9kZVxuICAgICAgICBpZiAoY2FudmFzLnBhcmVudEVsZW1lbnQgIT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7XG4gICAgICAgICAgY2FudmFzLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgICAgICAgICBjYW52YXMuc3R5bGUudG9wID0gJzAnO1xuICAgICAgICAgIGNhbnZhcy5zdHlsZS5sZWZ0ID0gJzAnO1xuICAgICAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9ICcxMDB2dyc7XG4gICAgICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9ICcxMDB2aCc7XG4gICAgICAgICAgY2FudmFzLnN0eWxlLnpJbmRleCA9ICcxMCc7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIENsZWFyIGNhbnZhcyB3aXRoIHdoaXRlIGJhY2tncm91bmRcbiAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KTtcbiAgICAgICAgXG4gICAgICAgIC8vIERyYXcgdGhlIGNhbGlicmF0aW9uIHBvaW50XG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IDE0OyAvLyBTbGlnaHRseSBsYXJnZXIgZm9yIGJldHRlciB2aXNpYmlsaXR5XG4gICAgICAgIGRyYXdSZWREb3QoY3R4LCBwb2ludC54LCBwb2ludC55LCByYWRpdXMsIGZhbHNlKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWF0ZSByZWRyYXcgZnVuY3Rpb24gZm9yIHRoaXMgcG9pbnRcbiAgICAgICAgY29uc3QgcmVkcmF3Q3VycmVudERvdCA9ICgpID0+IHtcbiAgICAgICAgICAvLyBWZXJpZnkgY2FudmFzIGRpbWVuc2lvbnMgYW5kIHBhcmVudFxuICAgICAgICAgIGlmIChjYW52YXMud2lkdGggIT09IGNhbnZhc1dpZHRoIHx8IGNhbnZhcy5oZWlnaHQgIT09IGNhbnZhc0hlaWdodCkge1xuICAgICAgICAgICAgY2FudmFzLndpZHRoID0gY2FudmFzV2lkdGg7XG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gY2FudmFzSGVpZ2h0O1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIE1ha2Ugc3VyZSBjYW52YXMgaXMgc3RpbGwgYXR0YWNoZWQgdG8gYm9keVxuICAgICAgICAgIGlmIChjYW52YXMucGFyZW50RWxlbWVudCAhPT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBSZWRyYXcgZG90IHdpdGhvdXQgY2xlYXJpbmdcbiAgICAgICAgICBkcmF3UmVkRG90KGN0eCwgcG9pbnQueCwgcG9pbnQueSwgcmFkaXVzLCBmYWxzZSk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICAvLyBTdGFydCByZWRyYXcgaW50ZXJ2YWwgLSBtb3JlIGZyZXF1ZW50IHVwZGF0ZXMgZm9yIHJlbGlhYmxlIGRvdCB2aXNpYmlsaXR5XG4gICAgICAgIGN1cnJlbnRSZWRyYXdJbnRlcnZhbCA9IHNldEludGVydmFsKHJlZHJhd0N1cnJlbnREb3QsIDUwKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFJlbW92ZSBhbnkgZXhpc3RpbmcgY291bnRkb3duIGVsZW1lbnRzXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQ291bnRkb3ducyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kb3QtY291bnRkb3duLCAuY2FsaWJyYXRlLWNvdW50ZG93bicpO1xuICAgICAgICBleGlzdGluZ0NvdW50ZG93bnMuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgICAgaWYgKGVsLnBhcmVudE5vZGUpIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWF0ZSBjdXN0b20gY291bnRkb3duIGVsZW1lbnRcbiAgICAgICAgY29uc3QgY291bnRkb3duRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb3VudGRvd25FbGVtZW50LmNsYXNzTmFtZSA9ICdkb3QtY291bnRkb3duJzsgLy8gQ29uc2lzdGVudCBjbGFzcyBuYW1lXG4gICAgICAgIGNvdW50ZG93bkVsZW1lbnQuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgICAgICAgbGVmdDogJHtwb2ludC54fXB4O1xuICAgICAgICAgIHRvcDogJHtwb2ludC55IC0gNjB9cHg7XG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgICAgZm9udC1zaXplOiAzNnB4O1xuICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgICAgIHRleHQtc2hhZG93OiAwIDAgMTBweCB3aGl0ZSwgMCAwIDIwcHggd2hpdGU7XG4gICAgICAgICAgei1pbmRleDogMTAwMDA7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpO1xuICAgICAgICAgIGJvcmRlcjogMnB4IHNvbGlkIHJlZDtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgICAgd2lkdGg6IDUwcHg7XG4gICAgICAgICAgaGVpZ2h0OiA1MHB4O1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBib3gtc2hhZG93OiAwIDAgMTBweCByZ2JhKDAsIDAsIDAsIDAuMyk7XG4gICAgICAgIGA7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY291bnRkb3duRWxlbWVudCk7XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIE1hbnVhbCBjb3VudGRvd25cbiAgICAgICAgICBmb3IgKGxldCBjb3VudCA9IDM7IGNvdW50ID4gMDsgY291bnQtLSkge1xuICAgICAgICAgICAgY291bnRkb3duRWxlbWVudC50ZXh0Q29udGVudCA9IGNvdW50O1xuICAgICAgICAgICAgc2V0UHJvY2Vzc1N0YXR1cyhgUG9pbnQgJHtpKzF9LyR7cG9pbnRzLmxlbmd0aH06IENvdW50ZG93biAke2NvdW50fWApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGb3JjZSByZWRyYXcgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGNvdW50ZG93biB0byBlbnN1cmUgdmlzaWJpbGl0eVxuICAgICAgICAgICAgcmVkcmF3Q3VycmVudERvdCgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgODAwKSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFJlZHJhdyBhZ2FpbiBoYWxmd2F5IHRocm91Z2ggdGhlIHdhaXQgdG8gZW5zdXJlIGRvdCBzdGF5cyB2aXNpYmxlXG4gICAgICAgICAgICByZWRyYXdDdXJyZW50RG90KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIFNob3cgY2hlY2ttYXJrXG4gICAgICAgICAgY291bnRkb3duRWxlbWVudC50ZXh0Q29udGVudCA9IFwi4pyTXCI7XG4gICAgICAgICAgcmVkcmF3Q3VycmVudERvdCgpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFJlbW92ZSBjb3VudGRvd24gZWxlbWVudCBhZnRlciBkZWxheVxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNvdW50ZG93bkVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICBjb3VudGRvd25FbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY291bnRkb3duRWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBNYWtlIHN1cmUgZG90IGlzIHN0aWxsIHZpc2libGVcbiAgICAgICAgICByZWRyYXdDdXJyZW50RG90KCk7XG5cbiAgICAgICAgICAvLyBDYXB0dXJlIGltYWdlcyBhdCB0aGlzIHBvaW50XG4gICAgICAgICAgY29uc29sZS5sb2coYENhcHR1cmluZyBjYWxpYnJhdGlvbiBwb2ludCAke2krMX0vJHtwb2ludHMubGVuZ3RofSBhdCAoJHtwb2ludC54fSwgJHtwb2ludC55fSlgKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBNYW51YWwgZm9yY2UgcmVkcmF3IG9uZSBtb3JlIHRpbWUganVzdCBiZWZvcmUgY2FwdHVyZVxuICAgICAgICAgIGRyYXdSZWREb3QoY3R4LCBwb2ludC54LCBwb2ludC55LCByYWRpdXMsIGZhbHNlKTtcbiAgICAgICAgICBcbiAgICAgICAgY29uc3QgY2FwdHVyZVJlc3VsdCA9IGF3YWl0IGNhcHR1cmVJbWFnZXNBdFBvaW50KHtcbiAgICAgICAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgICAgICBjYXB0dXJlQ291bnQ6IGNhcHR1cmVDb3VudCxcbiAgICAgICAgICBjYW52YXNSZWY6IHsgY3VycmVudDogY2FudmFzIH0sXG4gICAgICAgICAgc2V0Q2FwdHVyZUNvdW50OiBzZXRDYXB0dXJlQ291bnQsXG4gICAgICAgICAgc2hvd0NhcHR1cmVQcmV2aWV3XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChjYXB0dXJlUmVzdWx0ICYmIChjYXB0dXJlUmVzdWx0LnNjcmVlbkltYWdlIHx8IGNhcHR1cmVSZXN1bHQuc3VjY2VzcykpIHtcbiAgICAgICAgICBzdWNjZXNzQ291bnQrKztcbiAgICAgICAgfVxuXG4gICAgICAgICAgLy8gV2FpdCBiZXR3ZWVuIHBvaW50c1xuICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMjAwKSk7XG4gICAgICAgICAgXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgcHJvY2Vzc2luZyBjYWxpYnJhdGlvbiBwb2ludCAke2krMX06YCwgZXJyb3IpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIC8vIENsZWFuIHVwIGNvdW50ZG93biBpZiBpdCBzdGlsbCBleGlzdHNcbiAgICAgICAgICBpZiAoY291bnRkb3duRWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBjb3VudGRvd25FbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY291bnRkb3duRWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIENsZWFyIHJlZHJhdyBpbnRlcnZhbFxuICAgICAgICAgIGlmIChjdXJyZW50UmVkcmF3SW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoY3VycmVudFJlZHJhd0ludGVydmFsKTtcbiAgICAgICAgICAgIGN1cnJlbnRSZWRyYXdJbnRlcnZhbCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIENhbGlicmF0aW9uIGNvbXBsZXRlXG4gICAgICBpZiAoc3RhdHVzSW5kaWNhdG9yKSB7XG4gICAgICAgIHN0YXR1c0luZGljYXRvci50ZXh0Q29udGVudCA9IGBDYWxpYnJhdGlvbiBjb21wbGV0ZTogJHtzdWNjZXNzQ291bnR9LyR7cG9pbnRzLmxlbmd0aH0gcG9pbnRzYDtcbiAgICAgIH1cbiAgICAgIHNldFByb2Nlc3NTdGF0dXMoYENhbGlicmF0aW9uIGNvbXBsZXRlZDogJHtzdWNjZXNzQ291bnR9LyR7cG9pbnRzLmxlbmd0aH0gcG9pbnRzIGNhcHR1cmVkYCk7XG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkNhbGlicmF0aW9uIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICBzZXRQcm9jZXNzU3RhdHVzKGBDYWxpYnJhdGlvbiBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgXG4gICAgICAvLyBDbGVhbiB1cCByZWRyYXcgaW50ZXJ2YWxcbiAgICAgIGlmIChjdXJyZW50UmVkcmF3SW50ZXJ2YWwpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChjdXJyZW50UmVkcmF3SW50ZXJ2YWwpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICAvLyBSZW1vdmUgc3RhdHVzIGluZGljYXRvciBpZiBpdCBleGlzdHNcbiAgICAgIGlmIChzdGF0dXNJbmRpY2F0b3IgJiYgc3RhdHVzSW5kaWNhdG9yLnBhcmVudE5vZGUpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgc3RhdHVzSW5kaWNhdG9yLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3RhdHVzSW5kaWNhdG9yKTtcbiAgICAgICAgfSwgMzAwMCk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHNldElzQ2FwdHVyaW5nKGZhbHNlKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjbGVhbnVwQ2FudmFzKCk7XG4gICAgICB9LCAzMDAwKTtcbiAgICAgIGlmIChjYW52YXMpIHtcbiAgICAgICAgcmVzdG9yZUNhbnZhc1RvQ29udGFpbmVyKGNhbnZhcyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFNob3cgVG9wQmFyIGFnYWluXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBvbkFjdGlvbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgb25BY3Rpb25DbGljaygndG9nZ2xlVG9wQmFyJywgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnRvZ2dsZVRvcEJhcikge1xuICAgICAgICAgIHdpbmRvdy50b2dnbGVUb3BCYXIodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVTZXRSYW5kb20gPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKGlzQ2FwdHVyaW5nKSByZXR1cm47XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGVuc3VyZUNhbnZhc0V4aXN0cygpO1xuICAgICAgaWYgKCFjYW52YXMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGNyZWF0ZSBjYW52YXMgZm9yIHNldCByYW5kb20nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gQWx3YXlzIGdldCB0aGUgbGF0ZXN0IHNldHRpbmdzIGZyb20gY29udGV4dCBmb3IgdGhlIGN1cnJlbnQgdXNlclxuICAgICAgY29uc3QgdXNlclNldHRpbmdzID0gc2V0dGluZ3MgJiYgc2V0dGluZ3NbY3VycmVudFVzZXJJZF0gPyBzZXR0aW5nc1tjdXJyZW50VXNlcklkXSA6IHt9O1xuICAgICAgY29uc3QgdGltZXMgPSBOdW1iZXIodXNlclNldHRpbmdzLnRpbWVzX3NldF9yYW5kb20pIHx8IE51bWJlcihyYW5kb21UaW1lcykgfHwgMTtcbiAgICAgIGNvbnN0IGRlbGF5ID0gTnVtYmVyKHVzZXJTZXR0aW5ncy5kZWxheV9zZXRfcmFuZG9tKSB8fCBOdW1iZXIoZGVsYXlTZWNvbmRzKSB8fCAzO1xuXG4gICAgICAvLyBMb2cgY3VycmVudCBzZXR0aW5ncyBiZWZvcmUgc3RhcnRpbmdcbiAgICAgIGNvbnNvbGUubG9nKCdTdGFydGluZyBTZXQgUmFuZG9tIHdpdGggc2V0dGluZ3M6Jywge1xuICAgICAgICByYW5kb21UaW1lcyxcbiAgICAgICAgZGVsYXlTZWNvbmRzLFxuICAgICAgICBjdXJyZW50VXNlcklkLFxuICAgICAgICBzZXR0aW5ncyxcbiAgICAgICAgdXNlclNldHRpbmdzLFxuICAgICAgICB0aW1lcyxcbiAgICAgICAgZGVsYXlcbiAgICAgIH0pO1xuXG4gICAgICAvLyBIaWRlIFRvcEJhclxuICAgICAgaWYgKHR5cGVvZiBvbkFjdGlvbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9uQWN0aW9uQ2xpY2soJ3RvZ2dsZVRvcEJhcicsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnRvZ2dsZVRvcEJhcikge1xuICAgICAgICB3aW5kb3cudG9nZ2xlVG9wQmFyKGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgc2V0SXNDYXB0dXJpbmcodHJ1ZSk7XG4gICAgICBzZXRSZW1haW5pbmdDYXB0dXJlcyh0aW1lcyk7XG4gICAgICBzZXRQcm9jZXNzU3RhdHVzKGBTdGFydGluZyAke3RpbWVzfSByYW5kb20gY2FwdHVyZXMgd2l0aCAke2RlbGF5fXMgZGVsYXkuLi5gKTtcblxuICAgICAgLy8gUHJvY2VzcyBhbGwgY2FwdHVyZXMgaW4gc2VxdWVuY2VcbiAgICAgIGxldCBzdWNjZXNzQ291bnQgPSAwO1xuICAgICAgXG4gICAgICBmb3IgKGxldCBjdXJyZW50SW5kZXggPSAxOyBjdXJyZW50SW5kZXggPD0gdGltZXM7IGN1cnJlbnRJbmRleCsrKSB7XG4gICAgICAgIC8vIFVwZGF0ZSBzdGF0dXMgZm9yIGN1cnJlbnQgY2FwdHVyZVxuICAgICAgICBzZXRQcm9jZXNzU3RhdHVzKGBDYXB0dXJlICR7Y3VycmVudEluZGV4fSBvZiAke3RpbWVzfWApO1xuICAgICAgICBzZXRSZW1haW5pbmdDYXB0dXJlcyh0aW1lcyAtIGN1cnJlbnRJbmRleCArIDEpO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coYFN0YXJ0aW5nIGNhcHR1cmUgJHtjdXJyZW50SW5kZXh9IG9mICR7dGltZXN9YCk7XG4gICAgICAgIFxuICAgICAgICAvLyBVc2UgaGFuZGxlRG90UHJvY2VzcyBmb3IgZWFjaCBjYXB0dXJlXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGhhbmRsZURvdFByb2Nlc3Moe1xuICAgICAgICAgIHVzZVJhbmRvbVBvc2l0aW9uOiB0cnVlLFxuICAgICAgICAgIG9uU3RhdHVzVXBkYXRlOiAoc3RhdHVzKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzLnByb2Nlc3NTdGF0dXMpIHtcbiAgICAgICAgICAgICAgc2V0UHJvY2Vzc1N0YXR1cyhgQ2FwdHVyZSAke2N1cnJlbnRJbmRleH0vJHt0aW1lc306ICR7c3RhdHVzLnByb2Nlc3NTdGF0dXN9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICB0b2dnbGVUb3BCYXI6IChzaG93KSA9PiB7XG4gICAgICAgICAgICAvLyBPbmx5IHNob3cgVG9wQmFyIGFmdGVyIHRoZSBsYXN0IGNhcHR1cmVcbiAgICAgICAgICAgIGlmIChzaG93ICYmIGN1cnJlbnRJbmRleCA8IHRpbWVzKSB7XG4gICAgICAgICAgICAgIHJldHVybjsgLy8gRG9uJ3Qgc2hvdyB5ZXQgZm9yIGludGVybWVkaWF0ZSBjYXB0dXJlc1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9uQWN0aW9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgb25BY3Rpb25DbGljaygndG9nZ2xlVG9wQmFyJywgc2hvdyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy50b2dnbGVUb3BCYXIpIHtcbiAgICAgICAgICAgICAgd2luZG93LnRvZ2dsZVRvcEJhcihzaG93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHRyaWdnZXJDYW1lcmFBY2Nlc3MsXG4gICAgICAgICAgc2V0SXNDYXB0dXJpbmc6IChjYXB0dXJpbmcpID0+IHtcbiAgICAgICAgICAgIC8vIE9ubHkgc2V0IGNhcHR1cmluZyB0byBmYWxzZSBhZnRlciBhbGwgY2FwdHVyZXNcbiAgICAgICAgICAgIGlmICghY2FwdHVyaW5nICYmIGN1cnJlbnRJbmRleCA8IHRpbWVzKSB7XG4gICAgICAgICAgICAgIHJldHVybjsgLy8gU3RheSBpbiBjYXB0dXJpbmcgc3RhdGUgYmV0d2VlbiBkb3RzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRJc0NhcHR1cmluZyhjYXB0dXJpbmcpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2FwdHVyZUNvdW50LFxuICAgICAgICAgIHNldENhcHR1cmVDb3VudCxcbiAgICAgICAgICBwb3N0Q291bnRkb3duRGVsYXk6IDgwMFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgICAgICBzdWNjZXNzQ291bnQrKztcbiAgICAgICAgICBjb25zb2xlLmxvZyhgU3VjY2Vzc2Z1bGx5IGNvbXBsZXRlZCBjYXB0dXJlICR7Y3VycmVudEluZGV4fWApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybihgQ2FwdHVyZSAke2N1cnJlbnRJbmRleH0gbWF5IGhhdmUgZmFpbGVkOmAsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFdhaXQgYmV0d2VlbiBjYXB0dXJlcyAtIGJ1dCBvbmx5IGlmIHRoZXJlIGFyZSBtb3JlIGNhcHR1cmVzIHRvIGdvXG4gICAgICAgIGlmIChjdXJyZW50SW5kZXggPCB0aW1lcykge1xuICAgICAgICAgIHNldFByb2Nlc3NTdGF0dXMoYFdhaXRpbmcgJHtkZWxheX1zIGJlZm9yZSBuZXh0IGNhcHR1cmUuLi5gKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgV2FpdGluZyAke2RlbGF5fXMgYmVmb3JlIG5leHQgY2FwdHVyZS4uLmApO1xuICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSAqIDEwMDApKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDb21wbGV0aW9uIG5vdGlmaWNhdGlvblxuICAgICAgc2V0UHJvY2Vzc1N0YXR1cyhgUmFuZG9tIGNhcHR1cmUgc2VxdWVuY2UgY29tcGxldGVkOiAke3N1Y2Nlc3NDb3VudH0vJHt0aW1lc30gY2FwdHVyZXMgc3VjY2Vzc2Z1bGApO1xuICAgICAgc2V0UmVtYWluaW5nQ2FwdHVyZXMoMCk7XG4gICAgICBjb25zb2xlLmxvZyhgQ29tcGxldGVkIGFsbCBjYXB0dXJlczogJHtzdWNjZXNzQ291bnR9LyR7dGltZXN9IHN1Y2Nlc3NmdWxgKTtcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiUmFuZG9tIHNlcXVlbmNlIGVycm9yOlwiLCBlcnJvcik7XG4gICAgICBzZXRQcm9jZXNzU3RhdHVzKGBSYW5kb20gc2VxdWVuY2UgZmFpbGVkOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldElzQ2FwdHVyaW5nKGZhbHNlKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjbGVhbnVwQ2FudmFzKCk7XG4gICAgICB9LCAzMDAwKTtcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0cmFja2luZy1jYW52YXMnKTtcbiAgICAgIGlmIChjYW52YXMpIHtcbiAgICAgICAgcmVzdG9yZUNhbnZhc1RvQ29udGFpbmVyKGNhbnZhcyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFNob3cgVG9wQmFyIGFnYWluXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiBvbkFjdGlvbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgb25BY3Rpb25DbGljaygndG9nZ2xlVG9wQmFyJywgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnRvZ2dsZVRvcEJhcikge1xuICAgICAgICAgIHdpbmRvdy50b2dnbGVUb3BCYXIodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVSYW5kb21Eb3QgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKGlzQ2FwdHVyaW5nKSByZXR1cm47XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgY2FudmFzID0gZW5zdXJlQ2FudmFzRXhpc3RzKCk7XG4gICAgICBpZiAoIWNhbnZhcykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIGNhbnZhcyBmb3IgcmFuZG9tIGRvdCcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFVzZSB0aGUgY29uc29saWRhdGVkIGZ1bmN0aW9uIHdpdGggcmFuZG9tIHBvc2l0aW9uXG4gICAgICBhd2FpdCBoYW5kbGVEb3RQcm9jZXNzKHtcbiAgICAgICAgdXNlUmFuZG9tUG9zaXRpb246IHRydWUsXG4gICAgICAgIG9uU3RhdHVzVXBkYXRlOiAoc3RhdHVzKSA9PiB7XG4gICAgICAgICAgaWYgKHN0YXR1cy5wcm9jZXNzU3RhdHVzKSBzZXRQcm9jZXNzU3RhdHVzKHN0YXR1cy5wcm9jZXNzU3RhdHVzKTtcbiAgICAgICAgICBpZiAoc3RhdHVzLmlzQ2FwdHVyaW5nICE9PSB1bmRlZmluZWQpIHNldElzQ2FwdHVyaW5nKHN0YXR1cy5pc0NhcHR1cmluZyk7XG4gICAgICAgIH0sXG4gICAgICAgIHRvZ2dsZVRvcEJhcjogKHNob3cpID0+IHtcbiAgICAgICAgICBpZiAodHlwZW9mIG9uQWN0aW9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG9uQWN0aW9uQ2xpY2soJ3RvZ2dsZVRvcEJhcicsIHNob3cpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdHJpZ2dlckNhbWVyYUFjY2VzcyxcbiAgICAgICAgc2V0SXNDYXB0dXJpbmcsXG4gICAgICAgIGNhcHR1cmVDb3VudCxcbiAgICAgICAgc2V0Q2FwdHVyZUNvdW50OiBzZXRDYXB0dXJlQ291bnQsXG4gICAgICAgIHBvc3RDb3VudGRvd25EZWxheTogMTAwMFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdSYW5kb20gZG90IGVycm9yOicsIGVycm9yKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gQ2xlYW4gdXAgY2FudmFzIGFmdGVyIHByb2Nlc3MgY29tcGxldGVzXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY2xlYW51cENhbnZhcygpO1xuICAgICAgfSwgMjAwMCk7IC8vIFdhaXQgMiBzZWNvbmRzIGJlZm9yZSBjbGVhbnVwXG4gICAgfVxuICAgIFxuICB9O1xuICBjb25zdCBtYWtlQ2FudmFzRnVsbHNjcmVlbiA9IChjYW52YXMpID0+IHtcbiAgICBpZiAoIWNhbnZhcykgcmV0dXJuIG51bGw7XG4gICAgXG4gICAgLy8gU2F2ZSBvcmlnaW5hbCBzdGF0ZSBpZiBub3QgYWxyZWFkeSBzYXZlZFxuICAgIGlmICghY2FudmFzLl9vcmlnaW5hbFN0YXRlKSB7XG4gICAgICBjYW52YXMuX29yaWdpbmFsU3RhdGUgPSB7XG4gICAgICAgIHBhcmVudDogY2FudmFzLnBhcmVudEVsZW1lbnQsXG4gICAgICAgIHBvc2l0aW9uOiBjYW52YXMuc3R5bGUucG9zaXRpb24sXG4gICAgICAgIHRvcDogY2FudmFzLnN0eWxlLnRvcCxcbiAgICAgICAgbGVmdDogY2FudmFzLnN0eWxlLmxlZnQsXG4gICAgICAgIHdpZHRoOiBjYW52YXMuc3R5bGUud2lkdGgsXG4gICAgICAgIGhlaWdodDogY2FudmFzLnN0eWxlLmhlaWdodCxcbiAgICAgICAgekluZGV4OiBjYW52YXMuc3R5bGUuekluZGV4LFxuICAgICAgICBjYW52YXNXaWR0aDogY2FudmFzLndpZHRoLFxuICAgICAgICBjYW52YXNIZWlnaHQ6IGNhbnZhcy5oZWlnaHRcbiAgICAgIH07XG4gICAgfVxuICAgIFxuICAgIC8vIE1vdmUgdG8gYm9keSBhbmQgbWFrZSBmdWxsc2NyZWVuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xuICAgIGNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgY2FudmFzLnN0eWxlLnRvcCA9ICcwJztcbiAgICBjYW52YXMuc3R5bGUubGVmdCA9ICcwJztcbiAgICBjYW52YXMuc3R5bGUud2lkdGggPSAnMTAwdncnO1xuICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSAnMTAwdmgnO1xuICAgIGNhbnZhcy5zdHlsZS56SW5kZXggPSAnMTAnO1xuICAgIGNhbnZhcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnd2hpdGUnO1xuICAgIFxuICAgIC8vIFNldCBjYW52YXMgZGltZW5zaW9ucyB0byBtYXRjaCB3aW5kb3dcbiAgICBjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgIFxuICAgIC8vIENsZWFyIHdpdGggd2hpdGUgYmFja2dyb3VuZFxuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGN0eC5maWxsU3R5bGUgPSAnd2hpdGUnO1xuICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgIFxuICAgIHJldHVybiBjYW52YXM7XG4gIH07XG4gIFxuXG4gIC8vIExvYWQgY2FsaWJyYXRpb24gc2V0dXBcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcblxuICAgIGNvbnN0IHNldHVwQ2FsaWJyYXRpb24gPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGRlZmF1bHQ6IENhbGlicmF0ZUhhbmRsZXIgfSA9IGF3YWl0IGltcG9ydCgnLi4vLi4vLi4vY29tcG9uZW50cy9jb2xsZWN0ZWQtZGF0YXNldC1jdXN0b21pemVkL0FjdGlvbi9DYWxpYnJhdGVIYW5kbGVyJyk7XG4gICAgXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGdldE1haW5DYW52YXMoKTtcbiAgICAgICAgaWYgKCFjYW52YXMpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJDYW52YXMgbm90IGF2YWlsYWJsZSBkdXJpbmcgc2V0dXBDYWxpYnJhdGlvblwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbnZhcykge1xuICAgICAgICAgIG1ha2VDYW52YXNGdWxsc2NyZWVuKGNhbnZhcyk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0NhbnZhcyBzaXplOicsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IGdlbmVyYXRlQ2FsaWJyYXRpb25Qb2ludHMoY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0dlbmVyYXRlZCBjYWxpYnJhdGlvbiBwb2ludHM6JywgcG9pbnRzKTtcbiAgICAgICAgc2V0Q2FsaWJyYXRpb25Qb2ludHMocG9pbnRzKTtcbiAgICBcbiAgICAgICAgY29uc3QgY2FsaWJyYXRlSGFuZGxlciA9IG5ldyBDYWxpYnJhdGVIYW5kbGVyKHtcbiAgICAgICAgICBjYW52YXNSZWY6IHsgY3VycmVudDogY2FudmFzIH0sXG4gICAgICAgICAgY2FsaWJyYXRpb25Qb2ludHM6IHBvaW50cyxcbiAgICAgICAgICB0b2dnbGVUb3BCYXI6IChzaG93KSA9PiBvbkFjdGlvbkNsaWNrPy4oJ3RvZ2dsZVRvcEJhcicsIHNob3cpLFxuICAgICAgICAgIHNldE91dHB1dFRleHQ6IChzdGF0dXMpID0+IHtcbiAgICAgICAgICAgIHNldFByb2Nlc3NTdGF0dXMoc3RhdHVzKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNhcHR1cmVDb3VudGVyOiBjYXB0dXJlQ291bnQsXG4gICAgICAgICAgc2V0Q2FwdHVyZUNvdW50ZXI6IChuZXdDb3VudGVyKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5ld0NvdW50ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgc2V0Q2FwdHVyZUNvdW50KHByZXYgPT4gbmV3Q291bnRlcihwcmV2KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZXRDYXB0dXJlQ291bnQobmV3Q291bnRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjYXB0dXJlRm9sZGVyOiAnZXllX3RyYWNraW5nX2NhcHR1cmVzJyxcbiAgICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICBzZXRJc0NhcHR1cmluZyhmYWxzZSk7XG4gICAgICAgICAgICBzZXRQcm9jZXNzU3RhdHVzKCdDYWxpYnJhdGlvbiBjb21wbGV0ZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIFxuICAgICAgICBzZXRDYWxpYnJhdGlvbkhhbmRsZXIoe1xuICAgICAgICAgIGhhbmRsZUFjdGlvbjogYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgc2V0SXNDYXB0dXJpbmcodHJ1ZSk7XG4gICAgICAgICAgICBzZXRQcm9jZXNzU3RhdHVzKCdTdGFydGluZyBjYWxpYnJhdGlvbi4uLicpO1xuICAgICAgICAgICAgYXdhaXQgY2FsaWJyYXRlSGFuZGxlci5zdGFydENhbGlicmF0aW9uKCk7XG4gICAgICAgICAgICBzZXRJc0NhcHR1cmluZyhmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGNhbnZhcykge1xuICAgICAgICAgIHJlc3RvcmVDYW52YXNTaXplKGNhbnZhcyk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbml0aWFsaXppbmcgY2FsaWJyYXRpb246JywgZXJyKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgc2V0dXBDYWxpYnJhdGlvbigpO1xuICB9LCBbY2FwdHVyZUNvdW50LCBvbkFjdGlvbkNsaWNrXSk7XG4gIFxuICAvLyBDbGVhciBBbGwgQnV0dG9uIC0gUmVzZXQgZXZlcnl0aGluZ1xuICBjb25zdCBoYW5kbGVDbGVhckFsbCA9ICgpID0+IHtcbiAgICAvLyBDbGVhciBjYW52YXMgY29udGVudFxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN0cmFja2luZy1jYW52YXMnKTtcbiAgICBpZiAoY2FudmFzKSB7XG4gICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAnd2hpdGUnO1xuICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICBcbiAgICAgIC8vIFJlc3RvcmUgY2FudmFzIHRvIGNvbnRhaW5lciBtb2RlXG4gICAgICByZXN0b3JlQ2FudmFzVG9Db250YWluZXIoY2FudmFzKTtcbiAgICB9XG4gICAgXG4gICAgLy8gUmVzZXQgc3RhdGVzXG4gICAgc2V0UHJvY2Vzc1N0YXR1cygnJyk7XG4gICAgc2V0UmVtYWluaW5nQ2FwdHVyZXMoMCk7XG4gICAgc2V0SXNDYXB0dXJpbmcoZmFsc2UpO1xuICAgIHNldENvdW50ZG93blZhbHVlKG51bGwpO1xuICAgIHNldFNob3dDYW52YXModHJ1ZSk7XG4gICAgc2V0Q3VycmVudERvdChudWxsKTtcbiAgfTtcblxuICAvLyBUb2dnbGUgSGVhZCBQb3NlIHZpc3VhbGl6YXRpb25cbiAgY29uc3QgaGFuZGxlVG9nZ2xlSGVhZFBvc2UgPSAoKSA9PiB7XG4gICAgY29uc3QgbmV3SGVhZFBvc2VTdGF0ZSA9ICFzaG93SGVhZFBvc2U7XG4gICAgc2V0U2hvd0hlYWRQb3NlKG5ld0hlYWRQb3NlU3RhdGUpO1xuICAgIHNldFByb2Nlc3NTdGF0dXMoYEhlYWQgcG9zZSB2aXN1YWxpemF0aW9uICR7bmV3SGVhZFBvc2VTdGF0ZSA/ICdlbmFibGVkJyA6ICdkaXNhYmxlZCd9YCk7XG4gICAgXG4gICAgLy8gQ2FsbCB0aGUgcGFyZW50IGhhbmRsZXIgdG8gdXBkYXRlIHByb2Nlc3NvciBvcHRpb25zXG4gICAgaWYgKG9uQWN0aW9uQ2xpY2spIHtcbiAgICAgIG9uQWN0aW9uQ2xpY2soJ2hlYWRQb3NlJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIFVwZGF0ZSB2aWRlb1Byb2Nlc3NvciBvcHRpb25zIGRpcmVjdGx5IGlmIGF2YWlsYWJsZVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cudmlkZW9Qcm9jZXNzb3IpIHtcbiAgICAgIHdpbmRvdy52aWRlb1Byb2Nlc3Nvci51cGRhdGVPcHRpb25zKHtcbiAgICAgICAgc2hvd0hlYWRQb3NlOiBuZXdIZWFkUG9zZVN0YXRlXG4gICAgICB9KTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGBVcGRhdGVkIGJhY2tlbmQgaGVhZCBwb3NlOiAke25ld0hlYWRQb3NlU3RhdGV9YCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFRvZ2dsZSBCb3VuZGluZyBCb3ggdmlzdWFsaXphdGlvblxuICBjb25zdCBoYW5kbGVUb2dnbGVCb3VuZGluZ0JveCA9ICgpID0+IHtcbiAgICBjb25zdCBuZXdCb3VuZGluZ0JveFN0YXRlID0gIXNob3dCb3VuZGluZ0JveDtcbiAgICBzZXRTaG93Qm91bmRpbmdCb3gobmV3Qm91bmRpbmdCb3hTdGF0ZSk7XG4gICAgc2V0UHJvY2Vzc1N0YXR1cyhgQm91bmRpbmcgYm94ICR7bmV3Qm91bmRpbmdCb3hTdGF0ZSA/ICdzaG93bicgOiAnaGlkZGVuJ31gKTtcbiAgICBcbiAgICAvLyBDYWxsIHRoZSBwYXJlbnQgaGFuZGxlciB0byB1cGRhdGUgcHJvY2Vzc29yIG9wdGlvbnNcbiAgICBpZiAob25BY3Rpb25DbGljaykge1xuICAgICAgb25BY3Rpb25DbGljaygnYm91bmRpbmdCb3gnKTtcbiAgICB9XG4gICAgXG4gICAgLy8gVXBkYXRlIHZpZGVvUHJvY2Vzc29yIG9wdGlvbnMgZGlyZWN0bHkgaWYgYXZhaWxhYmxlXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy52aWRlb1Byb2Nlc3Nvcikge1xuICAgICAgd2luZG93LnZpZGVvUHJvY2Vzc29yLnVwZGF0ZU9wdGlvbnMoe1xuICAgICAgICBzaG93Qm91bmRpbmdCb3g6IG5ld0JvdW5kaW5nQm94U3RhdGVcbiAgICAgIH0pO1xuICAgICAgLy8gY29uc29sZS5sb2coYFVwZGF0ZWQgYmFja2VuZCBib3VuZGluZyBib3g6ICR7bmV3Qm91bmRpbmdCb3hTdGF0ZX1gKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gVG9nZ2xlIE1hc2sgdmlzdWFsaXphdGlvblxuICBjb25zdCBoYW5kbGVUb2dnbGVNYXNrID0gKCkgPT4ge1xuICAgIGNvbnN0IG5ld01hc2tTdGF0ZSA9ICFzaG93TWFzaztcbiAgICBzZXRTaG93TWFzayhuZXdNYXNrU3RhdGUpO1xuICAgIHNldFByb2Nlc3NTdGF0dXMoYE1hc2sgJHtuZXdNYXNrU3RhdGUgPyAnc2hvd24nIDogJ2hpZGRlbid9YCk7XG4gICAgXG4gICAgLy8gQ2FsbCB0aGUgcGFyZW50IGhhbmRsZXIgdG8gdXBkYXRlIHByb2Nlc3NvciBvcHRpb25zXG4gICAgaWYgKG9uQWN0aW9uQ2xpY2spIHtcbiAgICAgIG9uQWN0aW9uQ2xpY2soJ21hc2snKTtcbiAgICB9XG4gICAgXG4gICAgLy8gVXBkYXRlIHZpZGVvUHJvY2Vzc29yIG9wdGlvbnMgZGlyZWN0bHkgaWYgYXZhaWxhYmxlXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy52aWRlb1Byb2Nlc3Nvcikge1xuICAgICAgd2luZG93LnZpZGVvUHJvY2Vzc29yLnVwZGF0ZU9wdGlvbnMoe1xuICAgICAgICBzaG93TWFzazogbmV3TWFza1N0YXRlXG4gICAgICB9KTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKGBVcGRhdGVkIGJhY2tlbmQgbWFzazogJHtuZXdNYXNrU3RhdGV9YCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFRvZ2dsZSBQYXJhbWV0ZXJzIGRpc3BsYXlcbiAgY29uc3QgaGFuZGxlVG9nZ2xlUGFyYW1ldGVycyA9ICgpID0+IHtcbiAgICBjb25zdCBuZXdQYXJhbWV0ZXJzU3RhdGUgPSAhc2hvd1BhcmFtZXRlcnM7XG4gICAgc2V0U2hvd1BhcmFtZXRlcnMobmV3UGFyYW1ldGVyc1N0YXRlKTtcbiAgICBzZXRQcm9jZXNzU3RhdHVzKGBQYXJhbWV0ZXJzICR7bmV3UGFyYW1ldGVyc1N0YXRlID8gJ3Nob3duJyA6ICdoaWRkZW4nfWApO1xuICAgIFxuICAgIC8vIENhbGwgdGhlIHBhcmVudCBoYW5kbGVyIHRvIHVwZGF0ZSBwcm9jZXNzb3Igb3B0aW9uc1xuICAgIGlmIChvbkFjdGlvbkNsaWNrKSB7XG4gICAgICBvbkFjdGlvbkNsaWNrKCdwYXJhbWV0ZXJzJyk7XG4gICAgfVxuICAgIFxuICAgIC8vIFVwZGF0ZSB2aWRlb1Byb2Nlc3NvciBvcHRpb25zIGRpcmVjdGx5IGlmIGF2YWlsYWJsZVxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cudmlkZW9Qcm9jZXNzb3IpIHtcbiAgICAgIHdpbmRvdy52aWRlb1Byb2Nlc3Nvci51cGRhdGVPcHRpb25zKHtcbiAgICAgICAgc2hvd1BhcmFtZXRlcnM6IG5ld1BhcmFtZXRlcnNTdGF0ZVxuICAgICAgfSk7XG4gICAgICAvLyBjb25zb2xlLmxvZyhgVXBkYXRlZCBiYWNrZW5kIHBhcmFtZXRlcnM6ICR7bmV3UGFyYW1ldGVyc1N0YXRlfWApO1xuICAgIH1cbiAgfTtcblxuICAvLyBUb2dnbGUgY2FtZXJhIHByZXZpZXdcbiAgY29uc3QgaGFuZGxlVG9nZ2xlQ2FtZXJhID0gKCkgPT4ge1xuICAgIGNvbnN0IG5ld0NhbWVyYVN0YXRlID0gIWlzQ2FtZXJhQWN0aXZlO1xuICAgIHNldElzQ2FtZXJhQWN0aXZlKG5ld0NhbWVyYVN0YXRlKTtcbiAgICBcbiAgICAvLyBDYWxsIHRoZSBwYXJlbnQgaGFuZGxlciB3aXRoICdwcmV2aWV3JyBhY3Rpb25cbiAgICBpZiAob25BY3Rpb25DbGljaykge1xuICAgICAgb25BY3Rpb25DbGljaygncHJldmlldycsIG5ld0NhbWVyYVN0YXRlKTsgLy8gUGFzcyB0aGUgbmV3IHN0YXRlXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZhbGxiYWNrIHRvIGRpcmVjdCB0cmlnZ2VyIGlmIG5vIGFjdGlvbiBoYW5kbGVyXG4gICAgICBzZXRTaG93UGVybWlzc2lvblBvcHVwKHRydWUpO1xuICAgIH1cbiAgICBcbiAgICAvLyBJZiB0dXJuaW5nIG9uIGNhbWVyYSwgZW5zdXJlIHdlIGFwcGx5IGN1cnJlbnQgdmlzdWFsaXphdGlvbiBzZXR0aW5nc1xuICAgIGlmIChuZXdDYW1lcmFTdGF0ZSAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cudmlkZW9Qcm9jZXNzb3IpIHtcbiAgICAgIC8vIFdhaXQgYSBzaG9ydCBtb21lbnQgdG8gZW5zdXJlIHRoZSB2aWRlbyBlbGVtZW50IGlzIHJlYWR5XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaWYgKHdpbmRvdy52aWRlb1Byb2Nlc3Nvcikge1xuICAgICAgICAgIHdpbmRvdy52aWRlb1Byb2Nlc3Nvci51cGRhdGVPcHRpb25zKHtcbiAgICAgICAgICAgIHNob3dIZWFkUG9zZSxcbiAgICAgICAgICAgIHNob3dCb3VuZGluZ0JveCxcbiAgICAgICAgICAgIHNob3dNYXNrLFxuICAgICAgICAgICAgc2hvd1BhcmFtZXRlcnNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwgMTAwKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gQWRkIGJhY2sgYnV0dG9uIGhhbmRsZXJcbiAgY29uc3QgaGFuZGxlR29CYWNrID0gKCkgPT4ge1xuICAgIHJvdXRlci5wdXNoKCcvJyk7XG4gIH07XG5cbiAgLy8gTW9iaWxlIGxheW91dCAtIDJ4NSBncmlkXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIHtpc0NvbXBhY3RNb2RlID8gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTIgZ2FwLTIgbWItNFwiPlxuICAgICAgICAgIDxkaXY+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSA6IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0yIGdhcC0yXCI+XG4gICAgICAgICAgPGRpdj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuXG4gICAgICB7LyogQ2FtZXJhIFBlcm1pc3Npb24gUG9wdXAgKi99XG4gICAgICB7c2hvd1Blcm1pc3Npb25Qb3B1cCAmJiAoXG4gICAgICAgIDxkaXYgXG4gICAgICAgICAgY2xhc3NOYW1lPVwiY2FtZXJhLXBlcm1pc3Npb24tcG9wdXBcIiBcbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjUpJyxcbiAgICAgICAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgICAgICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgICAgICAgICAgekluZGV4OiAxNVxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8ZGl2IFxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2FtZXJhLXBlcm1pc3Npb24tZGlhbG9nXCIgXG4gICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICB3aWR0aDogJzQwMHB4JyxcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc4cHgnLFxuICAgICAgICAgICAgICBwYWRkaW5nOiAnMjBweCcsXG4gICAgICAgICAgICAgIGJveFNoYWRvdzogJzAgNHB4IDhweCByZ2JhKDAsIDAsIDAsIDAuMiknXG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxoMyBcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2FtZXJhLXBlcm1pc3Npb24tdGl0bGVcIiBcbiAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICBtYXJnaW46ICcwIDAgMTVweCcsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6ICcxOHB4JyxcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCdcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgQ2FtZXJhIEFjY2VzcyBSZXF1aXJlZFxuICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgIDxwIFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjYW1lcmEtcGVybWlzc2lvbi1tZXNzYWdlXCIgXG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAnMCAwIDIwcHgnLFxuICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodDogJzEuNCdcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgVGhpcyBhcHBsaWNhdGlvbiBuZWVkcyBhY2Nlc3MgdG8geW91ciBjYW1lcmEgdG8gZnVuY3Rpb24gcHJvcGVybHkuIFdoZW4gcHJvbXB0ZWQgYnkgeW91ciBicm93c2VyLCBwbGVhc2UgY2xpY2sgXCJBbGxvd1wiIHRvIGdyYW50IGNhbWVyYSBhY2Nlc3MuXG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8ZGl2IFxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjYW1lcmEtcGVybWlzc2lvbi1idXR0b25zXCIgXG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1lbmQnLFxuICAgICAgICAgICAgICAgIGdhcDogJzEwcHgnXG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxidXR0b24gXG4gICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlUGVybWlzc2lvbkRlbmllZH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjYW1lcmEtYnRuXCJcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgcGFkZGluZzogJzhweCAxNnB4JyxcbiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNmMGYwZjAnLFxuICAgICAgICAgICAgICAgICAgYm9yZGVyOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc0cHgnLFxuICAgICAgICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcidcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgQ2FuY2VsXG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8YnV0dG9uIFxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVBlcm1pc3Npb25BY2NlcHRlZH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJjYW1lcmEtYnRuXCJcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgcGFkZGluZzogJzhweCAxNnB4JyxcbiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMwMDY2Y2MnLFxuICAgICAgICAgICAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICAgICAgICAgICAgICBib3JkZXI6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogJzRweCcsXG4gICAgICAgICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICBDb250aW51ZVxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59KTtcbmNvbnN0IEFjdGlvbkJ1dHRvbkdyb3VwID0gZHluYW1pYygoKSA9PiBQcm9taXNlLnJlc29sdmUoXG4gIGZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IDxBY3Rpb25CdXR0b25Hcm91cElubmVyIHsuLi5wcm9wc30gcmVmPXtyZWZ9IC8+KVxuKSwgeyBzc3I6IGZhbHNlIH0pO1xuLy8gQ3JlYXRlIGEgY2xpZW50LW9ubHkgdmVyc2lvbiBvZiBBY3Rpb25CdXR0b25Hcm91cFxuLy8gY29uc3QgQWN0aW9uQnV0dG9uR3JvdXAgPSBkeW5hbWljKCgpID0+IFByb21pc2UucmVzb2x2ZShBY3Rpb25CdXR0b25Hcm91cElubmVyKSwgeyBzc3I6IGZhbHNlIH0pO1xuXG4vLyBBZGQgZGVmYXVsdCBleHBvcnQgY29tcG9uZW50XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBY3Rpb25CdXR0b25QYWdlKCkge1xuICByZXR1cm4gbnVsbDsgLy8gVGhpcyBpcyBhIHV0aWxpdHkgZmlsZSwgc28gd2UgZG9uJ3QgbmVlZCB0byByZW5kZXIgYW55dGhpbmdcbn1cblxuZXhwb3J0IHsgQWN0aW9uQnV0dG9uLCBBY3Rpb25CdXR0b25Hcm91cCB9O1xuXG4gIC8vIFV0aWxpdHkgZnVuY3Rpb24gdG8gZWFzaWx5IG1hbmFnZSBjYW52YXMgb3BlcmF0aW9uc1xuICBjb25zdCBjYW52YXNVdGlscyA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICAvLyBHZXQgb3IgY3JlYXRlIGNhbnZhc1xuICAgIGdldENhbnZhczogKCkgPT4gY2FudmFzTWFuYWdlci5nZXRDYW52YXMoKSB8fCBjYW52YXNNYW5hZ2VyLmNyZWF0ZUNhbnZhcygpLFxuICAgIFxuICAgIC8vIEVudGVyIGZ1bGxzY3JlZW4gbW9kZVxuICAgIGVudGVyRnVsbHNjcmVlbjogKCkgPT4ge1xuICAgICAgY2FudmFzTWFuYWdlci5lbnRlckZ1bGxzY3JlZW4oKTtcbiAgICAgIHJldHVybiBjYW52YXNNYW5hZ2VyLmdldENhbnZhcygpO1xuICAgIH0sXG4gICAgXG4gICAgLy8gRXhpdCBmdWxsc2NyZWVuIG1vZGVcbiAgICBleGl0RnVsbHNjcmVlbjogKCkgPT4ge1xuICAgICAgY2FudmFzTWFuYWdlci5leGl0RnVsbHNjcmVlbigpO1xuICAgICAgcmV0dXJuIGNhbnZhc01hbmFnZXIuZ2V0Q2FudmFzKCk7XG4gICAgfSxcbiAgICBcbiAgICAvLyBDbGVhciBjYW52YXNcbiAgICBjbGVhcjogKCkgPT4ge1xuICAgICAgY2FudmFzTWFuYWdlci5jbGVhcigpO1xuICAgIH0sXG4gICAgXG4gICAgLy8gRHJhdyBkb3QgYXQgcG9zaXRpb25cbiAgICBkcmF3RG90OiAoeCwgeSwgcmFkaXVzID0gMTIpID0+IHtcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGNhbnZhc01hbmFnZXIuZ2V0Q2FudmFzKCk7XG4gICAgICBpZiAoIWNhbnZhcykgcmV0dXJuIGZhbHNlO1xuICAgICAgXG4gICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGRyYXdSZWREb3QoY3R4LCB4LCB5LCByYWRpdXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgXG4gICAgLy8gR2V0IGNhbnZhcyBkaW1lbnNpb25zXG4gICAgZ2V0RGltZW5zaW9uczogKCkgPT4ge1xuICAgICAgY29uc3QgY2FudmFzID0gY2FudmFzTWFuYWdlci5nZXRDYW52YXMoKTtcbiAgICAgIGlmICghY2FudmFzKSByZXR1cm4geyB3aWR0aDogMCwgaGVpZ2h0OiAwIH07XG4gICAgICBcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiBjYW52YXMud2lkdGgsXG4gICAgICAgIGhlaWdodDogY2FudmFzLmhlaWdodFxuICAgICAgfTtcbiAgICB9LFxuICAgIFxuICAgIC8vIENoZWNrIGlmIGNhbnZhcyBpcyBpbiBmdWxsc2NyZWVuXG4gICAgaXNGdWxsc2NyZWVuOiAoKSA9PiBjYW52YXNNYW5hZ2VyLmlzSW5GdWxsc2NyZWVuKCksXG4gICAgXG4gICAgLy8gVXBkYXRlIGNhbnZhcyBzaXplIHRvIG1hdGNoIGNvbnRhaW5lclxuICAgIHJlc2l6ZVRvQ29udGFpbmVyOiAoY29udGFpbmVyKSA9PiB7XG4gICAgICBjb25zdCBjYW52YXMgPSBjYW52YXNNYW5hZ2VyLmdldENhbnZhcygpO1xuICAgICAgaWYgKCFjYW52YXMgfHwgIWNvbnRhaW5lcikgcmV0dXJuIGZhbHNlO1xuICAgICAgXG4gICAgICBjb25zdCByZWN0ID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY2FudmFzLndpZHRoID0gcmVjdC53aWR0aCB8fCBjb250YWluZXIuY2xpZW50V2lkdGggfHwgODAwO1xuICAgICAgY2FudmFzLmhlaWdodCA9IHJlY3QuaGVpZ2h0IHx8IGNvbnRhaW5lci5jbGllbnRIZWlnaHQgfHwgNjAwO1xuICAgICAgXG4gICAgICAvLyBDbGVhciBhbmQgcmVkcmF3IHdoaXRlIGJhY2tncm91bmRcbiAgICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9ICd3aGl0ZSc7XG4gICAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgIFxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KSwgW10pO1xuXG4gIC8vIE1ha2UgY2FudmFzIHV0aWxpdGllcyBnbG9iYWxseSBhdmFpbGFibGVcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHdpbmRvdy5jYW52YXNVdGlscyA9IGNhbnZhc1V0aWxzO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGRlbGV0ZSB3aW5kb3cuY2FudmFzVXRpbHM7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2NhbnZhc1V0aWxzXSk7Il0sIm5hbWVzIjpbIlJlYWN0IiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJmb3J3YXJkUmVmIiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZU1lbW8iLCJkeW5hbWljIiwiZ2VuZXJhdGVDYWxpYnJhdGlvblBvaW50cyIsInNob3dDYXB0dXJlUHJldmlldyIsImRyYXdSZWREb3QiLCJnZXRSYW5kb21Qb3NpdGlvbiIsImNyZWF0ZUNvdW50ZG93bkVsZW1lbnQiLCJydW5Db3VudGRvd24iLCJjYXB0dXJlSW1hZ2VzQXRQb2ludCIsInVzZVJvdXRlciIsInVzZUFkbWluU2V0dGluZ3MiLCJpc0VxdWFsIiwib2JqMSIsIm9iajIiLCJrZXlzMSIsIk9iamVjdCIsImtleXMiLCJrZXlzMiIsImxlbmd0aCIsImV2ZXJ5Iiwia2V5IiwiaW5jbHVkZXMiLCJBY3Rpb25CdXR0b24iLCJ0ZXh0IiwiYWJicmV2aWF0ZWRUZXh0Iiwib25DbGljayIsImN1c3RvbUNsYXNzIiwiZGlzYWJsZWQiLCJhY3RpdmUiLCJpc0FiYnJldmlhdGVkIiwic2V0SXNBYmJyZXZpYXRlZCIsInNldHRpbmdzIiwiY3VycmVudFVzZXJJZCIsInNldEN1cnJlbnRVc2VySWQiLCJpc0NhcHR1cmluZyIsInNldElzQ2FwdHVyaW5nIiwiY2FwdHVyZUNvdW50ZXIiLCJzZXRDYXB0dXJlQ291bnRlciIsInByb2Nlc3NTdGF0dXMiLCJzZXRQcm9jZXNzU3RhdHVzIiwiYnV0dG9uUHJvcHMiLCJjbGFzc05hbWUiLCJ0aXRsZSIsInRpbWVvdXRJZCIsImhhbmRsZVJlc2l6ZSIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJ3aWR0aCIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImhhbmRsZVVzZXJJZENoYW5nZSIsImV2ZW50IiwiZGV0YWlsIiwidHlwZSIsIm5ld1VzZXJJZCIsInVzZXJJZCIsImJ1dHRvbiIsImRpdiIsIkFjdGlvbkJ1dHRvbkdyb3VwSW5uZXIiLCJyZWYiLCJ0cmlnZ2VyQ2FtZXJhQWNjZXNzIiwiaXNDb21wYWN0TW9kZSIsIm9uQWN0aW9uQ2xpY2siLCJyb3V0ZXIiLCJ1cGRhdGVTZXR0aW5ncyIsInJhbmRvbVRpbWVzIiwic2V0UmFuZG9tVGltZXMiLCJkZWxheVNlY29uZHMiLCJzZXREZWxheVNlY29uZHMiLCJjYW52YXNSZWYiLCJjb3VudGRvd25WYWx1ZSIsInNldENvdW50ZG93blZhbHVlIiwiY3VycmVudERvdCIsInNldEN1cnJlbnREb3QiLCJjYWxpYnJhdGlvblBvaW50cyIsInNldENhbGlicmF0aW9uUG9pbnRzIiwicmVtYWluaW5nQ2FwdHVyZXMiLCJzZXRSZW1haW5pbmdDYXB0dXJlcyIsInNob3dDYW52YXMiLCJzZXRTaG93Q2FudmFzIiwiY2FsaWJyYXRpb25IYW5kbGVyIiwic2V0Q2FsaWJyYXRpb25IYW5kbGVyIiwiY2FwdHVyZUNvdW50Iiwic2V0Q2FwdHVyZUNvdW50Iiwic2hvd0hlYWRQb3NlIiwic2V0U2hvd0hlYWRQb3NlIiwic2hvd0JvdW5kaW5nQm94Iiwic2V0U2hvd0JvdW5kaW5nQm94Iiwic2hvd01hc2siLCJzZXRTaG93TWFzayIsInNob3dQYXJhbWV0ZXJzIiwic2V0U2hvd1BhcmFtZXRlcnMiLCJpc0NhbWVyYUFjdGl2ZSIsInNldElzQ2FtZXJhQWN0aXZlIiwic2hvd1Blcm1pc3Npb25Qb3B1cCIsInNldFNob3dQZXJtaXNzaW9uUG9wdXAiLCJzZXR0aW5nc0NhY2hlIiwiTWFwIiwibGFzdFNldHRpbmdzVXBkYXRlIiwidXNlclNldHRpbmdzIiwiY2FjaGVkU2V0dGluZ3MiLCJjdXJyZW50IiwiZ2V0IiwiTnVtYmVyIiwidGltZXNfc2V0X3JhbmRvbSIsImRlbGF5X3NldF9yYW5kb20iLCJzZXQiLCJEYXRlIiwibm93IiwiaGFuZGxlU2V0dGluZ3NVcGRhdGUiLCJ1bmRlZmluZWQiLCJuZXdUaW1lcyIsIm5ld0RlbGF5IiwiYWN0aW9uQnV0dG9uRnVuY3Rpb25zIiwiaGFuZGxlUmFuZG9tRG90IiwiaGFuZGxlU2V0UmFuZG9tIiwiaGFuZGxlU2V0Q2FsaWJyYXRlIiwiaGFuZGxlQ2xlYXJBbGwiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjYW52YXMiLCJnZXRNYWluQ2FudmFzIiwiY29uc29sZSIsImxvZyIsInVwZGF0ZUNvbnRyb2xWYWx1ZXMiLCJ0aW1lSW5wdXQiLCJ0aW1lVmFsdWUiLCJwYXJzZUludCIsInZhbHVlIiwiaXNOYU4iLCJkZWxheUlucHV0IiwiZGVsYXlWYWx1ZSIsImluaXRpYWxpemVDYW52YXMiLCJleGlzdGluZ0NhbnZhcyIsInJlbW92ZSIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsInN0eWxlIiwiY3NzVGV4dCIsImhlaWdodCIsImlubmVySGVpZ2h0IiwiYm9keSIsImFwcGVuZENoaWxkIiwid2hpdGVTY3JlZW5DYW52YXMiLCJjdHgiLCJnZXRDb250ZXh0IiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJjbGVhbnVwIiwiQ2FudmFzTWFuYWdlciIsImNyZWF0ZUNhbnZhcyIsImNvbnRhaW5lciIsInRhcmdldENvbnRhaW5lciIsInVwZGF0ZUNhbnZhc1NpemUiLCJzZXR1cFJlc3BvbnNpdmVDYW52YXMiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJkaXNwbGF5IiwiYmFja2dyb3VuZENvbG9yIiwicmVzaXplT2JzZXJ2ZXIiLCJkaXNjb25uZWN0IiwiUmVzaXplT2JzZXJ2ZXIiLCJlbnRyaWVzIiwiZW50cnkiLCJ0YXJnZXQiLCJvYnNlcnZlIiwiaGFuZGxlV2luZG93UmVzaXplIiwiX3dpbmRvd1Jlc2l6ZUhhbmRsZXIiLCJlbnRlckZ1bGxzY3JlZW4iLCJvcmlnaW5hbFN0YXRlIiwicGFyZW50IiwicGFyZW50RWxlbWVudCIsInBvc2l0aW9uIiwidG9wIiwibGVmdCIsInpJbmRleCIsImhpZGVVSUVsZW1lbnRzIiwiaXNGdWxsc2NyZWVuIiwiZXhpdEZ1bGxzY3JlZW4iLCJzaG93VUlFbGVtZW50cyIsImVsZW1lbnRzVG9IaWRlIiwiZm9yRWFjaCIsInNlbGVjdG9yIiwiZWxlbWVudHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWwiLCJzZXRBdHRyaWJ1dGUiLCJoaWRkZW5FbGVtZW50cyIsInJlbW92ZUF0dHJpYnV0ZSIsImNsZWFyIiwiY2xlYXJSZWN0IiwiZGVzdHJveSIsImdldENhbnZhcyIsImlzSW5GdWxsc2NyZWVuIiwiY29uc3RydWN0b3IiLCJjYW52YXNNYW5hZ2VyIiwiZW5zdXJlQ2FudmFzRXhpc3RzIiwicmVzdG9yZUNhbnZhc1RvQ29udGFpbmVyIiwiY2xlYW51cENhbnZhcyIsImNsZWFyQ2FudmFzIiwiaGFuZGxlRG90UHJvY2VzcyIsIm9wdGlvbnMiLCJvblN0YXR1c1VwZGF0ZSIsInRvZ2dsZVRvcEJhciIsInVzZVJhbmRvbVBvc2l0aW9uIiwicG9zdENvdW50ZG93bkRlbGF5Iiwia2VlcERvdFZpc2libGVJbnRlcnZhbCIsImNvdW50ZG93bkVsZW1lbnQiLCJQcm9taXNlIiwicmVzb2x2ZSIsIkVycm9yIiwiY2FudmFzV2lkdGgiLCJjYW52YXNIZWlnaHQiLCJkb3RQb3NpdGlvbiIsIngiLCJ5IiwiZG90UmFkaXVzIiwic2V0SW50ZXJ2YWwiLCJleGlzdGluZ0NvdW50ZG93bnMiLCJjb3VudCIsInRleHRDb250ZW50IiwiY2FwdHVyZVJlc3VsdCIsInBvaW50Iiwic3VjY2VzcyIsImVycm9yIiwibWVzc2FnZSIsImNsZWFySW50ZXJ2YWwiLCJyZW1haW5pbmdDb3VudGRvd25zIiwib3JpZ2luYWxDYW52YXNQYXJlbnQiLCJvcmlnaW5hbENhbnZhc1N0eWxlIiwic3RhdHVzSW5kaWNhdG9yIiwiY3VycmVudFJlZHJhd0ludGVydmFsIiwicG9pbnRzIiwic3VjY2Vzc0NvdW50IiwiaSIsIndhcm4iLCJyYWRpdXMiLCJyZWRyYXdDdXJyZW50RG90Iiwic2NyZWVuSW1hZ2UiLCJ0aW1lcyIsImRlbGF5IiwiY3VycmVudEluZGV4IiwicmVzdWx0Iiwic3RhdHVzIiwic2hvdyIsImNhcHR1cmluZyIsIm1ha2VDYW52YXNGdWxsc2NyZWVuIiwiX29yaWdpbmFsU3RhdGUiLCJzZXR1cENhbGlicmF0aW9uIiwiZGVmYXVsdCIsIkNhbGlicmF0ZUhhbmRsZXIiLCJjYWxpYnJhdGVIYW5kbGVyIiwic2V0T3V0cHV0VGV4dCIsIm5ld0NvdW50ZXIiLCJwcmV2IiwiY2FwdHVyZUZvbGRlciIsIm9uQ29tcGxldGUiLCJoYW5kbGVBY3Rpb24iLCJzdGFydENhbGlicmF0aW9uIiwicmVzdG9yZUNhbnZhc1NpemUiLCJlcnIiLCJoYW5kbGVUb2dnbGVIZWFkUG9zZSIsIm5ld0hlYWRQb3NlU3RhdGUiLCJ2aWRlb1Byb2Nlc3NvciIsInVwZGF0ZU9wdGlvbnMiLCJoYW5kbGVUb2dnbGVCb3VuZGluZ0JveCIsIm5ld0JvdW5kaW5nQm94U3RhdGUiLCJoYW5kbGVUb2dnbGVNYXNrIiwibmV3TWFza1N0YXRlIiwiaGFuZGxlVG9nZ2xlUGFyYW1ldGVycyIsIm5ld1BhcmFtZXRlcnNTdGF0ZSIsImhhbmRsZVRvZ2dsZUNhbWVyYSIsIm5ld0NhbWVyYVN0YXRlIiwiaGFuZGxlR29CYWNrIiwicHVzaCIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsImJvcmRlclJhZGl1cyIsInBhZGRpbmciLCJib3hTaGFkb3ciLCJoMyIsIm1hcmdpbiIsImZvbnRTaXplIiwiZm9udFdlaWdodCIsInAiLCJsaW5lSGVpZ2h0IiwiZ2FwIiwiaGFuZGxlUGVybWlzc2lvbkRlbmllZCIsImJvcmRlciIsImN1cnNvciIsImhhbmRsZVBlcm1pc3Npb25BY2NlcHRlZCIsImNvbG9yIiwiQWN0aW9uQnV0dG9uR3JvdXAiLCJwcm9wcyIsInNzciIsIkFjdGlvbkJ1dHRvblBhZ2UiLCJjYW52YXNVdGlscyIsImRyYXdEb3QiLCJnZXREaW1lbnNpb25zIiwicmVzaXplVG9Db250YWluZXIiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/collected-dataset-customized/components-gui/actionButton.js\n"));

/***/ })

});
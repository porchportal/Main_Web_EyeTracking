"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/collected-dataset-customized",{

/***/ "(pages-dir-browser)/./components/collected-dataset-customized/Action/countSave.jsx":
/*!**********************************************************************!*\
  !*** ./components/collected-dataset-customized/Action/countSave.jsx ***!
  \**********************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calibrationCapture: () => (/* binding */ calibrationCapture),\n/* harmony export */   captureAndPreviewProcess: () => (/* binding */ captureAndPreviewProcess),\n/* harmony export */   captureImages: () => (/* binding */ captureImages),\n/* harmony export */   createCountdownElement: () => (/* binding */ createCountdownElement),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   drawRedDot: () => (/* binding */ drawRedDot),\n/* harmony export */   getRandomPosition: () => (/* binding */ getRandomPosition),\n/* harmony export */   runCountdown: () => (/* binding */ runCountdown),\n/* harmony export */   showCapturePreview: () => (/* binding */ showCapturePreview)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Helper_savefile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Helper/savefile */ \"(pages-dir-browser)/./components/collected-dataset-customized/Helper/savefile.js\");\n// Fixed countSave.jsx - Resolving redrawInterval reference error\n// Shared functionality for countdown and image capture processes\n\n\n/**\n * Get canvas management utilities from global scope (from actionButton.js)\n * @returns {Object} Canvas utilities object\n */ const getCanvasUtils = ()=>{\n    if (true) {\n        return {\n            canvasUtils: window.canvasUtils,\n            canvasManager: window.canvasManager\n        };\n    }\n    return {\n        canvasUtils: null,\n        canvasManager: null\n    };\n};\n/**\n * Get or create canvas using the canvas management system from actionButton.js\n * @returns {HTMLCanvasElement} Canvas element\n */ const getCanvas = ()=>{\n    const { canvasUtils, canvasManager } = getCanvasUtils();\n    // First try to use canvasUtils from actionButton.js\n    if (canvasUtils && typeof canvasUtils.getCanvas === 'function') {\n        return canvasUtils.getCanvas();\n    }\n    // Fallback to canvasManager\n    if (canvasManager && typeof canvasManager.getCanvas === 'function') {\n        return canvasManager.getCanvas() || canvasManager.createCanvas();\n    }\n    // Fallback to direct query\n    return document.querySelector('#tracking-canvas');\n};\n/**\n * Transform canvas coordinates to viewport coordinates when in fullscreen\n * @param {HTMLCanvasElement} canvas - Canvas element\n * @param {Object} point - {x, y} point coordinates\n * @returns {Object} Transformed point coordinates\n */ const transformCoordinates = (canvas, point)=>{\n    if (!canvas || !point) return point;\n    // Check if canvas is in fullscreen mode\n    const isFullscreen = canvas.style.position === 'fixed' && (canvas.style.width === '100vw' || canvas.style.width === '100%');\n    if (isFullscreen) {\n        // Get the canvas's bounding rect to understand its position in the viewport\n        const canvasRect = canvas.getBoundingClientRect();\n        // Calculate the scale factors\n        const scaleX = canvasRect.width / canvas.width;\n        const scaleY = canvasRect.height / canvas.height;\n        // Transform the coordinates\n        const transformedPoint = {\n            x: point.x * scaleX + canvasRect.left,\n            y: point.y * scaleY + canvasRect.top,\n            label: point.label\n        };\n        console.log('Coordinate transformation in countSave:', {\n            original: point,\n            transformed: transformedPoint,\n            canvasRect,\n            scale: {\n                x: scaleX,\n                y: scaleY\n            }\n        });\n        return transformedPoint;\n    }\n    // If not fullscreen, return original coordinates\n    return point;\n};\n/**\n * Draw dot using the canvas management system\n * @param {number} x - X coordinate\n * @param {number} y - Y coordinate\n * @param {number} radius - Dot radius\n * @returns {boolean} Success status\n */ const drawDotWithCanvasManager = function(x, y) {\n    let radius = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 12;\n    const { canvasUtils } = getCanvasUtils();\n    if (canvasUtils && typeof canvasUtils.drawDot === 'function') {\n        return canvasUtils.drawDot(x, y, radius);\n    }\n    // Fallback: manually draw dot\n    const canvas = getCanvas();\n    if (canvas) {\n        const ctx = canvas.getContext('2d');\n        drawRedDot(ctx, x, y, radius, false);\n        return true;\n    }\n    return false;\n};\n/**\n * Creates and displays a countdown element above a dot position\n * @param {Object} position - {x, y} position of the dot\n * @param {DOMRect} canvasRect - getBoundingClientRect() of the canvas\n * @returns {HTMLElement} - The created countdown element\n */ const createCountdownElement = (position, canvasRect)=>{\n    if (!position || typeof position.x !== 'number' || typeof position.y !== 'number') {\n        console.warn('[createCountdownElement] Invalid position:', position);\n        return null;\n    }\n    // Remove any existing countdown elements\n    const existingCountdowns = document.querySelectorAll('.calibrate-countdown, .forced-countdown, .center-countdown-backup, .dot-countdown, .test-countdown');\n    existingCountdowns.forEach((el)=>{\n        console.log('Removing existing countdown element:', el);\n        if (el.parentNode) {\n            el.parentNode.removeChild(el);\n        }\n    });\n    // Get canvas to check if we need coordinate transformation\n    const canvas = getCanvas();\n    let displayPosition = position;\n    if (canvas) {\n        // Check if canvas is in fullscreen mode\n        const isFullscreen = canvas.style.position === 'fixed' && (canvas.style.width === '100vw' || canvas.style.width === '100%');\n        if (isFullscreen) {\n            // Canvas is in fullscreen mode, use direct coordinates\n            displayPosition = {\n                x: position.x,\n                y: position.y\n            };\n        } else {\n            // Canvas is in normal mode, use canvas-relative coordinates\n            displayPosition = {\n                x: canvasRect.left + position.x,\n                y: canvasRect.top + position.y\n            };\n        }\n    }\n    console.log('[createCountdownElement] Creating countdown at position:', {\n        original: position,\n        display: displayPosition,\n        canvasRect: canvasRect,\n        canvasFullscreen: canvas ? canvas.style.position === 'fixed' && canvas.style.width === '100vw' : false\n    });\n    // Create the main countdown element\n    const countdownElement = document.createElement('div');\n    countdownElement.className = 'dot-countdown';\n    countdownElement.style.cssText = \"\\n    position: fixed;\\n    left: \".concat(displayPosition.x, \"px;\\n    top: \").concat(displayPosition.y - 80, \"px;\\n    transform: translateX(-50%);\\n    color: red;\\n    font-size: 64px;\\n    font-weight: bold;\\n    text-shadow: 0 0 20px white, 0 0 30px white, 0 0 40px white;\\n    z-index: 100000;\\n    background-color: rgba(255, 255, 255, 0.98);\\n    border: 4px solid red;\\n    border-radius: 50%;\\n    width: 100px;\\n    height: 100px;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    box-shadow: 0 0 30px rgba(0, 0, 0, 0.7), 0 0 50px rgba(255, 0, 0, 0.5);\\n    animation: countdownPulse 1s infinite;\\n    pointer-events: none;\\n    user-select: none;\\n  \");\n    // Add CSS animation for pulse effect\n    if (!document.querySelector('#countdown-styles')) {\n        const style = document.createElement('style');\n        style.id = 'countdown-styles';\n        style.textContent = \"\\n      @keyframes countdownPulse {\\n        0% { transform: translateX(-50%) scale(1); }\\n        50% { transform: translateX(-50%) scale(1.1); }\\n        100% { transform: translateX(-50%) scale(1); }\\n      }\\n    \";\n        document.head.appendChild(style);\n    }\n    document.body.appendChild(countdownElement);\n    console.log('createCountdownElement created at:', {\n        originalPosition: position,\n        displayPosition,\n        canvasRect,\n        canvasInfo: canvas ? {\n            position: canvas.style.position,\n            width: canvas.style.width,\n            height: canvas.style.height,\n            rect: canvas.getBoundingClientRect()\n        } : null\n    });\n    // // Create a backup countdown element centered on screen as fallback\n    // const backupCountdown = document.createElement('div');\n    // backupCountdown.className = 'backup-countdown';\n    // backupCountdown.style.cssText = `\n    //   position: fixed;\n    //   top: 50%;\n    //   left: 50%;\n    //   transform: translate(-50%, -50%);\n    //   color: red;\n    //   font-size: 72px;\n    //   font-weight: bold;\n    //   text-shadow: 0 0 25px white, 0 0 35px white, 0 0 45px white;\n    //   z-index: 100001;\n    //   background-color: rgba(255, 255, 255, 0.98);\n    //   border: 5px solid red;\n    //   border-radius: 50%;\n    //   width: 120px;\n    //   height: 120px;\n    //   display: flex;\n    //   justify-content: center;\n    //   align-items: center;\n    //   box-shadow: 0 0 40px rgba(0, 0, 0, 0.8), 0 0 60px rgba(255, 0, 0, 0.6);\n    //   animation: countdownPulse 1s infinite;\n    //   pointer-events: none;\n    //   user-select: none;\n    // `;\n    // document.body.appendChild(backupCountdown);\n    // Add a temporary visual indicator to show where the countdown is positioned\n    const indicator = document.createElement('div');\n    indicator.style.cssText = \"\\n    position: fixed;\\n    left: \".concat(displayPosition.x, \"px;\\n    top: \").concat(displayPosition.y, \"px;\\n    width: 10px;\\n    height: 10px;\\n    background-color: blue;\\n    border-radius: 50%;\\n    z-index: 10000;\\n    pointer-events: none;\\n  \");\n    document.body.appendChild(indicator);\n    // Remove indicator after 2 seconds\n    setTimeout(()=>{\n        if (indicator.parentNode) {\n            indicator.parentNode.removeChild(indicator);\n        }\n    }, 2000);\n    return countdownElement;\n};\n/**\n * Display a preview of the captured images\n * @param {string} screenImage - Data URL of the screen image\n * @param {string} webcamImage - Data URL of the webcam image\n * @param {Object} point - {x, y} position of the dot\n */ const showCapturePreview = (screenImage, webcamImage, point)=>{\n    if (!screenImage && !webcamImage) return;\n    // Remove any existing previews\n    const existingPreviews = document.querySelectorAll('.capture-preview-container');\n    existingPreviews.forEach((preview)=>{\n        if (preview.parentNode) {\n            preview.parentNode.removeChild(preview);\n        }\n    });\n    // Create preview container\n    const previewContainer = document.createElement('div');\n    previewContainer.className = 'capture-preview-container';\n    previewContainer.style.cssText = \"\\n    position: fixed;\\n    top: 50%;\\n    left: 50%;\\n    transform: translate(-50%, -50%);\\n    display: flex;\\n    gap: 20px;\\n    background-color: rgba(0, 0, 0, 0.85);\\n    padding: 20px;\\n    border-radius: 12px;\\n    z-index: 999999;\\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.6);\\n  \";\n    // Add screen image if available\n    if (screenImage) {\n        const screenPreview = document.createElement('div');\n        screenPreview.style.cssText = \"\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n    \";\n        const screenImg = document.createElement('img');\n        screenImg.src = screenImage;\n        screenImg.alt = 'Screen Capture';\n        screenImg.style.cssText = \"\\n      max-width: 320px;\\n      max-height: 240px;\\n      border: 3px solid white;\\n      border-radius: 8px;\\n      background-color: #333;\\n    \";\n        const screenLabel = document.createElement('div');\n        screenLabel.textContent = 'Screen Capture';\n        screenLabel.style.cssText = \"\\n      color: white;\\n      font-size: 14px;\\n      margin-top: 10px;\\n      font-weight: bold;\\n    \";\n        screenPreview.appendChild(screenImg);\n        screenPreview.appendChild(screenLabel);\n        previewContainer.appendChild(screenPreview);\n    }\n    // Add webcam image if available\n    if (webcamImage) {\n        const webcamPreview = document.createElement('div');\n        webcamPreview.style.cssText = \"\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n    \";\n        const webcamImg = document.createElement('img');\n        webcamImg.src = webcamImage;\n        webcamImg.alt = 'Webcam Capture';\n        webcamImg.style.cssText = \"\\n      max-width: 320px;\\n      max-height: 240px;\\n      border: 3px solid white;\\n      border-radius: 8px;\\n      background-color: #333;\\n    \";\n        const webcamLabel = document.createElement('div');\n        webcamLabel.textContent = 'Webcam Capture';\n        webcamLabel.style.cssText = \"\\n      color: white;\\n      font-size: 14px;\\n      margin-top: 10px;\\n      font-weight: bold;\\n    \";\n        webcamPreview.appendChild(webcamImg);\n        webcamPreview.appendChild(webcamLabel);\n        previewContainer.appendChild(webcamPreview);\n    }\n    // Add point info\n    if (point) {\n        const pointInfo = document.createElement('div');\n        pointInfo.textContent = point.label ? \"\".concat(point.label, \": x=\").concat(Math.round(point.x), \", y=\").concat(Math.round(point.y)) : \"Point: x=\".concat(Math.round(point.x), \", y=\").concat(Math.round(point.y));\n        pointInfo.style.cssText = \"\\n      color: #ffcc00;\\n      font-size: 14px;\\n      position: absolute;\\n      top: -40px;\\n      left: 0;\\n      width: 100%;\\n      text-align: center;\\n    \";\n        previewContainer.appendChild(pointInfo);\n    }\n    // Add timer\n    const timerElement = document.createElement('div');\n    timerElement.textContent = '2.0s';\n    timerElement.style.cssText = \"\\n    position: absolute;\\n    bottom: -25px;\\n    right: 20px;\\n    color: white;\\n    font-size: 12px;\\n    background-color: rgba(0, 0, 0, 0.7);\\n    padding: 3px 8px;\\n    border-radius: 4px;\\n  \";\n    previewContainer.appendChild(timerElement);\n    // Add to document\n    document.body.appendChild(previewContainer);\n    // Countdown\n    let timeLeft = 2.0;\n    const interval = setInterval(()=>{\n        timeLeft -= 0.1;\n        if (timeLeft <= 0) {\n            clearInterval(interval);\n            previewContainer.style.opacity = '0';\n            previewContainer.style.transition = 'opacity 0.3s ease';\n            setTimeout(()=>{\n                if (previewContainer.parentNode) {\n                    previewContainer.parentNode.removeChild(previewContainer);\n                }\n            }, 300);\n        } else {\n            timerElement.textContent = \"\".concat(timeLeft.toFixed(1), \"s\");\n        }\n    }, 100);\n    // Safety cleanup\n    setTimeout(()=>{\n        if (previewContainer.parentNode) {\n            previewContainer.parentNode.removeChild(previewContainer);\n        }\n    }, 5000);\n};\n/**\n * Runs a countdown process that displays 3-2-1 above a dot\n * @param {Object} position - {x, y} position of the dot\n * @param {HTMLCanvasElement} canvas - Canvas element with the dot\n * @param {Function} onStatusUpdate - Function to update status messages\n * @param {Function} onComplete - Callback to execute when countdown completes\n */ const runCountdown = async (position, canvas, onStatusUpdate, onComplete)=>{\n    if (!position || typeof position.x !== 'number' || typeof position.y !== 'number') {\n        console.warn('[runCountdown] Invalid position:', position);\n        onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n            processStatus: \"Invalid dot position\",\n            countdownValue: null,\n            isCapturing: false\n        });\n        return;\n    }\n    const canvasRect = canvas.getBoundingClientRect();\n    const countdownElement = createCountdownElement(position, canvasRect);\n    if (!countdownElement) {\n        console.warn('[runCountdown] Countdown element could not be created.');\n        return;\n    }\n    // Get the backup countdown element\n    const backupCountdown = document.querySelector('.backup-countdown');\n    // Use canvas management system to draw dot\n    drawDotWithCanvasManager(position.x, position.y);\n    let count = 3;\n    countdownElement.textContent = count;\n    if (backupCountdown) {\n        backupCountdown.textContent = count;\n    }\n    onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n        processStatus: \"Countdown\",\n        countdownValue: count,\n        isCapturing: true\n    });\n    // Create redrawInterval for keeping dot visible during countdown\n    let redrawInterval = setInterval(()=>{\n        drawDotWithCanvasManager(position.x, position.y);\n    }, 200);\n    return new Promise((resolve)=>{\n        const countdownInterval = setInterval(()=>{\n            count--;\n            if (count <= 0) {\n                clearInterval(countdownInterval);\n                countdownElement.textContent = \"✓\";\n                if (backupCountdown) {\n                    backupCountdown.textContent = \"✓\";\n                }\n                onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                    countdownValue: \"Capturing...\",\n                    processStatus: \"Capturing image...\",\n                    isCapturing: true\n                });\n                setTimeout(()=>{\n                    // Remove both countdown elements\n                    if (countdownElement.parentNode) {\n                        countdownElement.parentNode.removeChild(countdownElement);\n                    }\n                    if (backupCountdown && backupCountdown.parentNode) {\n                        backupCountdown.parentNode.removeChild(backupCountdown);\n                    }\n                    drawDotWithCanvasManager(position.x, position.y);\n                    // Clear the redrawInterval we defined above\n                    if (redrawInterval) {\n                        clearInterval(redrawInterval);\n                    }\n                    if (onComplete) {\n                        drawDotWithCanvasManager(position.x, position.y);\n                        onComplete();\n                    }\n                    resolve();\n                }, 300);\n            } else {\n                countdownElement.textContent = count;\n                if (backupCountdown) {\n                    backupCountdown.textContent = count;\n                }\n                onStatusUpdate === null || onStatusUpdate === void 0 ? void 0 : onStatusUpdate({\n                    processStatus: \"Countdown\",\n                    countdownValue: count,\n                    isCapturing: true\n                });\n            }\n        }, 800);\n    });\n};\n/**\n * Draw a red dot on the canvas (legacy function for backward compatibility)\n * @param {CanvasRenderingContext2D} ctx - Canvas 2D context\n * @param {number} x - X coordinate\n * @param {number} y - Y coordinate\n * @param {number} radius - Dot radius\n * @param {boolean} clearCanvas - Whether to clear the canvas before drawing (default: true)\n * @returns {Object} - {x, y} position\n */ const drawRedDot = function(ctx, x, y) {\n    let radius = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 12, clearCanvas = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;\n    const canvas = ctx.canvas;\n    // Clear the canvas if requested (default behavior)\n    if (clearCanvas) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = 'yellow';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n    // Draw the dot with a bright red color\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fillStyle = 'red';\n    ctx.fill();\n    // Add glow effect for better visibility\n    ctx.beginPath();\n    ctx.arc(x, y, radius + 3, 0, Math.PI * 2);\n    ctx.strokeStyle = 'rgba(255, 0, 0, 0.5)';\n    ctx.lineWidth = 3;\n    ctx.stroke();\n    // Add a second larger glow for even better visibility\n    ctx.beginPath();\n    ctx.arc(x, y, radius + 6, 0, Math.PI * 2);\n    ctx.strokeStyle = 'rgba(255, 0, 0, 0.3)';\n    ctx.lineWidth = 2;\n    ctx.stroke();\n    console.log(\"Drew red dot at (\".concat(x, \", \").concat(y, \") with radius \").concat(radius));\n    return {\n        x,\n        y\n    };\n};\n/**\n * Get highest resolution camera constraints\n * @returns {Promise<Object>} - Camera constraints\n */ const getHighestResolutionConstraints = async ()=>{\n    try {\n        // Get all video input devices\n        const devices = await navigator.mediaDevices.enumerateDevices();\n        const videoDevices = devices.filter((device)=>device.kind === 'videoinput');\n        if (videoDevices.length === 0) {\n            console.warn('No video devices found, using default constraints');\n            return {\n                video: true\n            };\n        }\n        // Try to get capabilities for the first video device\n        const stream = await navigator.mediaDevices.getUserMedia({\n            video: true\n        });\n        const videoTrack = stream.getVideoTracks()[0];\n        if (!videoTrack.getCapabilities) {\n            console.warn('getCapabilities not supported, using default constraints');\n            stream.getTracks().forEach((track)=>track.stop());\n            return {\n                video: true\n            };\n        }\n        const capabilities = videoTrack.getCapabilities();\n        stream.getTracks().forEach((track)=>track.stop());\n        if (!capabilities.width || !capabilities.height) {\n            console.warn('No width/height capabilities, using default constraints');\n            return {\n                video: true\n            };\n        }\n        // Get the highest resolution available\n        const maxWidth = Math.max(...capabilities.width.values);\n        const maxHeight = Math.max(...capabilities.height.values);\n        console.log(\"Using highest resolution: \".concat(maxWidth, \"x\").concat(maxHeight));\n        return {\n            video: {\n                width: {\n                    ideal: maxWidth\n                },\n                height: {\n                    ideal: maxHeight\n                },\n                frameRate: {\n                    ideal: 30\n                }\n            }\n        };\n    } catch (error) {\n        console.warn('Error getting camera constraints, using default:', error);\n        return {\n            video: true\n        };\n    }\n};\n/**\n * Capture images at a specific point\n * @param {Object} options - Capture options\n * @returns {Promise} - Promise that resolves with the capture result\n */ const captureImages = async (options)=>{\n    const { canvasRef, position, captureCounter, setCaptureCounter, setProcessStatus, toggleTopBar, captureFolder = 'eye_tracking_captures' } = options;\n    if (!position || typeof position.x !== 'number' || typeof position.y !== 'number') {\n        console.warn('[captureImages] Invalid position object:', position);\n        setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus('Error: Invalid capture position');\n        return null;\n    }\n    try {\n        // Get highest resolution constraints\n        const constraints = await getHighestResolutionConstraints();\n        console.log('Using camera constraints:', constraints);\n        // Get a new stream with the highest resolution\n        const stream = await navigator.mediaDevices.getUserMedia(constraints);\n        const videoTrack = stream.getVideoTracks()[0];\n        const settings = videoTrack.getSettings();\n        console.log('Actual camera settings:', settings);\n        // Update video element with new stream\n        const videoElement = window.videoElement || document.querySelector('video');\n        if (videoElement) {\n            videoElement.srcObject = stream;\n            await videoElement.play();\n        }\n        // Call the captureImagesAtPoint with all necessary parameters\n        const result = await (0,_Helper_savefile__WEBPACK_IMPORTED_MODULE_1__.captureImagesAtPoint)({\n            point: position,\n            captureCount: captureCounter,\n            canvasRef,\n            setCaptureCount: setCaptureCounter,\n            showCapturePreview\n        });\n        console.log('Capture successful with ID:', result.captureId);\n        // Clean up the stream\n        stream.getTracks().forEach((track)=>track.stop());\n        return {\n            screenImage: (result === null || result === void 0 ? void 0 : result.screenImage) || '',\n            webcamImage: (result === null || result === void 0 ? void 0 : result.webcamImage) || '',\n            success: true,\n            captureId: result === null || result === void 0 ? void 0 : result.captureId,\n            resolution: {\n                width: settings.width,\n                height: settings.height\n            }\n        };\n    } catch (err) {\n        console.error('[captureImages] Unexpected error:', err);\n        setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(\"Error: \".concat(err.message));\n        return {\n            screenImage: '',\n            webcamImage: '',\n            success: false,\n            error: err.message\n        };\n    }\n};\n/**\n * Generate a random dot position within the canvas\n * @param {HTMLCanvasElement} canvas - Canvas element\n * @param {number} padding - Padding from the edges\n * @returns {Object} - {x, y} position\n */ const getRandomPosition = function(canvas) {\n    let padding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 40;\n    if (!canvas) return {\n        x: 100,\n        y: 100\n    }; // Fallback position\n    const width = canvas.width || 400; // Fallback if width is 0\n    const height = canvas.height || 300; // Fallback if height is 0\n    return {\n        x: Math.floor(Math.random() * (width - 2 * padding)) + padding,\n        y: Math.floor(Math.random() * (height - 2 * padding)) + padding\n    };\n};\n/**\n * Special calibration capture function that behaves like random dot capture\n * @param {Object} options - All the calibration options\n * @returns {Promise<Object>} Result object with captured data\n */ const calibrationCapture = async (options)=>{\n    const { canvasRef, point, captureCounter, setCaptureCounter, setProcessStatus, toggleTopBar, captureFolder = 'eye_tracking_captures', pointIndex, totalPoints } = options;\n    try {\n        console.log(\"Starting calibration capture for point \".concat(pointIndex + 1, \"/\").concat(totalPoints));\n        // Get canvas using canvas management system\n        const canvas = getCanvas();\n        if (!canvas) {\n            console.error(\"Canvas reference is null in calibrationCapture\");\n            setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(\"Error: Canvas not available\");\n            return {\n                success: false\n            };\n        }\n        // Use canvas management system to draw dot\n        drawDotWithCanvasManager(point.x, point.y);\n        setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(\"Calibration point \".concat(pointIndex + 1, \"/\").concat(totalPoints));\n        // Use the same countdown element creation method\n        const canvasRect = canvas.getBoundingClientRect();\n        const countdownElement = createCountdownElement(point, canvasRect);\n        if (!countdownElement) {\n            console.error(\"Failed to create countdown element\");\n            return {\n                success: false\n            };\n        }\n        // Create a redrawInterval for keeping the dot visible\n        let redrawInterval = setInterval(()=>{\n            drawDotWithCanvasManager(point.x, point.y);\n        }, 200);\n        // Run the same countdown as random dot\n        for(let count = 3; count > 0; count--){\n            countdownElement.textContent = count;\n            setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(\"Point \".concat(pointIndex + 1, \"/\").concat(totalPoints, \" - countdown \").concat(count));\n            // Redraw the dot at each step to ensure it remains visible\n            drawDotWithCanvasManager(point.x, point.y);\n            await new Promise((resolve)=>setTimeout(resolve, 800));\n        }\n        // Show checkmark\n        countdownElement.textContent = \"✓\";\n        // Remove countdown element\n        setTimeout(()=>{\n            if (countdownElement.parentNode) {\n                countdownElement.parentNode.removeChild(countdownElement);\n            }\n            // Clear redrawInterval\n            if (redrawInterval) {\n                clearInterval(redrawInterval);\n            }\n        }, 300);\n        // Use captureAndPreviewProcess instead of directly calling captureImagesAtPoint\n        const captureResult = await captureAndPreviewProcess({\n            canvasRef,\n            position: point,\n            captureCounter,\n            setCaptureCounter,\n            setProcessStatus: (status)=>{\n                if (typeof status === 'string') {\n                    setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(status);\n                } else if (status && typeof status === 'object') {\n                    setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(status.processStatus || '');\n                }\n            },\n            toggleTopBar,\n            onStatusUpdate: (status)=>{\n                if (typeof status === 'string') {\n                    setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(status);\n                } else if (status && typeof status === 'object') {\n                    setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(status.processStatus || '');\n                }\n            },\n            captureFolder\n        });\n        // Ensure proper return even if captureResult is null\n        const safeResult = captureResult && typeof captureResult === 'object' ? captureResult : {\n            screenImage: '',\n            webcamImage: '',\n            success: false\n        };\n        return {\n            screenImage: safeResult.screenImage || '',\n            webcamImage: safeResult.webcamImage || '',\n            success: true,\n            point\n        };\n    } catch (error) {\n        console.error(\"Error in calibrationCapture:\", error);\n        setProcessStatus === null || setProcessStatus === void 0 ? void 0 : setProcessStatus(\"Error: \".concat(error.message));\n        // Always return a valid object with default values\n        return {\n            screenImage: '',\n            webcamImage: '',\n            success: false,\n            error: error.message\n        };\n    }\n};\n/**\n * Complete capture and preview process\n * @param {Object} options - Process options\n */ const captureAndPreviewProcess = async (options)=>{\n    const { canvasRef, position, captureCounter, setCaptureCounter, setProcessStatus, toggleTopBar, onStatusUpdate, captureFolder } = options;\n    try {\n        // Get canvas using canvas management system\n        const canvas = getCanvas();\n        if (!canvas) {\n            console.error(\"[captureAndPreviewProcess] Canvas reference is null\");\n            if (setProcessStatus) setProcessStatus('Error: Canvas is not available');\n            return null;\n        }\n        // Draw the dot using canvas management system\n        drawDotWithCanvasManager(position.x, position.y);\n        // Countdown before capture\n        if (onStatusUpdate) {\n            onStatusUpdate({\n                processStatus: 'Starting countdown...',\n                isCapturing: true\n            });\n        }\n        // Remove any existing countdown elements first\n        const existingCountdowns = document.querySelectorAll('.calibrate-countdown, .dot-countdown, .forced-countdown, .center-countdown-backup');\n        existingCountdowns.forEach((el)=>{\n            console.log('captureAndPreviewProcess: Removing existing countdown:', el);\n            el.remove();\n        });\n        // Create a custom countdown element\n        const canvasRect = canvas.getBoundingClientRect();\n        // Transform coordinates for fullscreen display\n        let displayPosition = position;\n        if (canvas.style.position === 'fixed' && canvas.style.width === '100vw') {\n            // Canvas is in fullscreen mode, use direct coordinates\n            displayPosition = {\n                x: position.x,\n                y: position.y\n            };\n        } else {\n            // Canvas is in normal mode, use canvas-relative coordinates\n            displayPosition = {\n                x: canvasRect.left + position.x,\n                y: canvasRect.top + position.y\n            };\n        }\n        console.log('captureAndPreviewProcess: Creating countdown at:', {\n            originalPosition: position,\n            displayPosition,\n            canvasRect,\n            canvasStyle: {\n                position: canvas.style.position,\n                width: canvas.style.width,\n                height: canvas.style.height\n            }\n        });\n        const countdownElement = document.createElement('div');\n        countdownElement.className = 'calibrate-countdown';\n        countdownElement.style.cssText = \"\\n      position: fixed;\\n      left: \".concat(displayPosition.x, \"px;\\n      top: \").concat(displayPosition.y - 60, \"px;\\n      transform: translateX(-50%);\\n      color: red;\\n      font-size: 48px;\\n      font-weight: bold;\\n      text-shadow: 0 0 15px white, 0 0 25px white, 0 0 35px white;\\n      z-index: 100000;\\n      background-color: rgba(255, 255, 255, 0.95);\\n      border: 3px solid red;\\n      border-radius: 50%;\\n      width: 80px;\\n      height: 80px;\\n      display: flex;\\n      justify-content: center;\\n      align-items: center;\\n      box-shadow: 0 0 20px rgba(0, 0, 0, 0.5), 0 0 40px rgba(255, 0, 0, 0.3);\\n      animation: pulse 1s infinite;\\n    \");\n        document.body.appendChild(countdownElement);\n        console.log('captureAndPreviewProcess: Created countdown element:', {\n            element: countdownElement,\n            style: countdownElement.style.cssText,\n            position: {\n                x: displayPosition.x,\n                y: displayPosition.y - 60\n            }\n        });\n        // Create a backup countdown in the center of the screen\n        // const backupCountdown = document.createElement('div');\n        // backupCountdown.className = 'backup-countdown';\n        // backupCountdown.textContent = '3';\n        // backupCountdown.style.cssText = `\n        //   position: fixed;\n        //   left: 50%;\n        //   top: 50%;\n        //   transform: translate(-50%, -50%);\n        //   color: red;\n        //   font-size: 72px;\n        //   font-weight: bold;\n        //   text-shadow: 0 0 20px white, 0 0 30px white, 0 0 40px white;\n        //   z-index: 100001;\n        //   background-color: rgba(255, 255, 255, 0.95);\n        //   border: 4px solid red;\n        //   border-radius: 50%;\n        //   width: 120px;\n        //   height: 120px;\n        //   display: flex;\n        //   justify-content: center;\n        //   align-items: center;\n        //   box-shadow: 0 0 30px rgba(0, 0, 0, 0.7), 0 0 60px rgba(255, 0, 0, 0.5);\n        // `;\n        // document.body.appendChild(backupCountdown);\n        // console.log('captureAndPreviewProcess: Created backup countdown in center');\n        console.log('Countdown element created at:', {\n            position,\n            displayPosition,\n            canvasRect,\n            canvasStyle: {\n                position: canvas.style.position,\n                width: canvas.style.width,\n                height: canvas.style.height\n            }\n        });\n        // Create a redrawInterval for keeping the dot visible\n        let redrawInterval = setInterval(()=>{\n            drawDotWithCanvasManager(position.x, position.y);\n        }, 200);\n        // Manual countdown\n        for(let count = 3; count > 0; count--){\n            countdownElement.textContent = count;\n            // backupCountdown.textContent = count;\n            if (onStatusUpdate) {\n                onStatusUpdate({\n                    processStatus: \"Countdown: \".concat(count),\n                    countdownValue: count,\n                    isCapturing: true\n                });\n            }\n            // Redraw dot to ensure it's visible\n            drawDotWithCanvasManager(position.x, position.y);\n            await new Promise((resolve)=>setTimeout(resolve, 800));\n        }\n        // Change to checkmark\n        countdownElement.textContent = \"✓\";\n        // backupCountdown.textContent = \"✓\";\n        if (onStatusUpdate) {\n            onStatusUpdate({\n                processStatus: 'Capturing images...',\n                countdownValue: \"Capturing...\",\n                isCapturing: true\n            });\n        }\n        // Remove countdown elements and clear redrawInterval\n        setTimeout(()=>{\n            if (countdownElement.parentNode) {\n                countdownElement.parentNode.removeChild(countdownElement);\n            }\n            // if (backupCountdown.parentNode) {\n            //   backupCountdown.parentNode.removeChild(backupCountdown);\n            // }\n            if (redrawInterval) {\n                clearInterval(redrawInterval);\n            }\n        }, 300);\n        // Use captureImagesAtPoint from savefile.js\n        const captureResult = await (0,_Helper_savefile__WEBPACK_IMPORTED_MODULE_1__.captureImagesAtPoint)({\n            point: position,\n            captureCount: captureCounter,\n            canvasRef,\n            setCaptureCount: setCaptureCounter,\n            showCapturePreview\n        });\n        if (setProcessStatus) {\n            setProcessStatus(\"Captured dot at x=\".concat(Math.round(position.x), \", y=\").concat(Math.round(position.y)));\n        }\n        if (onStatusUpdate) {\n            onStatusUpdate({\n                processStatus: 'Capture complete',\n                isCapturing: false\n            });\n        }\n        // Show TopBar again with delay\n        setTimeout(()=>{\n            if (typeof toggleTopBar === 'function') {\n                toggleTopBar(true);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(true);\n            }\n        }, 2500);\n        return captureResult;\n    } catch (error) {\n        console.error(\"[captureAndPreviewProcess] Fatal error:\", error);\n        if (setProcessStatus) {\n            setProcessStatus(\"Fatal error: \".concat(error.message));\n        }\n        // Ensure TopBar is shown even on error\n        setTimeout(()=>{\n            if (typeof toggleTopBar === 'function') {\n                toggleTopBar(true);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(true);\n            }\n        }, 1500);\n        // Return a minimal valid object to prevent null reference errors\n        return {\n            screenImage: '',\n            webcamImage: '',\n            success: false,\n            error: error.message\n        };\n    }\n};\n// Default export for React compatibility\nconst CountSave = ()=>null; // This is a utility file, so we don't need to render anything\n_c = CountSave;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CountSave);\nvar _c;\n$RefreshReg$(_c, \"CountSave\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./components/collected-dataset-customized/Action/countSave.jsx\n"));

/***/ })

});
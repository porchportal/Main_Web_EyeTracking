"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_pages-dir-browser_components_collected-dataset-customized_Action_RandomDotAction_jsx",{

/***/ "(pages-dir-browser)/./components/collected-dataset-customized/Action/RandomDotAction.jsx":
/*!****************************************************************************!*\
  !*** ./components/collected-dataset-customized/Action/RandomDotAction.jsx ***!
  \****************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _countSave_jsx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./countSave.jsx */ \"(pages-dir-browser)/./components/collected-dataset-customized/Action/countSave.jsx\");\n// RandomDotAction.jsx\n// Handles the random dot generation and countdown functionality\n\n\nclass RandomDotAction {\n    // Get or create canvas using the canvas management system from actionButton.js\n    getCanvas() {\n        var _this_canvasRef;\n        // First try to use canvasUtils from actionButton.js\n        if (this.canvasUtils && typeof this.canvasUtils.getCanvas === 'function') {\n            return this.canvasUtils.getCanvas();\n        }\n        // Fallback to canvasManager\n        if (this.canvasManager && typeof this.canvasManager.getCanvas === 'function') {\n            return this.canvasManager.getCanvas() || this.canvasManager.createCanvas();\n        }\n        // Fallback to canvasRef if canvasManager not available\n        return ((_this_canvasRef = this.canvasRef) === null || _this_canvasRef === void 0 ? void 0 : _this_canvasRef.current) || document.querySelector('#tracking-canvas');\n    }\n    // Enter fullscreen using the canvas management system\n    enterFullscreen() {\n        if (this.canvasUtils && typeof this.canvasUtils.enterFullscreen === 'function') {\n            return this.canvasUtils.enterFullscreen();\n        }\n        if (this.canvasManager && typeof this.canvasManager.enterFullscreen === 'function') {\n            this.canvasManager.enterFullscreen();\n            return this.canvasManager.getCanvas();\n        }\n        // Fallback: manually enter fullscreen\n        const canvas = this.getCanvas();\n        if (canvas) {\n            document.body.appendChild(canvas);\n            canvas.style.cssText = \"\\n        position: fixed;\\n        top: 0;\\n        left: 0;\\n        width: 100vw;\\n        height: 100vh;\\n        z-index: 99999;\\n        background-color: yellow;\\n        border: none;\\n        display: block;\\n        opacity: 1;\\n        pointer-events: auto;\\n        margin: 0;\\n        padding: 0;\\n        box-sizing: border-box;\\n      \";\n            canvas.width = window.innerWidth;\n            canvas.height = window.innerHeight;\n            // Clear with yellow background\n            const ctx = canvas.getContext('2d');\n            ctx.fillStyle = 'yellow';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n        return canvas;\n    }\n    // Exit fullscreen using the canvas management system\n    exitFullscreen() {\n        if (this.canvasUtils && typeof this.canvasUtils.exitFullscreen === 'function') {\n            return this.canvasUtils.exitFullscreen();\n        }\n        if (this.canvasManager && typeof this.canvasManager.exitFullscreen === 'function') {\n            this.canvasManager.exitFullscreen();\n            return this.canvasManager.getCanvas();\n        }\n        // Fallback: manually exit fullscreen\n        const canvas = this.getCanvas();\n        if (canvas) {\n            const container = document.querySelector('.canvas-container') || document.querySelector('.main-content') || document.body;\n            container.appendChild(canvas);\n            canvas.style.position = 'relative';\n            canvas.style.top = '';\n            canvas.style.left = '';\n            canvas.style.width = '100%';\n            canvas.style.height = '100%';\n            canvas.style.zIndex = '';\n            canvas.style.backgroundColor = 'yellow';\n        }\n        return canvas;\n    }\n    // Clear canvas using the canvas management system\n    clearCanvas() {\n        if (this.canvasUtils && typeof this.canvasUtils.clear === 'function') {\n            this.canvasUtils.clear();\n            return;\n        }\n        if (this.canvasManager && typeof this.canvasManager.clear === 'function') {\n            this.canvasManager.clear();\n            return;\n        }\n        // Fallback: manually clear canvas\n        const canvas = this.getCanvas();\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.fillStyle = 'yellow';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n        }\n    }\n    // Draw dot using the canvas management system\n    drawDot(x, y) {\n        let radius = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 12;\n        if (this.canvasUtils && typeof this.canvasUtils.drawDot === 'function') {\n            return this.canvasUtils.drawDot(x, y, radius);\n        }\n        // Fallback: manually draw dot\n        const canvas = this.getCanvas();\n        if (canvas) {\n            const ctx = canvas.getContext('2d');\n            (0,_countSave_jsx__WEBPACK_IMPORTED_MODULE_1__.drawRedDot)(ctx, x, y, radius, false);\n            return true;\n        }\n        return false;\n    }\n    // Create a highly visible countdown element\n    createVisibleCountdown(position) {\n        // Remove any existing countdown elements\n        const existingCountdowns = document.querySelectorAll('.dot-countdown, .calibrate-countdown, .backup-countdown, .test-countdown');\n        existingCountdowns.forEach((el)=>{\n            if (el.parentNode) {\n                el.parentNode.removeChild(el);\n            }\n        });\n        // Get canvas to determine positioning\n        const canvas = this.getCanvas();\n        let displayPosition = position;\n        if (canvas) {\n            const canvasRect = canvas.getBoundingClientRect();\n            const isFullscreen = canvas.style.position === 'fixed' && (canvas.style.width === '100vw' || canvas.style.width === '100%');\n            if (isFullscreen) {\n                // In fullscreen mode, use direct coordinates\n                displayPosition = {\n                    x: position.x,\n                    y: position.y\n                };\n            } else {\n                // In normal mode, use canvas-relative coordinates\n                displayPosition = {\n                    x: canvasRect.left + position.x,\n                    y: canvasRect.top + position.y\n                };\n            }\n        }\n        // Create the main countdown element above the dot\n        const countdownElement = document.createElement('div');\n        countdownElement.className = 'dot-countdown';\n        countdownElement.textContent = '3';\n        countdownElement.style.cssText = \"\\n      position: fixed !important;\\n      left: \".concat(displayPosition.x, \"px !important;\\n      top: \").concat(displayPosition.y - 80, \"px !important;\\n      transform: translateX(-50%) !important;\\n      color: red !important;\\n      font-size: 64px !important;\\n      font-weight: bold !important;\\n      text-shadow: 0 0 20px white, 0 0 30px white, 0 0 40px white !important;\\n      z-index: 999999 !important;\\n      background-color: rgba(255, 255, 255, 0.98) !important;\\n      border: 4px solid red !important;\\n      border-radius: 50% !important;\\n      width: 100px !important;\\n      height: 100px !important;\\n      display: flex !important;\\n      justify-content: center !important;\\n      align-items: center !important;\\n      box-shadow: 0 0 30px rgba(0, 0, 0, 0.8), 0 0 60px rgba(255, 0, 0, 0.6) !important;\\n      animation: none !important;\\n      pointer-events: none !important;\\n      user-select: none !important;\\n    \");\n        document.body.appendChild(countdownElement);\n        // Create a backup countdown in the center of the screen\n        const backupCountdown = document.createElement('div');\n        backupCountdown.className = 'backup-countdown';\n        backupCountdown.textContent = '3';\n        backupCountdown.style.cssText = \"\\n      position: fixed !important;\\n      left: 50% !important;\\n      top: 50% !important;\\n      transform: translate(-50%, -50%) !important;\\n      color: red !important;\\n      font-size: 96px !important;\\n      font-weight: bold !important;\\n      text-shadow: 0 0 25px white, 0 0 35px white, 0 0 45px white !important;\\n      z-index: 999999 !important;\\n      background-color: rgba(255, 255, 255, 0.98) !important;\\n      border: 5px solid red !important;\\n      border-radius: 50% !important;\\n      width: 150px !important;\\n      height: 150px !important;\\n      display: flex !important;\\n      justify-content: center !important;\\n      align-items: center !important;\\n      box-shadow: 0 0 40px rgba(0, 0, 0, 0.9), 0 0 80px rgba(255, 0, 0, 0.7) !important;\\n      animation: none !important;\\n      pointer-events: none !important;\\n      user-select: none !important;\\n    \";\n        document.body.appendChild(backupCountdown);\n        // Create a position indicator to show where the countdown should be\n        const indicator = document.createElement('div');\n        indicator.style.cssText = \"\\n      position: fixed !important;\\n      left: \".concat(displayPosition.x, \"px !important;\\n      top: \").concat(displayPosition.y, \"px !important;\\n      width: 20px !important;\\n      height: 20px !important;\\n      background-color: blue !important;\\n      border-radius: 50% !important;\\n      z-index: 999998 !important;\\n      pointer-events: none !important;\\n      border: 3px solid white !important;\\n      box-shadow: 0 0 10px rgba(0, 0, 255, 0.8) !important;\\n    \");\n        document.body.appendChild(indicator);\n        console.log('RandomDotAction: Created countdown elements at:', {\n            originalPosition: position,\n            displayPosition,\n            countdownStyle: countdownElement.style.cssText,\n            backupStyle: backupCountdown.style.cssText\n        });\n        return {\n            countdownElement,\n            backupCountdown,\n            indicator,\n            displayPosition\n        };\n    }\n    // Perform the actual capture after countdown\n    async performCapture(position) {\n        try {\n            // Use the shared capture and preview process\n            await (0,_countSave_jsx__WEBPACK_IMPORTED_MODULE_1__.captureAndPreviewProcess)({\n                canvasRef: {\n                    current: this.getCanvas()\n                },\n                position,\n                captureCounter: this.captureCounter,\n                saveImageToServer: this.saveImageToServer,\n                setCaptureCounter: this.setCaptureCounter,\n                setProcessStatus: this.setProcessStatus,\n                toggleTopBar: this.toggleTopBar,\n                onStatusUpdate: this.onStatusUpdate,\n                captureFolder: 'eye_tracking_captures'\n            });\n            // Clear the dot after capture using canvas management system\n            this.clearCanvas();\n            // Set capturing state to false after reasonable delay\n            setTimeout(()=>{\n                if (typeof this.setIsCapturing === 'function') {\n                    this.setIsCapturing(false);\n                }\n            }, 2200); // Wait a bit longer than the preview duration\n        } catch (error) {\n            console.error(\"Error in capture and preview process:\", error);\n            if (typeof this.setProcessStatus === 'function') {\n                this.setProcessStatus('Error during capture process');\n            }\n            if (typeof this.setIsCapturing === 'function') {\n                this.setIsCapturing(false);\n            }\n            // Clear error message after delay\n            setTimeout(()=>{\n                if (typeof this.setProcessStatus === 'function') {\n                    this.setProcessStatus('');\n                }\n            }, 3000);\n        }\n    }\n    constructor(config){\n        // Main function to handle random dot generation and capture\n        this.handleRandomDot = async ()=>{\n            // Hide the TopBar before showing dot\n            if (typeof this.toggleTopBar === 'function') {\n                this.toggleTopBar(false);\n            } else if ( true && window.toggleTopBar) {\n                window.toggleTopBar(false);\n            }\n            // Set capturing state if function exists\n            if (typeof this.setIsCapturing === 'function') {\n                this.setIsCapturing(true);\n            }\n            if (typeof this.setProcessStatus === 'function') {\n                this.setProcessStatus('Generating random dot...');\n            }\n            // Update parent component if available\n            if (this.onStatusUpdate) {\n                this.onStatusUpdate({\n                    processStatus: 'Generating random dot...',\n                    isCapturing: true\n                });\n            }\n            // Give the component time to update\n            setTimeout(async ()=>{\n                const canvas = this.getCanvas();\n                if (canvas) {\n                    // Use canvas management system to enter fullscreen\n                    this.enterFullscreen();\n                    // Generate random position\n                    const position = (0,_countSave_jsx__WEBPACK_IMPORTED_MODULE_1__.getRandomPosition)(canvas);\n                    console.log('RandomDotAction: Generated position:', {\n                        position,\n                        canvasDimensions: {\n                            width: canvas.width,\n                            height: canvas.height\n                        },\n                        canvasStyle: {\n                            position: canvas.style.position,\n                            width: canvas.style.width,\n                            height: canvas.style.height\n                        },\n                        canvasRect: canvas.getBoundingClientRect()\n                    });\n                    // Draw the dot using canvas management system\n                    this.drawDot(position.x, position.y, 12);\n                    // Store current dot position\n                    this.setCurrentDot(position);\n                    // Create highly visible countdown elements\n                    const countdownElements = this.createVisibleCountdown(position);\n                    // Start countdown manually\n                    let count = 3;\n                    const countdownInterval = setInterval(()=>{\n                        count--;\n                        if (count <= 0) {\n                            // Countdown finished\n                            countdownElements.countdownElement.textContent = \"✓\";\n                            countdownElements.backupCountdown.textContent = \"✓\";\n                            // Remove countdown elements after a short delay\n                            setTimeout(()=>{\n                                if (countdownElements.countdownElement.parentNode) {\n                                    countdownElements.countdownElement.parentNode.removeChild(countdownElements.countdownElement);\n                                }\n                                if (countdownElements.backupCountdown.parentNode) {\n                                    countdownElements.backupCountdown.parentNode.removeChild(countdownElements.backupCountdown);\n                                }\n                                if (countdownElements.indicator.parentNode) {\n                                    countdownElements.indicator.parentNode.removeChild(countdownElements.indicator);\n                                }\n                            }, 500);\n                            clearInterval(countdownInterval);\n                            // Proceed with capture\n                            this.performCapture(position);\n                        } else {\n                            // Update countdown display\n                            countdownElements.countdownElement.textContent = count;\n                            countdownElements.backupCountdown.textContent = count;\n                            // Redraw dot to ensure visibility\n                            this.drawDot(position.x, position.y, 12);\n                        }\n                    }, 1000);\n                } else {\n                    console.error(\"Canvas reference is null - cannot draw dot\");\n                    if (typeof this.setProcessStatus === 'function') {\n                        this.setProcessStatus('Error: Canvas not available');\n                    }\n                    if (typeof this.setIsCapturing === 'function') {\n                        this.setIsCapturing(false);\n                    }\n                }\n            }, 200);\n        };\n        // Required properties\n        this.canvasRef = config.canvasRef;\n        this.toggleTopBar = config.toggleTopBar;\n        this.setIsCapturing = config.setIsCapturing;\n        this.setProcessStatus = config.setProcessStatus;\n        this.setCurrentDot = config.setCurrentDot;\n        this.triggerCameraAccess = config.triggerCameraAccess;\n        this.onStatusUpdate = config.onStatusUpdate;\n        this.saveImageToServer = config.saveImageToServer;\n        this.setCaptureCounter = config.setCaptureCounter;\n        this.captureCounter = config.captureCounter;\n        // Get canvas manager and utilities from global scope (from actionButton.js)\n        this.canvasManager =  true ? window.canvasManager : 0;\n        this.canvasUtils =  true ? window.canvasUtils : 0;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (RandomDotAction);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./components/collected-dataset-customized/Action/RandomDotAction.jsx\n"));

/***/ })

});